function cov_271qsdj8jw(){var path="/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/argument.js";var hash="66cd492e5e7d73f6a5dcfe6f8c26ab439fed6360";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/argument.js",statementMap:{"0":{start:{line:16,column:0},end:{line:102,column:5}},"1":{start:{line:17,column:13},end:{line:17,column:35}},"2":{start:{line:18,column:16},end:{line:18,column:34}},"3":{start:{line:47,column:8},end:{line:49,column:9}},"4":{start:{line:48,column:12},end:{line:48,column:32}},"5":{start:{line:51,column:8},end:{line:51,column:86}},"6":{start:{line:52,column:8},end:{line:52,column:109}},"7":{start:{line:53,column:8},end:{line:53,column:106}},"8":{start:{line:54,column:8},end:{line:54,column:119}},"9":{start:{line:55,column:8},end:{line:55,column:119}},"10":{start:{line:56,column:8},end:{line:56,column:125}},"11":{start:{line:61,column:4},end:{line:61,column:41}},"12":{start:{line:62,column:4},end:{line:62,column:39}},"13":{start:{line:63,column:4},end:{line:63,column:39}},"14":{start:{line:75,column:4},end:{line:99,column:6}},"15":{start:{line:76,column:18},end:{line:76,column:46}},"16":{start:{line:77,column:8},end:{line:77,column:35}},"17":{start:{line:79,column:8},end:{line:81,column:9}},"18":{start:{line:80,column:12},end:{line:80,column:70}},"19":{start:{line:83,column:8},end:{line:85,column:9}},"20":{start:{line:84,column:12},end:{line:84,column:68}},"21":{start:{line:88,column:26},end:{line:92,column:9}},"22":{start:{line:94,column:8},end:{line:96,column:9}},"23":{start:{line:94,column:21},end:{line:94,column:22}},"24":{start:{line:95,column:12},end:{line:95,column:104}},"25":{start:{line:98,column:8},end:{line:98,column:19}},"26":{start:{line:101,column:4},end:{line:101,column:30}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:12},end:{line:102,column:1}},line:16},"1":{name:"Argument",decl:{start:{line:46,column:13},end:{line:46,column:21}},loc:{start:{line:46,column:38},end:{line:57,column:5}},line:46},"2":{name:"(anonymous_2)",decl:{start:{line:75,column:39},end:{line:75,column:40}},loc:{start:{line:75,column:57},end:{line:99,column:5}},line:75}},branchMap:{"0":{loc:{start:{line:47,column:8},end:{line:49,column:9}},type:"if",locations:[{start:{line:47,column:8},end:{line:49,column:9}},{start:{line:47,column:8},end:{line:49,column:9}}],line:47},"1":{loc:{start:{line:51,column:20},end:{line:51,column:85}},type:"cond-expr",locations:[{start:{line:51,column:61},end:{line:51,column:63}},{start:{line:51,column:66},end:{line:51,column:85}}],line:51},"2":{loc:{start:{line:52,column:27},end:{line:52,column:108}},type:"cond-expr",locations:[{start:{line:52,column:75},end:{line:52,column:79}},{start:{line:52,column:82},end:{line:52,column:108}}],line:52},"3":{loc:{start:{line:53,column:26},end:{line:53,column:105}},type:"cond-expr",locations:[{start:{line:53,column:73},end:{line:53,column:77}},{start:{line:53,column:80},end:{line:53,column:105}}],line:53},"4":{loc:{start:{line:54,column:24},end:{line:54,column:118}},type:"cond-expr",locations:[{start:{line:54,column:69},end:{line:54,column:92}},{start:{line:54,column:95},end:{line:54,column:118}}],line:54},"5":{loc:{start:{line:55,column:30},end:{line:55,column:118}},type:"cond-expr",locations:[{start:{line:55,column:81},end:{line:55,column:86}},{start:{line:55,column:89},end:{line:55,column:118}}],line:55},"6":{loc:{start:{line:56,column:32},end:{line:56,column:124}},type:"cond-expr",locations:[{start:{line:56,column:85},end:{line:56,column:90}},{start:{line:56,column:93},end:{line:56,column:124}}],line:56},"7":{loc:{start:{line:79,column:8},end:{line:81,column:9}},type:"if",locations:[{start:{line:79,column:8},end:{line:81,column:9}},{start:{line:79,column:8},end:{line:81,column:9}}],line:79},"8":{loc:{start:{line:83,column:8},end:{line:85,column:9}},type:"if",locations:[{start:{line:83,column:8},end:{line:85,column:9}},{start:{line:83,column:8},end:{line:85,column:9}}],line:83}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"66cd492e5e7d73f6a5dcfe6f8c26ab439fed6360"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_271qsdj8jw=function(){return actualCoverage;};}return actualCoverage;}cov_271qsdj8jw();cov_271qsdj8jw().s[0]++;/*!*/ // Copyright 2014 Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
(function(){cov_271qsdj8jw().f[0]++;var ET=(cov_271qsdj8jw().s[1]++,require("elementtree"));var utils=(cov_271qsdj8jw().s[2]++,require("./utils"));/**
     * Class representing an argument to a modular input kind.
     *
     * `Argument` is meant to be used with `Scheme` to generate an XML 
     * definition of the modular input kind that Splunk understands.
     *
     * `name` is the only required parameter for the constructor.
     *
     * @example
     *      
     *      // Example with minimal parameters
     *      var myArg1 = new Argument({name: "arg1"});
     *
     *      // Example with all parameters
     *      var myArg2 = new Argument({
     *          name: "arg1",
     *          description: "This an argument with lots of parameters",
     *          validation: "is_pos_int('some_name')",
     *          dataType: Argument.dataTypeNumber,
     *          requiredOnEdit: true,
     *          requiredOnCreate: true
     *      });
     *
     * @param {Object} argumentConfig An object containing at least the name property to configure this Argument
     * @class splunkjs.ModularInputs.Argument
     */function Argument(argumentConfig){cov_271qsdj8jw().f[1]++;cov_271qsdj8jw().s[3]++;if(!argumentConfig){cov_271qsdj8jw().b[0][0]++;cov_271qsdj8jw().s[4]++;argumentConfig={};}else{cov_271qsdj8jw().b[0][1]++;}cov_271qsdj8jw().s[5]++;this.name=utils.isUndefined(argumentConfig.name)?(cov_271qsdj8jw().b[1][0]++,""):(cov_271qsdj8jw().b[1][1]++,argumentConfig.name);cov_271qsdj8jw().s[6]++;this.description=utils.isUndefined(argumentConfig.description)?(cov_271qsdj8jw().b[2][0]++,null):(cov_271qsdj8jw().b[2][1]++,argumentConfig.description);cov_271qsdj8jw().s[7]++;this.validation=utils.isUndefined(argumentConfig.validation)?(cov_271qsdj8jw().b[3][0]++,null):(cov_271qsdj8jw().b[3][1]++,argumentConfig.validation);cov_271qsdj8jw().s[8]++;this.dataType=utils.isUndefined(argumentConfig.dataType)?(cov_271qsdj8jw().b[4][0]++,Argument.dataTypeString):(cov_271qsdj8jw().b[4][1]++,argumentConfig.dataType);cov_271qsdj8jw().s[9]++;this.requiredOnEdit=utils.isUndefined(argumentConfig.requiredOnEdit)?(cov_271qsdj8jw().b[5][0]++,false):(cov_271qsdj8jw().b[5][1]++,argumentConfig.requiredOnEdit);cov_271qsdj8jw().s[10]++;this.requiredOnCreate=utils.isUndefined(argumentConfig.requiredOnCreate)?(cov_271qsdj8jw().b[6][0]++,false):(cov_271qsdj8jw().b[6][1]++,argumentConfig.requiredOnCreate);}// Constant values, do not change
// These should be used for setting the value of an Argument object's dataType field.
cov_271qsdj8jw().s[11]++;Argument.dataTypeBoolean="BOOLEAN";cov_271qsdj8jw().s[12]++;Argument.dataTypeNumber="NUMBER";cov_271qsdj8jw().s[13]++;Argument.dataTypeString="STRING";/**
     * Adds an `Argument` object the passed in elementtree object.
     * 
     * Adds an <arg> subelement to the parent element, typically <args>,
     * and sets up its subelements with their respective text.
     *
     * @param {Object} parent An elementtree element object to be the parent of a new <arg> subelement
     * @return {Object} An elementtree element object representing this argument.
     * @function splunkjs.ModularInputs.Argument
     */cov_271qsdj8jw().s[14]++;Argument.prototype.addToDocument=function(parent){cov_271qsdj8jw().f[2]++;var arg=(cov_271qsdj8jw().s[15]++,ET.SubElement(parent,"arg"));cov_271qsdj8jw().s[16]++;arg.set("name",this.name);cov_271qsdj8jw().s[17]++;if(this.description){cov_271qsdj8jw().b[7][0]++;cov_271qsdj8jw().s[18]++;ET.SubElement(arg,"description").text=this.description;}else{cov_271qsdj8jw().b[7][1]++;}cov_271qsdj8jw().s[19]++;if(this.validation){cov_271qsdj8jw().b[8][0]++;cov_271qsdj8jw().s[20]++;ET.SubElement(arg,"validation").text=this.validation;}else{cov_271qsdj8jw().b[8][1]++;}// Add all other subelements to this <arg>, represented by (tag, text)
var subElements=(cov_271qsdj8jw().s[21]++,[{tag:"data_type",value:this.dataType},{tag:"required_on_edit",value:this.requiredOnEdit},{tag:"required_on_create",value:this.requiredOnCreate}]);cov_271qsdj8jw().s[22]++;for(var i=(cov_271qsdj8jw().s[23]++,0);i<subElements.length;i++){cov_271qsdj8jw().s[24]++;ET.SubElement(arg,subElements[i].tag).text=subElements[i].value.toString().toLowerCase();}cov_271qsdj8jw().s[25]++;return arg;};cov_271qsdj8jw().s[26]++;module.exports=Argument;})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,