function cov_cv8u32h8f(){var path="/Users/abhis/Documents/python/splunk-sdk-javascript/lib/async.js";var hash="d7a5e0ff2307fe43bb1e54a1fba985afa03c79b9";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/abhis/Documents/python/splunk-sdk-javascript/lib/async.js",statementMap:{"0":{start:{line:16,column:0},end:{line:542,column:5}},"1":{start:{line:19,column:16},end:{line:19,column:34}},"2":{start:{line:20,column:15},end:{line:20,column:30}},"3":{start:{line:50,column:4},end:{line:70,column:6}},"4":{start:{line:51,column:8},end:{line:51,column:62}},"5":{start:{line:51,column:46},end:{line:51,column:59}},"6":{start:{line:52,column:8},end:{line:52,column:50}},"7":{start:{line:52,column:40},end:{line:52,column:47}},"8":{start:{line:53,column:8},end:{line:53,column:45}},"9":{start:{line:55,column:28},end:{line:62,column:9}},"10":{start:{line:56,column:12},end:{line:61,column:13}},"11":{start:{line:57,column:16},end:{line:57,column:30}},"12":{start:{line:60,column:16},end:{line:60,column:55}},"13":{start:{line:64,column:8},end:{line:69,column:9}},"14":{start:{line:65,column:12},end:{line:65,column:32}},"15":{start:{line:68,column:12},end:{line:68,column:27}},"16":{start:{line:102,column:4},end:{line:151,column:6}},"17":{start:{line:104,column:8},end:{line:108,column:9}},"18":{start:{line:105,column:23},end:{line:105,column:47}},"19":{start:{line:106,column:12},end:{line:106,column:51}},"20":{start:{line:107,column:12},end:{line:107,column:45}},"21":{start:{line:110,column:8},end:{line:110,column:28}},"22":{start:{line:111,column:8},end:{line:111,column:45}},"23":{start:{line:113,column:8},end:{line:115,column:9}},"24":{start:{line:114,column:12},end:{line:114,column:23}},"25":{start:{line:117,column:24},end:{line:117,column:36}},"26":{start:{line:118,column:22},end:{line:118,column:24}},"27":{start:{line:119,column:27},end:{line:145,column:9}},"28":{start:{line:120,column:12},end:{line:144,column:14}},"29":{start:{line:122,column:16},end:{line:143,column:17}},"30":{start:{line:123,column:20},end:{line:125,column:21}},"31":{start:{line:124,column:24},end:{line:124,column:38}},"32":{start:{line:126,column:20},end:{line:126,column:36}},"33":{start:{line:129,column:31},end:{line:129,column:55}},"34":{start:{line:130,column:20},end:{line:130,column:33}},"35":{start:{line:132,column:20},end:{line:134,column:21}},"36":{start:{line:133,column:24},end:{line:133,column:39}},"37":{start:{line:135,column:20},end:{line:135,column:40}},"38":{start:{line:137,column:20},end:{line:142,column:21}},"39":{start:{line:138,column:24},end:{line:138,column:46}},"40":{start:{line:139,column:24},end:{line:141,column:25}},"41":{start:{line:140,column:28},end:{line:140,column:58}},"42":{start:{line:147,column:8},end:{line:150,column:9}},"43":{start:{line:147,column:20},end:{line:147,column:21}},"44":{start:{line:148,column:23},end:{line:148,column:31}},"45":{start:{line:149,column:12},end:{line:149,column:34}},"46":{start:{line:186,column:4},end:{line:225,column:6}},"47":{start:{line:188,column:8},end:{line:192,column:9}},"48":{start:{line:189,column:23},end:{line:189,column:47}},"49":{start:{line:190,column:12},end:{line:190,column:51}},"50":{start:{line:191,column:12},end:{line:191,column:45}},"51":{start:{line:194,column:8},end:{line:194,column:28}},"52":{start:{line:195,column:8},end:{line:195,column:45}},"53":{start:{line:197,column:26},end:{line:222,column:9}},"54":{start:{line:198,column:12},end:{line:202,column:13}},"55":{start:{line:199,column:16},end:{line:199,column:43}},"56":{start:{line:200,column:16},end:{line:200,column:51}},"57":{start:{line:201,column:16},end:{line:201,column:23}},"58":{start:{line:204,column:12},end:{line:221,column:15}},"59":{start:{line:205,column:16},end:{line:220,column:17}},"60":{start:{line:206,column:20},end:{line:208,column:21}},"61":{start:{line:207,column:24},end:{line:207,column:38}},"62":{start:{line:209,column:20},end:{line:209,column:36}},"63":{start:{line:212,column:31},end:{line:212,column:55}},"64":{start:{line:213,column:20},end:{line:213,column:33}},"65":{start:{line:214,column:20},end:{line:216,column:21}},"66":{start:{line:215,column:24},end:{line:215,column:39}},"67":{start:{line:217,column:20},end:{line:217,column:44}},"68":{start:{line:219,column:20},end:{line:219,column:94}},"69":{start:{line:224,column:8},end:{line:224,column:60}},"70":{start:{line:255,column:4},end:{line:281,column:6}},"71":{start:{line:256,column:8},end:{line:256,column:26}},"72":{start:{line:257,column:8},end:{line:257,column:45}},"73":{start:{line:259,column:20},end:{line:259,column:22}},"74":{start:{line:260,column:25},end:{line:262,column:9}},"75":{start:{line:261,column:12},end:{line:261,column:58}},"76":{start:{line:261,column:36},end:{line:261,column:55}},"77":{start:{line:264,column:8},end:{line:266,column:9}},"78":{start:{line:264,column:20},end:{line:264,column:21}},"79":{start:{line:265,column:12},end:{line:265,column:47}},"80":{start:{line:268,column:8},end:{line:280,column:11}},"81":{start:{line:269,column:12},end:{line:279,column:13}},"82":{start:{line:270,column:16},end:{line:272,column:17}},"83":{start:{line:271,column:20},end:{line:271,column:34}},"84":{start:{line:273,column:16},end:{line:273,column:32}},"85":{start:{line:276,column:27},end:{line:276,column:51}},"86":{start:{line:277,column:16},end:{line:277,column:29}},"87":{start:{line:278,column:16},end:{line:278,column:37}},"88":{start:{line:308,column:4},end:{line:333,column:6}},"89":{start:{line:309,column:8},end:{line:309,column:26}},"90":{start:{line:310,column:8},end:{line:310,column:45}},"91":{start:{line:312,column:20},end:{line:312,column:22}},"92":{start:{line:313,column:25},end:{line:315,column:9}},"93":{start:{line:314,column:12},end:{line:314,column:58}},"94":{start:{line:314,column:36},end:{line:314,column:55}},"95":{start:{line:317,column:8},end:{line:319,column:9}},"96":{start:{line:317,column:20},end:{line:317,column:21}},"97":{start:{line:318,column:12},end:{line:318,column:47}},"98":{start:{line:321,column:8},end:{line:332,column:11}},"99":{start:{line:322,column:12},end:{line:331,column:13}},"100":{start:{line:323,column:16},end:{line:325,column:17}},"101":{start:{line:324,column:20},end:{line:324,column:34}},"102":{start:{line:328,column:27},end:{line:328,column:51}},"103":{start:{line:329,column:16},end:{line:329,column:29}},"104":{start:{line:330,column:16},end:{line:330,column:37}},"105":{start:{line:369,column:4},end:{line:376,column:6}},"106":{start:{line:370,column:8},end:{line:370,column:26}},"107":{start:{line:371,column:8},end:{line:371,column:45}},"108":{start:{line:373,column:8},end:{line:375,column:11}},"109":{start:{line:374,column:12},end:{line:374,column:26}},"110":{start:{line:405,column:4},end:{line:412,column:6}},"111":{start:{line:406,column:8},end:{line:406,column:26}},"112":{start:{line:407,column:8},end:{line:407,column:45}},"113":{start:{line:409,column:8},end:{line:411,column:11}},"114":{start:{line:410,column:12},end:{line:410,column:26}},"115":{start:{line:449,column:4},end:{line:490,column:6}},"116":{start:{line:451,column:8},end:{line:455,column:9}},"117":{start:{line:452,column:23},end:{line:452,column:47}},"118":{start:{line:453,column:12},end:{line:453,column:51}},"119":{start:{line:454,column:12},end:{line:454,column:45}},"120":{start:{line:457,column:8},end:{line:457,column:28}},"121":{start:{line:458,column:8},end:{line:458,column:45}},"122":{start:{line:460,column:8},end:{line:489,column:9}},"123":{start:{line:461,column:12},end:{line:461,column:23}},"124":{start:{line:464,column:29},end:{line:486,column:13}},"125":{start:{line:465,column:36},end:{line:475,column:17}},"126":{start:{line:466,column:20},end:{line:474,column:21}},"127":{start:{line:467,column:24},end:{line:467,column:38}},"128":{start:{line:468,column:24},end:{line:468,column:49}},"129":{start:{line:471,column:35},end:{line:471,column:59}},"130":{start:{line:472,column:24},end:{line:472,column:37}},"131":{start:{line:473,column:24},end:{line:473,column:79}},"132":{start:{line:477,column:27},end:{line:477,column:33}},"133":{start:{line:478,column:16},end:{line:483,column:17}},"134":{start:{line:479,column:20},end:{line:479,column:40}},"135":{start:{line:482,column:20},end:{line:482,column:45}},"136":{start:{line:485,column:16},end:{line:485,column:39}},"137":{start:{line:488,column:12},end:{line:488,column:53}},"138":{start:{line:506,column:4},end:{line:510,column:6}},"139":{start:{line:507,column:8},end:{line:509,column:20}},"140":{start:{line:508,column:12},end:{line:508,column:23}},"141":{start:{line:531,column:4},end:{line:541,column:6}},"142":{start:{line:532,column:19},end:{line:532,column:59}},"143":{start:{line:533,column:8},end:{line:540,column:10}},"144":{start:{line:534,column:32},end:{line:534,column:69}},"145":{start:{line:535,column:12},end:{line:537,column:13}},"146":{start:{line:535,column:24},end:{line:535,column:25}},"147":{start:{line:536,column:14},end:{line:536,column:42}},"148":{start:{line:539,column:12},end:{line:539,column:48}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:12},end:{line:542,column:1}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:50,column:18},end:{line:50,column:19}},loc:{start:{line:50,column:54},end:{line:70,column:5}},line:50},"2":{name:"(anonymous_2)",decl:{start:{line:51,column:33},end:{line:51,column:34}},loc:{start:{line:51,column:44},end:{line:51,column:61}},line:51},"3":{name:"(anonymous_3)",decl:{start:{line:52,column:23},end:{line:52,column:24}},loc:{start:{line:52,column:38},end:{line:52,column:49}},line:52},"4":{name:"(anonymous_4)",decl:{start:{line:53,column:31},end:{line:53,column:32}},loc:{start:{line:53,column:42},end:{line:53,column:44}},line:53},"5":{name:"(anonymous_5)",decl:{start:{line:55,column:28},end:{line:55,column:29}},loc:{start:{line:55,column:42},end:{line:62,column:9}},line:55},"6":{name:"(anonymous_6)",decl:{start:{line:102,column:20},end:{line:102,column:21}},loc:{start:{line:102,column:46},end:{line:151,column:5}},line:102},"7":{name:"(anonymous_7)",decl:{start:{line:111,column:31},end:{line:111,column:32}},loc:{start:{line:111,column:42},end:{line:111,column:44}},line:111},"8":{name:"(anonymous_8)",decl:{start:{line:119,column:27},end:{line:119,column:28}},loc:{start:{line:119,column:41},end:{line:145,column:9}},line:119},"9":{name:"(anonymous_9)",decl:{start:{line:120,column:19},end:{line:120,column:20}},loc:{start:{line:120,column:33},end:{line:144,column:13}},line:120},"10":{name:"(anonymous_10)",decl:{start:{line:186,column:18},end:{line:186,column:19}},loc:{start:{line:186,column:44},end:{line:225,column:5}},line:186},"11":{name:"(anonymous_11)",decl:{start:{line:195,column:31},end:{line:195,column:32}},loc:{start:{line:195,column:42},end:{line:195,column:44}},line:195},"12":{name:"(anonymous_12)",decl:{start:{line:197,column:26},end:{line:197,column:27}},loc:{start:{line:197,column:78},end:{line:222,column:9}},line:197},"13":{name:"(anonymous_13)",decl:{start:{line:204,column:17},end:{line:204,column:18}},loc:{start:{line:204,column:31},end:{line:221,column:13}},line:204},"14":{name:"(anonymous_14)",decl:{start:{line:255,column:23},end:{line:255,column:24}},loc:{start:{line:255,column:52},end:{line:281,column:5}},line:255},"15":{name:"(anonymous_15)",decl:{start:{line:257,column:31},end:{line:257,column:32}},loc:{start:{line:257,column:42},end:{line:257,column:44}},line:257},"16":{name:"(anonymous_16)",decl:{start:{line:260,column:25},end:{line:260,column:26}},loc:{start:{line:260,column:44},end:{line:262,column:9}},line:260},"17":{name:"(anonymous_17)",decl:{start:{line:261,column:19},end:{line:261,column:20}},loc:{start:{line:261,column:34},end:{line:261,column:57}},line:261},"18":{name:"(anonymous_18)",decl:{start:{line:268,column:29},end:{line:268,column:30}},loc:{start:{line:268,column:43},end:{line:280,column:9}},line:268},"19":{name:"(anonymous_19)",decl:{start:{line:308,column:21},end:{line:308,column:22}},loc:{start:{line:308,column:50},end:{line:333,column:5}},line:308},"20":{name:"(anonymous_20)",decl:{start:{line:310,column:31},end:{line:310,column:32}},loc:{start:{line:310,column:42},end:{line:310,column:44}},line:310},"21":{name:"(anonymous_21)",decl:{start:{line:313,column:25},end:{line:313,column:26}},loc:{start:{line:313,column:44},end:{line:315,column:9}},line:313},"22":{name:"(anonymous_22)",decl:{start:{line:314,column:19},end:{line:314,column:20}},loc:{start:{line:314,column:34},end:{line:314,column:57}},line:314},"23":{name:"(anonymous_23)",decl:{start:{line:321,column:27},end:{line:321,column:28}},loc:{start:{line:321,column:41},end:{line:332,column:9}},line:321},"24":{name:"(anonymous_24)",decl:{start:{line:369,column:24},end:{line:369,column:25}},loc:{start:{line:369,column:53},end:{line:376,column:5}},line:369},"25":{name:"(anonymous_25)",decl:{start:{line:371,column:31},end:{line:371,column:32}},loc:{start:{line:371,column:42},end:{line:371,column:44}},line:371},"26":{name:"(anonymous_26)",decl:{start:{line:373,column:35},end:{line:373,column:36}},loc:{start:{line:373,column:57},end:{line:375,column:9}},line:373},"27":{name:"(anonymous_27)",decl:{start:{line:405,column:22},end:{line:405,column:23}},loc:{start:{line:405,column:51},end:{line:412,column:5}},line:405},"28":{name:"(anonymous_28)",decl:{start:{line:407,column:31},end:{line:407,column:32}},loc:{start:{line:407,column:42},end:{line:407,column:44}},line:407},"29":{name:"(anonymous_29)",decl:{start:{line:409,column:33},end:{line:409,column:34}},loc:{start:{line:409,column:55},end:{line:411,column:9}},line:409},"30":{name:"(anonymous_30)",decl:{start:{line:449,column:17},end:{line:449,column:18}},loc:{start:{line:449,column:43},end:{line:490,column:5}},line:449},"31":{name:"(anonymous_31)",decl:{start:{line:458,column:31},end:{line:458,column:32}},loc:{start:{line:458,column:42},end:{line:458,column:44}},line:458},"32":{name:"(anonymous_32)",decl:{start:{line:464,column:29},end:{line:464,column:30}},loc:{start:{line:464,column:65},end:{line:486,column:13}},line:464},"33":{name:"(anonymous_33)",decl:{start:{line:465,column:36},end:{line:465,column:37}},loc:{start:{line:465,column:50},end:{line:475,column:17}},line:465},"34":{name:"(anonymous_34)",decl:{start:{line:468,column:35},end:{line:468,column:36}},loc:{start:{line:468,column:46},end:{line:468,column:48}},line:468},"35":{name:"(anonymous_35)",decl:{start:{line:506,column:17},end:{line:506,column:18}},loc:{start:{line:506,column:45},end:{line:510,column:5}},line:506},"36":{name:"(anonymous_36)",decl:{start:{line:507,column:19},end:{line:507,column:20}},loc:{start:{line:507,column:30},end:{line:509,column:9}},line:507},"37":{name:"(anonymous_37)",decl:{start:{line:531,column:19},end:{line:531,column:20}},loc:{start:{line:531,column:38},end:{line:541,column:5}},line:531},"38":{name:"(anonymous_38)",decl:{start:{line:533,column:15},end:{line:533,column:16}},loc:{start:{line:533,column:26},end:{line:540,column:9}},line:533}},branchMap:{"0":{loc:{start:{line:20,column:15},end:{line:20,column:30}},type:"binary-expr",locations:[{start:{line:20,column:15},end:{line:20,column:22}},{start:{line:20,column:26},end:{line:20,column:30}}],line:20},"1":{loc:{start:{line:51,column:20},end:{line:51,column:61}},type:"binary-expr",locations:[{start:{line:51,column:20},end:{line:51,column:29}},{start:{line:51,column:33},end:{line:51,column:61}}],line:51},"2":{loc:{start:{line:52,column:15},end:{line:52,column:49}},type:"binary-expr",locations:[{start:{line:52,column:15},end:{line:52,column:19}},{start:{line:52,column:23},end:{line:52,column:49}}],line:52},"3":{loc:{start:{line:53,column:19},end:{line:53,column:44}},type:"binary-expr",locations:[{start:{line:53,column:19},end:{line:53,column:27}},{start:{line:53,column:31},end:{line:53,column:44}}],line:53},"4":{loc:{start:{line:56,column:12},end:{line:61,column:13}},type:"if",locations:[{start:{line:56,column:12},end:{line:61,column:13}},{start:{line:56,column:12},end:{line:61,column:13}}],line:56},"5":{loc:{start:{line:64,column:8},end:{line:69,column:9}},type:"if",locations:[{start:{line:64,column:8},end:{line:69,column:9}},{start:{line:64,column:8},end:{line:69,column:9}}],line:64},"6":{loc:{start:{line:104,column:8},end:{line:108,column:9}},type:"if",locations:[{start:{line:104,column:8},end:{line:108,column:9}},{start:{line:104,column:8},end:{line:108,column:9}}],line:104},"7":{loc:{start:{line:104,column:12},end:{line:104,column:66}},type:"binary-expr",locations:[{start:{line:104,column:12},end:{line:104,column:32}},{start:{line:104,column:36},end:{line:104,column:66}}],line:104},"8":{loc:{start:{line:110,column:16},end:{line:110,column:27}},type:"binary-expr",locations:[{start:{line:110,column:16},end:{line:110,column:21}},{start:{line:110,column:25},end:{line:110,column:27}}],line:110},"9":{loc:{start:{line:111,column:19},end:{line:111,column:44}},type:"binary-expr",locations:[{start:{line:111,column:19},end:{line:111,column:27}},{start:{line:111,column:31},end:{line:111,column:44}}],line:111},"10":{loc:{start:{line:113,column:8},end:{line:115,column:9}},type:"if",locations:[{start:{line:113,column:8},end:{line:115,column:9}},{start:{line:113,column:8},end:{line:115,column:9}}],line:113},"11":{loc:{start:{line:122,column:16},end:{line:143,column:17}},type:"if",locations:[{start:{line:122,column:16},end:{line:143,column:17}},{start:{line:122,column:16},end:{line:143,column:17}}],line:122},"12":{loc:{start:{line:123,column:20},end:{line:125,column:21}},type:"if",locations:[{start:{line:123,column:20},end:{line:125,column:21}},{start:{line:123,column:20},end:{line:125,column:21}}],line:123},"13":{loc:{start:{line:132,column:20},end:{line:134,column:21}},type:"if",locations:[{start:{line:132,column:20},end:{line:134,column:21}},{start:{line:132,column:20},end:{line:134,column:21}}],line:132},"14":{loc:{start:{line:137,column:20},end:{line:142,column:21}},type:"if",locations:[{start:{line:137,column:20},end:{line:142,column:21}},{start:{line:137,column:20},end:{line:142,column:21}}],line:137},"15":{loc:{start:{line:139,column:24},end:{line:141,column:25}},type:"if",locations:[{start:{line:139,column:24},end:{line:141,column:25}},{start:{line:139,column:24},end:{line:141,column:25}}],line:139},"16":{loc:{start:{line:188,column:8},end:{line:192,column:9}},type:"if",locations:[{start:{line:188,column:8},end:{line:192,column:9}},{start:{line:188,column:8},end:{line:192,column:9}}],line:188},"17":{loc:{start:{line:188,column:12},end:{line:188,column:66}},type:"binary-expr",locations:[{start:{line:188,column:12},end:{line:188,column:32}},{start:{line:188,column:36},end:{line:188,column:66}}],line:188},"18":{loc:{start:{line:194,column:16},end:{line:194,column:27}},type:"binary-expr",locations:[{start:{line:194,column:16},end:{line:194,column:21}},{start:{line:194,column:25},end:{line:194,column:27}}],line:194},"19":{loc:{start:{line:195,column:19},end:{line:195,column:44}},type:"binary-expr",locations:[{start:{line:195,column:19},end:{line:195,column:27}},{start:{line:195,column:31},end:{line:195,column:44}}],line:195},"20":{loc:{start:{line:198,column:12},end:{line:202,column:13}},type:"if",locations:[{start:{line:198,column:12},end:{line:202,column:13}},{start:{line:198,column:12},end:{line:202,column:13}}],line:198},"21":{loc:{start:{line:205,column:16},end:{line:220,column:17}},type:"if",locations:[{start:{line:205,column:16},end:{line:220,column:17}},{start:{line:205,column:16},end:{line:220,column:17}}],line:205},"22":{loc:{start:{line:206,column:20},end:{line:208,column:21}},type:"if",locations:[{start:{line:206,column:20},end:{line:208,column:21}},{start:{line:206,column:20},end:{line:208,column:21}}],line:206},"23":{loc:{start:{line:214,column:20},end:{line:216,column:21}},type:"if",locations:[{start:{line:214,column:20},end:{line:216,column:21}},{start:{line:214,column:20},end:{line:216,column:21}}],line:214},"24":{loc:{start:{line:256,column:15},end:{line:256,column:25}},type:"binary-expr",locations:[{start:{line:256,column:15},end:{line:256,column:19}},{start:{line:256,column:23},end:{line:256,column:25}}],line:256},"25":{loc:{start:{line:257,column:19},end:{line:257,column:44}},type:"binary-expr",locations:[{start:{line:257,column:19},end:{line:257,column:27}},{start:{line:257,column:31},end:{line:257,column:44}}],line:257},"26":{loc:{start:{line:269,column:12},end:{line:279,column:13}},type:"if",locations:[{start:{line:269,column:12},end:{line:279,column:13}},{start:{line:269,column:12},end:{line:279,column:13}}],line:269},"27":{loc:{start:{line:270,column:16},end:{line:272,column:17}},type:"if",locations:[{start:{line:270,column:16},end:{line:272,column:17}},{start:{line:270,column:16},end:{line:272,column:17}}],line:270},"28":{loc:{start:{line:309,column:15},end:{line:309,column:25}},type:"binary-expr",locations:[{start:{line:309,column:15},end:{line:309,column:19}},{start:{line:309,column:23},end:{line:309,column:25}}],line:309},"29":{loc:{start:{line:310,column:19},end:{line:310,column:44}},type:"binary-expr",locations:[{start:{line:310,column:19},end:{line:310,column:27}},{start:{line:310,column:31},end:{line:310,column:44}}],line:310},"30":{loc:{start:{line:322,column:12},end:{line:331,column:13}},type:"if",locations:[{start:{line:322,column:12},end:{line:331,column:13}},{start:{line:322,column:12},end:{line:331,column:13}}],line:322},"31":{loc:{start:{line:323,column:16},end:{line:325,column:17}},type:"if",locations:[{start:{line:323,column:16},end:{line:325,column:17}},{start:{line:323,column:16},end:{line:325,column:17}}],line:323},"32":{loc:{start:{line:370,column:15},end:{line:370,column:25}},type:"binary-expr",locations:[{start:{line:370,column:15},end:{line:370,column:19}},{start:{line:370,column:23},end:{line:370,column:25}}],line:370},"33":{loc:{start:{line:371,column:19},end:{line:371,column:44}},type:"binary-expr",locations:[{start:{line:371,column:19},end:{line:371,column:27}},{start:{line:371,column:31},end:{line:371,column:44}}],line:371},"34":{loc:{start:{line:406,column:15},end:{line:406,column:25}},type:"binary-expr",locations:[{start:{line:406,column:15},end:{line:406,column:19}},{start:{line:406,column:23},end:{line:406,column:25}}],line:406},"35":{loc:{start:{line:407,column:19},end:{line:407,column:44}},type:"binary-expr",locations:[{start:{line:407,column:19},end:{line:407,column:27}},{start:{line:407,column:31},end:{line:407,column:44}}],line:407},"36":{loc:{start:{line:451,column:8},end:{line:455,column:9}},type:"if",locations:[{start:{line:451,column:8},end:{line:455,column:9}},{start:{line:451,column:8},end:{line:455,column:9}}],line:451},"37":{loc:{start:{line:451,column:12},end:{line:451,column:66}},type:"binary-expr",locations:[{start:{line:451,column:12},end:{line:451,column:32}},{start:{line:451,column:36},end:{line:451,column:66}}],line:451},"38":{loc:{start:{line:457,column:16},end:{line:457,column:27}},type:"binary-expr",locations:[{start:{line:457,column:16},end:{line:457,column:21}},{start:{line:457,column:25},end:{line:457,column:27}}],line:457},"39":{loc:{start:{line:458,column:19},end:{line:458,column:44}},type:"binary-expr",locations:[{start:{line:458,column:19},end:{line:458,column:27}},{start:{line:458,column:31},end:{line:458,column:44}}],line:458},"40":{loc:{start:{line:460,column:8},end:{line:489,column:9}},type:"if",locations:[{start:{line:460,column:8},end:{line:489,column:9}},{start:{line:460,column:8},end:{line:489,column:9}}],line:460},"41":{loc:{start:{line:466,column:20},end:{line:474,column:21}},type:"if",locations:[{start:{line:466,column:20},end:{line:474,column:21}},{start:{line:466,column:20},end:{line:474,column:21}}],line:466},"42":{loc:{start:{line:478,column:16},end:{line:483,column:17}},type:"if",locations:[{start:{line:478,column:16},end:{line:483,column:17}},{start:{line:478,column:16},end:{line:483,column:17}}],line:478}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d7a5e0ff2307fe43bb1e54a1fba985afa03c79b9"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_cv8u32h8f=function(){return actualCoverage;};}return actualCoverage;}cov_cv8u32h8f();cov_cv8u32h8f().s[0]++;/*!*/ // Copyright 2012 Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
(function(){"use strict";cov_cv8u32h8f().f[0]++;var utils=(cov_cv8u32h8f().s[1]++,require('./utils'));var root=(cov_cv8u32h8f().s[2]++,(cov_cv8u32h8f().b[0][0]++,exports)||(cov_cv8u32h8f().b[0][1]++,this));/**
     * Provides utilities for asynchronous control flow and collection handling.
     *
     * @module splunkjs.Async
     */ /**
     * Runs an asynchronous `while` loop.
     *
     * @example
     *      
     *      var i = 0;
     *      Async.whilst(
     *          function() { return i++ < 3; },
     *          function(done) {
     *              Async.sleep(0, function() { done(); });
     *          },
     *          function(err) {
     *              console.log(i) // == 3;
     *          }
     *      );
     *
     * @param {Function} condition A function that returns a _boolean_ indicating whether the condition has been met.
     * @param {Function} body A function that runs the body of the loop: `(done)`.
     * @param {Function} callback The function to call when the loop is complete: `(err)`.
     *
     * @function splunkjs.Async
     */cov_cv8u32h8f().s[3]++;root.whilst=function(condition,body,callback){cov_cv8u32h8f().f[1]++;cov_cv8u32h8f().s[4]++;condition=(cov_cv8u32h8f().b[1][0]++,condition)||(cov_cv8u32h8f().b[1][1]++,function(){cov_cv8u32h8f().f[2]++;cov_cv8u32h8f().s[5]++;return false;});cov_cv8u32h8f().s[6]++;body=(cov_cv8u32h8f().b[2][0]++,body)||(cov_cv8u32h8f().b[2][1]++,function(done){cov_cv8u32h8f().f[3]++;cov_cv8u32h8f().s[7]++;done();});cov_cv8u32h8f().s[8]++;callback=(cov_cv8u32h8f().b[3][0]++,callback)||(cov_cv8u32h8f().b[3][1]++,function(){cov_cv8u32h8f().f[4]++;});cov_cv8u32h8f().s[9]++;var iterationDone=function(err){cov_cv8u32h8f().f[5]++;cov_cv8u32h8f().s[10]++;if(err){cov_cv8u32h8f().b[4][0]++;cov_cv8u32h8f().s[11]++;callback(err);}else{cov_cv8u32h8f().b[4][1]++;cov_cv8u32h8f().s[12]++;root.whilst(condition,body,callback);}};cov_cv8u32h8f().s[13]++;if(condition()){cov_cv8u32h8f().b[5][0]++;cov_cv8u32h8f().s[14]++;body(iterationDone);}else{cov_cv8u32h8f().b[5][1]++;cov_cv8u32h8f().s[15]++;callback(null);}};/**
     * Runs multiple functions (tasks) in parallel. 
     * Each task takes the callback function as a parameter. 
     * When all tasks have been completed or if an error occurs, the callback 
     * function is called with the combined results of all tasks. 
     *
     * **Note**: Tasks might not be run in the same order as they appear in the array,
     * but the results will be returned in that order. 
     *
     * @example
     *      
     *      Async.parallel([
     *          function(done) {
     *              done(null, 1);
     *          },
     *          function(done) {
     *              done(null, 2, 3);
     *          }],
     *          function(err, one, two) {
     *              console.log(err); // == null
     *              console.log(one); // == 1
     *              console.log(two); // == [1,2]
     *          }
     *      );
     *
     * @param {Function} tasks An array of functions: `(done)`.
     * @param {Function} callback The function to call when all tasks are done or if an error occurred: `(err, ...)`.
     *
     * @function splunkjs.Async
     */cov_cv8u32h8f().s[16]++;root.parallel=function(tasks,callback){cov_cv8u32h8f().f[6]++;cov_cv8u32h8f().s[17]++;// Allow for just a list of functions
if((cov_cv8u32h8f().b[7][0]++,arguments.length>1)&&(cov_cv8u32h8f().b[7][1]++,utils.isFunction(arguments[0]))){cov_cv8u32h8f().b[6][0]++;var args=(cov_cv8u32h8f().s[18]++,utils.toArray(arguments));cov_cv8u32h8f().s[19]++;tasks=args.slice(0,args.length-1);cov_cv8u32h8f().s[20]++;callback=args[args.length-1];}else{cov_cv8u32h8f().b[6][1]++;}cov_cv8u32h8f().s[21]++;tasks=(cov_cv8u32h8f().b[8][0]++,tasks)||(cov_cv8u32h8f().b[8][1]++,[]);cov_cv8u32h8f().s[22]++;callback=(cov_cv8u32h8f().b[9][0]++,callback)||(cov_cv8u32h8f().b[9][1]++,function(){cov_cv8u32h8f().f[7]++;});cov_cv8u32h8f().s[23]++;if(tasks.length===0){cov_cv8u32h8f().b[10][0]++;cov_cv8u32h8f().s[24]++;callback();}else{cov_cv8u32h8f().b[10][1]++;}var tasksLeft=(cov_cv8u32h8f().s[25]++,tasks.length);var results=(cov_cv8u32h8f().s[26]++,[]);cov_cv8u32h8f().s[27]++;var doneCallback=function(idx){cov_cv8u32h8f().f[8]++;cov_cv8u32h8f().s[28]++;return function(err){cov_cv8u32h8f().f[9]++;cov_cv8u32h8f().s[29]++;if(err){cov_cv8u32h8f().b[11][0]++;cov_cv8u32h8f().s[30]++;if(callback){cov_cv8u32h8f().b[12][0]++;cov_cv8u32h8f().s[31]++;callback(err);}else{cov_cv8u32h8f().b[12][1]++;}cov_cv8u32h8f().s[32]++;callback=null;}else{cov_cv8u32h8f().b[11][1]++;var args=(cov_cv8u32h8f().s[33]++,utils.toArray(arguments));cov_cv8u32h8f().s[34]++;args.shift();cov_cv8u32h8f().s[35]++;if(args.length===1){cov_cv8u32h8f().b[13][0]++;cov_cv8u32h8f().s[36]++;args=args[0];}else{cov_cv8u32h8f().b[13][1]++;}cov_cv8u32h8f().s[37]++;results[idx]=args;cov_cv8u32h8f().s[38]++;if(--tasksLeft===0){cov_cv8u32h8f().b[14][0]++;cov_cv8u32h8f().s[39]++;results.unshift(null);cov_cv8u32h8f().s[40]++;if(callback){cov_cv8u32h8f().b[15][0]++;cov_cv8u32h8f().s[41]++;callback.apply(null,results);}else{cov_cv8u32h8f().b[15][1]++;}}else{cov_cv8u32h8f().b[14][1]++;}}};};cov_cv8u32h8f().s[42]++;for(var i=(cov_cv8u32h8f().s[43]++,0);i<tasks.length;i++){var task=(cov_cv8u32h8f().s[44]++,tasks[i]);cov_cv8u32h8f().s[45]++;task(doneCallback(i));}};/**
     * Runs multiple functions (tasks) in series. 
     * Each task takes the callback function as a parameter. 
     * When all tasks have been completed or if an error occurs, the callback 
     * function is called with the combined results of all tasks in the order
     * they were run. 
     *
     * @example
     *      
     *      var keeper = 0;
     *      Async.series([
     *          function(done) {
     *              Async.sleep(10, function() {
     *                  console.log(keeper++); // == 0
     *                  done(null, 1);
     *              });
     *          },
     *          function(done) {
     *              console.log(keeper++); // == 1
     *              done(null, 2, 3);
     *          }],
     *          function(err, one, two) {
     *              console.log(err); // == null
     *              console.log(one); // == 1
     *              console.log(two); // == [1,2]
     *          }
     *      );
     *
     * @param {Function} tasks An array of functions: `(done)`.
     * @param {Function} callback The function to call when all tasks are done or if an error occurred: `(err, ...)`.
     *
     * @function splunkjs.Async
     */cov_cv8u32h8f().s[46]++;root.series=function(tasks,callback){cov_cv8u32h8f().f[10]++;cov_cv8u32h8f().s[47]++;// Allow for just a list of functions
if((cov_cv8u32h8f().b[17][0]++,arguments.length>1)&&(cov_cv8u32h8f().b[17][1]++,utils.isFunction(arguments[0]))){cov_cv8u32h8f().b[16][0]++;var args=(cov_cv8u32h8f().s[48]++,utils.toArray(arguments));cov_cv8u32h8f().s[49]++;tasks=args.slice(0,args.length-1);cov_cv8u32h8f().s[50]++;callback=args[args.length-1];}else{cov_cv8u32h8f().b[16][1]++;}cov_cv8u32h8f().s[51]++;tasks=(cov_cv8u32h8f().b[18][0]++,tasks)||(cov_cv8u32h8f().b[18][1]++,[]);cov_cv8u32h8f().s[52]++;callback=(cov_cv8u32h8f().b[19][0]++,callback)||(cov_cv8u32h8f().b[19][1]++,function(){cov_cv8u32h8f().f[11]++;});cov_cv8u32h8f().s[53]++;var innerSeries=function(task,restOfTasks,resultsSoFar,callback){cov_cv8u32h8f().f[12]++;cov_cv8u32h8f().s[54]++;if(!task){cov_cv8u32h8f().b[20][0]++;cov_cv8u32h8f().s[55]++;resultsSoFar.unshift(null);cov_cv8u32h8f().s[56]++;callback.apply(null,resultsSoFar);cov_cv8u32h8f().s[57]++;return;}else{cov_cv8u32h8f().b[20][1]++;}cov_cv8u32h8f().s[58]++;task(function(err){cov_cv8u32h8f().f[13]++;cov_cv8u32h8f().s[59]++;if(err){cov_cv8u32h8f().b[21][0]++;cov_cv8u32h8f().s[60]++;if(callback){cov_cv8u32h8f().b[22][0]++;cov_cv8u32h8f().s[61]++;callback(err);}else{cov_cv8u32h8f().b[22][1]++;}cov_cv8u32h8f().s[62]++;callback=null;}else{cov_cv8u32h8f().b[21][1]++;var args=(cov_cv8u32h8f().s[63]++,utils.toArray(arguments));cov_cv8u32h8f().s[64]++;args.shift();cov_cv8u32h8f().s[65]++;if(args.length===1){cov_cv8u32h8f().b[23][0]++;cov_cv8u32h8f().s[66]++;args=args[0];}else{cov_cv8u32h8f().b[23][1]++;}cov_cv8u32h8f().s[67]++;resultsSoFar.push(args);cov_cv8u32h8f().s[68]++;innerSeries(restOfTasks[0],restOfTasks.slice(1),resultsSoFar,callback);}});};cov_cv8u32h8f().s[69]++;innerSeries(tasks[0],tasks.slice(1),[],callback);};/**
     * Runs an asynchronous function (mapping it) over each element in an array, in parallel.
     * When all tasks have been completed or if an error occurs, a callback
     * function is called with the resulting array.
     *
     * @example
     *      
     *      Async.parallelMap(
     *          [1, 2, 3],
     *          function(val, idx, done) { 
     *              if (val === 2) {
     *                  Async.sleep(100, function() { done(null, val+1); });   
     *              }
     *              else {
     *                  done(null, val + 1);
     *              }
     *          },
     *          function(err, vals) {
     *              console.log(vals); // == [2,3,4]
     *          }
     *      );
     *
     * @param {Array} vals An array of values.
     * @param {Function} fn A function (possibly asynchronous) to apply to each element: `(done)`. 
     * @param {Function} callback The function to call when all tasks are done or if an error occurred: `(err, mappedVals)`.
     *
     * @function splunkjs.Async
     */cov_cv8u32h8f().s[70]++;root.parallelMap=function(vals,fn,callback){cov_cv8u32h8f().f[14]++;cov_cv8u32h8f().s[71]++;vals=(cov_cv8u32h8f().b[24][0]++,vals)||(cov_cv8u32h8f().b[24][1]++,[]);cov_cv8u32h8f().s[72]++;callback=(cov_cv8u32h8f().b[25][0]++,callback)||(cov_cv8u32h8f().b[25][1]++,function(){cov_cv8u32h8f().f[15]++;});var tasks=(cov_cv8u32h8f().s[73]++,[]);cov_cv8u32h8f().s[74]++;var createTask=function(val,idx){cov_cv8u32h8f().f[16]++;cov_cv8u32h8f().s[75]++;return function(done){cov_cv8u32h8f().f[17]++;cov_cv8u32h8f().s[76]++;fn(val,idx,done);};};cov_cv8u32h8f().s[77]++;for(var i=(cov_cv8u32h8f().s[78]++,0);i<vals.length;i++){cov_cv8u32h8f().s[79]++;tasks.push(createTask(vals[i],i));}cov_cv8u32h8f().s[80]++;root.parallel(tasks,function(err){cov_cv8u32h8f().f[18]++;cov_cv8u32h8f().s[81]++;if(err){cov_cv8u32h8f().b[26][0]++;cov_cv8u32h8f().s[82]++;if(callback){cov_cv8u32h8f().b[27][0]++;cov_cv8u32h8f().s[83]++;callback(err);}else{cov_cv8u32h8f().b[27][1]++;}cov_cv8u32h8f().s[84]++;callback=null;}else{cov_cv8u32h8f().b[26][1]++;var args=(cov_cv8u32h8f().s[85]++,utils.toArray(arguments));cov_cv8u32h8f().s[86]++;args.shift();cov_cv8u32h8f().s[87]++;callback(null,args);}});};/**
     * Runs an asynchronous function (mapping it) over each element in an array, in series.
     * When all tasks have been completed or if an error occurs, a callback
     * function is called with the resulting array.
     *
     * @example
     *      
     *      var keeper = 1;
     *      Async.seriesMap(
     *          [1, 2, 3],
     *          function(val, idx, done) { 
     *              console.log(keeper++); // == 1, then 2, then 3
     *              done(null, val + 1);
     *          },
     *          function(err, vals) {
     *              console.log(vals); // == [2,3,4];
     *          }
     *      );
     *
     * @param {Array} vals An array of values.
     * @param {Function} fn A function (possibly asynchronous) to apply to each element: `(done)`.
     * @param {Function} callback The function to call when all tasks are done or if an error occurred: `(err, mappedVals)`.
     *
     * @function splunkjs.Async
     */cov_cv8u32h8f().s[88]++;root.seriesMap=function(vals,fn,callback){cov_cv8u32h8f().f[19]++;cov_cv8u32h8f().s[89]++;vals=(cov_cv8u32h8f().b[28][0]++,vals)||(cov_cv8u32h8f().b[28][1]++,[]);cov_cv8u32h8f().s[90]++;callback=(cov_cv8u32h8f().b[29][0]++,callback)||(cov_cv8u32h8f().b[29][1]++,function(){cov_cv8u32h8f().f[20]++;});var tasks=(cov_cv8u32h8f().s[91]++,[]);cov_cv8u32h8f().s[92]++;var createTask=function(val,idx){cov_cv8u32h8f().f[21]++;cov_cv8u32h8f().s[93]++;return function(done){cov_cv8u32h8f().f[22]++;cov_cv8u32h8f().s[94]++;fn(val,idx,done);};};cov_cv8u32h8f().s[95]++;for(var i=(cov_cv8u32h8f().s[96]++,0);i<vals.length;i++){cov_cv8u32h8f().s[97]++;tasks.push(createTask(vals[i],i));}cov_cv8u32h8f().s[98]++;root.series(tasks,function(err){cov_cv8u32h8f().f[23]++;cov_cv8u32h8f().s[99]++;if(err){cov_cv8u32h8f().b[30][0]++;cov_cv8u32h8f().s[100]++;if(callback){cov_cv8u32h8f().b[31][0]++;cov_cv8u32h8f().s[101]++;callback(err);}else{cov_cv8u32h8f().b[31][1]++;}}else{cov_cv8u32h8f().b[30][1]++;var args=(cov_cv8u32h8f().s[102]++,utils.toArray(arguments));cov_cv8u32h8f().s[103]++;args.shift();cov_cv8u32h8f().s[104]++;callback(null,args);}});};/**
     * Applies an asynchronous function over each element in an array, in parallel.
     * A callback function is called when all tasks have been completed. If an 
     * error occurs, the callback function is called with an error parameter.
     *
     * @example
     *      
     *      var total = 0;
     *      Async.parallelEach(
     *          [1, 2, 3],
     *          function(val, idx, done) { 
     *              var go = function() {
     *                  total += val;
     *                  done();
     *              };
     *              
     *              if (idx === 1) {
     *                  Async.sleep(100, go);    
     *              }
     *              else {
     *                  go();
     *              }
     *          },
     *          function(err) {
     *              console.log(total); // == 6
     *          }
     *      );
     *
     * @param {Array} vals An array of values.
     * @param {Function} fn A function (possibly asynchronous) to apply to each element: `(done)`.
     * @param {Function} callback The function to call when all tasks are done or if an error occurred: `(err)`.
     *
     * @function splunkjs.Async
     */cov_cv8u32h8f().s[105]++;root.parallelEach=function(vals,fn,callback){cov_cv8u32h8f().f[24]++;cov_cv8u32h8f().s[106]++;vals=(cov_cv8u32h8f().b[32][0]++,vals)||(cov_cv8u32h8f().b[32][1]++,[]);cov_cv8u32h8f().s[107]++;callback=(cov_cv8u32h8f().b[33][0]++,callback)||(cov_cv8u32h8f().b[33][1]++,function(){cov_cv8u32h8f().f[25]++;});cov_cv8u32h8f().s[108]++;root.parallelMap(vals,fn,function(err,result){cov_cv8u32h8f().f[26]++;cov_cv8u32h8f().s[109]++;callback(err);});};/**
     * Applies an asynchronous function over each element in an array, in series.
     * A callback function is called when all tasks have been completed. If an 
     * error occurs, the callback function is called with an error parameter.
     *
     * @example
     *      
     *      var results = [1, 3, 6];
     *      var total = 0;
     *      Async.seriesEach(
     *          [1, 2, 3],
     *          function(val, idx, done) { 
     *              total += val;
     *              console.log(total === results[idx]); //== true
     *              done();
     *          },
     *          function(err) {
     *              console.log(total); //== 6
     *          }
     *      );
     *
     * @param {Array} vals An array of values.
     * @param {Function} fn A function (possibly asynchronous)to apply to each element: `(done)`.
     * @param {Function} callback The function to call when all tasks are done or if an error occurred: `(err)`.
     *
     * @function splunkjs.Async
     */cov_cv8u32h8f().s[110]++;root.seriesEach=function(vals,fn,callback){cov_cv8u32h8f().f[27]++;cov_cv8u32h8f().s[111]++;vals=(cov_cv8u32h8f().b[34][0]++,vals)||(cov_cv8u32h8f().b[34][1]++,[]);cov_cv8u32h8f().s[112]++;callback=(cov_cv8u32h8f().b[35][0]++,callback)||(cov_cv8u32h8f().b[35][1]++,function(){cov_cv8u32h8f().f[28]++;});cov_cv8u32h8f().s[113]++;root.seriesMap(vals,fn,function(err,result){cov_cv8u32h8f().f[29]++;cov_cv8u32h8f().s[114]++;callback(err);});};/**
     * Chains asynchronous tasks together by running a function (task) and
     * passing the results as arguments to the next task. When all tasks have 
     * been completed or if an error occurs, a callback function is called with 
     * the results of the final task.
     *
     * Each task takes one or more parameters, depending on the previous task in the chain.
     * The last parameter is always the function to run when the task is complete.
     *
     * `err` arguments are not passed to individual tasks, but are are propagated 
     * to the final callback function.
     *
     * @example
     *      
     *     Async.chain(
     *         function(callback) { 
     *             callback(null, 1, 2);
     *         },
     *         function(val1, val2, callback) {
     *             callback(null, val1 + 1);
     *         },
     *         function(val1, callback) {
     *             callback(null, val1 + 1, 5);
     *         },
     *         function(err, val1, val2) {
     *             console.log(val1); //== 3
     *             console.log(val2); //== 5
     *         }
     *     );
     *     
     * @param {Function} tasks An array of functions: `(done)`.
     * @param {Function} callback The function to call when all tasks are done or if an error occurred: `(err, ...)`.
     *
     * @function splunkjs.Async
     */cov_cv8u32h8f().s[115]++;root.chain=function(tasks,callback){cov_cv8u32h8f().f[30]++;cov_cv8u32h8f().s[116]++;// Allow for just a list of functions
if((cov_cv8u32h8f().b[37][0]++,arguments.length>1)&&(cov_cv8u32h8f().b[37][1]++,utils.isFunction(arguments[0]))){cov_cv8u32h8f().b[36][0]++;var args=(cov_cv8u32h8f().s[117]++,utils.toArray(arguments));cov_cv8u32h8f().s[118]++;tasks=args.slice(0,args.length-1);cov_cv8u32h8f().s[119]++;callback=args[args.length-1];}else{cov_cv8u32h8f().b[36][1]++;}cov_cv8u32h8f().s[120]++;tasks=(cov_cv8u32h8f().b[38][0]++,tasks)||(cov_cv8u32h8f().b[38][1]++,[]);cov_cv8u32h8f().s[121]++;callback=(cov_cv8u32h8f().b[39][0]++,callback)||(cov_cv8u32h8f().b[39][1]++,function(){cov_cv8u32h8f().f[31]++;});cov_cv8u32h8f().s[122]++;if(!tasks.length){cov_cv8u32h8f().b[40][0]++;cov_cv8u32h8f().s[123]++;callback();}else{cov_cv8u32h8f().b[40][1]++;cov_cv8u32h8f().s[124]++;var innerChain=function(task,restOfTasks,result){cov_cv8u32h8f().f[32]++;cov_cv8u32h8f().s[125]++;var chainCallback=function(err){cov_cv8u32h8f().f[33]++;cov_cv8u32h8f().s[126]++;if(err){cov_cv8u32h8f().b[41][0]++;cov_cv8u32h8f().s[127]++;callback(err);cov_cv8u32h8f().s[128]++;callback=function(){cov_cv8u32h8f().f[34]++;};}else{cov_cv8u32h8f().b[41][1]++;var args=(cov_cv8u32h8f().s[129]++,utils.toArray(arguments));cov_cv8u32h8f().s[130]++;args.shift();cov_cv8u32h8f().s[131]++;innerChain(restOfTasks[0],restOfTasks.slice(1),args);}};var args=(cov_cv8u32h8f().s[132]++,result);cov_cv8u32h8f().s[133]++;if(!restOfTasks.length){cov_cv8u32h8f().b[42][0]++;cov_cv8u32h8f().s[134]++;args.push(callback);}else{cov_cv8u32h8f().b[42][1]++;cov_cv8u32h8f().s[135]++;args.push(chainCallback);}cov_cv8u32h8f().s[136]++;task.apply(null,args);};cov_cv8u32h8f().s[137]++;innerChain(tasks[0],tasks.slice(1),[]);}};/**
     * Runs a function after a delay (a specified timeout period). 
     * The main purpose of this function is to make `setTimeout` adhere to 
     * Node.js-style function signatures.
     *
     * @example
     *      
     *     Async.sleep(1000, function() { console.log("TIMEOUT");});
     *     
     * @param {Number} timeout The timeout period, in milliseconds.
     * @param {Function} callback The function to call when the timeout occurs.
     *
     * @function splunkjs.Async
     */cov_cv8u32h8f().s[138]++;root.sleep=function(timeout,callback){cov_cv8u32h8f().f[35]++;cov_cv8u32h8f().s[139]++;setTimeout(function(){cov_cv8u32h8f().f[36]++;cov_cv8u32h8f().s[140]++;callback();},timeout);};/**
     * Runs a callback function with additional parameters, which are appended to
     * the parameter list. 
     *
     * @example
     *
     *      var callback = function(a, b) {
     *          console.log(a); //== 1
     *          console.log(b); //== 2
     *      };
     *      
     *      var augmented = Async.augment(callback, 2);
     *      augmented(1);
     *     
     * @param {Function} callback The callback function to augment.
     * @param {Anything...} rest The number of arguments to add.
     *
     * @function splunkjs.Async
     */cov_cv8u32h8f().s[141]++;root.augment=function(callback){cov_cv8u32h8f().f[37]++;var args=(cov_cv8u32h8f().s[142]++,Array.prototype.slice.call(arguments,1));cov_cv8u32h8f().s[143]++;return function(){cov_cv8u32h8f().f[38]++;var augmentedArgs=(cov_cv8u32h8f().s[144]++,Array.prototype.slice.call(arguments));cov_cv8u32h8f().s[145]++;for(var i=(cov_cv8u32h8f().s[146]++,0);i<args.length;i++){cov_cv8u32h8f().s[147]++;augmentedArgs.push(args[i]);}cov_cv8u32h8f().s[148]++;callback.apply(null,augmentedArgs);};};})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,