function cov_1uego8sog2(){var path="/Users/abhis/Documents/python/splunk-sdk-javascript/lib/context.js";var hash="fd5f0b7b23f537746c3d7dd00af2e95f2c32d2bd";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/abhis/Documents/python/splunk-sdk-javascript/lib/context.js",statementMap:{"0":{start:{line:16,column:0},end:{line:508,column:5}},"1":{start:{line:19,column:19},end:{line:19,column:43}},"2":{start:{line:20,column:19},end:{line:20,column:50}},"3":{start:{line:21,column:19},end:{line:21,column:36}},"4":{start:{line:22,column:19},end:{line:22,column:37}},"5":{start:{line:24,column:15},end:{line:24,column:30}},"6":{start:{line:26,column:20},end:{line:30,column:5}},"7":{start:{line:40,column:4},end:{line:499,column:7}},"8":{start:{line:64,column:12},end:{line:68,column:13}},"9":{start:{line:66,column:16},end:{line:66,column:30}},"10":{start:{line:67,column:16},end:{line:67,column:28}},"11":{start:{line:70,column:12},end:{line:70,column:34}},"12":{start:{line:72,column:12},end:{line:72,column:58}},"13":{start:{line:73,column:12},end:{line:73,column:60}},"14":{start:{line:74,column:12},end:{line:74,column:53}},"15":{start:{line:75,column:12},end:{line:75,column:57}},"16":{start:{line:76,column:12},end:{line:76,column:57}},"17":{start:{line:77,column:12},end:{line:77,column:46}},"18":{start:{line:78,column:12},end:{line:78,column:44}},"19":{start:{line:79,column:12},end:{line:79,column:57}},"20":{start:{line:80,column:12},end:{line:80,column:66}},"21":{start:{line:81,column:12},end:{line:81,column:55}},"22":{start:{line:82,column:12},end:{line:82,column:61}},"23":{start:{line:83,column:12},end:{line:83,column:53}},"24":{start:{line:84,column:12},end:{line:84,column:38}},"25":{start:{line:91,column:12},end:{line:93,column:13}},"26":{start:{line:92,column:16},end:{line:92,column:50}},"27":{start:{line:95,column:12},end:{line:106,column:13}},"28":{start:{line:99,column:16},end:{line:105,column:17}},"29":{start:{line:100,column:20},end:{line:100,column:104}},"30":{start:{line:103,column:35},end:{line:103,column:80}},"31":{start:{line:104,column:20},end:{line:104,column:42}},"32":{start:{line:109,column:12},end:{line:109,column:29}},"33":{start:{line:110,column:12},end:{line:110,column:54}},"34":{start:{line:114,column:32},end:{line:114,column:77}},"35":{start:{line:115,column:12},end:{line:115,column:92}},"36":{start:{line:119,column:12},end:{line:119,column:68}},"37":{start:{line:120,column:12},end:{line:120,column:68}},"38":{start:{line:121,column:12},end:{line:121,column:66}},"39":{start:{line:122,column:12},end:{line:122,column:63}},"40":{start:{line:123,column:12},end:{line:123,column:63}},"41":{start:{line:124,column:12},end:{line:124,column:64}},"42":{start:{line:125,column:12},end:{line:125,column:65}},"43":{start:{line:126,column:12},end:{line:126,column:76}},"44":{start:{line:127,column:12},end:{line:127,column:75}},"45":{start:{line:140,column:12},end:{line:140,column:36}},"46":{start:{line:141,column:12},end:{line:143,column:13}},"47":{start:{line:142,column:16},end:{line:142,column:86}},"48":{start:{line:144,column:12},end:{line:144,column:27}},"49":{start:{line:149,column:12},end:{line:149,column:68}},"50":{start:{line:163,column:12},end:{line:163,column:49}},"51":{start:{line:165,column:23},end:{line:165,column:27}},"52":{start:{line:166,column:22},end:{line:166,column:26}},"53":{start:{line:172,column:37},end:{line:203,column:13}},"54":{start:{line:174,column:16},end:{line:176,column:17}},"55":{start:{line:175,column:20},end:{line:175,column:27}},"56":{start:{line:178,column:16},end:{line:202,column:17}},"57":{start:{line:181,column:20},end:{line:181,column:43}},"58":{start:{line:182,column:20},end:{line:198,column:23}},"59":{start:{line:185,column:24},end:{line:187,column:25}},"60":{start:{line:186,column:28},end:{line:186,column:35}},"61":{start:{line:189,column:24},end:{line:197,column:25}},"62":{start:{line:191,column:28},end:{line:191,column:42}},"63":{start:{line:196,column:28},end:{line:196,column:43}},"64":{start:{line:201,column:20},end:{line:201,column:52}},"65":{start:{line:205,column:12},end:{line:210,column:13}},"66":{start:{line:208,column:16},end:{line:208,column:47}},"67":{start:{line:209,column:16},end:{line:209,column:27}},"68":{start:{line:215,column:12},end:{line:231,column:15}},"69":{start:{line:218,column:16},end:{line:220,column:17}},"70":{start:{line:219,column:20},end:{line:219,column:27}},"71":{start:{line:222,column:16},end:{line:230,column:17}},"72":{start:{line:224,column:20},end:{line:224,column:34}},"73":{start:{line:229,column:20},end:{line:229,column:35}},"74":{start:{line:233,column:12},end:{line:233,column:23}},"75":{start:{line:247,column:12},end:{line:247,column:40}},"76":{start:{line:249,column:12},end:{line:251,column:13}},"77":{start:{line:250,column:16},end:{line:250,column:28}},"78":{start:{line:254,column:12},end:{line:256,column:13}},"79":{start:{line:255,column:16},end:{line:255,column:43}},"80":{start:{line:260,column:24},end:{line:260,column:60}},"81":{start:{line:261,column:24},end:{line:261,column:56}},"82":{start:{line:263,column:12},end:{line:263,column:72}},"83":{start:{line:266,column:12},end:{line:272,column:13}},"84":{start:{line:267,column:16},end:{line:267,column:33}},"85":{start:{line:269,column:17},end:{line:272,column:13}},"86":{start:{line:270,column:16},end:{line:270,column:33}},"87":{start:{line:271,column:16},end:{line:271,column:31}},"88":{start:{line:274,column:12},end:{line:274,column:119}},"89":{start:{line:287,column:12},end:{line:287,column:53}},"90":{start:{line:300,column:23},end:{line:300,column:27}},"91":{start:{line:301,column:22},end:{line:301,column:38}},"92":{start:{line:302,column:25},end:{line:306,column:13}},"93":{start:{line:308,column:12},end:{line:308,column:49}},"94":{start:{line:309,column:34},end:{line:321,column:13}},"95":{start:{line:312,column:36},end:{line:312,column:89}},"96":{start:{line:314,column:16},end:{line:320,column:17}},"97":{start:{line:315,column:20},end:{line:315,column:71}},"98":{start:{line:318,column:20},end:{line:318,column:63}},"99":{start:{line:319,column:20},end:{line:319,column:41}},"100":{start:{line:323,column:12},end:{line:329,column:14}},"101":{start:{line:343,column:12},end:{line:343,column:49}},"102":{start:{line:345,column:12},end:{line:345,column:35}},"103":{start:{line:346,column:12},end:{line:346,column:40}},"104":{start:{line:347,column:12},end:{line:347,column:23}},"105":{start:{line:360,column:23},end:{line:360,column:27}},"106":{start:{line:362,column:12},end:{line:384,column:13}},"107":{start:{line:363,column:16},end:{line:370,column:18}},"108":{start:{line:373,column:30},end:{line:381,column:17}},"109":{start:{line:374,column:20},end:{line:380,column:22}},"110":{start:{line:383,column:16},end:{line:383,column:63}},"111":{start:{line:397,column:23},end:{line:397,column:27}},"112":{start:{line:398,column:26},end:{line:406,column:13}},"113":{start:{line:399,column:16},end:{line:405,column:18}},"114":{start:{line:408,column:12},end:{line:408,column:59}},"115":{start:{line:421,column:23},end:{line:421,column:27}},"116":{start:{line:422,column:26},end:{line:430,column:13}},"117":{start:{line:423,column:16},end:{line:429,column:18}},"118":{start:{line:432,column:12},end:{line:432,column:59}},"119":{start:{line:449,column:23},end:{line:449,column:27}},"120":{start:{line:450,column:26},end:{line:463,column:13}},"121":{start:{line:451,column:16},end:{line:462,column:18}},"122":{start:{line:465,column:12},end:{line:465,column:59}},"123":{start:{line:479,column:30},end:{line:479,column:42}},"124":{start:{line:480,column:12},end:{line:482,column:13}},"125":{start:{line:481,column:16},end:{line:481,column:36}},"126":{start:{line:484,column:30},end:{line:484,column:52}},"127":{start:{line:485,column:30},end:{line:485,column:53}},"128":{start:{line:486,column:32},end:{line:486,column:80}},"129":{start:{line:488,column:12},end:{line:496,column:13}},"130":{start:{line:488,column:25},end:{line:488,column:26}},"131":{start:{line:489,column:25},end:{line:489,column:84}},"132":{start:{line:490,column:25},end:{line:490,column:84}},"133":{start:{line:491,column:16},end:{line:495,column:17}},"134":{start:{line:492,column:20},end:{line:492,column:30}},"135":{start:{line:493,column:23},end:{line:495,column:17}},"136":{start:{line:494,column:20},end:{line:494,column:29}},"137":{start:{line:497,column:12},end:{line:497,column:21}},"138":{start:{line:502,column:4},end:{line:507,column:6}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:12},end:{line:508,column:1}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:63,column:14},end:{line:63,column:15}},loc:{start:{line:63,column:37},end:{line:128,column:9}},line:63},"2":{name:"(anonymous_2)",decl:{start:{line:139,column:18},end:{line:139,column:19}},loc:{start:{line:139,column:37},end:{line:145,column:9}},line:139},"3":{name:"(anonymous_3)",decl:{start:{line:148,column:26},end:{line:148,column:27}},loc:{start:{line:148,column:37},end:{line:150,column:9}},line:148},"4":{name:"(anonymous_4)",decl:{start:{line:162,column:25},end:{line:162,column:26}},loc:{start:{line:162,column:50},end:{line:234,column:9}},line:162},"5":{name:"(anonymous_5)",decl:{start:{line:163,column:35},end:{line:163,column:36}},loc:{start:{line:163,column:46},end:{line:163,column:48}},line:163},"6":{name:"(anonymous_6)",decl:{start:{line:172,column:37},end:{line:172,column:38}},loc:{start:{line:172,column:51},end:{line:203,column:13}},line:172},"7":{name:"(anonymous_7)",decl:{start:{line:182,column:31},end:{line:182,column:32}},loc:{start:{line:182,column:54},end:{line:198,column:21}},line:182},"8":{name:"(anonymous_8)",decl:{start:{line:215,column:29},end:{line:215,column:30}},loc:{start:{line:215,column:52},end:{line:231,column:13}},line:215},"9":{name:"(anonymous_9)",decl:{start:{line:246,column:18},end:{line:246,column:19}},loc:{start:{line:246,column:44},end:{line:275,column:9}},line:246},"10":{name:"(anonymous_10)",decl:{start:{line:286,column:16},end:{line:286,column:17}},loc:{start:{line:286,column:31},end:{line:288,column:9}},line:286},"11":{name:"(anonymous_11)",decl:{start:{line:299,column:15},end:{line:299,column:16}},loc:{start:{line:299,column:34},end:{line:330,column:9}},line:299},"12":{name:"(anonymous_12)",decl:{start:{line:308,column:35},end:{line:308,column:36}},loc:{start:{line:308,column:46},end:{line:308,column:48}},line:308},"13":{name:"(anonymous_13)",decl:{start:{line:309,column:34},end:{line:309,column:35}},loc:{start:{line:309,column:58},end:{line:321,column:13}},line:309},"14":{name:"(anonymous_14)",decl:{start:{line:342,column:16},end:{line:342,column:17}},loc:{start:{line:342,column:35},end:{line:348,column:9}},line:342},"15":{name:"(anonymous_15)",decl:{start:{line:343,column:35},end:{line:343,column:36}},loc:{start:{line:343,column:46},end:{line:343,column:48}},line:343},"16":{name:"(anonymous_16)",decl:{start:{line:359,column:13},end:{line:359,column:14}},loc:{start:{line:359,column:55},end:{line:385,column:9}},line:359},"17":{name:"(anonymous_17)",decl:{start:{line:373,column:30},end:{line:373,column:31}},loc:{start:{line:373,column:49},end:{line:381,column:17}},line:373},"18":{name:"(anonymous_18)",decl:{start:{line:396,column:13},end:{line:396,column:14}},loc:{start:{line:396,column:46},end:{line:409,column:9}},line:396},"19":{name:"(anonymous_19)",decl:{start:{line:398,column:26},end:{line:398,column:27}},loc:{start:{line:398,column:45},end:{line:406,column:13}},line:398},"20":{name:"(anonymous_20)",decl:{start:{line:420,column:14},end:{line:420,column:15}},loc:{start:{line:420,column:47},end:{line:433,column:9}},line:420},"21":{name:"(anonymous_21)",decl:{start:{line:422,column:26},end:{line:422,column:27}},loc:{start:{line:422,column:45},end:{line:430,column:13}},line:422},"22":{name:"(anonymous_22)",decl:{start:{line:448,column:17},end:{line:448,column:18}},loc:{start:{line:448,column:78},end:{line:466,column:9}},line:448},"23":{name:"(anonymous_23)",decl:{start:{line:450,column:26},end:{line:450,column:27}},loc:{start:{line:450,column:45},end:{line:463,column:13}},line:450},"24":{name:"(anonymous_24)",decl:{start:{line:478,column:24},end:{line:478,column:25}},loc:{start:{line:478,column:47},end:{line:498,column:9}},line:478}},branchMap:{"0":{loc:{start:{line:24,column:15},end:{line:24,column:30}},type:"binary-expr",locations:[{start:{line:24,column:15},end:{line:24,column:22}},{start:{line:24,column:26},end:{line:24,column:30}}],line:24},"1":{loc:{start:{line:64,column:12},end:{line:68,column:13}},type:"if",locations:[{start:{line:64,column:12},end:{line:68,column:13}},{start:{line:64,column:12},end:{line:68,column:13}}],line:64},"2":{loc:{start:{line:64,column:16},end:{line:64,column:50}},type:"binary-expr",locations:[{start:{line:64,column:16},end:{line:64,column:39}},{start:{line:64,column:43},end:{line:64,column:50}}],line:64},"3":{loc:{start:{line:70,column:21},end:{line:70,column:33}},type:"binary-expr",locations:[{start:{line:70,column:21},end:{line:70,column:27}},{start:{line:70,column:31},end:{line:70,column:33}}],line:70},"4":{loc:{start:{line:72,column:33},end:{line:72,column:57}},type:"binary-expr",locations:[{start:{line:72,column:33},end:{line:72,column:46}},{start:{line:72,column:50},end:{line:72,column:57}}],line:72},"5":{loc:{start:{line:73,column:33},end:{line:73,column:59}},type:"binary-expr",locations:[{start:{line:73,column:33},end:{line:73,column:44}},{start:{line:73,column:48},end:{line:73,column:59}}],line:73},"6":{loc:{start:{line:74,column:33},end:{line:74,column:52}},type:"binary-expr",locations:[{start:{line:74,column:33},end:{line:74,column:44}},{start:{line:74,column:48},end:{line:74,column:52}}],line:74},"7":{loc:{start:{line:75,column:33},end:{line:75,column:56}},type:"binary-expr",locations:[{start:{line:75,column:33},end:{line:75,column:48}},{start:{line:75,column:52},end:{line:75,column:56}}],line:75},"8":{loc:{start:{line:76,column:33},end:{line:76,column:56}},type:"binary-expr",locations:[{start:{line:76,column:33},end:{line:76,column:48}},{start:{line:76,column:52},end:{line:76,column:56}}],line:76},"9":{loc:{start:{line:79,column:33},end:{line:79,column:56}},type:"binary-expr",locations:[{start:{line:79,column:33},end:{line:79,column:50}},{start:{line:79,column:54},end:{line:79,column:56}}],line:79},"10":{loc:{start:{line:80,column:33},end:{line:80,column:65}},type:"binary-expr",locations:[{start:{line:80,column:33},end:{line:80,column:53}},{start:{line:80,column:57},end:{line:80,column:65}}],line:80},"11":{loc:{start:{line:81,column:33},end:{line:81,column:54}},type:"binary-expr",locations:[{start:{line:81,column:33},end:{line:81,column:45}},{start:{line:81,column:49},end:{line:81,column:54}}],line:81},"12":{loc:{start:{line:82,column:33},end:{line:82,column:60}},type:"binary-expr",locations:[{start:{line:82,column:33},end:{line:82,column:47}},{start:{line:82,column:51},end:{line:82,column:60}}],line:82},"13":{loc:{start:{line:83,column:33},end:{line:83,column:52}},type:"binary-expr",locations:[{start:{line:83,column:33},end:{line:83,column:47}},{start:{line:83,column:51},end:{line:83,column:52}}],line:83},"14":{loc:{start:{line:91,column:12},end:{line:93,column:13}},type:"if",locations:[{start:{line:91,column:12},end:{line:93,column:13}},{start:{line:91,column:12},end:{line:93,column:13}}],line:91},"15":{loc:{start:{line:95,column:12},end:{line:106,column:13}},type:"if",locations:[{start:{line:95,column:12},end:{line:106,column:13}},{start:{line:95,column:12},end:{line:106,column:13}}],line:95},"16":{loc:{start:{line:99,column:16},end:{line:105,column:17}},type:"if",locations:[{start:{line:99,column:16},end:{line:105,column:17}},{start:{line:99,column:16},end:{line:105,column:17}}],line:99},"17":{loc:{start:{line:140,column:22},end:{line:140,column:35}},type:"binary-expr",locations:[{start:{line:140,column:22},end:{line:140,column:29}},{start:{line:140,column:33},end:{line:140,column:35}}],line:140},"18":{loc:{start:{line:141,column:12},end:{line:143,column:13}},type:"if",locations:[{start:{line:141,column:12},end:{line:143,column:13}},{start:{line:141,column:12},end:{line:143,column:13}}],line:141},"19":{loc:{start:{line:149,column:19},end:{line:149,column:67}},type:"binary-expr",locations:[{start:{line:149,column:19},end:{line:149,column:32}},{start:{line:149,column:36},end:{line:149,column:49}},{start:{line:149,column:53},end:{line:149,column:67}}],line:149},"20":{loc:{start:{line:163,column:23},end:{line:163,column:48}},type:"binary-expr",locations:[{start:{line:163,column:23},end:{line:163,column:31}},{start:{line:163,column:35},end:{line:163,column:48}}],line:163},"21":{loc:{start:{line:174,column:16},end:{line:176,column:17}},type:"if",locations:[{start:{line:174,column:16},end:{line:176,column:17}},{start:{line:174,column:16},end:{line:176,column:17}}],line:174},"22":{loc:{start:{line:178,column:16},end:{line:202,column:17}},type:"if",locations:[{start:{line:178,column:16},end:{line:202,column:17}},{start:{line:178,column:16},end:{line:202,column:17}}],line:178},"23":{loc:{start:{line:178,column:20},end:{line:178,column:72}},type:"binary-expr",locations:[{start:{line:178,column:20},end:{line:178,column:23}},{start:{line:178,column:27},end:{line:178,column:45}},{start:{line:178,column:49},end:{line:178,column:72}}],line:178},"24":{loc:{start:{line:185,column:24},end:{line:187,column:25}},type:"if",locations:[{start:{line:185,column:24},end:{line:187,column:25}},{start:{line:185,column:24},end:{line:187,column:25}}],line:185},"25":{loc:{start:{line:189,column:24},end:{line:197,column:25}},type:"if",locations:[{start:{line:189,column:24},end:{line:197,column:25}},{start:{line:189,column:24},end:{line:197,column:25}}],line:189},"26":{loc:{start:{line:205,column:12},end:{line:210,column:13}},type:"if",locations:[{start:{line:205,column:12},end:{line:210,column:13}},{start:{line:205,column:12},end:{line:210,column:13}}],line:205},"27":{loc:{start:{line:205,column:16},end:{line:205,column:59}},type:"binary-expr",locations:[{start:{line:205,column:16},end:{line:205,column:40}},{start:{line:205,column:44},end:{line:205,column:59}}],line:205},"28":{loc:{start:{line:218,column:16},end:{line:220,column:17}},type:"if",locations:[{start:{line:218,column:16},end:{line:220,column:17}},{start:{line:218,column:16},end:{line:220,column:17}}],line:218},"29":{loc:{start:{line:222,column:16},end:{line:230,column:17}},type:"if",locations:[{start:{line:222,column:16},end:{line:230,column:17}},{start:{line:222,column:16},end:{line:230,column:17}}],line:222},"30":{loc:{start:{line:247,column:24},end:{line:247,column:39}},type:"binary-expr",locations:[{start:{line:247,column:24},end:{line:247,column:33}},{start:{line:247,column:37},end:{line:247,column:39}}],line:247},"31":{loc:{start:{line:249,column:12},end:{line:251,column:13}},type:"if",locations:[{start:{line:249,column:12},end:{line:251,column:13}},{start:{line:249,column:12},end:{line:251,column:13}}],line:249},"32":{loc:{start:{line:254,column:12},end:{line:256,column:13}},type:"if",locations:[{start:{line:254,column:12},end:{line:256,column:13}},{start:{line:254,column:12},end:{line:256,column:13}}],line:254},"33":{loc:{start:{line:254,column:16},end:{line:254,column:88}},type:"binary-expr",locations:[{start:{line:254,column:16},end:{line:254,column:30}},{start:{line:254,column:34},end:{line:254,column:43}},{start:{line:254,column:47},end:{line:254,column:88}}],line:254},"34":{loc:{start:{line:260,column:24},end:{line:260,column:60}},type:"binary-expr",locations:[{start:{line:260,column:24},end:{line:260,column:39}},{start:{line:260,column:43},end:{line:260,column:53}},{start:{line:260,column:57},end:{line:260,column:60}}],line:260},"35":{loc:{start:{line:261,column:24},end:{line:261,column:56}},type:"binary-expr",locations:[{start:{line:261,column:24},end:{line:261,column:37}},{start:{line:261,column:41},end:{line:261,column:49}},{start:{line:261,column:53},end:{line:261,column:56}}],line:261},"36":{loc:{start:{line:263,column:33},end:{line:263,column:56}},type:"binary-expr",locations:[{start:{line:263,column:33},end:{line:263,column:50}},{start:{line:263,column:54},end:{line:263,column:56}}],line:263},"37":{loc:{start:{line:266,column:12},end:{line:272,column:13}},type:"if",locations:[{start:{line:266,column:12},end:{line:272,column:13}},{start:{line:266,column:12},end:{line:272,column:13}}],line:266},"38":{loc:{start:{line:266,column:16},end:{line:266,column:99}},type:"binary-expr",locations:[{start:{line:266,column:16},end:{line:266,column:54}},{start:{line:266,column:58},end:{line:266,column:99}}],line:266},"39":{loc:{start:{line:269,column:17},end:{line:272,column:13}},type:"if",locations:[{start:{line:269,column:17},end:{line:272,column:13}},{start:{line:269,column:17},end:{line:272,column:13}}],line:269},"40":{loc:{start:{line:308,column:23},end:{line:308,column:48}},type:"binary-expr",locations:[{start:{line:308,column:23},end:{line:308,column:31}},{start:{line:308,column:35},end:{line:308,column:48}}],line:308},"41":{loc:{start:{line:312,column:39},end:{line:312,column:88}},type:"binary-expr",locations:[{start:{line:312,column:39},end:{line:312,column:43}},{start:{line:312,column:47},end:{line:312,column:60}},{start:{line:312,column:64},end:{line:312,column:88}}],line:312},"42":{loc:{start:{line:314,column:16},end:{line:320,column:17}},type:"if",locations:[{start:{line:314,column:16},end:{line:320,column:17}},{start:{line:314,column:16},end:{line:320,column:17}}],line:314},"43":{loc:{start:{line:314,column:20},end:{line:314,column:41}},type:"binary-expr",locations:[{start:{line:314,column:20},end:{line:314,column:23}},{start:{line:314,column:27},end:{line:314,column:41}}],line:314},"44":{loc:{start:{line:315,column:29},end:{line:315,column:62}},type:"binary-expr",locations:[{start:{line:315,column:29},end:{line:315,column:32}},{start:{line:315,column:36},end:{line:315,column:62}}],line:315},"45":{loc:{start:{line:343,column:23},end:{line:343,column:48}},type:"binary-expr",locations:[{start:{line:343,column:23},end:{line:343,column:31}},{start:{line:343,column:35},end:{line:343,column:48}}],line:343},"46":{loc:{start:{line:362,column:12},end:{line:384,column:13}},type:"if",locations:[{start:{line:362,column:12},end:{line:384,column:13}},{start:{line:362,column:12},end:{line:384,column:13}}],line:362},"47":{loc:{start:{line:480,column:12},end:{line:482,column:13}},type:"if",locations:[{start:{line:480,column:12},end:{line:482,column:13}},{start:{line:480,column:12},end:{line:482,column:13}}],line:480},"48":{loc:{start:{line:489,column:25},end:{line:489,column:84}},type:"cond-expr",locations:[{start:{line:489,column:52},end:{line:489,column:80}},{start:{line:489,column:83},end:{line:489,column:84}}],line:489},"49":{loc:{start:{line:490,column:25},end:{line:490,column:84}},type:"cond-expr",locations:[{start:{line:490,column:52},end:{line:490,column:80}},{start:{line:490,column:83},end:{line:490,column:84}}],line:490},"50":{loc:{start:{line:491,column:16},end:{line:495,column:17}},type:"if",locations:[{start:{line:491,column:16},end:{line:495,column:17}},{start:{line:491,column:16},end:{line:495,column:17}}],line:491},"51":{loc:{start:{line:493,column:23},end:{line:495,column:17}},type:"if",locations:[{start:{line:493,column:23},end:{line:495,column:17}},{start:{line:493,column:23},end:{line:495,column:17}}],line:493}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0,0],"34":[0,0,0],"35":[0,0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"fd5f0b7b23f537746c3d7dd00af2e95f2c32d2bd"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1uego8sog2=function(){return actualCoverage;};}return actualCoverage;}cov_1uego8sog2();cov_1uego8sog2().s[0]++;/*!*/ // Copyright 2012 Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
(function(){"use strict";cov_1uego8sog2().f[0]++;var Paths=(cov_1uego8sog2().s[1]++,require('./paths').Paths);var Class=(cov_1uego8sog2().s[2]++,require('./jquery.class').Class);var Http=(cov_1uego8sog2().s[3]++,require('./http'));var utils=(cov_1uego8sog2().s[4]++,require('./utils'));var root=(cov_1uego8sog2().s[5]++,(cov_1uego8sog2().b[0][0]++,exports)||(cov_1uego8sog2().b[0][1]++,this));var prefixMap=(cov_1uego8sog2().s[6]++,{"5":"","4.3":"/services/json/v2","default":""});/**
     * An abstraction over the Splunk HTTP-wire protocol that provides the basic
     * functionality for communicating with a Splunk instance over HTTP, handles
     * authentication and authorization, and formats HTTP requests (GET, POST,
     * and DELETE) in the format that Splunk expects.
     *
     * @class splunkjs.Context
     */cov_1uego8sog2().s[7]++;module.exports=root=Class.extend({/**
         * Constructor for `splunkjs.Context`.
         *
         * @constructor
         * @param {splunkjs.Http} http An instance of a `splunkjs.Http` class.
         * @param {Object} params A dictionary of optional parameters:
         *    - `scheme` (_string_): The scheme ("http" or "https") for accessing Splunk.
         *    - `host` (_string_): The host name (the default is "localhost").
         *    - `port` (_integer_): The port number (the default is 8089).
         *    - `username` (_string_): The Splunk account username, which is used to authenticate the Splunk instance.
         *    - `password` (_string_): The password, which is used to authenticate the Splunk instance.
         *    - `owner` (_string_): The owner (username) component of the namespace.
         *    - `app` (_string_): The app component of the namespace.
         *    - `sessionKey` (_string_): The current session token.
         *    - `autologin` (_boolean_): `true` to automatically try to log in again if the session terminates, `false` if not (`true` by default).
         *    - 'timeout' (_integer): The connection timeout in milliseconds. ('0' by default).
         *    - `version` (_string_): The version string for Splunk, for example "4.3.2" (the default is "5.0").
         * @return {splunkjs.Context} A new `splunkjs.Context` instance.
         *
         * @method splunkjs.Context
         */init:function(http,params){cov_1uego8sog2().f[1]++;cov_1uego8sog2().s[8]++;if((cov_1uego8sog2().b[2][0]++,!(http instanceof Http))&&(cov_1uego8sog2().b[2][1]++,!params)){cov_1uego8sog2().b[1][0]++;cov_1uego8sog2().s[9]++;// Move over the params
params=http;cov_1uego8sog2().s[10]++;http=null;}else{cov_1uego8sog2().b[1][1]++;}cov_1uego8sog2().s[11]++;params=(cov_1uego8sog2().b[3][0]++,params)||(cov_1uego8sog2().b[3][1]++,{});cov_1uego8sog2().s[12]++;this.scheme=(cov_1uego8sog2().b[4][0]++,params.scheme)||(cov_1uego8sog2().b[4][1]++,"https");cov_1uego8sog2().s[13]++;this.host=(cov_1uego8sog2().b[5][0]++,params.host)||(cov_1uego8sog2().b[5][1]++,"localhost");cov_1uego8sog2().s[14]++;this.port=(cov_1uego8sog2().b[6][0]++,params.port)||(cov_1uego8sog2().b[6][1]++,8089);cov_1uego8sog2().s[15]++;this.username=(cov_1uego8sog2().b[7][0]++,params.username)||(cov_1uego8sog2().b[7][1]++,null);cov_1uego8sog2().s[16]++;this.password=(cov_1uego8sog2().b[8][0]++,params.password)||(cov_1uego8sog2().b[8][1]++,null);cov_1uego8sog2().s[17]++;this.owner=params.owner;cov_1uego8sog2().s[18]++;this.app=params.app;cov_1uego8sog2().s[19]++;this.sessionKey=(cov_1uego8sog2().b[9][0]++,params.sessionKey)||(cov_1uego8sog2().b[9][1]++,"");cov_1uego8sog2().s[20]++;this.authorization=(cov_1uego8sog2().b[10][0]++,params.authorization)||(cov_1uego8sog2().b[10][1]++,"Splunk");cov_1uego8sog2().s[21]++;this.paths=(cov_1uego8sog2().b[11][0]++,params.paths)||(cov_1uego8sog2().b[11][1]++,Paths);cov_1uego8sog2().s[22]++;this.version=(cov_1uego8sog2().b[12][0]++,params.version)||(cov_1uego8sog2().b[12][1]++,"default");cov_1uego8sog2().s[23]++;this.timeout=(cov_1uego8sog2().b[13][0]++,params.timeout)||(cov_1uego8sog2().b[13][1]++,0);cov_1uego8sog2().s[24]++;this.autologin=true;// Initialize autologin
// The reason we explicitly check to see if 'autologin'
// is actually set is because we need to distinguish the
// case of it being set to 'false', and it not being set.
// Unfortunately, in JavaScript, these are both false-y
cov_1uego8sog2().s[25]++;if(params.hasOwnProperty("autologin")){cov_1uego8sog2().b[14][0]++;cov_1uego8sog2().s[26]++;this.autologin=params.autologin;}else{cov_1uego8sog2().b[14][1]++;}cov_1uego8sog2().s[27]++;if(!http){cov_1uego8sog2().b[15][0]++;cov_1uego8sog2().s[28]++;// If there is no HTTP implementation set, we check what platform
// we're running on. If we're running in the browser, then complain,
// else, we instantiate NodeHttp.
if(typeof window!=='undefined'){cov_1uego8sog2().b[16][0]++;cov_1uego8sog2().s[29]++;throw new Error("Http instance required when creating a Context within a browser.");}else{cov_1uego8sog2().b[16][1]++;var NodeHttp=(cov_1uego8sog2().s[30]++,require('./platform/node/node_http').NodeHttp);cov_1uego8sog2().s[31]++;http=new NodeHttp();}}else{cov_1uego8sog2().b[15][1]++;}// Store the HTTP implementation
cov_1uego8sog2().s[32]++;this.http=http;cov_1uego8sog2().s[33]++;this.http._setSplunkVersion(this.version);// Store our full prefix, which is just combining together
// the scheme with the host
var versionPrefix=(cov_1uego8sog2().s[34]++,utils.getWithVersion(this.version,prefixMap));cov_1uego8sog2().s[35]++;this.prefix=this.scheme+"://"+this.host+":"+this.port+versionPrefix;// We perform the bindings so that every function works
// properly when it is passed as a callback.
cov_1uego8sog2().s[36]++;this._headers=utils.bind(this,this._headers);cov_1uego8sog2().s[37]++;this.fullpath=utils.bind(this,this.fullpath);cov_1uego8sog2().s[38]++;this.urlify=utils.bind(this,this.urlify);cov_1uego8sog2().s[39]++;this.get=utils.bind(this,this.get);cov_1uego8sog2().s[40]++;this.del=utils.bind(this,this.del);cov_1uego8sog2().s[41]++;this.post=utils.bind(this,this.post);cov_1uego8sog2().s[42]++;this.login=utils.bind(this,this.login);cov_1uego8sog2().s[43]++;this._shouldAutoLogin=utils.bind(this,this._shouldAutoLogin);cov_1uego8sog2().s[44]++;this._requestWrapper=utils.bind(this,this._requestWrapper);},/**
         * Appends Splunk-specific headers.
         *
         * @param {Object} headers A dictionary of headers (optional).
         * @return {Object} An augmented dictionary of headers.
         *
         * @method splunkjs.Context
         * @private
         */_headers:function(headers){cov_1uego8sog2().f[2]++;cov_1uego8sog2().s[45]++;headers=(cov_1uego8sog2().b[17][0]++,headers)||(cov_1uego8sog2().b[17][1]++,{});cov_1uego8sog2().s[46]++;if(this.sessionKey){cov_1uego8sog2().b[18][0]++;cov_1uego8sog2().s[47]++;headers["Authorization"]=this.authorization+" "+this.sessionKey;}else{cov_1uego8sog2().b[18][1]++;}cov_1uego8sog2().s[48]++;return headers;},/*!*/_shouldAutoLogin:function(){cov_1uego8sog2().f[3]++;cov_1uego8sog2().s[49]++;return(cov_1uego8sog2().b[19][0]++,this.username)&&(cov_1uego8sog2().b[19][1]++,this.password)&&(cov_1uego8sog2().b[19][2]++,this.autologin);},/*!*/ /**
         * This internal function aids with the autologin feature.
         * It takes two parameters: `task`, which is a function describing an
         * HTTP request, and `callback`, to be invoked when all is said
         * and done.
         *
         * @param  {Function} task A function taking a single argument: `(callback)`.
         * @param  {Function} callback The function to call when the request is complete: `(err, response)`.
         */_requestWrapper:function(task,callback){cov_1uego8sog2().f[4]++;cov_1uego8sog2().s[50]++;callback=(cov_1uego8sog2().b[20][0]++,callback)||(cov_1uego8sog2().b[20][1]++,function(){cov_1uego8sog2().f[5]++;});var that=(cov_1uego8sog2().s[51]++,this);var req=(cov_1uego8sog2().s[52]++,null);// This is the callback that will be invoked
// if we are currently logged in but our session key
// expired (i.e. we get a 401 response from the server).
// We will only retry once.
cov_1uego8sog2().s[53]++;var reloginIfNecessary=function(err){cov_1uego8sog2().f[6]++;cov_1uego8sog2().s[54]++;// If we aborted, ignore it
if(req.wasAborted){cov_1uego8sog2().b[21][0]++;cov_1uego8sog2().s[55]++;return;}else{cov_1uego8sog2().b[21][1]++;}cov_1uego8sog2().s[56]++;if((cov_1uego8sog2().b[23][0]++,err)&&(cov_1uego8sog2().b[23][1]++,err.status===401)&&(cov_1uego8sog2().b[23][2]++,that._shouldAutoLogin())){cov_1uego8sog2().b[22][0]++;cov_1uego8sog2().s[57]++;// If we had an authorization error, we'll try and login
// again, but only once
that.sessionKey=null;cov_1uego8sog2().s[58]++;that.login(function(err,success){cov_1uego8sog2().f[7]++;cov_1uego8sog2().s[59]++;// If we've already aborted the request,
// just do nothing
if(req.wasAborted){cov_1uego8sog2().b[24][0]++;cov_1uego8sog2().s[60]++;return;}else{cov_1uego8sog2().b[24][1]++;}cov_1uego8sog2().s[61]++;if(err){cov_1uego8sog2().b[25][0]++;cov_1uego8sog2().s[62]++;// If there was an error logging in, send it through
callback(err);}else{cov_1uego8sog2().b[25][1]++;cov_1uego8sog2().s[63]++;// Relogging in was successful, so we execute
// our task again.
task(callback);}});}else{cov_1uego8sog2().b[22][1]++;cov_1uego8sog2().s[64]++;callback.apply(null,arguments);}};cov_1uego8sog2().s[65]++;if((cov_1uego8sog2().b[27][0]++,!this._shouldAutoLogin())||(cov_1uego8sog2().b[27][1]++,this.sessionKey)){cov_1uego8sog2().b[26][0]++;cov_1uego8sog2().s[66]++;// Since we are not auto-logging in, just execute our task,
// but intercept any 401s so we can login then
req=task(reloginIfNecessary);cov_1uego8sog2().s[67]++;return req;}else{cov_1uego8sog2().b[26][1]++;}// OK, so we know that we should try and autologin,
// so we try and login, and if we succeed, execute
// the original task
cov_1uego8sog2().s[68]++;req=this.login(function(err,success){cov_1uego8sog2().f[8]++;cov_1uego8sog2().s[69]++;// If we've already aborted the request,
// just do nothing
if(req.wasAborted){cov_1uego8sog2().b[28][0]++;cov_1uego8sog2().s[70]++;return;}else{cov_1uego8sog2().b[28][1]++;}cov_1uego8sog2().s[71]++;if(err){cov_1uego8sog2().b[29][0]++;cov_1uego8sog2().s[72]++;// If there was an error logging in, send it through
callback(err);}else{cov_1uego8sog2().b[29][1]++;cov_1uego8sog2().s[73]++;// Logging in was successful, so we execute
// our task.
task(callback);}});cov_1uego8sog2().s[74]++;return req;},/**
         * Converts a partial path to a fully-qualified path to a REST endpoint,
         * and if necessary includes the namespace owner and app.
         *
         * @param {String} path The partial path.
         * @param {String} namespace The namespace, in the format "_owner_/_app_".
         * @return {String} The fully-qualified path.
         *
         * @method splunkjs.Context
         */fullpath:function(path,namespace){cov_1uego8sog2().f[9]++;cov_1uego8sog2().s[75]++;namespace=(cov_1uego8sog2().b[30][0]++,namespace)||(cov_1uego8sog2().b[30][1]++,{});cov_1uego8sog2().s[76]++;if(utils.startsWith(path,"/")){cov_1uego8sog2().b[31][0]++;cov_1uego8sog2().s[77]++;return path;}else{cov_1uego8sog2().b[31][1]++;}// If we don't have an app name (explicitly or implicitly), we default to /services/
cov_1uego8sog2().s[78]++;if((cov_1uego8sog2().b[33][0]++,!namespace.app)&&(cov_1uego8sog2().b[33][1]++,!this.app)&&(cov_1uego8sog2().b[33][2]++,namespace.sharing!==root.Sharing.SYSTEM)){cov_1uego8sog2().b[32][0]++;cov_1uego8sog2().s[79]++;return"/services/"+path;}else{cov_1uego8sog2().b[32][1]++;}// Get the app and owner, first from the passed in namespace, then the service,
// finally defaulting to wild cards
var owner=(cov_1uego8sog2().s[80]++,(cov_1uego8sog2().b[34][0]++,namespace.owner)||(cov_1uego8sog2().b[34][1]++,this.owner)||(cov_1uego8sog2().b[34][2]++,"-"));var app=(cov_1uego8sog2().s[81]++,(cov_1uego8sog2().b[35][0]++,namespace.app)||(cov_1uego8sog2().b[35][1]++,this.app)||(cov_1uego8sog2().b[35][2]++,"-"));cov_1uego8sog2().s[82]++;namespace.sharing=((cov_1uego8sog2().b[36][0]++,namespace.sharing)||(cov_1uego8sog2().b[36][1]++,"")).toLowerCase();// Modify the owner and app appropriately based on the sharing parameter
cov_1uego8sog2().s[83]++;if((cov_1uego8sog2().b[38][0]++,namespace.sharing===root.Sharing.APP)||(cov_1uego8sog2().b[38][1]++,namespace.sharing===root.Sharing.GLOBAL)){cov_1uego8sog2().b[37][0]++;cov_1uego8sog2().s[84]++;owner="nobody";}else{cov_1uego8sog2().b[37][1]++;cov_1uego8sog2().s[85]++;if(namespace.sharing===root.Sharing.SYSTEM){cov_1uego8sog2().b[39][0]++;cov_1uego8sog2().s[86]++;owner="nobody";cov_1uego8sog2().s[87]++;app="system";}else{cov_1uego8sog2().b[39][1]++;}}cov_1uego8sog2().s[88]++;return utils.trim("/servicesNS/"+encodeURIComponent(owner)+"/"+encodeURIComponent(app)+"/"+path);},/**
         * Converts a partial path to a fully-qualified URL.
         *
         * @param {String} path The partial path.
         * @return {String} The fully-qualified URL.
         *
         * @method splunkjs.Context
         * @private
         */urlify:function(path){cov_1uego8sog2().f[10]++;cov_1uego8sog2().s[89]++;return this.prefix+this.fullpath(path);},/**
         * Authenticates and logs in to a Splunk instance, then stores the
         * resulting session key.
         *
         * @param {Function} callback The function to call when login has finished: `(err, wasSuccessful)`.
         *
         * @method splunkjs.Context
         * @private
         */login:function(callback){cov_1uego8sog2().f[11]++;var that=(cov_1uego8sog2().s[90]++,this);var url=(cov_1uego8sog2().s[91]++,this.paths.login);var params=(cov_1uego8sog2().s[92]++,{username:this.username,password:this.password,cookie:'1'});cov_1uego8sog2().s[93]++;callback=(cov_1uego8sog2().b[40][0]++,callback)||(cov_1uego8sog2().b[40][1]++,function(){cov_1uego8sog2().f[12]++;});cov_1uego8sog2().s[94]++;var wrappedCallback=function(err,response){cov_1uego8sog2().f[13]++;// Let's make sure that not only did the request succeed, but
// we actually got a non-empty session key back.
var hasSessionKey=(cov_1uego8sog2().s[95]++,!!((cov_1uego8sog2().b[41][0]++,!err)&&(cov_1uego8sog2().b[41][1]++,response.data)&&(cov_1uego8sog2().b[41][2]++,response.data.sessionKey)));cov_1uego8sog2().s[96]++;if((cov_1uego8sog2().b[43][0]++,err)||(cov_1uego8sog2().b[43][1]++,!hasSessionKey)){cov_1uego8sog2().b[42][0]++;cov_1uego8sog2().s[97]++;callback((cov_1uego8sog2().b[44][0]++,err)||(cov_1uego8sog2().b[44][1]++,"No session key available"),false);}else{cov_1uego8sog2().b[42][1]++;cov_1uego8sog2().s[98]++;that.sessionKey=response.data.sessionKey;cov_1uego8sog2().s[99]++;callback(null,true);}};cov_1uego8sog2().s[100]++;return this.http.post(this.urlify(url),this._headers(),params,this.timeout,wrappedCallback);},/**
         * Logs the session out resulting in the removal of all cookies and the
         * session key.
         *
         * @param {Function} callback The function to call when logout has finished: `()`.
         *
         * @method splunkjs.Context
         * @private
         */logout:function(callback){cov_1uego8sog2().f[14]++;cov_1uego8sog2().s[101]++;callback=(cov_1uego8sog2().b[45][0]++,callback)||(cov_1uego8sog2().b[45][1]++,function(){cov_1uego8sog2().f[15]++;});cov_1uego8sog2().s[102]++;this.sessionKey=null;cov_1uego8sog2().s[103]++;this.http._cookieStore={};cov_1uego8sog2().s[104]++;callback();},/**
         * Performs a GET request.
         *
         * @param {String} path The REST endpoint path of the GET request.
         * @param {Object} params The entity-specific parameters for this request.
         * @param {Function} callback The function to call when the request is complete: `(err, response)`.
         *
         * @method splunkjs.Context
         */get:function(path,params,callback,isAsync){cov_1uego8sog2().f[16]++;var that=(cov_1uego8sog2().s[105]++,this);cov_1uego8sog2().s[106]++;if(isAsync){cov_1uego8sog2().b[46][0]++;cov_1uego8sog2().s[107]++;return that.http.get(that.urlify(path),that._headers(),params,that.timeout,null,true);}else{cov_1uego8sog2().b[46][1]++;cov_1uego8sog2().s[108]++;var request=function(callback){cov_1uego8sog2().f[17]++;cov_1uego8sog2().s[109]++;return that.http.get(that.urlify(path),that._headers(),params,that.timeout,callback);};cov_1uego8sog2().s[110]++;return this._requestWrapper(request,callback);}},/**
         * Performs a DELETE request.
         *
         * @param {String} path The REST endpoint path of the DELETE request.
         * @param {Object} params The entity-specific parameters for this request.
         * @param {Function} callback The function to call when the request is complete: `(err, response)`.
         *
         * @method splunkjs.Context
         */del:function(path,params,callback){cov_1uego8sog2().f[18]++;var that=(cov_1uego8sog2().s[111]++,this);cov_1uego8sog2().s[112]++;var request=function(callback){cov_1uego8sog2().f[19]++;cov_1uego8sog2().s[113]++;return that.http.del(that.urlify(path),that._headers(),params,that.timeout,callback);};cov_1uego8sog2().s[114]++;return this._requestWrapper(request,callback);},/**
         * Performs a POST request.
         *
         * @param {String} path The REST endpoint path of the POST request.
         * @param {Object} params The entity-specific parameters for this request.
         * @param {Function} callback The function to call when the request is complete: `(err, response)`.
         *
         * @method splunkjs.Context
         */post:function(path,params,callback){cov_1uego8sog2().f[20]++;var that=(cov_1uego8sog2().s[115]++,this);cov_1uego8sog2().s[116]++;var request=function(callback){cov_1uego8sog2().f[21]++;cov_1uego8sog2().s[117]++;return that.http.post(that.urlify(path),that._headers(),params,that.timeout,callback);};cov_1uego8sog2().s[118]++;return this._requestWrapper(request,callback);},/**
         * Issues an arbitrary HTTP request to the REST endpoint path segment.
         *
         * @param {String} path The REST endpoint path segment (with any query parameters already appended and encoded).
         * @param {String} method The HTTP method (can be `GET`, `POST`, or `DELETE`).
         * @param {Object} query The entity-specific parameters for this request.
         * @param {Object} post A dictionary of POST argument that will get form encoded.
         * @param {Object} body The body of the request, mutually exclusive with `post`.
         * @param {Object} headers Headers for this request.
         * @param {Function} callback The function to call when the request is complete: `(err, response)`.
         *
         * @method splunkjs.Context
         */request:function(path,method,query,post,body,headers,callback){cov_1uego8sog2().f[22]++;var that=(cov_1uego8sog2().s[119]++,this);cov_1uego8sog2().s[120]++;var request=function(callback){cov_1uego8sog2().f[23]++;cov_1uego8sog2().s[121]++;return that.http.request(that.urlify(path),{method:method,headers:that._headers(headers),query:query,post:post,body:body,timeout:that.timeout},callback);};cov_1uego8sog2().s[122]++;return this._requestWrapper(request,callback);},/**
         * Compares the Splunk server's version to the specified version string.
         * Returns -1 if (this.version <  otherVersion),
         *          0 if (this.version == otherVersion),
         *          1 if (this.version >  otherVersion).
         *
         * @param {String} otherVersion The other version string, for example "5.0".
         *
         * @method splunkjs.Context
         */versionCompare:function(otherVersion){cov_1uego8sog2().f[24]++;var thisVersion=(cov_1uego8sog2().s[123]++,this.version);cov_1uego8sog2().s[124]++;if(thisVersion==="default"){cov_1uego8sog2().b[47][0]++;cov_1uego8sog2().s[125]++;thisVersion="5.0";}else{cov_1uego8sog2().b[47][1]++;}var components1=(cov_1uego8sog2().s[126]++,thisVersion.split("."));var components2=(cov_1uego8sog2().s[127]++,otherVersion.split("."));var numComponents=(cov_1uego8sog2().s[128]++,Math.max(components1.length,components2.length));cov_1uego8sog2().s[129]++;for(var i=(cov_1uego8sog2().s[130]++,0);i<numComponents;i++){var c1=(cov_1uego8sog2().s[131]++,i<components1.length?(cov_1uego8sog2().b[48][0]++,parseInt(components1[i],10)):(cov_1uego8sog2().b[48][1]++,0));var c2=(cov_1uego8sog2().s[132]++,i<components2.length?(cov_1uego8sog2().b[49][0]++,parseInt(components2[i],10)):(cov_1uego8sog2().b[49][1]++,0));cov_1uego8sog2().s[133]++;if(c1<c2){cov_1uego8sog2().b[50][0]++;cov_1uego8sog2().s[134]++;return-1;}else{cov_1uego8sog2().b[50][1]++;cov_1uego8sog2().s[135]++;if(c1>c2){cov_1uego8sog2().b[51][0]++;cov_1uego8sog2().s[136]++;return 1;}else{cov_1uego8sog2().b[51][1]++;}}}cov_1uego8sog2().s[137]++;return 0;}});/*!*/cov_1uego8sog2().s[138]++;root.Sharing={USER:"user",APP:"app",GLOBAL:"global",SYSTEM:"system"};})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,