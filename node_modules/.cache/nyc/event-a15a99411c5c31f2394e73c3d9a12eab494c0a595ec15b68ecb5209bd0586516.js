function cov_21bv9sx4zb(){var path="/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/event.js";var hash="63ac535b06f2677cc20d693bf23365ed645d7fd3";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/event.js",statementMap:{"0":{start:{line:16,column:0},end:{line:194,column:5}},"1":{start:{line:17,column:18},end:{line:17,column:40}},"2":{start:{line:18,column:18},end:{line:18,column:36}},"3":{start:{line:50,column:8},end:{line:50,column:72}},"4":{start:{line:52,column:8},end:{line:52,column:82}},"5":{start:{line:53,column:8},end:{line:53,column:82}},"6":{start:{line:54,column:8},end:{line:54,column:82}},"7":{start:{line:55,column:8},end:{line:55,column:85}},"8":{start:{line:56,column:8},end:{line:56,column:88}},"9":{start:{line:57,column:8},end:{line:57,column:100}},"10":{start:{line:58,column:8},end:{line:58,column:88}},"11":{start:{line:59,column:8},end:{line:59,column:94}},"12":{start:{line:62,column:8},end:{line:62,column:82}},"13":{start:{line:90,column:4},end:{line:135,column:6}},"14":{start:{line:94,column:8},end:{line:96,column:9}},"15":{start:{line:95,column:12},end:{line:95,column:34}},"16":{start:{line:98,column:8},end:{line:100,column:9}},"17":{start:{line:99,column:12},end:{line:99,column:24}},"18":{start:{line:103,column:8},end:{line:133,column:9}},"19":{start:{line:104,column:12},end:{line:104,column:47}},"20":{start:{line:107,column:12},end:{line:117,column:13}},"21":{start:{line:108,column:16},end:{line:108,column:83}},"22":{start:{line:111,column:17},end:{line:117,column:13}},"23":{start:{line:112,column:16},end:{line:112,column:56}},"24":{start:{line:116,column:16},end:{line:116,column:90}},"25":{start:{line:122,column:12},end:{line:132,column:13}},"26":{start:{line:123,column:16},end:{line:123,column:63}},"27":{start:{line:126,column:17},end:{line:132,column:13}},"28":{start:{line:127,column:16},end:{line:127,column:56}},"29":{start:{line:131,column:16},end:{line:131,column:89}},"30":{start:{line:134,column:8},end:{line:134,column:25}},"31":{start:{line:147,column:4},end:{line:191,column:6}},"32":{start:{line:148,column:8},end:{line:150,column:9}},"33":{start:{line:149,column:12},end:{line:149,column:98}},"34":{start:{line:152,column:23},end:{line:152,column:42}},"35":{start:{line:154,column:8},end:{line:156,column:9}},"36":{start:{line:155,column:12},end:{line:155,column:48}},"37":{start:{line:158,column:8},end:{line:158,column:62}},"38":{start:{line:160,column:8},end:{line:162,column:9}},"39":{start:{line:161,column:12},end:{line:161,column:90}},"40":{start:{line:165,column:8},end:{line:167,column:9}},"41":{start:{line:166,column:12},end:{line:166,column:50}},"42":{start:{line:169,column:26},end:{line:175,column:9}},"43":{start:{line:176,column:8},end:{line:181,column:9}},"44":{start:{line:176,column:21},end:{line:176,column:22}},"45":{start:{line:177,column:23},end:{line:177,column:37}},"46":{start:{line:178,column:12},end:{line:180,column:13}},"47":{start:{line:179,column:16},end:{line:179,column:67}},"48":{start:{line:183,column:8},end:{line:185,column:9}},"49":{start:{line:184,column:12},end:{line:184,column:44}},"50":{start:{line:187,column:26},end:{line:187,column:75}},"51":{start:{line:190,column:8},end:{line:190,column:34}},"52":{start:{line:193,column:4},end:{line:193,column:27}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:12},end:{line:194,column:1}},line:16},"1":{name:"Event",decl:{start:{line:49,column:13},end:{line:49,column:18}},loc:{start:{line:49,column:32},end:{line:63,column:5}},line:49},"2":{name:"(anonymous_2)",decl:{start:{line:90,column:23},end:{line:90,column:24}},loc:{start:{line:90,column:38},end:{line:135,column:5}},line:90},"3":{name:"(anonymous_3)",decl:{start:{line:147,column:31},end:{line:147,column:32}},loc:{start:{line:147,column:48},end:{line:191,column:5}},line:147}},branchMap:{"0":{loc:{start:{line:50,column:22},end:{line:50,column:71}},type:"cond-expr",locations:[{start:{line:50,column:55},end:{line:50,column:57}},{start:{line:50,column:60},end:{line:50,column:71}}],line:50},"1":{loc:{start:{line:52,column:20},end:{line:52,column:81}},type:"cond-expr",locations:[{start:{line:52,column:58},end:{line:52,column:62}},{start:{line:52,column:65},end:{line:52,column:81}}],line:52},"2":{loc:{start:{line:53,column:20},end:{line:53,column:81}},type:"cond-expr",locations:[{start:{line:53,column:58},end:{line:53,column:62}},{start:{line:53,column:65},end:{line:53,column:81}}],line:53},"3":{loc:{start:{line:54,column:20},end:{line:54,column:81}},type:"cond-expr",locations:[{start:{line:54,column:58},end:{line:54,column:62}},{start:{line:54,column:65},end:{line:54,column:81}}],line:54},"4":{loc:{start:{line:55,column:21},end:{line:55,column:84}},type:"cond-expr",locations:[{start:{line:55,column:60},end:{line:55,column:64}},{start:{line:55,column:67},end:{line:55,column:84}}],line:55},"5":{loc:{start:{line:56,column:22},end:{line:56,column:87}},type:"cond-expr",locations:[{start:{line:56,column:62},end:{line:56,column:66}},{start:{line:56,column:69},end:{line:56,column:87}}],line:56},"6":{loc:{start:{line:57,column:26},end:{line:57,column:99}},type:"cond-expr",locations:[{start:{line:57,column:70},end:{line:57,column:74}},{start:{line:57,column:77},end:{line:57,column:99}}],line:57},"7":{loc:{start:{line:58,column:22},end:{line:58,column:87}},type:"cond-expr",locations:[{start:{line:58,column:62},end:{line:58,column:66}},{start:{line:58,column:69},end:{line:58,column:87}}],line:58},"8":{loc:{start:{line:59,column:24},end:{line:59,column:93}},type:"cond-expr",locations:[{start:{line:59,column:66},end:{line:59,column:70}},{start:{line:59,column:73},end:{line:59,column:93}}],line:59},"9":{loc:{start:{line:62,column:20},end:{line:62,column:81}},type:"cond-expr",locations:[{start:{line:62,column:58},end:{line:62,column:62}},{start:{line:62,column:65},end:{line:62,column:81}}],line:62},"10":{loc:{start:{line:94,column:8},end:{line:96,column:9}},type:"if",locations:[{start:{line:94,column:8},end:{line:96,column:9}},{start:{line:94,column:8},end:{line:96,column:9}}],line:94},"11":{loc:{start:{line:98,column:8},end:{line:100,column:9}},type:"if",locations:[{start:{line:98,column:8},end:{line:100,column:9}},{start:{line:98,column:8},end:{line:100,column:9}}],line:98},"12":{loc:{start:{line:98,column:12},end:{line:98,column:34}},type:"binary-expr",locations:[{start:{line:98,column:12},end:{line:98,column:17}},{start:{line:98,column:21},end:{line:98,column:34}}],line:98},"13":{loc:{start:{line:103,column:8},end:{line:133,column:9}},type:"if",locations:[{start:{line:103,column:8},end:{line:133,column:9}},{start:{line:103,column:8},end:{line:133,column:9}}],line:103},"14":{loc:{start:{line:107,column:12},end:{line:117,column:13}},type:"if",locations:[{start:{line:107,column:12},end:{line:117,column:13}},{start:{line:107,column:12},end:{line:117,column:13}}],line:107},"15":{loc:{start:{line:111,column:17},end:{line:117,column:13}},type:"if",locations:[{start:{line:111,column:17},end:{line:117,column:13}},{start:{line:111,column:17},end:{line:117,column:13}}],line:111},"16":{loc:{start:{line:111,column:21},end:{line:111,column:86}},type:"binary-expr",locations:[{start:{line:111,column:21},end:{line:111,column:49}},{start:{line:111,column:53},end:{line:111,column:86}}],line:111},"17":{loc:{start:{line:122,column:12},end:{line:132,column:13}},type:"if",locations:[{start:{line:122,column:12},end:{line:132,column:13}},{start:{line:122,column:12},end:{line:132,column:13}}],line:122},"18":{loc:{start:{line:126,column:17},end:{line:132,column:13}},type:"if",locations:[{start:{line:126,column:17},end:{line:132,column:13}},{start:{line:126,column:17},end:{line:132,column:13}}],line:126},"19":{loc:{start:{line:148,column:8},end:{line:150,column:9}},type:"if",locations:[{start:{line:148,column:8},end:{line:150,column:9}},{start:{line:148,column:8},end:{line:150,column:9}}],line:148},"20":{loc:{start:{line:154,column:8},end:{line:156,column:9}},type:"if",locations:[{start:{line:154,column:8},end:{line:156,column:9}},{start:{line:154,column:8},end:{line:156,column:9}}],line:154},"21":{loc:{start:{line:160,column:8},end:{line:162,column:9}},type:"if",locations:[{start:{line:160,column:8},end:{line:162,column:9}},{start:{line:160,column:8},end:{line:162,column:9}}],line:160},"22":{loc:{start:{line:160,column:12},end:{line:160,column:63}},type:"binary-expr",locations:[{start:{line:160,column:12},end:{line:160,column:41}},{start:{line:160,column:45},end:{line:160,column:63}}],line:160},"23":{loc:{start:{line:165,column:8},end:{line:167,column:9}},type:"if",locations:[{start:{line:165,column:8},end:{line:167,column:9}},{start:{line:165,column:8},end:{line:167,column:9}}],line:165},"24":{loc:{start:{line:178,column:12},end:{line:180,column:13}},type:"if",locations:[{start:{line:178,column:12},end:{line:180,column:13}},{start:{line:178,column:12},end:{line:180,column:13}}],line:178},"25":{loc:{start:{line:183,column:8},end:{line:185,column:9}},type:"if",locations:[{start:{line:183,column:8},end:{line:185,column:9}},{start:{line:183,column:8},end:{line:185,column:9}}],line:183},"26":{loc:{start:{line:183,column:12},end:{line:183,column:54}},type:"binary-expr",locations:[{start:{line:183,column:12},end:{line:183,column:21}},{start:{line:183,column:25},end:{line:183,column:54}}],line:183}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"63ac535b06f2677cc20d693bf23365ed645d7fd3"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_21bv9sx4zb=function(){return actualCoverage;};}return actualCoverage;}cov_21bv9sx4zb();cov_21bv9sx4zb().s[0]++;/*!*/ // Copyright 2014 Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
(function(){cov_21bv9sx4zb().f[0]++;var ET=(cov_21bv9sx4zb().s[1]++,require("elementtree"));var utils=(cov_21bv9sx4zb().s[2]++,require("./utils"));/**
     * `Event` represents an event or fragment of an event to be written by this
     * modular input to Splunk.
     *
     * @example
     *      
     *      // Minimal configuration
     *      var myEvent =  new Event({
     *          data: "This is a test of my new event.",
     *          stanza: "myStanzaName",
     *          time: parseFloat("1372187084.000")
     *      });
     *
     *      // Full configuration
     *      var myBetterEvent =  new Event({
     *          data: "This is a test of my better event.",
     *          stanza: "myStanzaName",
     *          time: parseFloat("1372187084.000"),
     *          host: "localhost",
     *          index: "main",
     *          source: "Splunk",
     *          sourcetype: "misc",
     *          done: true,
     *          unbroken: true
     *      });
     *
     * @param {Object} eventConfig An object containing the configuration for an `Event`.
     * @class splunkjs.ModularInputs.Event
     */function Event(eventConfig){cov_21bv9sx4zb().f[1]++;cov_21bv9sx4zb().s[3]++;eventConfig=utils.isUndefined(eventConfig)?(cov_21bv9sx4zb().b[0][0]++,{}):(cov_21bv9sx4zb().b[0][1]++,eventConfig);cov_21bv9sx4zb().s[4]++;this.data=utils.isUndefined(eventConfig.data)?(cov_21bv9sx4zb().b[1][0]++,null):(cov_21bv9sx4zb().b[1][1]++,eventConfig.data);cov_21bv9sx4zb().s[5]++;this.done=utils.isUndefined(eventConfig.done)?(cov_21bv9sx4zb().b[2][0]++,true):(cov_21bv9sx4zb().b[2][1]++,eventConfig.done);cov_21bv9sx4zb().s[6]++;this.host=utils.isUndefined(eventConfig.host)?(cov_21bv9sx4zb().b[3][0]++,null):(cov_21bv9sx4zb().b[3][1]++,eventConfig.host);cov_21bv9sx4zb().s[7]++;this.index=utils.isUndefined(eventConfig.index)?(cov_21bv9sx4zb().b[4][0]++,null):(cov_21bv9sx4zb().b[4][1]++,eventConfig.index);cov_21bv9sx4zb().s[8]++;this.source=utils.isUndefined(eventConfig.source)?(cov_21bv9sx4zb().b[5][0]++,null):(cov_21bv9sx4zb().b[5][1]++,eventConfig.source);cov_21bv9sx4zb().s[9]++;this.sourcetype=utils.isUndefined(eventConfig.sourcetype)?(cov_21bv9sx4zb().b[6][0]++,null):(cov_21bv9sx4zb().b[6][1]++,eventConfig.sourcetype);cov_21bv9sx4zb().s[10]++;this.stanza=utils.isUndefined(eventConfig.stanza)?(cov_21bv9sx4zb().b[7][0]++,null):(cov_21bv9sx4zb().b[7][1]++,eventConfig.stanza);cov_21bv9sx4zb().s[11]++;this.unbroken=utils.isUndefined(eventConfig.unbroken)?(cov_21bv9sx4zb().b[8][0]++,true):(cov_21bv9sx4zb().b[8][1]++,eventConfig.unbroken);// eventConfig.time can be of type Date, Number, or String.
cov_21bv9sx4zb().s[12]++;this.time=utils.isUndefined(eventConfig.time)?(cov_21bv9sx4zb().b[9][0]++,null):(cov_21bv9sx4zb().b[9][1]++,eventConfig.time);}/** 
    * Formats a time for Splunk, should be something like `1372187084.000`.
    *
    * @example
    *
    *   // When the time parameter is a string.
    *   var stringTime = "1372187084";
    *   var stringTimeFormatted = Event.formatTime(stringTime);
    *
    *   // When the time parameter is a number, no decimals.
    *   var numericalTime = 1372187084;
    *   var numericalTimeFormatted = Event.formatTime(numericalTime);
    *
    *   // When the time parameter is a number, with decimals.
    *   var decimalTime = 1372187084.424;
    *   var decimalTimeFormatted = Event.formatTime(decimalTime);
    *
    *   // When the time parameter is a Date object.
    *   var dateObjectTime = Date.now();
    *   var dateObjectTimeFormatted = Event.formatTime(dateObjectTime);
    *
    * @param {Anything} time The unformatted time in seconds or milliseconds, typically a String, Number, or `Date` Object.
    * @return {Number} The formatted time in seconds.
    * @function splunkjs.ModularInputs.Event
    */cov_21bv9sx4zb().s[13]++;Event.formatTime=function(time){cov_21bv9sx4zb().f[2]++;var cleanTime;// If time is a Date object, return its value.
cov_21bv9sx4zb().s[14]++;if(time instanceof Date){cov_21bv9sx4zb().b[10][0]++;cov_21bv9sx4zb().s[15]++;time=time.valueOf();}else{cov_21bv9sx4zb().b[10][1]++;}cov_21bv9sx4zb().s[16]++;if((cov_21bv9sx4zb().b[12][0]++,!time)||(cov_21bv9sx4zb().b[12][1]++,time===null)){cov_21bv9sx4zb().b[11][0]++;cov_21bv9sx4zb().s[17]++;return null;}else{cov_21bv9sx4zb().b[11][1]++;}// Values with decimals
cov_21bv9sx4zb().s[18]++;if(time.toString().indexOf(".")!==-1){cov_21bv9sx4zb().b[13][0]++;cov_21bv9sx4zb().s[19]++;time=parseFloat(time).toFixed(3);// Clean up the extra decimals right away.
// A perfect time in milliseconds, with the decimal in the right spot.
cov_21bv9sx4zb().s[20]++;if(time.toString().indexOf(".")>=10){cov_21bv9sx4zb().b[14][0]++;cov_21bv9sx4zb().s[21]++;cleanTime=parseFloat(time.toString().substring(0,14)).toFixed(3);}// A time with fewer than expected digits, or with a decimal too far to the left.
else{cov_21bv9sx4zb().b[14][1]++;cov_21bv9sx4zb().s[22]++;if((cov_21bv9sx4zb().b[16][0]++,time.toString().length<=13)||(cov_21bv9sx4zb().b[16][1]++,time.toString().indexOf(".")<10)){cov_21bv9sx4zb().b[15][0]++;cov_21bv9sx4zb().s[23]++;cleanTime=parseFloat(time).toFixed(3);}// Any other value has more digits than the expected time format, get the first 15.
else{cov_21bv9sx4zb().b[15][1]++;cov_21bv9sx4zb().s[24]++;cleanTime=(parseFloat(time.toString().substring(0,14))/1000).toFixed(3);}}}// Values without decimals
else{cov_21bv9sx4zb().b[13][1]++;cov_21bv9sx4zb().s[25]++;// A time in milliseconds, no decimal (ex: Date.now()).
if(time.toString().length===13){cov_21bv9sx4zb().b[17][0]++;cov_21bv9sx4zb().s[26]++;cleanTime=(parseFloat(time)/1000).toFixed(3);}// A time with fewer than expected digits.
else{cov_21bv9sx4zb().b[17][1]++;cov_21bv9sx4zb().s[27]++;if(time.toString().length<=12){cov_21bv9sx4zb().b[18][0]++;cov_21bv9sx4zb().s[28]++;cleanTime=parseFloat(time).toFixed(3);}// Any other value has more digits than the expected time format, get the first 14.
else{cov_21bv9sx4zb().b[18][1]++;cov_21bv9sx4zb().s[29]++;cleanTime=parseFloat(time.toString().substring(0,13)/1000).toFixed(3);}}}cov_21bv9sx4zb().s[30]++;return cleanTime;};/** 
    * Writes an XML representation of this, and Event object to the provided `Stream`,
    * starting at the provided offset.
    *
    * If this.data is undefined, or if there is an error writing to the provided `Stream`,
    * an error will be thrown.
    *
    * @param {Object} stream A `Stream` object to write this `Event` to.
    * @function splunkjs.ModularInputs.Event
    */cov_21bv9sx4zb().s[31]++;Event.prototype._writeTo=function(stream){cov_21bv9sx4zb().f[3]++;cov_21bv9sx4zb().s[32]++;if(!this.data){cov_21bv9sx4zb().b[19][0]++;cov_21bv9sx4zb().s[33]++;throw new Error("Events must have at least the data field set to be written to XML.");}else{cov_21bv9sx4zb().b[19][1]++;}var xmlEvent=(cov_21bv9sx4zb().s[34]++,ET.Element("event"));cov_21bv9sx4zb().s[35]++;if(this.stanza){cov_21bv9sx4zb().b[20][0]++;cov_21bv9sx4zb().s[36]++;xmlEvent.set("stanza",this.stanza);}else{cov_21bv9sx4zb().b[20][1]++;}// Convert this.unbroken (a boolean) to a number (0 or 1), then to a string
cov_21bv9sx4zb().s[37]++;xmlEvent.set("unbroken",(+this.unbroken).toString());cov_21bv9sx4zb().s[38]++;if((cov_21bv9sx4zb().b[22][0]++,!utils.isUndefined(this.time))&&(cov_21bv9sx4zb().b[22][1]++,this.time!==null)){cov_21bv9sx4zb().b[21][0]++;cov_21bv9sx4zb().s[39]++;ET.SubElement(xmlEvent,"time").text=Event.formatTime(this.time).toString();}else{cov_21bv9sx4zb().b[21][1]++;}// If this.data is a JS object, stringify it
cov_21bv9sx4zb().s[40]++;if(typeof this.data==="object"){cov_21bv9sx4zb().b[23][0]++;cov_21bv9sx4zb().s[41]++;this.data=JSON.stringify(this.data);}else{cov_21bv9sx4zb().b[23][1]++;}var subElements=(cov_21bv9sx4zb().s[42]++,[{tag:"source",text:this.source},{tag:"sourcetype",text:this.sourcetype},{tag:"index",text:this.index},{tag:"host",text:this.host},{tag:"data",text:this.data}]);cov_21bv9sx4zb().s[43]++;for(var i=(cov_21bv9sx4zb().s[44]++,0);i<subElements.length;i++){var node=(cov_21bv9sx4zb().s[45]++,subElements[i]);cov_21bv9sx4zb().s[46]++;if(node.text){cov_21bv9sx4zb().b[24][0]++;cov_21bv9sx4zb().s[47]++;ET.SubElement(xmlEvent,node.tag).text=node.text;}else{cov_21bv9sx4zb().b[24][1]++;}}cov_21bv9sx4zb().s[48]++;if((cov_21bv9sx4zb().b[26][0]++,this.done)||(cov_21bv9sx4zb().b[26][1]++,!utils.isUndefined(this.done))){cov_21bv9sx4zb().b[25][0]++;cov_21bv9sx4zb().s[49]++;ET.SubElement(xmlEvent,"done");}else{cov_21bv9sx4zb().b[25][1]++;}var eventString=(cov_21bv9sx4zb().s[50]++,ET.tostring(xmlEvent,{"xml_declaration":false}));// Throws an exception if there's an error writing to the stream.
cov_21bv9sx4zb().s[51]++;stream.write(eventString);};cov_21bv9sx4zb().s[52]++;module.exports=Event;})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,