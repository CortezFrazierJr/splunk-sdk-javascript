function cov_vh9fabi3c(){var path="/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/eventwriter.js";var hash="377c878434a96b56aa0c3a78343fe8cefe569da9";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/eventwriter.js",statementMap:{"0":{start:{line:16,column:0},end:{line:92,column:5}},"1":{start:{line:17,column:18},end:{line:17,column:40}},"2":{start:{line:18,column:18},end:{line:18,column:36}},"3":{start:{line:19,column:18},end:{line:19,column:37}},"4":{start:{line:20,column:18},end:{line:20,column:35}},"5":{start:{line:21,column:18},end:{line:21,column:37}},"6":{start:{line:33,column:8},end:{line:33,column:72}},"7":{start:{line:34,column:8},end:{line:34,column:70}},"8":{start:{line:37,column:8},end:{line:37,column:36}},"9":{start:{line:47,column:4},end:{line:64,column:6}},"10":{start:{line:48,column:8},end:{line:51,column:9}},"11":{start:{line:49,column:12},end:{line:49,column:40}},"12":{start:{line:50,column:12},end:{line:50,column:39}},"13":{start:{line:53,column:8},end:{line:63,column:9}},"14":{start:{line:54,column:12},end:{line:54,column:38}},"15":{start:{line:57,column:12},end:{line:60,column:13}},"16":{start:{line:58,column:16},end:{line:58,column:54}},"17":{start:{line:59,column:16},end:{line:59,column:24}},"18":{start:{line:61,column:12},end:{line:61,column:51}},"19":{start:{line:62,column:12},end:{line:62,column:20}},"20":{start:{line:77,column:4},end:{line:80,column:6}},"21":{start:{line:78,column:24},end:{line:78,column:76}},"22":{start:{line:79,column:8},end:{line:79,column:35}},"23":{start:{line:87,column:4},end:{line:89,column:6}},"24":{start:{line:88,column:8},end:{line:88,column:37}},"25":{start:{line:91,column:4},end:{line:91,column:33}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:12},end:{line:92,column:1}},line:16},"1":{name:"EventWriter",decl:{start:{line:32,column:13},end:{line:32,column:24}},loc:{start:{line:32,column:40},end:{line:38,column:5}},line:32},"2":{name:"(anonymous_2)",decl:{start:{line:47,column:39},end:{line:47,column:40}},loc:{start:{line:47,column:55},end:{line:64,column:5}},line:47},"3":{name:"(anonymous_3)",decl:{start:{line:77,column:45},end:{line:77,column:46}},loc:{start:{line:77,column:67},end:{line:80,column:5}},line:77},"4":{name:"(anonymous_4)",decl:{start:{line:87,column:34},end:{line:87,column:35}},loc:{start:{line:87,column:45},end:{line:89,column:5}},line:87}},branchMap:{"0":{loc:{start:{line:33,column:20},end:{line:33,column:71}},type:"cond-expr",locations:[{start:{line:33,column:48},end:{line:33,column:62}},{start:{line:33,column:65},end:{line:33,column:71}}],line:33},"1":{loc:{start:{line:34,column:20},end:{line:34,column:69}},type:"cond-expr",locations:[{start:{line:34,column:47},end:{line:34,column:61}},{start:{line:34,column:64},end:{line:34,column:69}}],line:34},"2":{loc:{start:{line:48,column:8},end:{line:51,column:9}},type:"if",locations:[{start:{line:48,column:8},end:{line:51,column:9}},{start:{line:48,column:8},end:{line:51,column:9}}],line:48},"3":{loc:{start:{line:57,column:12},end:{line:60,column:13}},type:"if",locations:[{start:{line:57,column:12},end:{line:60,column:13}},{start:{line:57,column:12},end:{line:60,column:13}}],line:57}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"377c878434a96b56aa0c3a78343fe8cefe569da9"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_vh9fabi3c=function(){return actualCoverage;};}return actualCoverage;}cov_vh9fabi3c();cov_vh9fabi3c().s[0]++;/*!*/ // Copyright 2014 Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
(function(){cov_vh9fabi3c().f[0]++;var ET=(cov_vh9fabi3c().s[1]++,require("elementtree"));var utils=(cov_vh9fabi3c().s[2]++,require("./utils"));var Logger=(cov_vh9fabi3c().s[3]++,require("./logger"));var stream=(cov_vh9fabi3c().s[4]++,require("stream"));var Async=(cov_vh9fabi3c().s[5]++,require("../async"));/**
     * `EventWriter` writes events and error messages to Splunk from a modular input.
     *
     * Its two important methods are `writeEvent`, which takes an `Event` object,
     * and `log`, which takes a severity and an error message.
     *
     * @param {Object} output A stream to output data, defaults to `process.stdout`
     * @param {Object} error A stream to output errors, defaults to `process.stderr`
     * @class splunkjs.ModularInputs.EventWriter
     */function EventWriter(output,error){cov_vh9fabi3c().f[1]++;cov_vh9fabi3c().s[6]++;this._out=utils.isUndefined(output)?(cov_vh9fabi3c().b[0][0]++,process.stdout):(cov_vh9fabi3c().b[0][1]++,output);cov_vh9fabi3c().s[7]++;this._err=utils.isUndefined(error)?(cov_vh9fabi3c().b[1][0]++,process.stderr):(cov_vh9fabi3c().b[1][1]++,error);// Has the opening <stream> tag been written yet?
cov_vh9fabi3c().s[8]++;this._headerWritten=false;}/**
    * Writes an `Event` object to the output stream specified
    * in the constructor.
    *
    * @param {Object} event An `Event` Object.
    * @function splunkjs.ModularInputs.EventWriter
    */cov_vh9fabi3c().s[9]++;EventWriter.prototype.writeEvent=function(event){cov_vh9fabi3c().f[2]++;cov_vh9fabi3c().s[10]++;if(!this._headerWritten){cov_vh9fabi3c().b[2][0]++;cov_vh9fabi3c().s[11]++;this._out.write("<stream>");cov_vh9fabi3c().s[12]++;this._headerWritten=true;}else{cov_vh9fabi3c().b[2][1]++;}cov_vh9fabi3c().s[13]++;try{cov_vh9fabi3c().s[14]++;event._writeTo(this._out);}catch(e){cov_vh9fabi3c().s[15]++;if(e.message==="Events must have at least the data field set to be written to XML."){cov_vh9fabi3c().b[3][0]++;cov_vh9fabi3c().s[16]++;Logger.warn("",e.message,this._err);cov_vh9fabi3c().s[17]++;throw e;}else{cov_vh9fabi3c().b[3][1]++;}cov_vh9fabi3c().s[18]++;Logger.error("",e.message,this._err);cov_vh9fabi3c().s[19]++;throw e;}};/**
    * Writes a string representation of an `Elementtree` Object to the 
    * output stream specified in the constructor.
    *
    * This function will throw an exception if there is an error
    * while making a string from `xmlDocument`, or
    * while writing the string created from `xmlDocument`.
    *
    * @param {Object} xmlDocument An `Elementtree` Object representing an XML document.
    * @function splunkjs.ModularInputs.EventWriter
    */cov_vh9fabi3c().s[20]++;EventWriter.prototype.writeXMLDocument=function(xmlDocument){cov_vh9fabi3c().f[3]++;var xmlString=(cov_vh9fabi3c().s[21]++,ET.tostring(xmlDocument,{"xml_declaration":false}));cov_vh9fabi3c().s[22]++;this._out.write(xmlString);};/**
    * Writes the closing </stream> tag to make the XML well formed.
    *
    * @function splunkjs.ModularInputs.EventWriter
    */cov_vh9fabi3c().s[23]++;EventWriter.prototype.close=function(){cov_vh9fabi3c().f[4]++;cov_vh9fabi3c().s[24]++;this._out.write("</stream>");};cov_vh9fabi3c().s[25]++;module.exports=EventWriter;})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50d3JpdGVyLmpzIl0sIm5hbWVzIjpbIkVUIiwicmVxdWlyZSIsInV0aWxzIiwiTG9nZ2VyIiwic3RyZWFtIiwiQXN5bmMiLCJFdmVudFdyaXRlciIsIm91dHB1dCIsImVycm9yIiwiX291dCIsImlzVW5kZWZpbmVkIiwicHJvY2VzcyIsInN0ZG91dCIsIl9lcnIiLCJzdGRlcnIiLCJfaGVhZGVyV3JpdHRlbiIsInByb3RvdHlwZSIsIndyaXRlRXZlbnQiLCJldmVudCIsIndyaXRlIiwiX3dyaXRlVG8iLCJlIiwibWVzc2FnZSIsIndhcm4iLCJ3cml0ZVhNTERvY3VtZW50IiwieG1sRG9jdW1lbnQiLCJ4bWxTdHJpbmciLCJ0b3N0cmluZyIsImNsb3NlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Im95SEFlWTtnSEFmWixLLENBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxDQUFDLFVBQVcsd0JBQ1IsR0FBSUEsQ0FBQUEsRUFBRSx5QkFBUUMsT0FBTyxDQUFDLGFBQUQsQ0FBZixDQUFOLENBQ0EsR0FBSUMsQ0FBQUEsS0FBSyx5QkFBS0QsT0FBTyxDQUFDLFNBQUQsQ0FBWixDQUFULENBQ0EsR0FBSUUsQ0FBQUEsTUFBTSx5QkFBSUYsT0FBTyxDQUFDLFVBQUQsQ0FBWCxDQUFWLENBQ0EsR0FBSUcsQ0FBQUEsTUFBTSx5QkFBSUgsT0FBTyxDQUFDLFFBQUQsQ0FBWCxDQUFWLENBQ0EsR0FBSUksQ0FBQUEsS0FBSyx5QkFBS0osT0FBTyxDQUFDLFVBQUQsQ0FBWixDQUFULENBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FDSSxRQUFTSyxDQUFBQSxXQUFULENBQXFCQyxNQUFyQixDQUE2QkMsS0FBN0IsQ0FBb0MsK0NBQ2hDLEtBQUtDLElBQUwsQ0FBWVAsS0FBSyxDQUFDUSxXQUFOLENBQWtCSCxNQUFsQiw2QkFBNEJJLE9BQU8sQ0FBQ0MsTUFBcEMsNkJBQTZDTCxNQUE3QyxDQUFaLENBRGdDLHVCQUVoQyxLQUFLTSxJQUFMLENBQVlYLEtBQUssQ0FBQ1EsV0FBTixDQUFrQkYsS0FBbEIsNkJBQTJCRyxPQUFPLENBQUNHLE1BQW5DLDZCQUE0Q04sS0FBNUMsQ0FBWixDQUVBO0FBSmdDLHVCQUtoQyxLQUFLTyxjQUFMLENBQXNCLEtBQXRCLENBQ0gsQ0FFRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQTlCWSx1QkErQlJULFdBQVcsQ0FBQ1UsU0FBWixDQUFzQkMsVUFBdEIsQ0FBbUMsU0FBU0MsS0FBVCxDQUFnQixnREFDL0MsR0FBSSxDQUFDLEtBQUtILGNBQVYsQ0FBMEIsbURBQ3RCLEtBQUtOLElBQUwsQ0FBVVUsS0FBVixDQUFnQixVQUFoQixFQURzQix3QkFFdEIsS0FBS0osY0FBTCxDQUFzQixJQUF0QixDQUNILENBSEQsZ0NBRCtDLHdCQU0vQyxHQUFJLHlCQUNBRyxLQUFLLENBQUNFLFFBQU4sQ0FBZSxLQUFLWCxJQUFwQixFQUNILENBQ0QsTUFBT1ksQ0FBUCxDQUFVLHlCQUNOLEdBQUlBLENBQUMsQ0FBQ0MsT0FBRixHQUFjLG9FQUFsQixDQUF3RixtREFDcEZuQixNQUFNLENBQUNvQixJQUFQLENBQVksRUFBWixDQUFnQkYsQ0FBQyxDQUFDQyxPQUFsQixDQUEyQixLQUFLVCxJQUFoQyxFQURvRix3QkFFcEYsS0FBTVEsQ0FBQUEsQ0FBTixDQUNILENBSEQsZ0NBRE0sd0JBS05sQixNQUFNLENBQUNLLEtBQVAsQ0FBYSxFQUFiLENBQWlCYSxDQUFDLENBQUNDLE9BQW5CLENBQTRCLEtBQUtULElBQWpDLEVBTE0sd0JBTU4sS0FBTVEsQ0FBQUEsQ0FBTixDQUNILENBQ0osQ0FqQkQsQ0FtQkE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQTVEWSx3QkE2RFJmLFdBQVcsQ0FBQ1UsU0FBWixDQUFzQlEsZ0JBQXRCLENBQXlDLFNBQVNDLFdBQVQsQ0FBc0Isd0JBQzNELEdBQUlDLENBQUFBLFNBQVMsMEJBQUcxQixFQUFFLENBQUMyQixRQUFILENBQVlGLFdBQVosQ0FBeUIsQ0FBQyxrQkFBbUIsS0FBcEIsQ0FBekIsQ0FBSCxDQUFiLENBRDJELHdCQUUzRCxLQUFLaEIsSUFBTCxDQUFVVSxLQUFWLENBQWdCTyxTQUFoQixFQUNILENBSEQsQ0FLQTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE1BdEVZLHdCQXVFUnBCLFdBQVcsQ0FBQ1UsU0FBWixDQUFzQlksS0FBdEIsQ0FBOEIsVUFBVyxnREFDckMsS0FBS25CLElBQUwsQ0FBVVUsS0FBVixDQUFnQixXQUFoQixFQUNILENBRkQsQ0F2RVEsd0JBMkVSVSxNQUFNLENBQUNDLE9BQVAsQ0FBaUJ4QixXQUFqQixDQUNILENBNUVEIiwic291cmNlc0NvbnRlbnQiOlsiLyohKi9cbi8vIENvcHlyaWdodCAyMDE0IFNwbHVuaywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik6IHlvdSBtYXlcbi8vIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluXG4vLyBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUXG4vLyBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGVcbi8vIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBFVCAgICAgID0gcmVxdWlyZShcImVsZW1lbnR0cmVlXCIpO1xuICAgIHZhciB1dGlscyAgID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG4gICAgdmFyIExvZ2dlciAgPSByZXF1aXJlKFwiLi9sb2dnZXJcIik7XG4gICAgdmFyIHN0cmVhbSAgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuICAgIHZhciBBc3luYyAgID0gcmVxdWlyZShcIi4uL2FzeW5jXCIpO1xuICAgIC8qKlxuICAgICAqIGBFdmVudFdyaXRlcmAgd3JpdGVzIGV2ZW50cyBhbmQgZXJyb3IgbWVzc2FnZXMgdG8gU3BsdW5rIGZyb20gYSBtb2R1bGFyIGlucHV0LlxuICAgICAqXG4gICAgICogSXRzIHR3byBpbXBvcnRhbnQgbWV0aG9kcyBhcmUgYHdyaXRlRXZlbnRgLCB3aGljaCB0YWtlcyBhbiBgRXZlbnRgIG9iamVjdCxcbiAgICAgKiBhbmQgYGxvZ2AsIHdoaWNoIHRha2VzIGEgc2V2ZXJpdHkgYW5kIGFuIGVycm9yIG1lc3NhZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3V0cHV0IEEgc3RyZWFtIHRvIG91dHB1dCBkYXRhLCBkZWZhdWx0cyB0byBgcHJvY2Vzcy5zdGRvdXRgXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVycm9yIEEgc3RyZWFtIHRvIG91dHB1dCBlcnJvcnMsIGRlZmF1bHRzIHRvIGBwcm9jZXNzLnN0ZGVycmBcbiAgICAgKiBAY2xhc3Mgc3BsdW5ranMuTW9kdWxhcklucHV0cy5FdmVudFdyaXRlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEV2ZW50V3JpdGVyKG91dHB1dCwgZXJyb3IpIHtcbiAgICAgICAgdGhpcy5fb3V0ID0gdXRpbHMuaXNVbmRlZmluZWQob3V0cHV0KSA/IHByb2Nlc3Muc3Rkb3V0IDogb3V0cHV0O1xuICAgICAgICB0aGlzLl9lcnIgPSB1dGlscy5pc1VuZGVmaW5lZChlcnJvcikgPyBwcm9jZXNzLnN0ZGVyciA6IGVycm9yO1xuXG4gICAgICAgIC8vIEhhcyB0aGUgb3BlbmluZyA8c3RyZWFtPiB0YWcgYmVlbiB3cml0dGVuIHlldD9cbiAgICAgICAgdGhpcy5faGVhZGVyV3JpdHRlbiA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogV3JpdGVzIGFuIGBFdmVudGAgb2JqZWN0IHRvIHRoZSBvdXRwdXQgc3RyZWFtIHNwZWNpZmllZFxuICAgICogaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAgICpcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBBbiBgRXZlbnRgIE9iamVjdC5cbiAgICAqIEBmdW5jdGlvbiBzcGx1bmtqcy5Nb2R1bGFySW5wdXRzLkV2ZW50V3JpdGVyXG4gICAgKi9cbiAgICBFdmVudFdyaXRlci5wcm90b3R5cGUud3JpdGVFdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7ICAgICAgICBcbiAgICAgICAgaWYgKCF0aGlzLl9oZWFkZXJXcml0dGVuKSB7XG4gICAgICAgICAgICB0aGlzLl9vdXQud3JpdGUoXCI8c3RyZWFtPlwiKTtcbiAgICAgICAgICAgIHRoaXMuX2hlYWRlcldyaXR0ZW4gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGV2ZW50Ll93cml0ZVRvKHRoaXMuX291dCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlLm1lc3NhZ2UgPT09IFwiRXZlbnRzIG11c3QgaGF2ZSBhdCBsZWFzdCB0aGUgZGF0YSBmaWVsZCBzZXQgdG8gYmUgd3JpdHRlbiB0byBYTUwuXCIpIHtcbiAgICAgICAgICAgICAgICBMb2dnZXIud2FybihcIlwiLCBlLm1lc3NhZ2UsIHRoaXMuX2Vycik7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIExvZ2dlci5lcnJvcihcIlwiLCBlLm1lc3NhZ2UsIHRoaXMuX2Vycik7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICogV3JpdGVzIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFuIGBFbGVtZW50dHJlZWAgT2JqZWN0IHRvIHRoZSBcbiAgICAqIG91dHB1dCBzdHJlYW0gc3BlY2lmaWVkIGluIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAqXG4gICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIHRoZXJlIGlzIGFuIGVycm9yXG4gICAgKiB3aGlsZSBtYWtpbmcgYSBzdHJpbmcgZnJvbSBgeG1sRG9jdW1lbnRgLCBvclxuICAgICogd2hpbGUgd3JpdGluZyB0aGUgc3RyaW5nIGNyZWF0ZWQgZnJvbSBgeG1sRG9jdW1lbnRgLlxuICAgICpcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSB4bWxEb2N1bWVudCBBbiBgRWxlbWVudHRyZWVgIE9iamVjdCByZXByZXNlbnRpbmcgYW4gWE1MIGRvY3VtZW50LlxuICAgICogQGZ1bmN0aW9uIHNwbHVua2pzLk1vZHVsYXJJbnB1dHMuRXZlbnRXcml0ZXJcbiAgICAqL1xuICAgIEV2ZW50V3JpdGVyLnByb3RvdHlwZS53cml0ZVhNTERvY3VtZW50ID0gZnVuY3Rpb24oeG1sRG9jdW1lbnQpIHtcbiAgICAgICAgdmFyIHhtbFN0cmluZyA9IEVULnRvc3RyaW5nKHhtbERvY3VtZW50LCB7XCJ4bWxfZGVjbGFyYXRpb25cIjogZmFsc2V9KTtcbiAgICAgICAgdGhpcy5fb3V0LndyaXRlKHhtbFN0cmluZyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICogV3JpdGVzIHRoZSBjbG9zaW5nIDwvc3RyZWFtPiB0YWcgdG8gbWFrZSB0aGUgWE1MIHdlbGwgZm9ybWVkLlxuICAgICpcbiAgICAqIEBmdW5jdGlvbiBzcGx1bmtqcy5Nb2R1bGFySW5wdXRzLkV2ZW50V3JpdGVyXG4gICAgKi9cbiAgICBFdmVudFdyaXRlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fb3V0LndyaXRlKFwiPC9zdHJlYW0+XCIpO1xuICAgIH07XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50V3JpdGVyO1xufSkoKTtcbiJdfQ==