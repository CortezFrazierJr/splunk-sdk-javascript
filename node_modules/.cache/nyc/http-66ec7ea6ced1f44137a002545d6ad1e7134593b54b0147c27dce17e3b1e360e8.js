function cov_1q1mv49o3e(){var path="/Users/abhis/Documents/python/splunk-sdk-javascript/lib/http.js";var hash="43be79342c745ba33d236c3d030cb4212f853d71";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/abhis/Documents/python/splunk-sdk-javascript/lib/http.js",statementMap:{"0":{start:{line:16,column:0},end:{line:393,column:5}},"1":{start:{line:19,column:26},end:{line:19,column:57}},"2":{start:{line:20,column:26},end:{line:20,column:49}},"3":{start:{line:21,column:26},end:{line:21,column:44}},"4":{start:{line:22,column:26},end:{line:22,column:43}},"5":{start:{line:24,column:15},end:{line:24,column:30}},"6":{start:{line:25,column:15},end:{line:25,column:19}},"7":{start:{line:27,column:26},end:{line:46,column:5}},"8":{start:{line:29,column:24},end:{line:29,column:43}},"9":{start:{line:30,column:23},end:{line:30,column:41}},"10":{start:{line:31,column:29},end:{line:31,column:76}},"11":{start:{line:33,column:12},end:{line:33,column:43}},"12":{start:{line:35,column:12},end:{line:35,column:25}},"13":{start:{line:38,column:12},end:{line:38,column:39}},"14":{start:{line:41,column:12},end:{line:41,column:49}},"15":{start:{line:44,column:12},end:{line:44,column:39}},"16":{start:{line:57,column:4},end:{line:334,column:7}},"17":{start:{line:70,column:12},end:{line:70,column:65}},"18":{start:{line:71,column:12},end:{line:71,column:65}},"19":{start:{line:72,column:12},end:{line:72,column:66}},"20":{start:{line:73,column:12},end:{line:73,column:69}},"21":{start:{line:74,column:12},end:{line:74,column:76}},"22":{start:{line:77,column:12},end:{line:77,column:43}},"23":{start:{line:80,column:12},end:{line:80,column:35}},"24":{start:{line:85,column:12},end:{line:85,column:35}},"25":{start:{line:92,column:31},end:{line:92,column:33}},"26":{start:{line:94,column:12},end:{line:99,column:15}},"27":{start:{line:95,column:16},end:{line:95,column:42}},"28":{start:{line:96,column:16},end:{line:96,column:36}},"29":{start:{line:97,column:16},end:{line:97,column:44}},"30":{start:{line:98,column:16},end:{line:98,column:37}},"31":{start:{line:101,column:12},end:{line:101,column:32}},"32":{start:{line:110,column:37},end:{line:110,column:70}},"33":{start:{line:111,column:25},end:{line:111,column:27}},"34":{start:{line:114,column:12},end:{line:120,column:15}},"35":{start:{line:115,column:16},end:{line:117,column:17}},"36":{start:{line:116,column:20},end:{line:116,column:27}},"37":{start:{line:118,column:16},end:{line:118,column:39}},"38":{start:{line:119,column:16},end:{line:119,column:43}},"39":{start:{line:122,column:12},end:{line:122,column:26}},"40":{start:{line:137,column:26},end:{line:142,column:13}},"41":{start:{line:144,column:12},end:{line:144,column:65}},"42":{start:{line:159,column:12},end:{line:159,column:74}},"43":{start:{line:160,column:26},end:{line:165,column:13}},"44":{start:{line:167,column:12},end:{line:167,column:56}},"45":{start:{line:182,column:26},end:{line:187,column:13}},"46":{start:{line:189,column:12},end:{line:189,column:56}},"47":{start:{line:206,column:23},end:{line:206,column:27}},"48":{start:{line:207,column:24},end:{line:207,column:84}},"49":{start:{line:208,column:23},end:{line:208,column:41}},"50":{start:{line:210,column:29},end:{line:210,column:59}},"51":{start:{line:211,column:23},end:{line:211,column:70}},"52":{start:{line:213,column:31},end:{line:213,column:54}},"53":{start:{line:215,column:12},end:{line:221,column:13}},"54":{start:{line:216,column:16},end:{line:216,column:57}},"55":{start:{line:220,column:16},end:{line:220,column:56}},"56":{start:{line:223,column:26},end:{line:229,column:13}},"57":{start:{line:233,column:12},end:{line:261,column:13}},"58":{start:{line:234,column:16},end:{line:234,column:66}},"59":{start:{line:237,column:38},end:{line:258,column:17}},"60":{start:{line:238,column:20},end:{line:238,column:57}},"61":{start:{line:242,column:40},end:{line:242,column:79}},"62":{start:{line:243,column:20},end:{line:248,column:21}},"63":{start:{line:244,column:24},end:{line:247,column:27}},"64":{start:{line:245,column:41},end:{line:245,column:78}},"65":{start:{line:246,column:28},end:{line:246,column:73}},"66":{start:{line:252,column:20},end:{line:257,column:21}},"67":{start:{line:253,column:24},end:{line:253,column:49}},"68":{start:{line:256,column:24},end:{line:256,column:43}},"69":{start:{line:260,column:16},end:{line:260,column:78}},"70":{start:{line:275,column:12},end:{line:275,column:70}},"71":{start:{line:287,column:12},end:{line:287,column:70}},"72":{start:{line:301,column:42},end:{line:301,column:44}},"73":{start:{line:303,column:30},end:{line:303,column:34}},"74":{start:{line:304,column:12},end:{line:306,column:13}},"75":{start:{line:305,column:16},end:{line:305,column:182}},"76":{start:{line:308,column:12},end:{line:319,column:13}},"77":{start:{line:309,column:16},end:{line:315,column:17}},"78":{start:{line:310,column:20},end:{line:310,column:54}},"79":{start:{line:313,column:20},end:{line:313,column:68}},"80":{start:{line:314,column:20},end:{line:314,column:32}},"81":{start:{line:318,column:16},end:{line:318,column:28}},"82":{start:{line:321,column:12},end:{line:323,column:13}},"83":{start:{line:322,column:16},end:{line:322,column:52}},"84":{start:{line:325,column:12},end:{line:330,column:14}},"85":{start:{line:332,column:12},end:{line:332,column:37}},"86":{start:{line:349,column:4},end:{line:392,column:6}},"87":{start:{line:350,column:25},end:{line:350,column:27}},"88":{start:{line:353,column:8},end:{line:385,column:9}},"89":{start:{line:354,column:12},end:{line:384,column:13}},"90":{start:{line:358,column:16},end:{line:360,column:17}},"91":{start:{line:359,column:20},end:{line:359,column:50}},"92":{start:{line:363,column:28},end:{line:363,column:39}},"93":{start:{line:367,column:16},end:{line:383,column:17}},"94":{start:{line:368,column:20},end:{line:370,column:21}},"95":{start:{line:368,column:33},end:{line:368,column:34}},"96":{start:{line:369,column:24},end:{line:369,column:97}},"97":{start:{line:372,column:21},end:{line:383,column:17}},"98":{start:{line:373,column:20},end:{line:378,column:21}},"99":{start:{line:374,column:24},end:{line:377,column:25}},"100":{start:{line:375,column:45},end:{line:375,column:60}},"101":{start:{line:376,column:28},end:{line:376,column:108}},"102":{start:{line:382,column:20},end:{line:382,column:84}},"103":{start:{line:387,column:8},end:{line:389,column:9}},"104":{start:{line:388,column:12},end:{line:388,column:69}},"105":{start:{line:391,column:8},end:{line:391,column:26}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:12},end:{line:393,column:1}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:28,column:13},end:{line:28,column:14}},loc:{start:{line:28,column:31},end:{line:36,column:9}},line:28},"2":{name:"(anonymous_2)",decl:{start:{line:37,column:13},end:{line:37,column:14}},loc:{start:{line:37,column:31},end:{line:39,column:9}},line:37},"3":{name:"(anonymous_3)",decl:{start:{line:40,column:19},end:{line:40,column:20}},loc:{start:{line:40,column:37},end:{line:42,column:9}},line:40},"4":{name:"(anonymous_4)",decl:{start:{line:43,column:16},end:{line:43,column:17}},loc:{start:{line:43,column:34},end:{line:45,column:9}},line:43},"5":{name:"(anonymous_5)",decl:{start:{line:66,column:14},end:{line:66,column:15}},loc:{start:{line:66,column:25},end:{line:81,column:9}},line:66},"6":{name:"(anonymous_6)",decl:{start:{line:84,column:27},end:{line:84,column:28}},loc:{start:{line:84,column:45},end:{line:86,column:9}},line:84},"7":{name:"(anonymous_7)",decl:{start:{line:91,column:26},end:{line:91,column:27}},loc:{start:{line:91,column:37},end:{line:103,column:9}},line:91},"8":{name:"(anonymous_8)",decl:{start:{line:94,column:45},end:{line:94,column:46}},loc:{start:{line:94,column:79},end:{line:99,column:13}},line:94},"9":{name:"(anonymous_9)",decl:{start:{line:108,column:28},end:{line:108,column:29}},loc:{start:{line:108,column:51},end:{line:123,column:9}},line:108},"10":{name:"(anonymous_10)",decl:{start:{line:114,column:46},end:{line:114,column:47}},loc:{start:{line:114,column:79},end:{line:120,column:13}},line:114},"11":{name:"(anonymous_11)",decl:{start:{line:136,column:13},end:{line:136,column:14}},loc:{start:{line:136,column:72},end:{line:145,column:9}},line:136},"12":{name:"(anonymous_12)",decl:{start:{line:158,column:14},end:{line:158,column:15}},loc:{start:{line:158,column:64},end:{line:168,column:9}},line:158},"13":{name:"(anonymous_13)",decl:{start:{line:181,column:13},end:{line:181,column:14}},loc:{start:{line:181,column:63},end:{line:190,column:9}},line:181},"14":{name:"(anonymous_14)",decl:{start:{line:205,column:17},end:{line:205,column:18}},loc:{start:{line:205,column:59},end:{line:262,column:9}},line:205},"15":{name:"(anonymous_15)",decl:{start:{line:237,column:38},end:{line:237,column:39}},loc:{start:{line:237,column:57},end:{line:258,column:17}},line:237},"16":{name:"(anonymous_16)",decl:{start:{line:238,column:43},end:{line:238,column:44}},loc:{start:{line:238,column:54},end:{line:238,column:56}},line:238},"17":{name:"(anonymous_17)",decl:{start:{line:244,column:53},end:{line:244,column:54}},loc:{start:{line:244,column:77},end:{line:247,column:25}},line:244},"18":{name:"(anonymous_18)",decl:{start:{line:274,column:21},end:{line:274,column:22}},loc:{start:{line:274,column:54},end:{line:276,column:9}},line:274},"19":{name:"(anonymous_19)",decl:{start:{line:286,column:19},end:{line:286,column:20}},loc:{start:{line:286,column:34},end:{line:288,column:9}},line:286},"20":{name:"(anonymous_20)",decl:{start:{line:300,column:24},end:{line:300,column:25}},loc:{start:{line:300,column:56},end:{line:333,column:9}},line:300},"21":{name:"(anonymous_21)",decl:{start:{line:349,column:18},end:{line:349,column:19}},loc:{start:{line:349,column:35},end:{line:392,column:5}},line:349}},branchMap:{"0":{loc:{start:{line:24,column:15},end:{line:24,column:30}},type:"binary-expr",locations:[{start:{line:24,column:15},end:{line:24,column:22}},{start:{line:24,column:26},end:{line:24,column:30}}],line:24},"1":{loc:{start:{line:29,column:24},end:{line:29,column:43}},type:"binary-expr",locations:[{start:{line:29,column:24},end:{line:29,column:37}},{start:{line:29,column:41},end:{line:29,column:43}}],line:29},"2":{loc:{start:{line:30,column:23},end:{line:30,column:41}},type:"binary-expr",locations:[{start:{line:30,column:23},end:{line:30,column:35}},{start:{line:30,column:39},end:{line:30,column:41}}],line:30},"3":{loc:{start:{line:31,column:29},end:{line:31,column:76}},type:"binary-expr",locations:[{start:{line:31,column:29},end:{line:31,column:46}},{start:{line:31,column:50},end:{line:31,column:66}},{start:{line:31,column:70},end:{line:31,column:76}}],line:31},"4":{loc:{start:{line:38,column:19},end:{line:38,column:38}},type:"binary-expr",locations:[{start:{line:38,column:19},end:{line:38,column:32}},{start:{line:38,column:36},end:{line:38,column:38}}],line:38},"5":{loc:{start:{line:44,column:19},end:{line:44,column:38}},type:"binary-expr",locations:[{start:{line:44,column:19},end:{line:44,column:32}},{start:{line:44,column:36},end:{line:44,column:38}}],line:44},"6":{loc:{start:{line:115,column:16},end:{line:117,column:17}},type:"if",locations:[{start:{line:115,column:16},end:{line:117,column:17}},{start:{line:115,column:16},end:{line:117,column:17}}],line:115},"7":{loc:{start:{line:208,column:23},end:{line:208,column:41}},type:"binary-expr",locations:[{start:{line:208,column:23},end:{line:208,column:35}},{start:{line:208,column:39},end:{line:208,column:41}}],line:208},"8":{loc:{start:{line:211,column:23},end:{line:211,column:70}},type:"cond-expr",locations:[{start:{line:211,column:38},end:{line:211,column:50}},{start:{line:211,column:53},end:{line:211,column:70}}],line:211},"9":{loc:{start:{line:215,column:12},end:{line:221,column:13}},type:"if",locations:[{start:{line:215,column:12},end:{line:221,column:13}},{start:{line:215,column:12},end:{line:221,column:13}}],line:215},"10":{loc:{start:{line:233,column:12},end:{line:261,column:13}},type:"if",locations:[{start:{line:233,column:12},end:{line:261,column:13}},{start:{line:233,column:12},end:{line:261,column:13}}],line:233},"11":{loc:{start:{line:238,column:31},end:{line:238,column:56}},type:"binary-expr",locations:[{start:{line:238,column:31},end:{line:238,column:39}},{start:{line:238,column:43},end:{line:238,column:56}}],line:238},"12":{loc:{start:{line:243,column:20},end:{line:248,column:21}},type:"if",locations:[{start:{line:243,column:20},end:{line:248,column:21}},{start:{line:243,column:20},end:{line:248,column:21}}],line:243},"13":{loc:{start:{line:252,column:20},end:{line:257,column:21}},type:"if",locations:[{start:{line:252,column:20},end:{line:257,column:21}},{start:{line:252,column:20},end:{line:257,column:21}}],line:252},"14":{loc:{start:{line:252,column:24},end:{line:252,column:76}},type:"binary-expr",locations:[{start:{line:252,column:24},end:{line:252,column:45}},{start:{line:252,column:49},end:{line:252,column:76}}],line:252},"15":{loc:{start:{line:304,column:12},end:{line:306,column:13}},type:"if",locations:[{start:{line:304,column:12},end:{line:306,column:13}},{start:{line:304,column:12},end:{line:306,column:13}}],line:304},"16":{loc:{start:{line:304,column:16},end:{line:304,column:44}},type:"binary-expr",locations:[{start:{line:304,column:16},end:{line:304,column:24}},{start:{line:304,column:28},end:{line:304,column:44}}],line:304},"17":{loc:{start:{line:305,column:41},end:{line:305,column:180}},type:"binary-expr",locations:[{start:{line:305,column:41},end:{line:305,column:73}},{start:{line:305,column:77},end:{line:305,column:109}},{start:{line:305,column:113},end:{line:305,column:145}},{start:{line:305,column:149},end:{line:305,column:180}}],line:305},"18":{loc:{start:{line:308,column:12},end:{line:319,column:13}},type:"if",locations:[{start:{line:308,column:12},end:{line:319,column:13}},{start:{line:308,column:12},end:{line:319,column:13}}],line:308},"19":{loc:{start:{line:308,column:16},end:{line:308,column:73}},type:"binary-expr",locations:[{start:{line:308,column:16},end:{line:308,column:65}},{start:{line:308,column:69},end:{line:308,column:73}}],line:308},"20":{loc:{start:{line:310,column:27},end:{line:310,column:53}},type:"binary-expr",locations:[{start:{line:310,column:27},end:{line:310,column:47}},{start:{line:310,column:51},end:{line:310,column:53}}],line:310},"21":{loc:{start:{line:321,column:12},end:{line:323,column:13}},type:"if",locations:[{start:{line:321,column:12},end:{line:323,column:13}},{start:{line:321,column:12},end:{line:323,column:13}}],line:321},"22":{loc:{start:{line:327,column:25},end:{line:327,column:59}},type:"cond-expr",locations:[{start:{line:327,column:36},end:{line:327,column:55}},{start:{line:327,column:58},end:{line:327,column:59}}],line:327},"23":{loc:{start:{line:354,column:12},end:{line:384,column:13}},type:"if",locations:[{start:{line:354,column:12},end:{line:384,column:13}},{start:{line:354,column:12},end:{line:384,column:13}}],line:354},"24":{loc:{start:{line:358,column:16},end:{line:360,column:17}},type:"if",locations:[{start:{line:358,column:16},end:{line:360,column:17}},{start:{line:358,column:16},end:{line:360,column:17}}],line:358},"25":{loc:{start:{line:358,column:20},end:{line:358,column:75}},type:"binary-expr",locations:[{start:{line:358,column:20},end:{line:358,column:30}},{start:{line:358,column:34},end:{line:358,column:75}}],line:358},"26":{loc:{start:{line:367,column:16},end:{line:383,column:17}},type:"if",locations:[{start:{line:367,column:16},end:{line:383,column:17}},{start:{line:367,column:16},end:{line:383,column:17}}],line:367},"27":{loc:{start:{line:372,column:21},end:{line:383,column:17}},type:"if",locations:[{start:{line:372,column:21},end:{line:383,column:17}},{start:{line:372,column:21},end:{line:383,column:17}}],line:372},"28":{loc:{start:{line:374,column:24},end:{line:377,column:25}},type:"if",locations:[{start:{line:374,column:24},end:{line:377,column:25}},{start:{line:374,column:24},end:{line:377,column:25}}],line:374},"29":{loc:{start:{line:387,column:8},end:{line:389,column:9}},type:"if",locations:[{start:{line:387,column:8},end:{line:389,column:9}},{start:{line:387,column:8},end:{line:389,column:9}}],line:387}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0,0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"43be79342c745ba33d236c3d030cb4212f853d71"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1q1mv49o3e=function(){return actualCoverage;};}return actualCoverage;}cov_1q1mv49o3e();cov_1q1mv49o3e().s[0]++;/*!*/ // Copyright 2012 Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
(function(){"use strict";cov_1q1mv49o3e().f[0]++;var Class=(cov_1q1mv49o3e().s[1]++,require('./jquery.class').Class);var logger=(cov_1q1mv49o3e().s[2]++,require('./log').Logger);var utils=(cov_1q1mv49o3e().s[3]++,require('./utils'));var CookieHandler=(cov_1q1mv49o3e().s[4]++,require('cookie'));var root=(cov_1q1mv49o3e().s[5]++,(cov_1q1mv49o3e().b[0][0]++,exports)||(cov_1q1mv49o3e().b[0][1]++,this));var Http=(cov_1q1mv49o3e().s[6]++,null);var queryBuilderMap=(cov_1q1mv49o3e().s[7]++,{"5":function(message){cov_1q1mv49o3e().f[1]++;var query=(cov_1q1mv49o3e().s[8]++,(cov_1q1mv49o3e().b[1][0]++,message.query)||(cov_1q1mv49o3e().b[1][1]++,{}));var post=(cov_1q1mv49o3e().s[9]++,(cov_1q1mv49o3e().b[2][0]++,message.post)||(cov_1q1mv49o3e().b[2][1]++,{}));var outputMode=(cov_1q1mv49o3e().s[10]++,(cov_1q1mv49o3e().b[3][0]++,query.output_mode)||(cov_1q1mv49o3e().b[3][1]++,post.output_mode)||(cov_1q1mv49o3e().b[3][2]++,"json"));cov_1q1mv49o3e().s[11]++;query.output_mode=outputMode;cov_1q1mv49o3e().s[12]++;return query;},"4":function(message){cov_1q1mv49o3e().f[2]++;cov_1q1mv49o3e().s[13]++;return(cov_1q1mv49o3e().b[4][0]++,message.query)||(cov_1q1mv49o3e().b[4][1]++,{});},"default":function(message){cov_1q1mv49o3e().f[3]++;cov_1q1mv49o3e().s[14]++;return queryBuilderMap["5"](message);},"none":function(message){cov_1q1mv49o3e().f[4]++;cov_1q1mv49o3e().s[15]++;return(cov_1q1mv49o3e().b[5][0]++,message.query)||(cov_1q1mv49o3e().b[5][1]++,{});}});/**
     * A base class for HTTP abstraction that provides the basic functionality
     * for performing GET, POST, DELETE, and REQUEST operations, and provides
     * utilities to construct uniform responses.
     *
     * Base classes should only override `makeRequest` and `parseJSON`.
     *
     * @class splunkjs.Http
     */cov_1q1mv49o3e().s[16]++;module.exports=root=Http=Class.extend({/**
         * Constructor for `splunkjs.Http`.
         *
         * @constructor
         * @return {splunkjs.Http} A new `splunkjs.Http` instance.
         *
         * @method splunkjs.Http
         */init:function(){cov_1q1mv49o3e().f[5]++;cov_1q1mv49o3e().s[17]++;// We perform the bindings so that every function works
// properly when it is passed as a callback.
this.get=utils.bind(this,this.get);cov_1q1mv49o3e().s[18]++;this.del=utils.bind(this,this.del);cov_1q1mv49o3e().s[19]++;this.post=utils.bind(this,this.post);cov_1q1mv49o3e().s[20]++;this.request=utils.bind(this,this.request);cov_1q1mv49o3e().s[21]++;this._buildResponse=utils.bind(this,this._buildResponse);// Set our default version to "none"
cov_1q1mv49o3e().s[22]++;this._setSplunkVersion("none");// Cookie store for cookie based authentication.
cov_1q1mv49o3e().s[23]++;this._cookieStore={};},/*!*/_setSplunkVersion:function(version){cov_1q1mv49o3e().f[6]++;cov_1q1mv49o3e().s[24]++;this.version=version;},/**
         * Returns all cookies formatted as a string to be put into the Cookie Header.
         */_getCookieString:function(){cov_1q1mv49o3e().f[7]++;var cookieString=(cov_1q1mv49o3e().s[25]++,"");cov_1q1mv49o3e().s[26]++;utils.forEach(this._cookieStore,function(cookieValue,cookieKey){cov_1q1mv49o3e().f[8]++;cov_1q1mv49o3e().s[27]++;cookieString+=cookieKey;cov_1q1mv49o3e().s[28]++;cookieString+='=';cov_1q1mv49o3e().s[29]++;cookieString+=cookieValue;cov_1q1mv49o3e().s[30]++;cookieString+='; ';});cov_1q1mv49o3e().s[31]++;return cookieString;},/**
         * Takes a cookie header and returns an object of form { key: $cookieKey value: $cookieValue }
         */_parseCookieHeader:function(cookieHeader){cov_1q1mv49o3e().f[9]++;// Returns an object of form { $cookieKey: $cookieValue, $optionalCookieAttributeName: $""value, ... }
var parsedCookieObject=(cov_1q1mv49o3e().s[32]++,CookieHandler.parse(cookieHeader));var cookie=(cov_1q1mv49o3e().s[33]++,{});// This gets the first key value pair into an object and just repeatedly returns thereafter
cov_1q1mv49o3e().s[34]++;utils.forEach(parsedCookieObject,function(cookieValue,cookieKey){cov_1q1mv49o3e().f[10]++;cov_1q1mv49o3e().s[35]++;if(cookie.key){cov_1q1mv49o3e().b[6][0]++;cov_1q1mv49o3e().s[36]++;return;}else{cov_1q1mv49o3e().b[6][1]++;}cov_1q1mv49o3e().s[37]++;cookie.key=cookieKey;cov_1q1mv49o3e().s[38]++;cookie.value=cookieValue;});cov_1q1mv49o3e().s[39]++;return cookie;},/**
         * Performs a GET request.
         *
         * @param {String} url The URL of the GET request.
         * @param {Object} headers An object of headers for this request.
         * @param {Object} params Parameters for this request.
         * @param {Number} timeout A timeout period.
         * @param {Function} callback The function to call when the request is complete: `(err, response)`.
         *
         * @method splunkjs.Http
         */get:function(url,headers,params,timeout,callback,isAsync){cov_1q1mv49o3e().f[11]++;var message=(cov_1q1mv49o3e().s[40]++,{method:"GET",headers:headers,timeout:timeout,query:params});cov_1q1mv49o3e().s[41]++;return this.request(url,message,callback,isAsync);},/**
         * Performs a POST request.
         *
         * @param {String} url The URL of the POST request.
         * @param {Object} headers  An object of headers for this request.
         * @param {Object} params Parameters for this request.
         * @param {Number} timeout A timeout period.
         * @param {Function} callback The function to call when the request is complete: `(err, response)`.
         *
         * @method splunkjs.Http
         */post:function(url,headers,params,timeout,callback){cov_1q1mv49o3e().f[12]++;cov_1q1mv49o3e().s[42]++;headers["Content-Type"]="application/x-www-form-urlencoded";var message=(cov_1q1mv49o3e().s[43]++,{method:"POST",headers:headers,timeout:timeout,post:params});cov_1q1mv49o3e().s[44]++;return this.request(url,message,callback);},/**
         * Performs a DELETE request.
         *
         * @param {String} url The URL of the DELETE request.
         * @param {Object} headers An object of headers for this request.
         * @param {Object} params Query parameters for this request.
         * @param {Number} timeout A timeout period.
         * @param {Function} callback The function to call when the request is complete: `(err, response)`.
         *
         * @method splunkjs.Http
         */del:function(url,headers,params,timeout,callback){cov_1q1mv49o3e().f[13]++;var message=(cov_1q1mv49o3e().s[45]++,{method:"DELETE",headers:headers,timeout:timeout,query:params});cov_1q1mv49o3e().s[46]++;return this.request(url,message,callback);},/**
         * Performs a request.
         *
         * This function sets up how to handle a response from a request, but
         * delegates calling the request to the `makeRequest` subclass.
         *
         * @param {String} url The encoded URL of the request.
         * @param {Object} message An object with values for method, headers, timeout, and encoded body.
         * @param {Function} callback The function to call when the request is complete: `(err, response)`.
         *
         * @method splunkjs.Http
         * @see makeRequest
         */request:function(url,message,callback,isAsync){cov_1q1mv49o3e().f[14]++;var that=(cov_1q1mv49o3e().s[47]++,this);var query=(cov_1q1mv49o3e().s[48]++,utils.getWithVersion(this.version,queryBuilderMap)(message));var post=(cov_1q1mv49o3e().s[49]++,(cov_1q1mv49o3e().b[7][0]++,message.post)||(cov_1q1mv49o3e().b[7][1]++,{}));var encodedUrl=(cov_1q1mv49o3e().s[50]++,url+"?"+Http.encode(query));var body=(cov_1q1mv49o3e().s[51]++,message.body?(cov_1q1mv49o3e().b[8][0]++,message.body):(cov_1q1mv49o3e().b[8][1]++,Http.encode(post)));var cookieString=(cov_1q1mv49o3e().s[52]++,that._getCookieString());cov_1q1mv49o3e().s[53]++;if(cookieString.length!==0){cov_1q1mv49o3e().b[9][0]++;cov_1q1mv49o3e().s[54]++;message.headers["Cookie"]=cookieString;// Remove Authorization header
// Splunk will use Authorization header and ignore Cookies if Authorization header is sent
cov_1q1mv49o3e().s[55]++;delete message.headers["Authorization"];}else{cov_1q1mv49o3e().b[9][1]++;}var options=(cov_1q1mv49o3e().s[56]++,{method:message.method,headers:message.headers,timeout:message.timeout,query:message.query,body:body});// Now we can invoke the user-provided HTTP class,
// passing in our "wrapped" callback
cov_1q1mv49o3e().s[57]++;if(isAsync){cov_1q1mv49o3e().b[10][0]++;cov_1q1mv49o3e().s[58]++;return this.makeRequestAsync(encodedUrl,options);}else{cov_1q1mv49o3e().b[10][1]++;cov_1q1mv49o3e().s[59]++;var wrappedCallback=function(response){cov_1q1mv49o3e().f[15]++;cov_1q1mv49o3e().s[60]++;callback=(cov_1q1mv49o3e().b[11][0]++,callback)||(cov_1q1mv49o3e().b[11][1]++,function(){cov_1q1mv49o3e().f[16]++;});// Handle cookies if 'set-cookie' header is in the response
var cookieHeaders=(cov_1q1mv49o3e().s[61]++,response.response.headers['set-cookie']);cov_1q1mv49o3e().s[62]++;if(cookieHeaders){cov_1q1mv49o3e().b[12][0]++;cov_1q1mv49o3e().s[63]++;utils.forEach(cookieHeaders,function(cookieHeader){cov_1q1mv49o3e().f[17]++;var cookie=(cov_1q1mv49o3e().s[64]++,that._parseCookieHeader(cookieHeader));cov_1q1mv49o3e().s[65]++;that._cookieStore[cookie.key]=cookie.value;});}else{cov_1q1mv49o3e().b[12][1]++;}// Handle callback
cov_1q1mv49o3e().s[66]++;if((cov_1q1mv49o3e().b[14][0]++,response.status<400)&&(cov_1q1mv49o3e().b[14][1]++,response.status!=="abort")){cov_1q1mv49o3e().b[13][0]++;cov_1q1mv49o3e().s[67]++;callback(null,response);}else{cov_1q1mv49o3e().b[13][1]++;cov_1q1mv49o3e().s[68]++;callback(response);}};cov_1q1mv49o3e().s[69]++;return this.makeRequest(encodedUrl,options,wrappedCallback);}},/**
         * Encapsulates the client-specific logic for performing a request. This
         * function is meant to be overriden by subclasses.
         *
         * @param {String} url The encoded URL of the request.
         * @param {Object} message An object with values for method, headers, timeout, and encoded body.
         * @param {Function} callback The function to call when the request is complete: `(err, response)`.
         *
         * @method splunkjs.Http
         */makeRequest:function(url,message,callback){cov_1q1mv49o3e().f[18]++;cov_1q1mv49o3e().s[70]++;throw new Error("UNDEFINED FUNCTION - OVERRIDE REQUIRED");},/**
         * Encapsulates the client-specific logic for parsing the JSON response.
         *
         * @param {String} json The JSON response to parse.
         * @return {Object} The parsed JSON.
         *
         * @method splunkjs.Http
         */parseJson:function(json){cov_1q1mv49o3e().f[19]++;cov_1q1mv49o3e().s[71]++;throw new Error("UNDEFINED FUNCTION - OVERRIDE REQUIRED");},/**
         * Generates a unified response with the given parameters.
         *
         * @param {Object} error An error object, if one exists for the request.
         * @param {Object} response The response object.
         * @param {Object} data The response data.
         * @return {Object} A unified response object.
         *
         * @method splunkjs.Http
         */_buildResponse:function(error,response,data){cov_1q1mv49o3e().f[20]++;var complete_response,json=(cov_1q1mv49o3e().s[72]++,{});var contentType=(cov_1q1mv49o3e().s[73]++,null);cov_1q1mv49o3e().s[74]++;if((cov_1q1mv49o3e().b[16][0]++,response)&&(cov_1q1mv49o3e().b[16][1]++,response.headers)){cov_1q1mv49o3e().b[15][0]++;cov_1q1mv49o3e().s[75]++;contentType=utils.trim((cov_1q1mv49o3e().b[17][0]++,response.headers["content-type"])||(cov_1q1mv49o3e().b[17][1]++,response.headers["Content-Type"])||(cov_1q1mv49o3e().b[17][2]++,response.headers["Content-type"])||(cov_1q1mv49o3e().b[17][3]++,response.headers["contentType"]));}else{cov_1q1mv49o3e().b[15][1]++;}cov_1q1mv49o3e().s[76]++;if((cov_1q1mv49o3e().b[19][0]++,utils.startsWith(contentType,"application/json"))&&(cov_1q1mv49o3e().b[19][1]++,data)){cov_1q1mv49o3e().b[18][0]++;cov_1q1mv49o3e().s[77]++;try{cov_1q1mv49o3e().s[78]++;json=(cov_1q1mv49o3e().b[20][0]++,this.parseJson(data))||(cov_1q1mv49o3e().b[20][1]++,{});}catch(e){cov_1q1mv49o3e().s[79]++;logger.error("Error in parsing JSON:",data,e);cov_1q1mv49o3e().s[80]++;json=data;}}else{cov_1q1mv49o3e().b[18][1]++;cov_1q1mv49o3e().s[81]++;json=data;}cov_1q1mv49o3e().s[82]++;if(json){cov_1q1mv49o3e().b[21][0]++;cov_1q1mv49o3e().s[83]++;logger.printMessages(json.messages);}else{cov_1q1mv49o3e().b[21][1]++;}cov_1q1mv49o3e().s[84]++;complete_response={response:response,status:response?(cov_1q1mv49o3e().b[22][0]++,response.statusCode):(cov_1q1mv49o3e().b[22][1]++,0),data:json,error:error};cov_1q1mv49o3e().s[85]++;return complete_response;}});/**
     * Encodes a dictionary of values into a URL-encoded format.
     *
     * @example
     *
     *      // should be a=1&b=2&b=3&b=4
     *      encode({a: 1, b: [2,3,4]})
     *
     * @param {Object} params The parameters to URL encode.
     * @return {String} The URL-encoded string.
     *
     * @function splunkjs.Http
     */cov_1q1mv49o3e().s[86]++;Http.encode=function(params){cov_1q1mv49o3e().f[21]++;var encodedStr=(cov_1q1mv49o3e().s[87]++,"");// We loop over all the keys so we encode them.
cov_1q1mv49o3e().s[88]++;for(var key in params){cov_1q1mv49o3e().s[89]++;if(params.hasOwnProperty(key)){cov_1q1mv49o3e().b[23][0]++;cov_1q1mv49o3e().s[90]++;// Only append the ampersand if we already have
// something encoded, and the last character isn't
// already an ampersand
if((cov_1q1mv49o3e().b[25][0]++,encodedStr)&&(cov_1q1mv49o3e().b[25][1]++,encodedStr[encodedStr.length-1]!=="&")){cov_1q1mv49o3e().b[24][0]++;cov_1q1mv49o3e().s[91]++;encodedStr=encodedStr+"&";}else{cov_1q1mv49o3e().b[24][1]++;}// Get the value
var value=(cov_1q1mv49o3e().s[92]++,params[key]);// If it's an array, we loop over each value
// and encode it in the form &key=value[i]
cov_1q1mv49o3e().s[93]++;if(value instanceof Array){cov_1q1mv49o3e().b[26][0]++;cov_1q1mv49o3e().s[94]++;for(var i=(cov_1q1mv49o3e().s[95]++,0);i<value.length;i++){cov_1q1mv49o3e().s[96]++;encodedStr=encodedStr+key+"="+encodeURIComponent(value[i])+"&";}}else{cov_1q1mv49o3e().b[26][1]++;cov_1q1mv49o3e().s[97]++;if(typeof value==="object"){cov_1q1mv49o3e().b[27][0]++;cov_1q1mv49o3e().s[98]++;for(var innerKey in value){cov_1q1mv49o3e().s[99]++;if(value.hasOwnProperty(innerKey)){cov_1q1mv49o3e().b[28][0]++;var innerValue=(cov_1q1mv49o3e().s[100]++,value[innerKey]);cov_1q1mv49o3e().s[101]++;encodedStr=encodedStr+key+"="+encodeURIComponent(value[innerKey])+"&";}else{cov_1q1mv49o3e().b[28][1]++;}}}else{cov_1q1mv49o3e().b[27][1]++;cov_1q1mv49o3e().s[102]++;// If it's not an array, we just encode it
encodedStr=encodedStr+key+"="+encodeURIComponent(value);}}}else{cov_1q1mv49o3e().b[23][1]++;}}cov_1q1mv49o3e().s[103]++;if(encodedStr[encodedStr.length-1]==='&'){cov_1q1mv49o3e().b[29][0]++;cov_1q1mv49o3e().s[104]++;encodedStr=encodedStr.substr(0,encodedStr.length-1);}else{cov_1q1mv49o3e().b[29][1]++;}cov_1q1mv49o3e().s[105]++;return encodedStr;};})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,