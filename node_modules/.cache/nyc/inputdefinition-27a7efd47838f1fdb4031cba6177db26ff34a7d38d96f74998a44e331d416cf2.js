function cov_103una0u3(){var path="/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/inputdefinition.js";var hash="c6fbe2c0c0bfc6a552ad844effa98016bfde60b1";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/inputdefinition.js",statementMap:{"0":{start:{line:16,column:0},end:{line:92,column:5}},"1":{start:{line:17,column:18},end:{line:17,column:40}},"2":{start:{line:18,column:18},end:{line:18,column:36}},"3":{start:{line:31,column:8},end:{line:31,column:27}},"4":{start:{line:32,column:8},end:{line:32,column:25}},"5":{start:{line:76,column:4},end:{line:89,column:6}},"6":{start:{line:77,column:25},end:{line:77,column:46}},"7":{start:{line:78,column:27},end:{line:78,column:64}},"8":{start:{line:79,column:8},end:{line:87,column:9}},"9":{start:{line:79,column:21},end:{line:79,column:22}},"10":{start:{line:80,column:23},end:{line:80,column:38}},"11":{start:{line:81,column:12},end:{line:86,column:13}},"12":{start:{line:82,column:16},end:{line:82,column:71}},"13":{start:{line:85,column:16},end:{line:85,column:58}},"14":{start:{line:88,column:8},end:{line:88,column:26}},"15":{start:{line:91,column:4},end:{line:91,column:37}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:12},end:{line:92,column:1}},line:16},"1":{name:"InputDefinition",decl:{start:{line:30,column:13},end:{line:30,column:28}},loc:{start:{line:30,column:31},end:{line:33,column:5}},line:30},"2":{name:"(anonymous_2)",decl:{start:{line:76,column:28},end:{line:76,column:29}},loc:{start:{line:76,column:42},end:{line:89,column:5}},line:76}},branchMap:{"0":{loc:{start:{line:81,column:12},end:{line:86,column:13}},type:"if",locations:[{start:{line:81,column:12},end:{line:86,column:13}},{start:{line:81,column:12},end:{line:86,column:13}}],line:81}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c6fbe2c0c0bfc6a552ad844effa98016bfde60b1"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_103una0u3=function(){return actualCoverage;};}return actualCoverage;}cov_103una0u3();cov_103una0u3().s[0]++;/*!*/ // Copyright 2014 Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
(function(){cov_103una0u3().f[0]++;var ET=(cov_103una0u3().s[1]++,require("elementtree"));var utils=(cov_103una0u3().s[2]++,require("./utils"));/**
     * `InputDefinition` encodes the XML defining inputs that Splunk passes to
     * a modular input script.
     *
     * @example
     *
     *      var i =  new InputDefinition();
     *
     * @class splunkjs.ModularInputs.InputDefinition
     */function InputDefinition(){cov_103una0u3().f[1]++;cov_103una0u3().s[3]++;this.metadata={};cov_103una0u3().s[4]++;this.inputs={};}/**
     * Parse a string containing XML into an `InputDefinition`.
     *
     * This function will throw an exception if `str`
     * contains unexpected XML.
     *
     * The XML typically will look like this:
     * 
     * `<input>`
     *   `<server_host>tiny</server_host>`
     *   `<server_uri>https://127.0.0.1:8089</server_uri>`
     *   `<checkpoint_dir>/opt/splunk/var/lib/splunk/modinputs</checkpoint_dir>`
     *   `<session_key>123102983109283019283</session_key>`
     *   `<configuration>`
     *     `<stanza name="foobar://aaa">`
     *       `<param name="param1">value1</param>`
     *       `<param name="param2">value2</param>`
     *       `<param name="disabled">0</param>`
     *       `<param name="index">default</param>`
     *     `</stanza>`
     *     `<stanza name="foobar://bbb">`
     *       `<param name="param1">value11</param>`
     *       `<param name="param2">value22</param>`
     *       `<param name="disabled">0</param>`
     *       `<param name="index">default</param>`
     *       `<param_list name="multiValue">`
     *         `<value>value1</value>`
     *         `<value>value2</value>`
     *       `</param_list>`
     *       `<param_list name="multiValue2">`
     *         `<value>value3</value>`
     *         `<value>value4</value>`
     *       `</param_list>`
     *     `</stanza>`
     *   `</configuration>`
     * `</input>`
     *
     * @param {String} str A string containing XML to parse.
     * @return {Object} An InputDefiniion object.
     * @function splunkjs.ModularInputs.InputDefinition
     */cov_103una0u3().s[5]++;InputDefinition.parse=function(str){cov_103una0u3().f[2]++;var definition=(cov_103una0u3().s[6]++,new InputDefinition());var rootChildren=(cov_103una0u3().s[7]++,ET.parse(str).getroot().getchildren());cov_103una0u3().s[8]++;for(var i=(cov_103una0u3().s[9]++,0);i<rootChildren.length;i++){var node=(cov_103una0u3().s[10]++,rootChildren[i]);cov_103una0u3().s[11]++;if(node.tag==="configuration"){cov_103una0u3().b[0][0]++;cov_103una0u3().s[12]++;definition.inputs=utils.parseXMLData(node,"stanza");}else{cov_103una0u3().b[0][1]++;cov_103una0u3().s[13]++;definition.metadata[node.tag]=node.text;}}cov_103una0u3().s[14]++;return definition;};cov_103una0u3().s[15]++;module.exports=InputDefinition;})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0ZGVmaW5pdGlvbi5qcyJdLCJuYW1lcyI6WyJFVCIsInJlcXVpcmUiLCJ1dGlscyIsIklucHV0RGVmaW5pdGlvbiIsIm1ldGFkYXRhIiwiaW5wdXRzIiwicGFyc2UiLCJzdHIiLCJkZWZpbml0aW9uIiwicm9vdENoaWxkcmVuIiwiZ2V0cm9vdCIsImdldGNoaWxkcmVuIiwiaSIsImxlbmd0aCIsIm5vZGUiLCJ0YWciLCJwYXJzZVhNTERhdGEiLCJ0ZXh0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Im94RUFlWTtnSEFmWixLLENBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxDQUFDLFVBQVcsd0JBQ1IsR0FBSUEsQ0FBQUEsRUFBRSx5QkFBUUMsT0FBTyxDQUFDLGFBQUQsQ0FBZixDQUFOLENBQ0EsR0FBSUMsQ0FBQUEsS0FBSyx5QkFBS0QsT0FBTyxDQUFDLFNBQUQsQ0FBWixDQUFULENBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FDSSxRQUFTRSxDQUFBQSxlQUFULEVBQTJCLCtDQUN2QixLQUFLQyxRQUFMLENBQWdCLEVBQWhCLENBRHVCLHVCQUV2QixLQUFLQyxNQUFMLENBQWMsRUFBZCxDQUNILENBRUQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQTNEWSx1QkE0RFJGLGVBQWUsQ0FBQ0csS0FBaEIsQ0FBd0IsU0FBU0MsR0FBVCxDQUFjLHdCQUNsQyxHQUFJQyxDQUFBQSxVQUFVLHlCQUFHLEdBQUlMLENBQUFBLGVBQUosRUFBSCxDQUFkLENBQ0EsR0FBSU0sQ0FBQUEsWUFBWSx5QkFBR1QsRUFBRSxDQUFDTSxLQUFILENBQVNDLEdBQVQsRUFBY0csT0FBZCxHQUF3QkMsV0FBeEIsRUFBSCxDQUFoQixDQUZrQyx1QkFHbEMsSUFBSyxHQUFJQyxDQUFBQSxDQUFDLHlCQUFHLENBQUgsQ0FBVixDQUFnQkEsQ0FBQyxDQUFHSCxZQUFZLENBQUNJLE1BQWpDLENBQXlDRCxDQUFDLEVBQTFDLENBQThDLENBQzFDLEdBQUlFLENBQUFBLElBQUksMEJBQUdMLFlBQVksQ0FBQ0csQ0FBRCxDQUFmLENBQVIsQ0FEMEMsd0JBRTFDLEdBQUlFLElBQUksQ0FBQ0MsR0FBTCxHQUFhLGVBQWpCLENBQWtDLG1EQUM5QlAsVUFBVSxDQUFDSCxNQUFYLENBQW9CSCxLQUFLLENBQUNjLFlBQU4sQ0FBbUJGLElBQW5CLENBQXlCLFFBQXpCLENBQXBCLENBQ0gsQ0FGRCxJQUdLLG1EQUNETixVQUFVLENBQUNKLFFBQVgsQ0FBb0JVLElBQUksQ0FBQ0MsR0FBekIsRUFBZ0NELElBQUksQ0FBQ0csSUFBckMsQ0FDSCxDQUNKLENBWGlDLHdCQVlsQyxNQUFPVCxDQUFBQSxVQUFQLENBQ0gsQ0FiRCxDQTVEUSx3QkEyRVJVLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQmhCLGVBQWpCLENBQ0gsQ0E1RUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEqL1xuLy8gQ29weXJpZ2h0IDIwMTQgU3BsdW5rLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTogeW91IG1heVxuLy8gbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW5cbi8vIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVRcbi8vIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZVxuLy8gTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4oZnVuY3Rpb24oKSB7XG4gICAgdmFyIEVUICAgICAgPSByZXF1aXJlKFwiZWxlbWVudHRyZWVcIik7XG4gICAgdmFyIHV0aWxzICAgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuICAgIC8qKlxuICAgICAqIGBJbnB1dERlZmluaXRpb25gIGVuY29kZXMgdGhlIFhNTCBkZWZpbmluZyBpbnB1dHMgdGhhdCBTcGx1bmsgcGFzc2VzIHRvXG4gICAgICogYSBtb2R1bGFyIGlucHV0IHNjcmlwdC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAgICAgIHZhciBpID0gIG5ldyBJbnB1dERlZmluaXRpb24oKTtcbiAgICAgKlxuICAgICAqIEBjbGFzcyBzcGx1bmtqcy5Nb2R1bGFySW5wdXRzLklucHV0RGVmaW5pdGlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIElucHV0RGVmaW5pdGlvbigpIHtcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IHt9O1xuICAgICAgICB0aGlzLmlucHV0cyA9IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlIGEgc3RyaW5nIGNvbnRhaW5pbmcgWE1MIGludG8gYW4gYElucHV0RGVmaW5pdGlvbmAuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGBzdHJgXG4gICAgICogY29udGFpbnMgdW5leHBlY3RlZCBYTUwuXG4gICAgICpcbiAgICAgKiBUaGUgWE1MIHR5cGljYWxseSB3aWxsIGxvb2sgbGlrZSB0aGlzOlxuICAgICAqIFxuICAgICAqIGA8aW5wdXQ+YFxuICAgICAqICAgYDxzZXJ2ZXJfaG9zdD50aW55PC9zZXJ2ZXJfaG9zdD5gXG4gICAgICogICBgPHNlcnZlcl91cmk+aHR0cHM6Ly8xMjcuMC4wLjE6ODA4OTwvc2VydmVyX3VyaT5gXG4gICAgICogICBgPGNoZWNrcG9pbnRfZGlyPi9vcHQvc3BsdW5rL3Zhci9saWIvc3BsdW5rL21vZGlucHV0czwvY2hlY2twb2ludF9kaXI+YFxuICAgICAqICAgYDxzZXNzaW9uX2tleT4xMjMxMDI5ODMxMDkyODMwMTkyODM8L3Nlc3Npb25fa2V5PmBcbiAgICAgKiAgIGA8Y29uZmlndXJhdGlvbj5gXG4gICAgICogICAgIGA8c3RhbnphIG5hbWU9XCJmb29iYXI6Ly9hYWFcIj5gXG4gICAgICogICAgICAgYDxwYXJhbSBuYW1lPVwicGFyYW0xXCI+dmFsdWUxPC9wYXJhbT5gXG4gICAgICogICAgICAgYDxwYXJhbSBuYW1lPVwicGFyYW0yXCI+dmFsdWUyPC9wYXJhbT5gXG4gICAgICogICAgICAgYDxwYXJhbSBuYW1lPVwiZGlzYWJsZWRcIj4wPC9wYXJhbT5gXG4gICAgICogICAgICAgYDxwYXJhbSBuYW1lPVwiaW5kZXhcIj5kZWZhdWx0PC9wYXJhbT5gXG4gICAgICogICAgIGA8L3N0YW56YT5gXG4gICAgICogICAgIGA8c3RhbnphIG5hbWU9XCJmb29iYXI6Ly9iYmJcIj5gXG4gICAgICogICAgICAgYDxwYXJhbSBuYW1lPVwicGFyYW0xXCI+dmFsdWUxMTwvcGFyYW0+YFxuICAgICAqICAgICAgIGA8cGFyYW0gbmFtZT1cInBhcmFtMlwiPnZhbHVlMjI8L3BhcmFtPmBcbiAgICAgKiAgICAgICBgPHBhcmFtIG5hbWU9XCJkaXNhYmxlZFwiPjA8L3BhcmFtPmBcbiAgICAgKiAgICAgICBgPHBhcmFtIG5hbWU9XCJpbmRleFwiPmRlZmF1bHQ8L3BhcmFtPmBcbiAgICAgKiAgICAgICBgPHBhcmFtX2xpc3QgbmFtZT1cIm11bHRpVmFsdWVcIj5gXG4gICAgICogICAgICAgICBgPHZhbHVlPnZhbHVlMTwvdmFsdWU+YFxuICAgICAqICAgICAgICAgYDx2YWx1ZT52YWx1ZTI8L3ZhbHVlPmBcbiAgICAgKiAgICAgICBgPC9wYXJhbV9saXN0PmBcbiAgICAgKiAgICAgICBgPHBhcmFtX2xpc3QgbmFtZT1cIm11bHRpVmFsdWUyXCI+YFxuICAgICAqICAgICAgICAgYDx2YWx1ZT52YWx1ZTM8L3ZhbHVlPmBcbiAgICAgKiAgICAgICAgIGA8dmFsdWU+dmFsdWU0PC92YWx1ZT5gXG4gICAgICogICAgICAgYDwvcGFyYW1fbGlzdD5gXG4gICAgICogICAgIGA8L3N0YW56YT5gXG4gICAgICogICBgPC9jb25maWd1cmF0aW9uPmBcbiAgICAgKiBgPC9pbnB1dD5gXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIEEgc3RyaW5nIGNvbnRhaW5pbmcgWE1MIHRvIHBhcnNlLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQW4gSW5wdXREZWZpbmlpb24gb2JqZWN0LlxuICAgICAqIEBmdW5jdGlvbiBzcGx1bmtqcy5Nb2R1bGFySW5wdXRzLklucHV0RGVmaW5pdGlvblxuICAgICAqL1xuICAgIElucHV0RGVmaW5pdGlvbi5wYXJzZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICB2YXIgZGVmaW5pdGlvbiA9IG5ldyBJbnB1dERlZmluaXRpb24oKTtcbiAgICAgICAgdmFyIHJvb3RDaGlsZHJlbiA9IEVULnBhcnNlKHN0cikuZ2V0cm9vdCgpLmdldGNoaWxkcmVuKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm9vdENoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IHJvb3RDaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGlmIChub2RlLnRhZyA9PT0gXCJjb25maWd1cmF0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uLmlucHV0cyA9IHV0aWxzLnBhcnNlWE1MRGF0YShub2RlLCBcInN0YW56YVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlZmluaXRpb24ubWV0YWRhdGFbbm9kZS50YWddID0gbm9kZS50ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uO1xuICAgIH07XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IElucHV0RGVmaW5pdGlvbjtcbn0pKCk7Il19