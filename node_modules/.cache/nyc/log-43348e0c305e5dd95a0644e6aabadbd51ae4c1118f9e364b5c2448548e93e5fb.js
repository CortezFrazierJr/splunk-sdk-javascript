function cov_ggtdvlrfx(){var path="/Users/abhis/Documents/python/splunk-sdk-javascript/lib/log.js";var hash="db7e4a8298fc4012279c2305b4e9f912ea70d411";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/abhis/Documents/python/splunk-sdk-javascript/lib/log.js",statementMap:{"0":{start:{line:16,column:0},end:{line:186,column:5}},"1":{start:{line:18,column:16},end:{line:18,column:34}},"2":{start:{line:20,column:15},end:{line:20,column:30}},"3":{start:{line:22,column:17},end:{line:28,column:5}},"4":{start:{line:34,column:19},end:{line:45,column:5}},"5":{start:{line:35,column:8},end:{line:44,column:9}},"6":{start:{line:36,column:12},end:{line:36,column:50}},"7":{start:{line:38,column:13},end:{line:44,column:9}},"8":{start:{line:40,column:12},end:{line:40,column:42}},"9":{start:{line:43,column:12},end:{line:43,column:52}},"10":{start:{line:47,column:4},end:{line:52,column:5}},"11":{start:{line:48,column:8},end:{line:48,column:40}},"12":{start:{line:51,column:8},end:{line:51,column:48}},"13":{start:{line:58,column:4},end:{line:58,column:50}},"14":{start:{line:59,column:4},end:{line:76,column:5}},"15":{start:{line:61,column:20},end:{line:70,column:9}},"16":{start:{line:62,column:12},end:{line:69,column:14}},"17":{start:{line:63,column:16},end:{line:68,column:17}},"18":{start:{line:64,column:20},end:{line:64,column:61}},"19":{start:{line:67,column:20},end:{line:67,column:40}},"20":{start:{line:72,column:8},end:{line:72,column:49}},"21":{start:{line:72,column:27},end:{line:72,column:47}},"22":{start:{line:73,column:8},end:{line:73,column:55}},"23":{start:{line:73,column:29},end:{line:73,column:53}},"24":{start:{line:74,column:8},end:{line:74,column:52}},"25":{start:{line:74,column:28},end:{line:74,column:50}},"26":{start:{line:75,column:8},end:{line:75,column:52}},"27":{start:{line:75,column:28},end:{line:75,column:50}},"28":{start:{line:84,column:4},end:{line:185,column:6}},"29":{start:{line:92,column:12},end:{line:94,column:13}},"30":{start:{line:93,column:16},end:{line:93,column:44}},"31":{start:{line:104,column:12},end:{line:106,column:13}},"32":{start:{line:105,column:16},end:{line:105,column:46}},"33":{start:{line:116,column:12},end:{line:118,column:13}},"34":{start:{line:117,column:16},end:{line:117,column:45}},"35":{start:{line:128,column:12},end:{line:130,column:13}},"36":{start:{line:129,column:16},end:{line:129,column:45}},"37":{start:{line:140,column:12},end:{line:140,column:44}},"38":{start:{line:142,column:12},end:{line:166,column:13}},"39":{start:{line:142,column:24},end:{line:142,column:25}},"40":{start:{line:143,column:30},end:{line:143,column:44}},"41":{start:{line:144,column:27},end:{line:144,column:42}},"42":{start:{line:145,column:27},end:{line:145,column:42}},"43":{start:{line:146,column:26},end:{line:146,column:45}},"44":{start:{line:147,column:16},end:{line:165,column:17}},"45":{start:{line:151,column:24},end:{line:151,column:40}},"46":{start:{line:152,column:24},end:{line:152,column:30}},"47":{start:{line:154,column:24},end:{line:154,column:39}},"48":{start:{line:155,column:24},end:{line:155,column:30}},"49":{start:{line:157,column:24},end:{line:157,column:39}},"50":{start:{line:158,column:24},end:{line:158,column:30}},"51":{start:{line:160,column:24},end:{line:160,column:40}},"52":{start:{line:161,column:24},end:{line:161,column:30}},"53":{start:{line:163,column:24},end:{line:163,column:39}},"54":{start:{line:164,column:24},end:{line:164,column:30}},"55":{start:{line:181,column:36},end:{line:181,column:68}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:12},end:{line:186,column:1}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:34,column:19},end:{line:34,column:20}},loc:{start:{line:34,column:35},end:{line:45,column:5}},line:34},"2":{name:"(anonymous_2)",decl:{start:{line:58,column:36},end:{line:58,column:37}},loc:{start:{line:58,column:47},end:{line:58,column:49}},line:58},"3":{name:"(anonymous_3)",decl:{start:{line:61,column:20},end:{line:61,column:21}},loc:{start:{line:61,column:36},end:{line:70,column:9}},line:61},"4":{name:"(anonymous_4)",decl:{start:{line:62,column:19},end:{line:62,column:20}},loc:{start:{line:62,column:33},end:{line:69,column:13}},line:62},"5":{name:"(anonymous_5)",decl:{start:{line:91,column:13},end:{line:91,column:14}},loc:{start:{line:91,column:24},end:{line:95,column:9}},line:91},"6":{name:"(anonymous_6)",decl:{start:{line:103,column:15},end:{line:103,column:16}},loc:{start:{line:103,column:26},end:{line:107,column:9}},line:103},"7":{name:"(anonymous_7)",decl:{start:{line:115,column:14},end:{line:115,column:15}},loc:{start:{line:115,column:25},end:{line:119,column:9}},line:115},"8":{name:"(anonymous_8)",decl:{start:{line:127,column:14},end:{line:127,column:15}},loc:{start:{line:127,column:25},end:{line:131,column:9}},line:127},"9":{name:"(anonymous_9)",decl:{start:{line:139,column:23},end:{line:139,column:24}},loc:{start:{line:139,column:45},end:{line:167,column:9}},line:139},"10":{name:"(anonymous_10)",decl:{start:{line:181,column:18},end:{line:181,column:19}},loc:{start:{line:181,column:34},end:{line:181,column:70}},line:181}},branchMap:{"0":{loc:{start:{line:20,column:15},end:{line:20,column:30}},type:"binary-expr",locations:[{start:{line:20,column:15},end:{line:20,column:22}},{start:{line:20,column:26},end:{line:20,column:30}}],line:20},"1":{loc:{start:{line:35,column:8},end:{line:44,column:9}},type:"if",locations:[{start:{line:35,column:8},end:{line:44,column:9}},{start:{line:35,column:8},end:{line:44,column:9}}],line:35},"2":{loc:{start:{line:35,column:12},end:{line:35,column:65}},type:"binary-expr",locations:[{start:{line:35,column:12},end:{line:35,column:33}},{start:{line:35,column:37},end:{line:35,column:65}}],line:35},"3":{loc:{start:{line:38,column:13},end:{line:44,column:9}},type:"if",locations:[{start:{line:38,column:13},end:{line:44,column:9}},{start:{line:38,column:13},end:{line:44,column:9}}],line:38},"4":{loc:{start:{line:38,column:17},end:{line:39,column:59}},type:"binary-expr",locations:[{start:{line:38,column:17},end:{line:38,column:44}},{start:{line:39,column:19},end:{line:39,column:59}}],line:38},"5":{loc:{start:{line:47,column:4},end:{line:52,column:5}},type:"if",locations:[{start:{line:47,column:4},end:{line:52,column:5}},{start:{line:47,column:4},end:{line:52,column:5}}],line:47},"6":{loc:{start:{line:59,column:4},end:{line:76,column:5}},type:"if",locations:[{start:{line:59,column:4},end:{line:76,column:5}},{start:{line:59,column:4},end:{line:76,column:5}}],line:59},"7":{loc:{start:{line:72,column:8},end:{line:72,column:49}},type:"if",locations:[{start:{line:72,column:8},end:{line:72,column:49}},{start:{line:72,column:8},end:{line:72,column:49}}],line:72},"8":{loc:{start:{line:73,column:8},end:{line:73,column:55}},type:"if",locations:[{start:{line:73,column:8},end:{line:73,column:55}},{start:{line:73,column:8},end:{line:73,column:55}}],line:73},"9":{loc:{start:{line:74,column:8},end:{line:74,column:52}},type:"if",locations:[{start:{line:74,column:8},end:{line:74,column:52}},{start:{line:74,column:8},end:{line:74,column:52}}],line:74},"10":{loc:{start:{line:75,column:8},end:{line:75,column:52}},type:"if",locations:[{start:{line:75,column:8},end:{line:75,column:52}},{start:{line:75,column:8},end:{line:75,column:52}}],line:75},"11":{loc:{start:{line:92,column:12},end:{line:94,column:13}},type:"if",locations:[{start:{line:92,column:12},end:{line:94,column:13}},{start:{line:92,column:12},end:{line:94,column:13}}],line:92},"12":{loc:{start:{line:104,column:12},end:{line:106,column:13}},type:"if",locations:[{start:{line:104,column:12},end:{line:106,column:13}},{start:{line:104,column:12},end:{line:106,column:13}}],line:104},"13":{loc:{start:{line:116,column:12},end:{line:118,column:13}},type:"if",locations:[{start:{line:116,column:12},end:{line:118,column:13}},{start:{line:116,column:12},end:{line:118,column:13}}],line:116},"14":{loc:{start:{line:128,column:12},end:{line:130,column:13}},type:"if",locations:[{start:{line:128,column:12},end:{line:130,column:13}},{start:{line:128,column:12},end:{line:130,column:13}}],line:128},"15":{loc:{start:{line:140,column:26},end:{line:140,column:43}},type:"binary-expr",locations:[{start:{line:140,column:26},end:{line:140,column:37}},{start:{line:140,column:41},end:{line:140,column:43}}],line:140},"16":{loc:{start:{line:147,column:16},end:{line:165,column:17}},type:"switch",locations:[{start:{line:148,column:20},end:{line:148,column:32}},{start:{line:149,column:20},end:{line:149,column:33}},{start:{line:150,column:20},end:{line:152,column:30}},{start:{line:153,column:20},end:{line:155,column:30}},{start:{line:156,column:20},end:{line:158,column:30}},{start:{line:159,column:20},end:{line:161,column:30}},{start:{line:162,column:20},end:{line:164,column:30}}],line:147}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0,0,0,0,0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"db7e4a8298fc4012279c2305b4e9f912ea70d411"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_ggtdvlrfx=function(){return actualCoverage;};}return actualCoverage;}cov_ggtdvlrfx();cov_ggtdvlrfx().s[0]++;/*!*/ // Copyright 2012 Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
(function(){"use strict";cov_ggtdvlrfx().f[0]++;var utils=(cov_ggtdvlrfx().s[1]++,require('./utils'));var root=(cov_ggtdvlrfx().s[2]++,(cov_ggtdvlrfx().b[0][0]++,exports)||(cov_ggtdvlrfx().b[0][1]++,this));var levels=(cov_ggtdvlrfx().s[3]++,{"ALL":4,"INFO":3,"WARN":2,"ERROR":1,"NONE":0});// Normalize the value of the environment variable $LOG_LEVEL to
// an integer (look up named levels like "ERROR" in levels above),
// and default to "ERROR" if there is no value or an invalid value
// set.
cov_ggtdvlrfx().s[4]++;var setLevel=function(level){cov_ggtdvlrfx().f[1]++;cov_ggtdvlrfx().s[5]++;if((cov_ggtdvlrfx().b[2][0]++,utils.isString(level))&&(cov_ggtdvlrfx().b[2][1]++,levels.hasOwnProperty(level))){cov_ggtdvlrfx().b[1][0]++;cov_ggtdvlrfx().s[6]++;process.env.LOG_LEVEL=levels[level];}else{cov_ggtdvlrfx().b[1][1]++;cov_ggtdvlrfx().s[7]++;if((cov_ggtdvlrfx().b[4][0]++,!isNaN(parseInt(level,10)))&&(cov_ggtdvlrfx().b[4][1]++,utils.keyOf(parseInt(level,10),levels))){cov_ggtdvlrfx().b[3][0]++;cov_ggtdvlrfx().s[8]++;process.env.LOG_LEVEL=level;}else{cov_ggtdvlrfx().b[3][1]++;cov_ggtdvlrfx().s[9]++;process.env.LOG_LEVEL=levels["ERROR"];}}};cov_ggtdvlrfx().s[10]++;if(process.env.LOG_LEVEL){cov_ggtdvlrfx().b[5][0]++;cov_ggtdvlrfx().s[11]++;setLevel(process.env.LOG_LEVEL);}else{cov_ggtdvlrfx().b[5][1]++;cov_ggtdvlrfx().s[12]++;process.env.LOG_LEVEL=levels["ERROR"];}// Set the actual output functions
// This section is not covered by unit tests, since there's no
// straightforward way to control what the console object will be.
var _log,_warn,_error,_info;cov_ggtdvlrfx().s[13]++;_log=_warn=_error=_info=function(){cov_ggtdvlrfx().f[2]++;};cov_ggtdvlrfx().s[14]++;if(typeof console!=="undefined"){cov_ggtdvlrfx().b[6][0]++;cov_ggtdvlrfx().s[15]++;var logAs=function(level){cov_ggtdvlrfx().f[3]++;cov_ggtdvlrfx().s[16]++;return function(str){cov_ggtdvlrfx().f[4]++;cov_ggtdvlrfx().s[17]++;try{cov_ggtdvlrfx().s[18]++;console[level].apply(console,arguments);}catch(ex){cov_ggtdvlrfx().s[19]++;console[level](str);}};};cov_ggtdvlrfx().s[20]++;if(console.log){cov_ggtdvlrfx().b[7][0]++;cov_ggtdvlrfx().s[21]++;_log=logAs("log");}else{cov_ggtdvlrfx().b[7][1]++;}cov_ggtdvlrfx().s[22]++;if(console.error){cov_ggtdvlrfx().b[8][0]++;cov_ggtdvlrfx().s[23]++;_error=logAs("error");}else{cov_ggtdvlrfx().b[8][1]++;}cov_ggtdvlrfx().s[24]++;if(console.warn){cov_ggtdvlrfx().b[9][0]++;cov_ggtdvlrfx().s[25]++;_warn=logAs("warn");}else{cov_ggtdvlrfx().b[9][1]++;}cov_ggtdvlrfx().s[26]++;if(console.info){cov_ggtdvlrfx().b[10][0]++;cov_ggtdvlrfx().s[27]++;_info=logAs("info");}else{cov_ggtdvlrfx().b[10][1]++;}}else{cov_ggtdvlrfx().b[6][1]++;}/**
     * A controllable logging module that lets you display different types of
     * debugging information to the console.  
     *
     * @module splunkjs.Logger
     */cov_ggtdvlrfx().s[28]++;exports.Logger={/**
         * Logs debug messages to the console. This function is the same as 
         * `console.log`.
         *
         * @function splunkjs.Logger
         */log:function(){cov_ggtdvlrfx().f[5]++;cov_ggtdvlrfx().s[29]++;if(process.env.LOG_LEVEL>=levels.ALL){cov_ggtdvlrfx().b[11][0]++;cov_ggtdvlrfx().s[30]++;_log.apply(null,arguments);}else{cov_ggtdvlrfx().b[11][1]++;}},/**
         * Logs debug errors to the console. This function is the same as 
         * `console.error`.
         *
         * @function splunkjs.Logger
         */error:function(){cov_ggtdvlrfx().f[6]++;cov_ggtdvlrfx().s[31]++;if(process.env.LOG_LEVEL>=levels.ERROR){cov_ggtdvlrfx().b[12][0]++;cov_ggtdvlrfx().s[32]++;_error.apply(null,arguments);}else{cov_ggtdvlrfx().b[12][1]++;}},/**
         * Logs debug warnings to the console. This function is the same as 
         * `console.warn`.
         *
         * @function splunkjs.Logger
         */warn:function(){cov_ggtdvlrfx().f[7]++;cov_ggtdvlrfx().s[33]++;if(process.env.LOG_LEVEL>=levels.WARN){cov_ggtdvlrfx().b[13][0]++;cov_ggtdvlrfx().s[34]++;_warn.apply(null,arguments);}else{cov_ggtdvlrfx().b[13][1]++;}},/**
         * Logs debug info to the console. This function is the same as 
         * `console.info`.
         *
         * @function splunkjs.Logger
         */info:function(){cov_ggtdvlrfx().f[8]++;cov_ggtdvlrfx().s[35]++;if(process.env.LOG_LEVEL>=levels.INFO){cov_ggtdvlrfx().b[14][0]++;cov_ggtdvlrfx().s[36]++;_info.apply(null,arguments);}else{cov_ggtdvlrfx().b[14][1]++;}},/**
         * Prints all messages that are retrieved from the splunkd server to the
         * console.
         *
         * @function splunkjs.Logger
         */printMessages:function(allMessages){cov_ggtdvlrfx().f[9]++;cov_ggtdvlrfx().s[37]++;allMessages=(cov_ggtdvlrfx().b[15][0]++,allMessages)||(cov_ggtdvlrfx().b[15][1]++,[]);cov_ggtdvlrfx().s[38]++;for(var i=(cov_ggtdvlrfx().s[39]++,0);i<allMessages.length;i++){var message=(cov_ggtdvlrfx().s[40]++,allMessages[i]);var type=(cov_ggtdvlrfx().s[41]++,message["type"]);var text=(cov_ggtdvlrfx().s[42]++,message["text"]);var msg=(cov_ggtdvlrfx().s[43]++,'[SPLUNKD] '+text);cov_ggtdvlrfx().s[44]++;switch(type){case'HTTP':cov_ggtdvlrfx().b[16][0]++;case'FATAL':cov_ggtdvlrfx().b[16][1]++;case'ERROR':cov_ggtdvlrfx().b[16][2]++;cov_ggtdvlrfx().s[45]++;this.error(msg);cov_ggtdvlrfx().s[46]++;break;case'WARN':cov_ggtdvlrfx().b[16][3]++;cov_ggtdvlrfx().s[47]++;this.warn(msg);cov_ggtdvlrfx().s[48]++;break;case'INFO':cov_ggtdvlrfx().b[16][4]++;cov_ggtdvlrfx().s[49]++;this.info(msg);cov_ggtdvlrfx().s[50]++;break;case'HTTP':cov_ggtdvlrfx().b[16][5]++;cov_ggtdvlrfx().s[51]++;this.error(msg);cov_ggtdvlrfx().s[52]++;break;default:cov_ggtdvlrfx().b[16][6]++;cov_ggtdvlrfx().s[53]++;this.info(msg);cov_ggtdvlrfx().s[54]++;break;}}},/**
         * Sets the global logging level to indicate which information to log.
         *
         * @example
         *
         *      splunkjs.Logger.setLevel("WARN");
         *      splunkjs.Logger.setLevel(0); // equivalent to NONE
         *
         * @param {String|Number} level A string or number ("ALL" = 4 | "INFO" = 3 | "WARN" = 2 | "ERROR" = 1 | "NONE" = 0) indicating the logging level.
         *
         * @function splunkjs.Logger
         */setLevel:function(level){cov_ggtdvlrfx().f[10]++;cov_ggtdvlrfx().s[55]++;setLevel.apply(this,arguments);},/*!*/levels:levels};})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,