function cov_kabrnuwhf(){var path="/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/logger.js";var hash="311281d408a39d615311c4a85cc7c8b4c970b62a";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/logger.js",statementMap:{"0":{start:{line:16,column:0},end:{line:138,column:5}},"1":{start:{line:18,column:18},end:{line:18,column:36}},"2":{start:{line:19,column:15},end:{line:19,column:30}},"3":{start:{line:29,column:4},end:{line:29,column:25}},"4":{start:{line:30,column:4},end:{line:30,column:24}},"5":{start:{line:31,column:4},end:{line:31,column:24}},"6":{start:{line:32,column:4},end:{line:32,column:25}},"7":{start:{line:33,column:4},end:{line:33,column:25}},"8":{start:{line:35,column:4},end:{line:45,column:6}},"9":{start:{line:36,column:8},end:{line:36,column:48}},"10":{start:{line:39,column:8},end:{line:41,column:9}},"11":{start:{line:40,column:12},end:{line:40,column:30}},"12":{start:{line:43,column:18},end:{line:43,column:70}},"13":{start:{line:44,column:8},end:{line:44,column:29}},"14":{start:{line:56,column:4},end:{line:63,column:6}},"15":{start:{line:57,column:8},end:{line:62,column:9}},"16":{start:{line:58,column:12},end:{line:58,column:57}},"17":{start:{line:61,column:12},end:{line:61,column:20}},"18":{start:{line:74,column:4},end:{line:81,column:6}},"19":{start:{line:75,column:8},end:{line:80,column:9}},"20":{start:{line:76,column:12},end:{line:76,column:56}},"21":{start:{line:79,column:12},end:{line:79,column:20}},"22":{start:{line:92,column:4},end:{line:99,column:6}},"23":{start:{line:93,column:8},end:{line:98,column:9}},"24":{start:{line:94,column:12},end:{line:94,column:56}},"25":{start:{line:97,column:12},end:{line:97,column:20}},"26":{start:{line:110,column:4},end:{line:117,column:6}},"27":{start:{line:111,column:8},end:{line:116,column:9}},"28":{start:{line:112,column:12},end:{line:112,column:57}},"29":{start:{line:115,column:12},end:{line:115,column:20}},"30":{start:{line:128,column:4},end:{line:135,column:6}},"31":{start:{line:129,column:8},end:{line:134,column:9}},"32":{start:{line:130,column:12},end:{line:130,column:57}},"33":{start:{line:133,column:12},end:{line:133,column:20}},"34":{start:{line:137,column:4},end:{line:137,column:26}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:13},end:{line:138,column:1}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:35,column:16},end:{line:35,column:17}},loc:{start:{line:35,column:61},end:{line:45,column:5}},line:35},"2":{name:"(anonymous_2)",decl:{start:{line:56,column:17},end:{line:56,column:18}},loc:{start:{line:56,column:50},end:{line:63,column:5}},line:56},"3":{name:"(anonymous_3)",decl:{start:{line:74,column:16},end:{line:74,column:17}},loc:{start:{line:74,column:49},end:{line:81,column:5}},line:74},"4":{name:"(anonymous_4)",decl:{start:{line:92,column:16},end:{line:92,column:17}},loc:{start:{line:92,column:49},end:{line:99,column:5}},line:92},"5":{name:"(anonymous_5)",decl:{start:{line:110,column:17},end:{line:110,column:18}},loc:{start:{line:110,column:50},end:{line:117,column:5}},line:110},"6":{name:"(anonymous_6)",decl:{start:{line:128,column:17},end:{line:128,column:18}},loc:{start:{line:128,column:50},end:{line:135,column:5}},line:128}},branchMap:{"0":{loc:{start:{line:19,column:15},end:{line:19,column:30}},type:"binary-expr",locations:[{start:{line:19,column:15},end:{line:19,column:22}},{start:{line:19,column:26},end:{line:19,column:30}}],line:19},"1":{loc:{start:{line:36,column:20},end:{line:36,column:47}},type:"binary-expr",locations:[{start:{line:36,column:20},end:{line:36,column:29}},{start:{line:36,column:33},end:{line:36,column:47}}],line:36},"2":{loc:{start:{line:39,column:8},end:{line:41,column:9}},type:"if",locations:[{start:{line:39,column:8},end:{line:41,column:9}},{start:{line:39,column:8},end:{line:41,column:9}}],line:39},"3":{loc:{start:{line:39,column:12},end:{line:39,column:35}},type:"binary-expr",locations:[{start:{line:39,column:12},end:{line:39,column:16}},{start:{line:39,column:20},end:{line:39,column:35}}],line:39}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"311281d408a39d615311c4a85cc7c8b4c970b62a"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_kabrnuwhf=function(){return actualCoverage;};}return actualCoverage;}cov_kabrnuwhf();cov_kabrnuwhf().s[0]++;/*!*/ // Copyright 2014 Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
(function(){"use strict";cov_kabrnuwhf().f[0]++;var utils=(cov_kabrnuwhf().s[1]++,require("./utils"));var root=(cov_kabrnuwhf().s[2]++,(cov_kabrnuwhf().b[0][0]++,exports)||(cov_kabrnuwhf().b[0][1]++,this));/**
     * `Logger` logs messages to Splunk's internal logs.
     *
     * @class splunkjs.ModularInputs.Logger
     */ // Severities that Splunk understands for log messages from modular inputs.
// DO NOT CHANGE THESE
cov_kabrnuwhf().s[3]++;root.DEBUG="DEBUG";cov_kabrnuwhf().s[4]++;root.INFO="INFO";cov_kabrnuwhf().s[5]++;root.WARN="WARN";cov_kabrnuwhf().s[6]++;root.ERROR="ERROR";cov_kabrnuwhf().s[7]++;root.FATAL="FATAL";cov_kabrnuwhf().s[8]++;root._log=function(severity,name,message,logStream){cov_kabrnuwhf().f[1]++;cov_kabrnuwhf().s[9]++;logStream=(cov_kabrnuwhf().b[1][0]++,logStream)||(cov_kabrnuwhf().b[1][1]++,process.stderr);// Prevent a double space if name isn't passed.
cov_kabrnuwhf().s[10]++;if((cov_kabrnuwhf().b[3][0]++,name)&&(cov_kabrnuwhf().b[3][1]++,name.length>0)){cov_kabrnuwhf().b[2][0]++;cov_kabrnuwhf().s[11]++;name=name+" ";}else{cov_kabrnuwhf().b[2][1]++;}var msg=(cov_kabrnuwhf().s[12]++,severity+" Modular input "+name+message+"\n");cov_kabrnuwhf().s[13]++;logStream.write(msg);};/**
     * Logs messages about the state of this modular input to Splunk.
     * These messages will show up in Splunk's internal logs.
     *
     * @param {String} name The name of this modular input.
     * @param {String} message The message to log.
     * @param {Object} stream (Optional) A stream to write log messages to, defaults to process.stderr.
     * @function splunkjs.ModularInputs.Logger
     */cov_kabrnuwhf().s[14]++;root.debug=function(name,message,stream){cov_kabrnuwhf().f[2]++;cov_kabrnuwhf().s[15]++;try{cov_kabrnuwhf().s[16]++;root._log(root.DEBUG,name,message,stream);}catch(e){cov_kabrnuwhf().s[17]++;throw e;}};/**
     * Logs messages about the state of this modular input to Splunk.
     * These messages will show up in Splunk's internal logs.
     *
     * @param {String} name The name of this modular input.
     * @param {String} message The message to log.
     * @param {Object} stream (Optional) A stream to write log messages to, defaults to process.stderr.
     * @function splunkjs.ModularInputs.Logger
     */cov_kabrnuwhf().s[18]++;root.info=function(name,message,stream){cov_kabrnuwhf().f[3]++;cov_kabrnuwhf().s[19]++;try{cov_kabrnuwhf().s[20]++;root._log(root.INFO,name,message,stream);}catch(e){cov_kabrnuwhf().s[21]++;throw e;}};/**
     * Logs messages about the state of this modular input to Splunk.
     * These messages will show up in Splunk's internal logs.
     *
     * @param {String} name The name of this modular input.
     * @param {String} message The message to log.
     * @param {Object} stream (Optional) A stream to write log messages to, defaults to process.stderr.
     * @function splunkjs.ModularInputs.Logger
     */cov_kabrnuwhf().s[22]++;root.warn=function(name,message,stream){cov_kabrnuwhf().f[4]++;cov_kabrnuwhf().s[23]++;try{cov_kabrnuwhf().s[24]++;root._log(root.WARN,name,message,stream);}catch(e){cov_kabrnuwhf().s[25]++;throw e;}};/**
     * Logs messages about the state of this modular input to Splunk.
     * These messages will show up in Splunk's internal logs.
     *
     * @param {String} name The name of this modular input.
     * @param {String} message The message to log.
     * @param {Object} stream (Optional) A stream to write log messages to, defaults to process.stderr.
     * @function splunkjs.ModularInputs.Logger
     */cov_kabrnuwhf().s[26]++;root.error=function(name,message,stream){cov_kabrnuwhf().f[5]++;cov_kabrnuwhf().s[27]++;try{cov_kabrnuwhf().s[28]++;root._log(root.ERROR,name,message,stream);}catch(e){cov_kabrnuwhf().s[29]++;throw e;}};/**
     * Logs messages about the state of this modular input to Splunk.
     * These messages will show up in Splunk's internal logs.
     *
     * @param {String} name The name of this modular input.
     * @param {String} message The message to log.
     * @param {Object} stream (Optional) A stream to write log messages to, defaults to process.stderr.
     * @function splunkjs.ModularInputs.Logger
     */cov_kabrnuwhf().s[30]++;root.fatal=function(name,message,stream){cov_kabrnuwhf().f[6]++;cov_kabrnuwhf().s[31]++;try{cov_kabrnuwhf().s[32]++;root._log(root.FATAL,name,message,stream);}catch(e){cov_kabrnuwhf().s[33]++;throw e;}};cov_kabrnuwhf().s[34]++;module.exports=root;})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,