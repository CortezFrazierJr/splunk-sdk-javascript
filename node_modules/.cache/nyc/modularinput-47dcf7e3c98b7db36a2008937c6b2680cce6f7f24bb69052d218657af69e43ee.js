function cov_4um9ape7d(){var path="/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/modularinput.js";var hash="6b7d6e41d28305d62c1a6c0e263f9edf622ab338";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/modularinput.js",statementMap:{"0":{start:{line:16,column:0},end:{line:303,column:5}},"1":{start:{line:17,column:13},end:{line:17,column:35}},"2":{start:{line:18,column:14},end:{line:18,column:28}},"3":{start:{line:19,column:16},end:{line:19,column:34}},"4":{start:{line:20,column:16},end:{line:20,column:35}},"5":{start:{line:21,column:31},end:{line:21,column:64}},"6":{start:{line:22,column:26},end:{line:22,column:54}},"7":{start:{line:23,column:22},end:{line:23,column:46}},"8":{start:{line:24,column:17},end:{line:24,column:36}},"9":{start:{line:25,column:18},end:{line:25,column:39}},"10":{start:{line:26,column:17},end:{line:26,column:36}},"11":{start:{line:40,column:8},end:{line:40,column:37}},"12":{start:{line:41,column:8},end:{line:41,column:29}},"13":{start:{line:54,column:4},end:{line:218,column:6}},"14":{start:{line:56,column:8},end:{line:56,column:80}},"15":{start:{line:57,column:8},end:{line:57,column:80}},"16":{start:{line:58,column:8},end:{line:58,column:78}},"17":{start:{line:59,column:8},end:{line:59,column:83}},"18":{start:{line:61,column:19},end:{line:61,column:23}},"19":{start:{line:65,column:8},end:{line:67,column:9}},"20":{start:{line:66,column:12},end:{line:66,column:33}},"21":{start:{line:68,column:22},end:{line:68,column:37}},"22":{start:{line:71,column:8},end:{line:217,column:9}},"23":{start:{line:73,column:47},end:{line:75,column:21}},"24":{start:{line:74,column:16},end:{line:74,column:100}},"25":{start:{line:78,column:12},end:{line:132,column:15}},"26":{start:{line:80,column:16},end:{line:80,column:58}},"27":{start:{line:83,column:35},end:{line:83,column:85}},"28":{start:{line:85,column:16},end:{line:131,column:17}},"29":{start:{line:87,column:20},end:{line:87,column:63}},"30":{start:{line:89,column:32},end:{line:89,column:67}},"31":{start:{line:90,column:20},end:{line:90,column:53}},"32":{start:{line:91,column:20},end:{line:91,column:50}},"33":{start:{line:93,column:20},end:{line:130,column:22}},"34":{start:{line:95,column:32},end:{line:120,column:34}},"35":{start:{line:98,column:52},end:{line:98,column:89}},"36":{start:{line:100,column:40},end:{line:115,column:42}},"37":{start:{line:102,column:52},end:{line:102,column:90}},"38":{start:{line:105,column:52},end:{line:105,column:110}},"39":{start:{line:109,column:52},end:{line:109,column:88}},"40":{start:{line:113,column:48},end:{line:113,column:85}},"41":{start:{line:118,column:40},end:{line:118,column:75}},"42":{start:{line:125,column:28},end:{line:127,column:29}},"43":{start:{line:126,column:32},end:{line:126,column:52}},"44":{start:{line:128,column:28},end:{line:128,column:55}},"45":{start:{line:135,column:13},end:{line:217,column:9}},"46":{start:{line:136,column:25},end:{line:136,column:44}},"47":{start:{line:138,column:12},end:{line:151,column:13}},"48":{start:{line:139,column:16},end:{line:139,column:85}},"49":{start:{line:140,column:16},end:{line:140,column:34}},"50":{start:{line:143,column:16},end:{line:150,column:17}},"51":{start:{line:144,column:20},end:{line:144,column:65}},"52":{start:{line:145,column:20},end:{line:145,column:38}},"53":{start:{line:148,column:20},end:{line:148,column:106}},"54":{start:{line:149,column:20},end:{line:149,column:35}},"55":{start:{line:154,column:13},end:{line:217,column:9}},"56":{start:{line:156,column:51},end:{line:158,column:21}},"57":{start:{line:157,column:16},end:{line:157,column:105}},"58":{start:{line:161,column:12},end:{line:210,column:15}},"59":{start:{line:162,column:16},end:{line:162,column:58}},"60":{start:{line:165,column:35},end:{line:165,column:85}},"61":{start:{line:167,column:16},end:{line:209,column:17}},"62":{start:{line:169,column:20},end:{line:169,column:67}},"63":{start:{line:170,column:20},end:{line:208,column:22}},"64":{start:{line:172,column:32},end:{line:186,column:33}},"65":{start:{line:174,column:36},end:{line:181,column:37}},"66":{start:{line:175,column:40},end:{line:175,column:47}},"67":{start:{line:179,column:57},end:{line:179,column:128}},"68":{start:{line:180,column:40},end:{line:180,column:80}},"69":{start:{line:185,column:36},end:{line:185,column:44}},"70":{start:{line:190,column:28},end:{line:206,column:29}},"71":{start:{line:191,column:32},end:{line:191,column:62}},"72":{start:{line:192,column:32},end:{line:192,column:104}},"73":{start:{line:194,column:32},end:{line:202,column:33}},"74":{start:{line:195,column:52},end:{line:195,column:71}},"75":{start:{line:196,column:36},end:{line:196,column:91}},"76":{start:{line:197,column:36},end:{line:197,column:76}},"77":{start:{line:198,column:36},end:{line:198,column:53}},"78":{start:{line:201,column:36},end:{line:201,column:51}},"79":{start:{line:205,column:32},end:{line:205,column:50}},"80":{start:{line:214,column:22},end:{line:214,column:88}},"81":{start:{line:215,column:12},end:{line:215,column:52}},"82":{start:{line:216,column:12},end:{line:216,column:29}},"83":{start:{line:230,column:4},end:{line:257,column:6}},"84":{start:{line:231,column:8},end:{line:233,column:9}},"85":{start:{line:232,column:12},end:{line:232,column:33}},"86":{start:{line:235,column:8},end:{line:237,column:9}},"87":{start:{line:236,column:12},end:{line:236,column:24}},"88":{start:{line:239,column:25},end:{line:239,column:69}},"89":{start:{line:240,column:25},end:{line:240,column:70}},"90":{start:{line:242,column:23},end:{line:242,column:44}},"91":{start:{line:245,column:21},end:{line:245,column:55}},"92":{start:{line:246,column:26},end:{line:246,column:43}},"93":{start:{line:247,column:26},end:{line:247,column:39}},"94":{start:{line:249,column:8},end:{line:254,column:11}},"95":{start:{line:256,column:8},end:{line:256,column:29}},"96":{start:{line:267,column:4},end:{line:269,column:6}},"97":{start:{line:268,column:8},end:{line:268,column:15}},"98":{start:{line:278,column:4},end:{line:280,column:6}},"99":{start:{line:279,column:8},end:{line:279,column:15}},"100":{start:{line:289,column:4},end:{line:291,column:6}},"101":{start:{line:290,column:8},end:{line:290,column:15}},"102":{start:{line:298,column:4},end:{line:300,column:6}},"103":{start:{line:299,column:8},end:{line:299,column:15}},"104":{start:{line:302,column:4},end:{line:302,column:34}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:12},end:{line:303,column:1}},line:16},"1":{name:"ModularInput",decl:{start:{line:39,column:13},end:{line:39,column:25}},loc:{start:{line:39,column:28},end:{line:42,column:5}},line:39},"2":{name:"(anonymous_2)",decl:{start:{line:54,column:29},end:{line:54,column:30}},loc:{start:{line:54,column:89},end:{line:218,column:5}},line:54},"3":{name:"(anonymous_3)",decl:{start:{line:73,column:58},end:{line:73,column:59}},loc:{start:{line:73,column:69},end:{line:75,column:13}},line:73},"4":{name:"(anonymous_4)",decl:{start:{line:78,column:35},end:{line:78,column:36}},loc:{start:{line:78,column:51},end:{line:132,column:13}},line:78},"5":{name:"(anonymous_5)",decl:{start:{line:94,column:28},end:{line:94,column:29}},loc:{start:{line:94,column:43},end:{line:121,column:29}},line:94},"6":{name:"(anonymous_6)",decl:{start:{line:97,column:36},end:{line:97,column:37}},loc:{start:{line:97,column:69},end:{line:116,column:37}},line:97},"7":{name:"(anonymous_7)",decl:{start:{line:101,column:48},end:{line:101,column:49}},loc:{start:{line:101,column:68},end:{line:103,column:49}},line:101},"8":{name:"(anonymous_8)",decl:{start:{line:104,column:48},end:{line:104,column:49}},loc:{start:{line:104,column:68},end:{line:106,column:49}},line:104},"9":{name:"(anonymous_9)",decl:{start:{line:107,column:48},end:{line:107,column:49}},loc:{start:{line:107,column:68},end:{line:110,column:49}},line:107},"10":{name:"(anonymous_10)",decl:{start:{line:112,column:44},end:{line:112,column:45}},loc:{start:{line:112,column:63},end:{line:114,column:45}},line:112},"11":{name:"(anonymous_11)",decl:{start:{line:117,column:36},end:{line:117,column:37}},loc:{start:{line:117,column:57},end:{line:119,column:37}},line:117},"12":{name:"(anonymous_12)",decl:{start:{line:123,column:24},end:{line:123,column:25}},loc:{start:{line:123,column:38},end:{line:129,column:25}},line:123},"13":{name:"(anonymous_13)",decl:{start:{line:156,column:62},end:{line:156,column:63}},loc:{start:{line:156,column:73},end:{line:158,column:13}},line:156},"14":{name:"(anonymous_14)",decl:{start:{line:161,column:35},end:{line:161,column:36}},loc:{start:{line:161,column:51},end:{line:210,column:13}},line:161},"15":{name:"(anonymous_15)",decl:{start:{line:171,column:28},end:{line:171,column:29}},loc:{start:{line:171,column:44},end:{line:187,column:29}},line:171},"16":{name:"(anonymous_16)",decl:{start:{line:189,column:24},end:{line:189,column:25}},loc:{start:{line:189,column:39},end:{line:207,column:25}},line:189},"17":{name:"(anonymous_17)",decl:{start:{line:230,column:27},end:{line:230,column:28}},loc:{start:{line:230,column:38},end:{line:257,column:5}},line:230},"18":{name:"(anonymous_18)",decl:{start:{line:267,column:35},end:{line:267,column:36}},loc:{start:{line:267,column:50},end:{line:269,column:5}},line:267},"19":{name:"(anonymous_19)",decl:{start:{line:278,column:35},end:{line:278,column:36}},loc:{start:{line:278,column:68},end:{line:280,column:5}},line:278},"20":{name:"(anonymous_20)",decl:{start:{line:289,column:33},end:{line:289,column:34}},loc:{start:{line:289,column:66},end:{line:291,column:5}},line:289},"21":{name:"(anonymous_21)",decl:{start:{line:298,column:38},end:{line:298,column:39}},loc:{start:{line:298,column:53},end:{line:300,column:5}},line:298}},branchMap:{"0":{loc:{start:{line:56,column:30},end:{line:56,column:79}},type:"binary-expr",locations:[{start:{line:56,column:30},end:{line:56,column:43}},{start:{line:56,column:51},end:{line:56,column:79}}],line:56},"1":{loc:{start:{line:57,column:30},end:{line:57,column:79}},type:"binary-expr",locations:[{start:{line:57,column:30},end:{line:57,column:43}},{start:{line:57,column:51},end:{line:57,column:79}}],line:57},"2":{loc:{start:{line:58,column:30},end:{line:58,column:77}},type:"binary-expr",locations:[{start:{line:58,column:30},end:{line:58,column:41}},{start:{line:58,column:51},end:{line:58,column:77}}],line:58},"3":{loc:{start:{line:59,column:30},end:{line:59,column:82}},type:"binary-expr",locations:[{start:{line:59,column:30},end:{line:59,column:46}},{start:{line:59,column:51},end:{line:59,column:82}}],line:59},"4":{loc:{start:{line:65,column:8},end:{line:67,column:9}},type:"if",locations:[{start:{line:65,column:8},end:{line:67,column:9}},{start:{line:65,column:8},end:{line:67,column:9}}],line:65},"5":{loc:{start:{line:65,column:12},end:{line:65,column:52}},type:"binary-expr",locations:[{start:{line:65,column:12},end:{line:65,column:30}},{start:{line:65,column:34},end:{line:65,column:52}}],line:65},"6":{loc:{start:{line:71,column:8},end:{line:217,column:9}},type:"if",locations:[{start:{line:71,column:8},end:{line:217,column:9}},{start:{line:71,column:8},end:{line:217,column:9}}],line:71},"7":{loc:{start:{line:85,column:16},end:{line:131,column:17}},type:"if",locations:[{start:{line:85,column:16},end:{line:131,column:17}},{start:{line:85,column:16},end:{line:131,column:17}}],line:85},"8":{loc:{start:{line:113,column:67},end:{line:113,column:83}},type:"cond-expr",locations:[{start:{line:113,column:78},end:{line:113,column:79}},{start:{line:113,column:82},end:{line:113,column:83}}],line:113},"9":{loc:{start:{line:118,column:56},end:{line:118,column:73}},type:"cond-expr",locations:[{start:{line:118,column:68},end:{line:118,column:69}},{start:{line:118,column:72},end:{line:118,column:73}}],line:118},"10":{loc:{start:{line:125,column:28},end:{line:127,column:29}},type:"if",locations:[{start:{line:125,column:28},end:{line:127,column:29}},{start:{line:125,column:28},end:{line:127,column:29}}],line:125},"11":{loc:{start:{line:128,column:42},end:{line:128,column:53}},type:"cond-expr",locations:[{start:{line:128,column:48},end:{line:128,column:49}},{start:{line:128,column:52},end:{line:128,column:53}}],line:128},"12":{loc:{start:{line:135,column:13},end:{line:217,column:9}},type:"if",locations:[{start:{line:135,column:13},end:{line:217,column:9}},{start:{line:135,column:13},end:{line:217,column:9}}],line:135},"13":{loc:{start:{line:135,column:17},end:{line:135,column:84}},type:"binary-expr",locations:[{start:{line:135,column:17},end:{line:135,column:33}},{start:{line:135,column:37},end:{line:135,column:84}}],line:135},"14":{loc:{start:{line:138,column:12},end:{line:151,column:13}},type:"if",locations:[{start:{line:138,column:12},end:{line:151,column:13}},{start:{line:138,column:12},end:{line:151,column:13}}],line:138},"15":{loc:{start:{line:154,column:13},end:{line:217,column:9}},type:"if",locations:[{start:{line:154,column:13},end:{line:217,column:9}},{start:{line:154,column:13},end:{line:217,column:9}}],line:154},"16":{loc:{start:{line:154,column:17},end:{line:154,column:96}},type:"binary-expr",locations:[{start:{line:154,column:17},end:{line:154,column:33}},{start:{line:154,column:37},end:{line:154,column:96}}],line:154},"17":{loc:{start:{line:167,column:16},end:{line:209,column:17}},type:"if",locations:[{start:{line:167,column:16},end:{line:209,column:17}},{start:{line:167,column:16},end:{line:209,column:17}}],line:167},"18":{loc:{start:{line:174,column:36},end:{line:181,column:37}},type:"if",locations:[{start:{line:174,column:36},end:{line:181,column:37}},{start:{line:174,column:36},end:{line:181,column:37}}],line:174},"19":{loc:{start:{line:190,column:28},end:{line:206,column:29}},type:"if",locations:[{start:{line:190,column:28},end:{line:206,column:29}},{start:{line:190,column:28},end:{line:206,column:29}}],line:190},"20":{loc:{start:{line:231,column:8},end:{line:233,column:9}},type:"if",locations:[{start:{line:231,column:8},end:{line:233,column:9}},{start:{line:231,column:8},end:{line:233,column:9}}],line:231},"21":{loc:{start:{line:235,column:8},end:{line:237,column:9}},type:"if",locations:[{start:{line:235,column:8},end:{line:237,column:9}},{start:{line:235,column:8},end:{line:237,column:9}}],line:235}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"6b7d6e41d28305d62c1a6c0e263f9edf622ab338"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_4um9ape7d=function(){return actualCoverage;};}return actualCoverage;}cov_4um9ape7d();cov_4um9ape7d().s[0]++;/*!*/ // Copyright 2014 Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
(function(){cov_4um9ape7d().f[0]++;var ET=(cov_4um9ape7d().s[1]++,require("elementtree"));var url=(cov_4um9ape7d().s[2]++,require("url"));var utils=(cov_4um9ape7d().s[3]++,require("./utils"));var Async=(cov_4um9ape7d().s[4]++,require("../async"));var ValidationDefinition=(cov_4um9ape7d().s[5]++,require("./validationdefinition"));var InputDefinition=(cov_4um9ape7d().s[6]++,require("./inputdefinition"));var EventWriter=(cov_4um9ape7d().s[7]++,require("./eventwriter"));var Scheme=(cov_4um9ape7d().s[8]++,require("./scheme"));var Service=(cov_4um9ape7d().s[9]++,require("../service"));var Logger=(cov_4um9ape7d().s[10]++,require("./logger"));/**
     * A base class for implementing modular inputs.
     *
     * Subclasses should implement `getScheme` and `streamEvents`,
     * and optionally `validateInput` if the modular input uses 
     * external validation.
     * 
     * The `run` function is used to run modular inputs; it typically
     * should not be overridden.
     * @class splunkjs.ModularInputs.ModularInput
     */function ModularInput(){cov_4um9ape7d().f[1]++;cov_4um9ape7d().s[11]++;this._inputDefinition=null;cov_4um9ape7d().s[12]++;this._service=null;}/**
     * Handles all the specifics of running a modular input.
     *
     * @param {Object} exports An object representing a modular input script.
     * @param {Array} args A list of command line arguments passed to this script.
     * @param {Object} eventWriter An `EventWriter` object for writing event.
     * @param {Object} inputStream A `Stream` object for reading inputs.
     * @param {Function} callback The function to call after running this script: `(err, status)`.
     * @function splunkjs.ModularInputs.ModularInput
     */cov_4um9ape7d().s[13]++;ModularInput.runScript=function(exports,args,eventWriter,inputStream,callback){cov_4um9ape7d().f[2]++;cov_4um9ape7d().s[14]++;// Default empty functions for life cycle events, this is mostly used for the unit tests
exports.setup=(cov_4um9ape7d().b[0][0]++,exports.setup)||(cov_4um9ape7d().b[0][1]++,ModularInput.prototype.setup);cov_4um9ape7d().s[15]++;exports.start=(cov_4um9ape7d().b[1][0]++,exports.start)||(cov_4um9ape7d().b[1][1]++,ModularInput.prototype.start);cov_4um9ape7d().s[16]++;exports.end=(cov_4um9ape7d().b[2][0]++,exports.end)||(cov_4um9ape7d().b[2][1]++,ModularInput.prototype.end);cov_4um9ape7d().s[17]++;exports.teardown=(cov_4um9ape7d().b[3][0]++,exports.teardown)||(cov_4um9ape7d().b[3][1]++,ModularInput.prototype.teardown);var that=(cov_4um9ape7d().s[18]++,this);// Resume streams before trying to read their data.
// If the inputStream is a TTY, we don't want to open the stream as it will hold the process open.
cov_4um9ape7d().s[19]++;if((cov_4um9ape7d().b[5][0]++,inputStream.resume)&&(cov_4um9ape7d().b[5][1]++,!inputStream.isTTY)){cov_4um9ape7d().b[4][0]++;cov_4um9ape7d().s[20]++;inputStream.resume();}else{cov_4um9ape7d().b[4][1]++;}var bigBuff=(cov_4um9ape7d().s[21]++,Buffer.alloc(0));// When streaming events...
cov_4um9ape7d().s[22]++;if(args.length===1){cov_4um9ape7d().b[6][0]++;// After waiting 30.5 seconds for input definitions, assume something bad happened
var inputDefintionsReceivedTimer=(cov_4um9ape7d().s[23]++,setTimeout(function(){cov_4um9ape7d().f[3]++;cov_4um9ape7d().s[24]++;callback(new Error("Receiving input definitions prior to streaming timed out."),1);},30500));// Listen for data on inputStream.
cov_4um9ape7d().s[25]++;inputStream.on("data",function(chunk){cov_4um9ape7d().f[4]++;cov_4um9ape7d().s[26]++;// Chunk will be a Buffer when interacting with Splunk.
bigBuff=Buffer.concat([bigBuff,chunk]);// Remove any trailing whitespace.
var bufferString=(cov_4um9ape7d().s[27]++,bigBuff.toString("utf8",0,bigBuff.length).trim());cov_4um9ape7d().s[28]++;if(utils.endsWith(bufferString,"</input>")){cov_4um9ape7d().b[7][0]++;cov_4um9ape7d().s[29]++;// If we've received all of the input definitions, clear the timeout timer
clearTimeout(inputDefintionsReceivedTimer);var found=(cov_4um9ape7d().s[30]++,InputDefinition.parse(bufferString));cov_4um9ape7d().s[31]++;exports._inputDefinition=found;cov_4um9ape7d().s[32]++;that._inputDefinition=found;cov_4um9ape7d().s[33]++;Async.chain([function(done){cov_4um9ape7d().f[5]++;cov_4um9ape7d().s[34]++;Async.parallelEach(Object.keys(exports._inputDefinition.inputs),function(name,index,doneEach){cov_4um9ape7d().f[6]++;var input=(cov_4um9ape7d().s[35]++,exports._inputDefinition.inputs[name]);cov_4um9ape7d().s[36]++;Async.chain([function(innerDone){cov_4um9ape7d().f[7]++;cov_4um9ape7d().s[37]++;exports.start(name,input,innerDone);},function(innerDone){cov_4um9ape7d().f[8]++;cov_4um9ape7d().s[38]++;exports.streamEvents(name,input,eventWriter,innerDone);},function(innerDone){cov_4um9ape7d().f[9]++;cov_4um9ape7d().s[39]++;// end() will only be called if streamEvents doesn't fail.
exports.end(name,input,innerDone);}],function(innerErr){cov_4um9ape7d().f[10]++;cov_4um9ape7d().s[40]++;doneEach(innerErr,innerErr?(cov_4um9ape7d().b[8][0]++,1):(cov_4um9ape7d().b[8][1]++,0));});},function(streamErr){cov_4um9ape7d().f[11]++;cov_4um9ape7d().s[41]++;done(streamErr,streamErr?(cov_4um9ape7d().b[9][0]++,1):(cov_4um9ape7d().b[9][1]++,0));});}],function(err){cov_4um9ape7d().f[12]++;cov_4um9ape7d().s[42]++;// Write the closing </stream> tag.
if(eventWriter._headerWritten){cov_4um9ape7d().b[10][0]++;cov_4um9ape7d().s[43]++;eventWriter.close();}else{cov_4um9ape7d().b[10][1]++;}cov_4um9ape7d().s[44]++;callback(err,err?(cov_4um9ape7d().b[11][0]++,1):(cov_4um9ape7d().b[11][1]++,0));});}else{cov_4um9ape7d().b[7][1]++;}});}// When getting the scheme...
else{cov_4um9ape7d().b[6][1]++;cov_4um9ape7d().s[45]++;if((cov_4um9ape7d().b[13][0]++,args.length>=2)&&(cov_4um9ape7d().b[13][1]++,args[1].toString().toLowerCase()==="--scheme")){cov_4um9ape7d().b[12][0]++;var scheme=(cov_4um9ape7d().s[46]++,exports.getScheme());cov_4um9ape7d().s[47]++;if(!scheme){cov_4um9ape7d().b[14][0]++;cov_4um9ape7d().s[48]++;Logger.fatal("","script returned a null scheme.",eventWriter._err);cov_4um9ape7d().s[49]++;callback(null,1);}else{cov_4um9ape7d().b[14][1]++;cov_4um9ape7d().s[50]++;try{cov_4um9ape7d().s[51]++;eventWriter.writeXMLDocument(scheme.toXML());cov_4um9ape7d().s[52]++;callback(null,0);}catch(e){cov_4um9ape7d().s[53]++;Logger.fatal("","script could not return the scheme, error: "+e,eventWriter._err);cov_4um9ape7d().s[54]++;callback(e,1);}}}// When validating arguments...
else{cov_4um9ape7d().b[12][1]++;cov_4um9ape7d().s[55]++;if((cov_4um9ape7d().b[16][0]++,args.length>=2)&&(cov_4um9ape7d().b[16][1]++,args[1].toString().toLowerCase()==="--validate-arguments")){cov_4um9ape7d().b[15][0]++;// After waiting 30.5 seconds for a validation definition, assume something bad happened
var validationDefintionReceivedTimer=(cov_4um9ape7d().s[56]++,setTimeout(function(){cov_4um9ape7d().f[13]++;cov_4um9ape7d().s[57]++;callback(new Error("Receiving validation definition prior to validating timed out."),1);},30500));// Listen for data on inputStream.
cov_4um9ape7d().s[58]++;inputStream.on("data",function(chunk){cov_4um9ape7d().f[14]++;cov_4um9ape7d().s[59]++;bigBuff=Buffer.concat([bigBuff,chunk]);// Remove any trailing whitespace.
var bufferString=(cov_4um9ape7d().s[60]++,bigBuff.toString("utf8",0,bigBuff.length).trim());cov_4um9ape7d().s[61]++;if(utils.endsWith(bufferString,"</items>")){cov_4um9ape7d().b[17][0]++;cov_4um9ape7d().s[62]++;// If we've received all of the validation definition, clear the timeout timer
clearTimeout(validationDefintionReceivedTimer);cov_4um9ape7d().s[63]++;Async.chain([function(done){cov_4um9ape7d().f[15]++;cov_4um9ape7d().s[64]++;try{cov_4um9ape7d().s[65]++;// If there is no validateInput method set, accept all input.
if(utils.isUndefined(exports.validateInput)){cov_4um9ape7d().b[18][0]++;cov_4um9ape7d().s[66]++;done();}else{cov_4um9ape7d().b[18][1]++;// If exports.validateInput doesn't throw an error, we assume validation succeeded.
var definition=(cov_4um9ape7d().s[67]++,ValidationDefinition.parse(bigBuff.toString("utf8",0,bigBuff.length)));cov_4um9ape7d().s[68]++;exports.validateInput(definition,done);}}catch(e){cov_4um9ape7d().s[69]++;// If exports.validateInput throws an error, we assume validation failed.
done(e);}}],function(err){cov_4um9ape7d().f[16]++;cov_4um9ape7d().s[70]++;if(err){cov_4um9ape7d().b[19][0]++;cov_4um9ape7d().s[71]++;Logger.error("",err.message);cov_4um9ape7d().s[72]++;Logger.error("","Stack trace for a modular input error: "+err.stack);cov_4um9ape7d().s[73]++;try{var errorRoot=(cov_4um9ape7d().s[74]++,ET.Element("error"));cov_4um9ape7d().s[75]++;ET.SubElement(errorRoot,"message").text=err.message;cov_4um9ape7d().s[76]++;eventWriter.writeXMLDocument(errorRoot);cov_4um9ape7d().s[77]++;callback(err,1);// Some error while validating the input.
}catch(e){cov_4um9ape7d().s[78]++;callback(e,1);// Error trying to write the error.
}}else{cov_4um9ape7d().b[19][1]++;cov_4um9ape7d().s[79]++;callback(null,0);// No error
}});}else{cov_4um9ape7d().b[17][1]++;}});}// When we get unexpected args...
else{cov_4um9ape7d().b[15][1]++;var msg=(cov_4um9ape7d().s[80]++,"Invalid arguments to modular input script: "+args.join()+"\n");cov_4um9ape7d().s[81]++;Logger.error("",msg,eventWriter._err);cov_4um9ape7d().s[82]++;callback(msg,1);}}}};/**
     * Returns a `splunkjs.Service` object for this script invocation.
     *
     * The service object is created from the Splunkd URI and session key
     * passed to the command invocation on the modular input stream. It is
     * available as soon as the `ModularInput.streamEvents` function is called.
     *
     * @return {Object} A `Splunkjs.Service` Object, or null if you call this function before the `ModularInput.streamEvents` function is called.
     * @function splunkjs.ModularInputs.ModularInput
     */cov_4um9ape7d().s[83]++;ModularInput.service=function(){cov_4um9ape7d().f[17]++;cov_4um9ape7d().s[84]++;if(this._service){cov_4um9ape7d().b[20][0]++;cov_4um9ape7d().s[85]++;return this._service;}else{cov_4um9ape7d().b[20][1]++;}cov_4um9ape7d().s[86]++;if(!this._inputDefinition){cov_4um9ape7d().b[21][0]++;cov_4um9ape7d().s[87]++;return null;}else{cov_4um9ape7d().b[21][1]++;}var splunkdURI=(cov_4um9ape7d().s[88]++,this._inputDefinition.metadata["server_uri"]);var sessionKey=(cov_4um9ape7d().s[89]++,this._inputDefinition.metadata["session_key"]);var urlParts=(cov_4um9ape7d().s[90]++,url.parse(splunkdURI));// urlParts.protocol will have a trailing colon; remove it.
var scheme=(cov_4um9ape7d().s[91]++,urlParts.protocol.replace(":",""));var splunkdHost=(cov_4um9ape7d().s[92]++,urlParts.hostname);var splunkdPort=(cov_4um9ape7d().s[93]++,urlParts.port);cov_4um9ape7d().s[94]++;this._service=new Service({scheme:scheme,host:splunkdHost,port:splunkdPort,token:sessionKey});cov_4um9ape7d().s[95]++;return this._service;};// Default to empty functions for life cycle events.
/**
     * Runs before streaming begins.
     *
     * @param {Function} done The function to call when done: `(err)`.
     * @function splunkjs.ModularInputs.ModularInput
     */cov_4um9ape7d().s[96]++;ModularInput.prototype.setup=function(done){cov_4um9ape7d().f[18]++;cov_4um9ape7d().s[97]++;done();};/**
     * Runs once the streaming starts, for an input.
     *
     * @param {String} name The name of this modular input.
     * @param {Object} definition An InputDefinition object.
     * @param {Function} done The function to call when done: `(err)`.
     * @function splunkjs.ModularInputs.ModularInput
     */cov_4um9ape7d().s[98]++;ModularInput.prototype.start=function(name,definition,done){cov_4um9ape7d().f[19]++;cov_4um9ape7d().s[99]++;done();};/**
     * Runs once the streaming ends, for an input (upon successfully streaming all events).
     *
     * @param {String} name The name of this modular input.
     * @param {Object} definition An InputDefinition object.
     * @param {Function} done The function to call when done: `(err)`.
     * @function splunkjs.ModularInputs.ModularInput
     */cov_4um9ape7d().s[100]++;ModularInput.prototype.end=function(name,definition,done){cov_4um9ape7d().f[20]++;cov_4um9ape7d().s[101]++;done();};/**
     * Runs after all streaming is done for all inputs definitions.
     *
     * @param {Function} done The function to call when done: `(err)`.
     * @function splunkjs.ModularInputs.ModularInput
     */cov_4um9ape7d().s[102]++;ModularInput.prototype.teardown=function(done){cov_4um9ape7d().f[21]++;cov_4um9ape7d().s[103]++;done();};cov_4um9ape7d().s[104]++;module.exports=ModularInput;})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,