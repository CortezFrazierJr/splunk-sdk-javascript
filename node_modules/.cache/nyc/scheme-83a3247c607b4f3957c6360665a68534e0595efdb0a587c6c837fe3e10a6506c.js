function cov_b4oakr9tu(){var path="/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/scheme.js";var hash="76564ef564a5bd20d27f90714b4bca2a2175e625";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/scheme.js",statementMap:{"0":{start:{line:16,column:0},end:{line:111,column:5}},"1":{start:{line:17,column:13},end:{line:17,column:35}},"2":{start:{line:18,column:16},end:{line:18,column:34}},"3":{start:{line:19,column:19},end:{line:19,column:40}},"4":{start:{line:44,column:8},end:{line:44,column:59}},"5":{start:{line:47,column:8},end:{line:47,column:32}},"6":{start:{line:48,column:8},end:{line:48,column:42}},"7":{start:{line:49,column:8},end:{line:49,column:39}},"8":{start:{line:50,column:8},end:{line:50,column:53}},"9":{start:{line:53,column:8},end:{line:53,column:23}},"10":{start:{line:58,column:4},end:{line:58,column:42}},"11":{start:{line:59,column:4},end:{line:59,column:36}},"12":{start:{line:67,column:4},end:{line:71,column:6}},"13":{start:{line:68,column:8},end:{line:70,column:9}},"14":{start:{line:69,column:12},end:{line:69,column:32}},"15":{start:{line:79,column:4},end:{line:108,column:6}},"16":{start:{line:80,column:19},end:{line:80,column:39}},"17":{start:{line:82,column:8},end:{line:82,column:55}},"18":{start:{line:84,column:8},end:{line:86,column:9}},"19":{start:{line:85,column:12},end:{line:85,column:71}},"20":{start:{line:89,column:26},end:{line:93,column:9}},"21":{start:{line:95,column:8},end:{line:97,column:9}},"22":{start:{line:95,column:21},end:{line:95,column:22}},"23":{start:{line:96,column:12},end:{line:96,column:105}},"24":{start:{line:100,column:26},end:{line:100,column:80}},"25":{start:{line:103,column:8},end:{line:105,column:9}},"26":{start:{line:103,column:21},end:{line:103,column:22}},"27":{start:{line:104,column:12},end:{line:104,column:52}},"28":{start:{line:107,column:8},end:{line:107,column:20}},"29":{start:{line:110,column:4},end:{line:110,column:28}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:12},end:{line:111,column:1}},line:16},"1":{name:"Scheme",decl:{start:{line:43,column:13},end:{line:43,column:19}},loc:{start:{line:43,column:27},end:{line:54,column:5}},line:43},"2":{name:"(anonymous_2)",decl:{start:{line:67,column:35},end:{line:67,column:36}},loc:{start:{line:67,column:50},end:{line:71,column:5}},line:67},"3":{name:"(anonymous_3)",decl:{start:{line:79,column:29},end:{line:79,column:30}},loc:{start:{line:79,column:41},end:{line:108,column:5}},line:79}},branchMap:{"0":{loc:{start:{line:44,column:21},end:{line:44,column:58}},type:"cond-expr",locations:[{start:{line:44,column:48},end:{line:44,column:50}},{start:{line:44,column:53},end:{line:44,column:58}}],line:44},"1":{loc:{start:{line:68,column:8},end:{line:70,column:9}},type:"if",locations:[{start:{line:68,column:8},end:{line:70,column:9}},{start:{line:68,column:8},end:{line:70,column:9}}],line:68},"2":{loc:{start:{line:84,column:8},end:{line:86,column:9}},type:"if",locations:[{start:{line:84,column:8},end:{line:86,column:9}},{start:{line:84,column:8},end:{line:86,column:9}}],line:84}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"76564ef564a5bd20d27f90714b4bca2a2175e625"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_b4oakr9tu=function(){return actualCoverage;};}return actualCoverage;}cov_b4oakr9tu();cov_b4oakr9tu().s[0]++;/*!*/ // Copyright 2014 Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
(function(){cov_b4oakr9tu().f[0]++;var ET=(cov_b4oakr9tu().s[1]++,require("elementtree"));var utils=(cov_b4oakr9tu().s[2]++,require("./utils"));var Argument=(cov_b4oakr9tu().s[3]++,require("./argument"));/**
     * Class representing the metadata for a modular input kind.
     *
     * A `Scheme` specifies a title, description, several options of how Splunk 
     * should run modular inputs of this kind, and a set of arguments that define
     * a particular modular input's properties.
     * The primary use of `Scheme` is to abstract away the construction of XML
     * to feed to Splunk.
     *
     * @example
     *
     *      var s =  new Scheme();
     *
     *      var myFullScheme = new Scheme("fullScheme");
     *      myFullScheme.description = "This is how you set the other properties";
     *      myFullScheme.useExternalValidation = true;
     *      myFullScheme.useSingleInstance = false;
     *      myFullScheme.streamingMode = Scheme.streamingModeSimple;
     *
     * @param {String} The identifier for this Scheme in Splunk.
     * @class splunkjs.ModularInputs.Scheme
     */function Scheme(title){cov_b4oakr9tu().f[1]++;cov_b4oakr9tu().s[4]++;this.title=utils.isUndefined(title)?(cov_b4oakr9tu().b[0][0]++,""):(cov_b4oakr9tu().b[0][1]++,title);// Set the defaults.
cov_b4oakr9tu().s[5]++;this.description=null;cov_b4oakr9tu().s[6]++;this.useExternalValidation=true;cov_b4oakr9tu().s[7]++;this.useSingleInstance=false;cov_b4oakr9tu().s[8]++;this.streamingMode=Scheme.streamingModeXML;// List of Argument objects, each to be represented by an <arg> tag.
cov_b4oakr9tu().s[9]++;this.args=[];}// Constant values, do not change.
// These should be used for setting the value of a Scheme object's streamingMode field.
cov_b4oakr9tu().s[10]++;Scheme.streamingModeSimple="SIMPLE";cov_b4oakr9tu().s[11]++;Scheme.streamingModeXML="XML";/**
     * Add the provided argument, `arg`, to the `this.arguments` Array.
     *
     * @param {Object} arg An Argument object to add to this Scheme's argument list.
     * @function splunkjs.ModularInputs.Scheme
     */cov_b4oakr9tu().s[12]++;Scheme.prototype.addArgument=function(arg){cov_b4oakr9tu().f[2]++;cov_b4oakr9tu().s[13]++;if(arg){cov_b4oakr9tu().b[1][0]++;cov_b4oakr9tu().s[14]++;this.args.push(arg);}else{cov_b4oakr9tu().b[1][1]++;}};/**
     * Creates an elementtree Element representing this Scheme, then returns it.
     *
     * @return {Object} An elementtree Element object representing this Scheme.
     * @function splunkjs.ModularInputs.Scheme
     */cov_b4oakr9tu().s[15]++;Scheme.prototype.toXML=function(){cov_b4oakr9tu().f[3]++;var root=(cov_b4oakr9tu().s[16]++,ET.Element("scheme"));cov_b4oakr9tu().s[17]++;ET.SubElement(root,"title").text=this.title;cov_b4oakr9tu().s[18]++;if(this.description){cov_b4oakr9tu().b[2][0]++;cov_b4oakr9tu().s[19]++;ET.SubElement(root,"description").text=this.description;}else{cov_b4oakr9tu().b[2][1]++;}// Add all subelements to this <scheme>, represented by (tag, text).
var subElements=(cov_b4oakr9tu().s[20]++,[{tag:"use_external_validation",value:this.useExternalValidation},{tag:"use_single_instance",value:this.useSingleInstance},{tag:"streaming_mode",value:this.streamingMode}]);cov_b4oakr9tu().s[21]++;for(var i=(cov_b4oakr9tu().s[22]++,0);i<subElements.length;i++){cov_b4oakr9tu().s[23]++;ET.SubElement(root,subElements[i].tag).text=subElements[i].value.toString().toLowerCase();}// Create an <endpoint> subelement in root, then an <args> subelement in endpoint.
var argsElement=(cov_b4oakr9tu().s[24]++,ET.SubElement(ET.SubElement(root,"endpoint"),"args"));// Add arguments as subelements to <args>.
cov_b4oakr9tu().s[25]++;for(var j=(cov_b4oakr9tu().s[26]++,0);j<this.args.length;j++){cov_b4oakr9tu().s[27]++;this.args[j].addToDocument(argsElement);}cov_b4oakr9tu().s[28]++;return root;};cov_b4oakr9tu().s[29]++;module.exports=Scheme;})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,