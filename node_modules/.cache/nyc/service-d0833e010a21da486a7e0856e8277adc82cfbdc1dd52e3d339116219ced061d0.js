function cov_1nf65u3g4c(){var path="/Users/abhis/Documents/python/splunk-sdk-javascript/lib/service.js";var hash="ce0c734d65dbde409d28986f2e59fa44663d58aa";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/abhis/Documents/python/splunk-sdk-javascript/lib/service.js",statementMap:{"0":{start:{line:16,column:0},end:{line:5818,column:5}},"1":{start:{line:19,column:22},end:{line:19,column:42}},"2":{start:{line:20,column:22},end:{line:20,column:39}},"3":{start:{line:21,column:22},end:{line:21,column:40}},"4":{start:{line:22,column:22},end:{line:22,column:46}},"5":{start:{line:23,column:22},end:{line:23,column:53}},"6":{start:{line:24,column:22},end:{line:24,column:40}},"7":{start:{line:26,column:15},end:{line:26,column:30}},"8":{start:{line:27,column:18},end:{line:27,column:22}},"9":{start:{line:37,column:22},end:{line:41,column:6}},"10":{start:{line:39,column:12},end:{line:39,column:47}},"11":{start:{line:51,column:4},end:{line:664,column:7}},"12":{start:{line:73,column:12},end:{line:73,column:47}},"13":{start:{line:77,column:12},end:{line:77,column:72}},"14":{start:{line:78,column:12},end:{line:78,column:66}},"15":{start:{line:79,column:12},end:{line:79,column:76}},"16":{start:{line:80,column:12},end:{line:80,column:69}},"17":{start:{line:81,column:12},end:{line:81,column:75}},"18":{start:{line:82,column:12},end:{line:82,column:66}},"19":{start:{line:83,column:12},end:{line:83,column:67}},"20":{start:{line:84,column:12},end:{line:84,column:73}},"21":{start:{line:85,column:12},end:{line:85,column:67}},"22":{start:{line:86,column:12},end:{line:86,column:78}},"23":{start:{line:87,column:12},end:{line:87,column:72}},"24":{start:{line:106,column:12},end:{line:116,column:15}},"25":{start:{line:136,column:12},end:{line:136,column:47}},"26":{start:{line:164,column:12},end:{line:164,column:60}},"27":{start:{line:192,column:12},end:{line:192,column:53}},"28":{start:{line:218,column:12},end:{line:218,column:59}},"29":{start:{line:244,column:12},end:{line:244,column:62}},"30":{start:{line:271,column:12},end:{line:271,column:71}},"31":{start:{line:300,column:12},end:{line:300,column:50}},"32":{start:{line:312,column:12},end:{line:312,column:56}},"33":{start:{line:337,column:12},end:{line:337,column:40}},"34":{start:{line:366,column:12},end:{line:366,column:51}},"35":{start:{line:397,column:12},end:{line:400,column:13}},"36":{start:{line:398,column:16},end:{line:398,column:37}},"37":{start:{line:399,column:16},end:{line:399,column:33}},"38":{start:{line:402,column:23},end:{line:402,column:53}},"39":{start:{line:403,column:12},end:{line:403,column:56}},"40":{start:{line:420,column:12},end:{line:423,column:13}},"41":{start:{line:421,column:16},end:{line:421,column:37}},"42":{start:{line:422,column:16},end:{line:422,column:33}},"43":{start:{line:424,column:22},end:{line:424,column:56}},"44":{start:{line:425,column:12},end:{line:425,column:43}},"45":{start:{line:453,column:12},end:{line:456,column:13}},"46":{start:{line:454,column:16},end:{line:454,column:37}},"47":{start:{line:455,column:16},end:{line:455,column:33}},"48":{start:{line:458,column:23},end:{line:458,column:53}},"49":{start:{line:459,column:12},end:{line:459,column:63}},"50":{start:{line:478,column:12},end:{line:478,column:49}},"51":{start:{line:480,column:23},end:{line:480,column:27}},"52":{start:{line:481,column:22},end:{line:497,column:14}},"53":{start:{line:482,column:16},end:{line:496,column:17}},"54":{start:{line:483,column:20},end:{line:483,column:34}},"55":{start:{line:486,column:35},end:{line:486,column:74}},"56":{start:{line:487,column:31},end:{line:487,column:60}},"57":{start:{line:488,column:20},end:{line:495,column:23}},"58":{start:{line:489,column:24},end:{line:494,column:25}},"59":{start:{line:490,column:28},end:{line:490,column:35}},"60":{start:{line:493,column:28},end:{line:493,column:60}},"61":{start:{line:499,column:12},end:{line:499,column:23}},"62":{start:{line:517,column:12},end:{line:517,column:49}},"63":{start:{line:519,column:29},end:{line:519,column:54}},"64":{start:{line:520,column:12},end:{line:520,column:46}},"65":{start:{line:544,column:12},end:{line:547,column:13}},"66":{start:{line:545,column:16},end:{line:545,column:34}},"67":{start:{line:546,column:16},end:{line:546,column:28}},"68":{start:{line:549,column:12},end:{line:549,column:49}},"69":{start:{line:550,column:12},end:{line:550,column:34}},"70":{start:{line:552,column:12},end:{line:552,column:29}},"71":{start:{line:554,column:12},end:{line:561,column:15}},"72":{start:{line:555,column:16},end:{line:560,column:17}},"73":{start:{line:556,column:20},end:{line:556,column:34}},"74":{start:{line:559,column:20},end:{line:559,column:50}},"75":{start:{line:581,column:12},end:{line:584,column:13}},"76":{start:{line:582,column:16},end:{line:582,column:33}},"77":{start:{line:583,column:16},end:{line:583,column:27}},"78":{start:{line:586,column:12},end:{line:586,column:49}},"79":{start:{line:587,column:25},end:{line:590,column:13}},"80":{start:{line:592,column:12},end:{line:600,column:15}},"81":{start:{line:593,column:16},end:{line:599,column:17}},"82":{start:{line:594,column:20},end:{line:594,column:34}},"83":{start:{line:597,column:34},end:{line:597,column:63}},"84":{start:{line:598,column:20},end:{line:598,column:50}},"85":{start:{line:625,column:12},end:{line:628,column:13}},"86":{start:{line:626,column:16},end:{line:626,column:34}},"87":{start:{line:627,column:16},end:{line:627,column:28}},"88":{start:{line:630,column:12},end:{line:630,column:49}},"89":{start:{line:631,column:12},end:{line:631,column:34}},"90":{start:{line:634,column:12},end:{line:636,column:13}},"91":{start:{line:635,column:16},end:{line:635,column:46}},"92":{start:{line:638,column:23},end:{line:638,column:45}},"93":{start:{line:639,column:25},end:{line:639,column:31}},"94":{start:{line:640,column:26},end:{line:640,column:56}},"95":{start:{line:641,column:23},end:{line:641,column:28}},"96":{start:{line:642,column:22},end:{line:642,column:28}},"97":{start:{line:643,column:23},end:{line:643,column:25}},"98":{start:{line:645,column:22},end:{line:660,column:13}},"99":{start:{line:653,column:20},end:{line:658,column:21}},"100":{start:{line:654,column:24},end:{line:654,column:38}},"101":{start:{line:657,column:24},end:{line:657,column:54}},"102":{start:{line:662,column:12},end:{line:662,column:23}},"103":{start:{line:674,column:4},end:{line:800,column:7}},"104":{start:{line:686,column:12},end:{line:688,column:13}},"105":{start:{line:687,column:16},end:{line:687,column:61}},"106":{start:{line:690,column:12},end:{line:692,column:13}},"107":{start:{line:691,column:16},end:{line:691,column:60}},"108":{start:{line:694,column:12},end:{line:694,column:35}},"109":{start:{line:695,column:12},end:{line:695,column:47}},"110":{start:{line:699,column:12},end:{line:699,column:53}},"111":{start:{line:700,column:12},end:{line:700,column:54}},"112":{start:{line:701,column:12},end:{line:701,column:53}},"113":{start:{line:721,column:22},end:{line:721,column:40}},"114":{start:{line:725,column:12},end:{line:727,column:13}},"115":{start:{line:726,column:16},end:{line:726,column:42}},"116":{start:{line:729,column:12},end:{line:734,column:14}},"117":{start:{line:754,column:22},end:{line:754,column:40}},"118":{start:{line:758,column:12},end:{line:760,column:13}},"119":{start:{line:759,column:16},end:{line:759,column:42}},"120":{start:{line:762,column:12},end:{line:766,column:14}},"121":{start:{line:786,column:22},end:{line:786,column:40}},"122":{start:{line:790,column:12},end:{line:792,column:13}},"123":{start:{line:791,column:16},end:{line:791,column:42}},"124":{start:{line:794,column:12},end:{line:798,column:14}},"125":{start:{line:813,column:4},end:{line:901,column:7}},"126":{start:{line:829,column:27},end:{line:829,column:60}},"127":{start:{line:831,column:12},end:{line:831,column:43}},"128":{start:{line:832,column:12},end:{line:832,column:39}},"129":{start:{line:833,column:12},end:{line:833,column:34}},"130":{start:{line:834,column:12},end:{line:834,column:29}},"131":{start:{line:838,column:12},end:{line:838,column:60}},"132":{start:{line:839,column:12},end:{line:839,column:60}},"133":{start:{line:840,column:12},end:{line:840,column:65}},"134":{start:{line:841,column:12},end:{line:841,column:60}},"135":{start:{line:842,column:12},end:{line:842,column:59}},"136":{start:{line:851,column:12},end:{line:851,column:50}},"137":{start:{line:863,column:12},end:{line:863,column:48}},"138":{start:{line:864,column:12},end:{line:864,column:43}},"139":{start:{line:877,column:12},end:{line:877,column:50}},"140":{start:{line:888,column:12},end:{line:888,column:36}},"141":{start:{line:899,column:12},end:{line:899,column:31}},"142":{start:{line:914,column:4},end:{line:1223,column:7}},"143":{start:{line:939,column:12},end:{line:939,column:50}},"144":{start:{line:943,column:12},end:{line:943,column:58}},"145":{start:{line:944,column:12},end:{line:944,column:58}},"146":{start:{line:945,column:12},end:{line:945,column:59}},"147":{start:{line:946,column:12},end:{line:946,column:59}},"148":{start:{line:947,column:12},end:{line:947,column:59}},"149":{start:{line:948,column:12},end:{line:948,column:58}},"150":{start:{line:949,column:12},end:{line:949,column:56}},"151":{start:{line:950,column:12},end:{line:950,column:59}},"152":{start:{line:951,column:12},end:{line:951,column:60}},"153":{start:{line:952,column:12},end:{line:952,column:62}},"154":{start:{line:953,column:12},end:{line:953,column:59}},"155":{start:{line:954,column:12},end:{line:954,column:60}},"156":{start:{line:955,column:12},end:{line:955,column:59}},"157":{start:{line:958,column:12},end:{line:958,column:34}},"158":{start:{line:959,column:12},end:{line:959,column:34}},"159":{start:{line:960,column:12},end:{line:960,column:34}},"160":{start:{line:961,column:12},end:{line:961,column:34}},"161":{start:{line:973,column:12},end:{line:973,column:80}},"162":{start:{line:977,column:12},end:{line:982,column:14}},"163":{start:{line:984,column:12},end:{line:984,column:36}},"164":{start:{line:987,column:12},end:{line:987,column:58}},"165":{start:{line:988,column:12},end:{line:988,column:74}},"166":{start:{line:989,column:12},end:{line:989,column:58}},"167":{start:{line:990,column:12},end:{line:990,column:58}},"168":{start:{line:991,column:12},end:{line:991,column:60}},"169":{start:{line:992,column:12},end:{line:992,column:60}},"170":{start:{line:993,column:12},end:{line:993,column:60}},"171":{start:{line:1005,column:12},end:{line:1005,column:32}},"172":{start:{line:1017,column:12},end:{line:1017,column:29}},"173":{start:{line:1029,column:12},end:{line:1029,column:31}},"174":{start:{line:1040,column:12},end:{line:1040,column:32}},"175":{start:{line:1051,column:12},end:{line:1051,column:33}},"176":{start:{line:1062,column:12},end:{line:1062,column:35}},"177":{start:{line:1081,column:12},end:{line:1084,column:13}},"178":{start:{line:1082,column:16},end:{line:1082,column:35}},"179":{start:{line:1083,column:16},end:{line:1083,column:29}},"180":{start:{line:1085,column:12},end:{line:1085,column:49}},"181":{start:{line:1087,column:12},end:{line:1087,column:36}},"182":{start:{line:1089,column:23},end:{line:1089,column:27}},"183":{start:{line:1090,column:12},end:{line:1098,column:15}},"184":{start:{line:1091,column:16},end:{line:1097,column:17}},"185":{start:{line:1092,column:20},end:{line:1092,column:34}},"186":{start:{line:1095,column:20},end:{line:1095,column:75}},"187":{start:{line:1096,column:20},end:{line:1096,column:41}},"188":{start:{line:1110,column:12},end:{line:1110,column:49}},"189":{start:{line:1112,column:23},end:{line:1112,column:27}},"190":{start:{line:1113,column:12},end:{line:1115,column:15}},"191":{start:{line:1114,column:16},end:{line:1114,column:30}},"192":{start:{line:1128,column:12},end:{line:1128,column:49}},"193":{start:{line:1130,column:12},end:{line:1132,column:13}},"194":{start:{line:1131,column:16},end:{line:1131,column:71}},"195":{start:{line:1134,column:23},end:{line:1134,column:27}},"196":{start:{line:1135,column:22},end:{line:1153,column:14}},"197":{start:{line:1136,column:16},end:{line:1152,column:17}},"198":{start:{line:1137,column:20},end:{line:1137,column:52}},"199":{start:{line:1138,column:20},end:{line:1138,column:40}},"200":{start:{line:1140,column:21},end:{line:1152,column:17}},"201":{start:{line:1141,column:20},end:{line:1148,column:23}},"202":{start:{line:1142,column:24},end:{line:1147,column:25}},"203":{start:{line:1143,column:28},end:{line:1143,column:35}},"204":{start:{line:1146,column:28},end:{line:1146,column:60}},"205":{start:{line:1151,column:20},end:{line:1151,column:40}},"206":{start:{line:1155,column:12},end:{line:1155,column:23}},"207":{start:{line:1167,column:12},end:{line:1167,column:49}},"208":{start:{line:1169,column:23},end:{line:1169,column:27}},"209":{start:{line:1170,column:12},end:{line:1177,column:15}},"210":{start:{line:1171,column:16},end:{line:1176,column:17}},"211":{start:{line:1172,column:20},end:{line:1172,column:34}},"212":{start:{line:1175,column:20},end:{line:1175,column:41}},"213":{start:{line:1189,column:12},end:{line:1189,column:49}},"214":{start:{line:1191,column:23},end:{line:1191,column:27}},"215":{start:{line:1192,column:12},end:{line:1199,column:15}},"216":{start:{line:1193,column:16},end:{line:1198,column:17}},"217":{start:{line:1194,column:20},end:{line:1194,column:34}},"218":{start:{line:1197,column:20},end:{line:1197,column:41}},"219":{start:{line:1211,column:12},end:{line:1211,column:49}},"220":{start:{line:1213,column:23},end:{line:1213,column:27}},"221":{start:{line:1214,column:12},end:{line:1221,column:15}},"222":{start:{line:1215,column:16},end:{line:1220,column:17}},"223":{start:{line:1216,column:20},end:{line:1216,column:34}},"224":{start:{line:1219,column:20},end:{line:1219,column:41}},"225":{start:{line:1233,column:4},end:{line:1580,column:7}},"226":{start:{line:1258,column:12},end:{line:1258,column:50}},"227":{start:{line:1262,column:12},end:{line:1262,column:66}},"228":{start:{line:1263,column:12},end:{line:1263,column:66}},"229":{start:{line:1264,column:12},end:{line:1264,column:67}},"230":{start:{line:1265,column:12},end:{line:1265,column:72}},"231":{start:{line:1266,column:12},end:{line:1266,column:65}},"232":{start:{line:1267,column:12},end:{line:1267,column:65}},"233":{start:{line:1268,column:12},end:{line:1268,column:78}},"234":{start:{line:1271,column:12},end:{line:1271,column:38}},"235":{start:{line:1272,column:12},end:{line:1272,column:38}},"236":{start:{line:1273,column:12},end:{line:1273,column:38}},"237":{start:{line:1274,column:12},end:{line:1274,column:38}},"238":{start:{line:1275,column:12},end:{line:1275,column:38}},"239":{start:{line:1287,column:12},end:{line:1287,column:50}},"240":{start:{line:1300,column:12},end:{line:1300,column:36}},"241":{start:{line:1302,column:27},end:{line:1302,column:29}},"242":{start:{line:1303,column:33},end:{line:1303,column:35}},"243":{start:{line:1304,column:37},end:{line:1304,column:59}},"244":{start:{line:1305,column:12},end:{line:1317,column:13}},"245":{start:{line:1305,column:24},end:{line:1305,column:25}},"246":{start:{line:1306,column:28},end:{line:1306,column:49}},"247":{start:{line:1307,column:29},end:{line:1307,column:58}},"248":{start:{line:1308,column:16},end:{line:1308,column:36}},"249":{start:{line:1309,column:16},end:{line:1309,column:38}},"250":{start:{line:1311,column:16},end:{line:1316,column:17}},"251":{start:{line:1312,column:20},end:{line:1312,column:61}},"252":{start:{line:1315,column:20},end:{line:1315,column:59}},"253":{start:{line:1318,column:12},end:{line:1318,column:44}},"254":{start:{line:1319,column:12},end:{line:1319,column:50}},"255":{start:{line:1320,column:12},end:{line:1320,column:62}},"256":{start:{line:1321,column:12},end:{line:1321,column:62}},"257":{start:{line:1322,column:12},end:{line:1322,column:64}},"258":{start:{line:1334,column:12},end:{line:1334,column:31}},"259":{start:{line:1345,column:12},end:{line:1345,column:32}},"260":{start:{line:1356,column:12},end:{line:1356,column:33}},"261":{start:{line:1375,column:12},end:{line:1378,column:13}},"262":{start:{line:1376,column:16},end:{line:1376,column:35}},"263":{start:{line:1377,column:16},end:{line:1377,column:29}},"264":{start:{line:1379,column:12},end:{line:1379,column:49}},"265":{start:{line:1381,column:12},end:{line:1381,column:36}},"266":{start:{line:1382,column:12},end:{line:1384,column:13}},"267":{start:{line:1383,column:16},end:{line:1383,column:34}},"268":{start:{line:1386,column:23},end:{line:1386,column:27}},"269":{start:{line:1387,column:22},end:{line:1395,column:14}},"270":{start:{line:1388,column:16},end:{line:1394,column:17}},"271":{start:{line:1389,column:20},end:{line:1389,column:34}},"272":{start:{line:1392,column:20},end:{line:1392,column:46}},"273":{start:{line:1393,column:20},end:{line:1393,column:41}},"274":{start:{line:1397,column:12},end:{line:1397,column:23}},"275":{start:{line:1417,column:12},end:{line:1417,column:36}},"276":{start:{line:1418,column:12},end:{line:1420,column:13}},"277":{start:{line:1419,column:16},end:{line:1419,column:34}},"278":{start:{line:1422,column:23},end:{line:1422,column:27}},"279":{start:{line:1423,column:27},end:{line:1423,column:66}},"280":{start:{line:1424,column:12},end:{line:1424,column:38}},"281":{start:{line:1425,column:12},end:{line:1425,column:24}},"282":{start:{line:1450,column:12},end:{line:1452,column:13}},"283":{start:{line:1451,column:16},end:{line:1451,column:33}},"284":{start:{line:1454,column:12},end:{line:1456,column:13}},"285":{start:{line:1455,column:16},end:{line:1455,column:64}},"286":{start:{line:1458,column:12},end:{line:1460,column:13}},"287":{start:{line:1459,column:16},end:{line:1459,column:136}},"288":{start:{line:1462,column:27},end:{line:1462,column:31}},"289":{start:{line:1463,column:12},end:{line:1505,column:13}},"290":{start:{line:1464,column:31},end:{line:1464,column:55}},"291":{start:{line:1466,column:16},end:{line:1501,column:17}},"292":{start:{line:1471,column:20},end:{line:1471,column:39}},"293":{start:{line:1473,column:21},end:{line:1501,column:17}},"294":{start:{line:1477,column:20},end:{line:1477,column:84}},"295":{start:{line:1478,column:20},end:{line:1483,column:21}},"296":{start:{line:1479,column:24},end:{line:1479,column:43}},"297":{start:{line:1482,column:24},end:{line:1482,column:36}},"298":{start:{line:1485,column:21},end:{line:1501,column:17}},"299":{start:{line:1489,column:20},end:{line:1489,column:77}},"300":{start:{line:1494,column:20},end:{line:1500,column:21}},"301":{start:{line:1494,column:32},end:{line:1494,column:33}},"302":{start:{line:1495,column:37},end:{line:1495,column:48}},"303":{start:{line:1496,column:24},end:{line:1496,column:88}},"304":{start:{line:1497,column:24},end:{line:1499,column:25}},"305":{start:{line:1498,column:28},end:{line:1498,column:42}},"306":{start:{line:1504,column:16},end:{line:1504,column:28}},"307":{start:{line:1526,column:12},end:{line:1526,column:49}},"308":{start:{line:1527,column:23},end:{line:1527,column:27}},"309":{start:{line:1528,column:22},end:{line:1555,column:14}},"310":{start:{line:1529,column:16},end:{line:1554,column:17}},"311":{start:{line:1530,column:20},end:{line:1530,column:34}},"312":{start:{line:1533,column:32},end:{line:1533,column:51}},"313":{start:{line:1534,column:20},end:{line:1536,column:21}},"314":{start:{line:1535,column:24},end:{line:1535,column:41}},"315":{start:{line:1538,column:33},end:{line:1538,column:62}},"316":{start:{line:1539,column:20},end:{line:1539,column:40}},"317":{start:{line:1541,column:20},end:{line:1553,column:21}},"318":{start:{line:1542,column:24},end:{line:1549,column:27}},"319":{start:{line:1543,column:28},end:{line:1548,column:29}},"320":{start:{line:1544,column:32},end:{line:1544,column:39}},"321":{start:{line:1547,column:32},end:{line:1547,column:64}},"322":{start:{line:1552,column:24},end:{line:1552,column:47}},"323":{start:{line:1557,column:12},end:{line:1557,column:23}},"324":{start:{line:1576,column:12},end:{line:1576,column:49}},"325":{start:{line:1578,column:12},end:{line:1578,column:47}},"326":{start:{line:1590,column:4},end:{line:1844,column:7}},"327":{start:{line:1597,column:12},end:{line:1597,column:77}},"328":{start:{line:1615,column:12},end:{line:1615,column:29}},"329":{start:{line:1616,column:12},end:{line:1616,column:57}},"330":{start:{line:1618,column:12},end:{line:1618,column:67}},"331":{start:{line:1619,column:12},end:{line:1619,column:64}},"332":{start:{line:1620,column:12},end:{line:1620,column:63}},"333":{start:{line:1621,column:12},end:{line:1621,column:68}},"334":{start:{line:1638,column:12},end:{line:1638,column:78}},"335":{start:{line:1658,column:12},end:{line:1658,column:49}},"336":{start:{line:1660,column:23},end:{line:1660,column:27}},"337":{start:{line:1661,column:22},end:{line:1663,column:14}},"338":{start:{line:1662,column:16},end:{line:1662,column:36}},"339":{start:{line:1665,column:12},end:{line:1665,column:23}},"340":{start:{line:1690,column:12},end:{line:1693,column:13}},"341":{start:{line:1691,column:16},end:{line:1691,column:35}},"342":{start:{line:1692,column:16},end:{line:1692,column:29}},"343":{start:{line:1695,column:12},end:{line:1695,column:49}},"344":{start:{line:1696,column:12},end:{line:1696,column:36}},"345":{start:{line:1698,column:23},end:{line:1698,column:27}},"346":{start:{line:1699,column:22},end:{line:1709,column:14}},"347":{start:{line:1700,column:16},end:{line:1703,column:17}},"348":{start:{line:1701,column:20},end:{line:1701,column:34}},"349":{start:{line:1702,column:20},end:{line:1702,column:27}},"350":{start:{line:1705,column:26},end:{line:1705,column:43}},"351":{start:{line:1706,column:26},end:{line:1706,column:73}},"352":{start:{line:1708,column:16},end:{line:1708,column:42}},"353":{start:{line:1711,column:12},end:{line:1711,column:23}},"354":{start:{line:1727,column:12},end:{line:1727,column:69}},"355":{start:{line:1750,column:12},end:{line:1753,column:13}},"356":{start:{line:1751,column:16},end:{line:1751,column:35}},"357":{start:{line:1752,column:16},end:{line:1752,column:29}},"358":{start:{line:1755,column:12},end:{line:1755,column:49}},"359":{start:{line:1756,column:12},end:{line:1756,column:36}},"360":{start:{line:1758,column:23},end:{line:1758,column:27}},"361":{start:{line:1759,column:12},end:{line:1777,column:15}},"362":{start:{line:1760,column:16},end:{line:1763,column:17}},"363":{start:{line:1761,column:20},end:{line:1761,column:34}},"364":{start:{line:1762,column:20},end:{line:1762,column:27}},"365":{start:{line:1765,column:27},end:{line:1765,column:29}},"366":{start:{line:1766,column:27},end:{line:1766,column:52}},"367":{start:{line:1767,column:16},end:{line:1774,column:17}},"368":{start:{line:1767,column:28},end:{line:1767,column:29}},"369":{start:{line:1768,column:34},end:{line:1768,column:56}},"370":{start:{line:1769,column:36},end:{line:1769,column:74}},"371":{start:{line:1770,column:30},end:{line:1770,column:81}},"372":{start:{line:1772,column:20},end:{line:1772,column:39}},"373":{start:{line:1773,column:20},end:{line:1773,column:35}},"374":{start:{line:1776,column:16},end:{line:1776,column:43}},"375":{start:{line:1796,column:12},end:{line:1796,column:49}},"376":{start:{line:1798,column:23},end:{line:1798,column:27}},"377":{start:{line:1799,column:12},end:{line:1801,column:15}},"378":{start:{line:1800,column:16},end:{line:1800,column:65}},"379":{start:{line:1817,column:12},end:{line:1817,column:34}},"380":{start:{line:1819,column:12},end:{line:1842,column:13}},"381":{start:{line:1820,column:29},end:{line:1820,column:40}},"382":{start:{line:1821,column:26},end:{line:1836,column:18}},"383":{start:{line:1822,column:20},end:{line:1835,column:21}},"384":{start:{line:1823,column:24},end:{line:1823,column:38}},"385":{start:{line:1826,column:24},end:{line:1826,column:67}},"386":{start:{line:1827,column:24},end:{line:1834,column:27}},"387":{start:{line:1828,column:28},end:{line:1833,column:29}},"388":{start:{line:1829,column:32},end:{line:1829,column:39}},"389":{start:{line:1832,column:32},end:{line:1832,column:64}},"390":{start:{line:1838,column:16},end:{line:1838,column:27}},"391":{start:{line:1841,column:16},end:{line:1841,column:53}},"392":{start:{line:1855,column:4},end:{line:1894,column:7}},"393":{start:{line:1862,column:12},end:{line:1862,column:39}},"394":{start:{line:1874,column:34},end:{line:1874,column:70}},"395":{start:{line:1875,column:12},end:{line:1875,column:83}},"396":{start:{line:1892,column:12},end:{line:1892,column:57}},"397":{start:{line:1904,column:4},end:{line:1932,column:7}},"398":{start:{line:1911,column:12},end:{line:1911,column:80}},"399":{start:{line:1929,column:12},end:{line:1929,column:29}},"400":{start:{line:1930,column:12},end:{line:1930,column:57}},"401":{start:{line:1942,column:4},end:{line:1992,column:7}},"402":{start:{line:1958,column:12},end:{line:1958,column:42}},"403":{start:{line:1972,column:34},end:{line:1972,column:70}},"404":{start:{line:1973,column:12},end:{line:1973,column:87}},"405":{start:{line:1990,column:12},end:{line:1990,column:57}},"406":{start:{line:2003,column:4},end:{line:2144,column:7}},"407":{start:{line:2010,column:12},end:{line:2010,column:75}},"408":{start:{line:2022,column:12},end:{line:2022,column:51}},"409":{start:{line:2032,column:12},end:{line:2032,column:56}},"410":{start:{line:2046,column:12},end:{line:2046,column:51}},"411":{start:{line:2058,column:12},end:{line:2058,column:70}},"412":{start:{line:2068,column:12},end:{line:2068,column:62}},"413":{start:{line:2079,column:12},end:{line:2079,column:66}},"414":{start:{line:2089,column:12},end:{line:2089,column:49}},"415":{start:{line:2099,column:12},end:{line:2099,column:58}},"416":{start:{line:2111,column:12},end:{line:2111,column:67}},"417":{start:{line:2123,column:12},end:{line:2123,column:74}},"418":{start:{line:2141,column:12},end:{line:2141,column:29}},"419":{start:{line:2142,column:12},end:{line:2142,column:57}},"420":{start:{line:2155,column:4},end:{line:2244,column:7}},"421":{start:{line:2162,column:12},end:{line:2162,column:75}},"422":{start:{line:2174,column:12},end:{line:2174,column:78}},"423":{start:{line:2195,column:12},end:{line:2198,column:13}},"424":{start:{line:2196,column:16},end:{line:2196,column:35}},"425":{start:{line:2197,column:16},end:{line:2197,column:29}},"426":{start:{line:2200,column:12},end:{line:2200,column:49}},"427":{start:{line:2201,column:12},end:{line:2201,column:36}},"428":{start:{line:2203,column:23},end:{line:2203,column:27}},"429":{start:{line:2204,column:12},end:{line:2221,column:15}},"430":{start:{line:2205,column:16},end:{line:2208,column:17}},"431":{start:{line:2206,column:20},end:{line:2206,column:34}},"432":{start:{line:2207,column:20},end:{line:2207,column:27}},"433":{start:{line:2210,column:34},end:{line:2210,column:36}},"434":{start:{line:2211,column:27},end:{line:2211,column:52}},"435":{start:{line:2212,column:16},end:{line:2218,column:17}},"436":{start:{line:2212,column:29},end:{line:2212,column:30}},"437":{start:{line:2213,column:41},end:{line:2213,column:63}},"438":{start:{line:2214,column:36},end:{line:2214,column:81}},"439":{start:{line:2215,column:37},end:{line:2215,column:102}},"440":{start:{line:2216,column:20},end:{line:2216,column:53}},"441":{start:{line:2217,column:20},end:{line:2217,column:49}},"442":{start:{line:2220,column:16},end:{line:2220,column:50}},"443":{start:{line:2239,column:12},end:{line:2239,column:29}},"444":{start:{line:2240,column:12},end:{line:2240,column:57}},"445":{start:{line:2242,column:12},end:{line:2242,column:52}},"446":{start:{line:2256,column:4},end:{line:2307,column:7}},"447":{start:{line:2263,column:12},end:{line:2263,column:37}},"448":{start:{line:2275,column:34},end:{line:2275,column:70}},"449":{start:{line:2276,column:12},end:{line:2276,column:87}},"450":{start:{line:2285,column:12},end:{line:2285,column:95}},"451":{start:{line:2302,column:12},end:{line:2302,column:57}},"452":{start:{line:2304,column:12},end:{line:2304,column:78}},"453":{start:{line:2305,column:12},end:{line:2305,column:56}},"454":{start:{line:2317,column:4},end:{line:2410,column:7}},"455":{start:{line:2332,column:12},end:{line:2332,column:68}},"456":{start:{line:2346,column:12},end:{line:2346,column:29}},"457":{start:{line:2347,column:12},end:{line:2347,column:50}},"458":{start:{line:2349,column:12},end:{line:2349,column:63}},"459":{start:{line:2350,column:12},end:{line:2350,column:64}},"460":{start:{line:2369,column:12},end:{line:2369,column:49}},"461":{start:{line:2371,column:23},end:{line:2371,column:27}},"462":{start:{line:2372,column:12},end:{line:2379,column:15}},"463":{start:{line:2373,column:16},end:{line:2378,column:17}},"464":{start:{line:2374,column:20},end:{line:2374,column:34}},"465":{start:{line:2377,column:20},end:{line:2377,column:70}},"466":{start:{line:2398,column:12},end:{line:2398,column:49}},"467":{start:{line:2400,column:23},end:{line:2400,column:27}},"468":{start:{line:2401,column:12},end:{line:2408,column:15}},"469":{start:{line:2402,column:16},end:{line:2407,column:17}},"470":{start:{line:2403,column:20},end:{line:2403,column:34}},"471":{start:{line:2406,column:20},end:{line:2406,column:70}},"472":{start:{line:2420,column:4},end:{line:2463,column:7}},"473":{start:{line:2436,column:12},end:{line:2436,column:30}},"474":{start:{line:2448,column:12},end:{line:2448,column:70}},"475":{start:{line:2461,column:12},end:{line:2461,column:50}},"476":{start:{line:2472,column:4},end:{line:2495,column:7}},"477":{start:{line:2479,column:12},end:{line:2479,column:30}},"478":{start:{line:2492,column:12},end:{line:2492,column:38}},"479":{start:{line:2493,column:12},end:{line:2493,column:50}},"480":{start:{line:2505,column:4},end:{line:2529,column:7}},"481":{start:{line:2512,column:12},end:{line:2512,column:69}},"482":{start:{line:2526,column:12},end:{line:2526,column:29}},"483":{start:{line:2527,column:12},end:{line:2527,column:50}},"484":{start:{line:2539,column:4},end:{line:2619,column:7}},"485":{start:{line:2555,column:12},end:{line:2555,column:31}},"486":{start:{line:2567,column:12},end:{line:2567,column:63}},"487":{start:{line:2580,column:12},end:{line:2580,column:50}},"488":{start:{line:2594,column:12},end:{line:2594,column:49}},"489":{start:{line:2596,column:23},end:{line:2596,column:27}},"490":{start:{line:2597,column:22},end:{line:2615,column:14}},"491":{start:{line:2598,column:16},end:{line:2614,column:17}},"492":{start:{line:2599,column:20},end:{line:2599,column:34}},"493":{start:{line:2603,column:32},end:{line:2603,column:51}},"494":{start:{line:2605,column:33},end:{line:2605,column:62}},"495":{start:{line:2606,column:20},end:{line:2613,column:23}},"496":{start:{line:2607,column:24},end:{line:2612,column:25}},"497":{start:{line:2608,column:28},end:{line:2608,column:35}},"498":{start:{line:2611,column:28},end:{line:2611,column:60}},"499":{start:{line:2617,column:12},end:{line:2617,column:23}},"500":{start:{line:2629,column:4},end:{line:2657,column:7}},"501":{start:{line:2636,column:12},end:{line:2636,column:69}},"502":{start:{line:2654,column:12},end:{line:2654,column:29}},"503":{start:{line:2655,column:12},end:{line:2655,column:57}},"504":{start:{line:2667,column:4},end:{line:2706,column:7}},"505":{start:{line:2674,column:12},end:{line:2674,column:31}},"506":{start:{line:2686,column:34},end:{line:2686,column:70}},"507":{start:{line:2687,column:12},end:{line:2687,column:76}},"508":{start:{line:2704,column:12},end:{line:2704,column:57}},"509":{start:{line:2715,column:4},end:{line:2793,column:7}},"510":{start:{line:2722,column:12},end:{line:2722,column:71}},"511":{start:{line:2740,column:12},end:{line:2740,column:29}},"512":{start:{line:2741,column:12},end:{line:2741,column:57}},"513":{start:{line:2743,column:12},end:{line:2743,column:66}},"514":{start:{line:2768,column:12},end:{line:2771,column:13}},"515":{start:{line:2769,column:16},end:{line:2769,column:34}},"516":{start:{line:2770,column:16},end:{line:2770,column:28}},"517":{start:{line:2773,column:12},end:{line:2773,column:49}},"518":{start:{line:2774,column:12},end:{line:2774,column:34}},"519":{start:{line:2777,column:12},end:{line:2777,column:40}},"520":{start:{line:2779,column:23},end:{line:2779,column:27}},"521":{start:{line:2780,column:12},end:{line:2782,column:15}},"522":{start:{line:2781,column:16},end:{line:2781,column:44}},"523":{start:{line:2786,column:12},end:{line:2791,column:13}},"524":{start:{line:2787,column:16},end:{line:2787,column:75}},"525":{start:{line:2790,column:16},end:{line:2790,column:45}},"526":{start:{line:2803,column:4},end:{line:2874,column:7}},"527":{start:{line:2810,column:12},end:{line:2810,column:33}},"528":{start:{line:2822,column:34},end:{line:2822,column:70}},"529":{start:{line:2823,column:12},end:{line:2823,column:77}},"530":{start:{line:2840,column:12},end:{line:2840,column:57}},"531":{start:{line:2863,column:12},end:{line:2867,column:13}},"532":{start:{line:2864,column:16},end:{line:2864,column:34}},"533":{start:{line:2865,column:16},end:{line:2865,column:30}},"534":{start:{line:2866,column:16},end:{line:2866,column:35}},"535":{start:{line:2869,column:12},end:{line:2869,column:34}},"536":{start:{line:2870,column:12},end:{line:2870,column:34}},"537":{start:{line:2872,column:12},end:{line:2872,column:49}},"538":{start:{line:2884,column:4},end:{line:2915,column:7}},"539":{start:{line:2891,column:23},end:{line:2891,column:67}},"540":{start:{line:2892,column:12},end:{line:2892,column:116}},"541":{start:{line:2911,column:12},end:{line:2911,column:29}},"542":{start:{line:2912,column:12},end:{line:2912,column:29}},"543":{start:{line:2913,column:12},end:{line:2913,column:57}},"544":{start:{line:2926,column:4},end:{line:3018,column:7}},"545":{start:{line:2933,column:12},end:{line:2933,column:83}},"546":{start:{line:2947,column:12},end:{line:2947,column:100}},"547":{start:{line:2959,column:34},end:{line:2959,column:70}},"548":{start:{line:2960,column:12},end:{line:2960,column:102}},"549":{start:{line:2978,column:12},end:{line:2978,column:29}},"550":{start:{line:2979,column:12},end:{line:2979,column:57}},"551":{start:{line:3002,column:12},end:{line:3006,column:13}},"552":{start:{line:3003,column:16},end:{line:3003,column:34}},"553":{start:{line:3004,column:16},end:{line:3004,column:36}},"554":{start:{line:3005,column:16},end:{line:3005,column:41}},"555":{start:{line:3008,column:12},end:{line:3011,column:13}},"556":{start:{line:3009,column:16},end:{line:3009,column:34}},"557":{start:{line:3010,column:16},end:{line:3010,column:28}},"558":{start:{line:3013,column:12},end:{line:3013,column:34}},"559":{start:{line:3014,column:12},end:{line:3014,column:40}},"560":{start:{line:3016,column:12},end:{line:3016,column:49}},"561":{start:{line:3028,column:4},end:{line:3228,column:7}},"562":{start:{line:3044,column:12},end:{line:3044,column:36}},"563":{start:{line:3056,column:12},end:{line:3056,column:88}},"564":{start:{line:3073,column:12},end:{line:3075,column:13}},"565":{start:{line:3074,column:16},end:{line:3074,column:84}},"566":{start:{line:3077,column:12},end:{line:3077,column:57}},"567":{start:{line:3099,column:12},end:{line:3101,column:13}},"568":{start:{line:3100,column:16},end:{line:3100,column:46}},"569":{start:{line:3103,column:12},end:{line:3103,column:49}},"570":{start:{line:3105,column:23},end:{line:3105,column:27}},"571":{start:{line:3106,column:22},end:{line:3121,column:14}},"572":{start:{line:3107,column:16},end:{line:3120,column:17}},"573":{start:{line:3108,column:20},end:{line:3108,column:34}},"574":{start:{line:3111,column:33},end:{line:3111,column:83}},"575":{start:{line:3112,column:20},end:{line:3119,column:23}},"576":{start:{line:3113,column:24},end:{line:3118,column:25}},"577":{start:{line:3114,column:28},end:{line:3114,column:35}},"578":{start:{line:3117,column:28},end:{line:3117,column:60}},"579":{start:{line:3123,column:12},end:{line:3123,column:23}},"580":{start:{line:3136,column:23},end:{line:3136,column:27}},"581":{start:{line:3139,column:27},end:{line:3139,column:78}},"582":{start:{line:3142,column:24},end:{line:3145,column:83}},"583":{start:{line:3145,column:63},end:{line:3145,column:82}},"584":{start:{line:3148,column:12},end:{line:3150,column:13}},"585":{start:{line:3149,column:16},end:{line:3149,column:28}},"586":{start:{line:3153,column:36},end:{line:3153,column:86}},"587":{start:{line:3156,column:30},end:{line:3156,column:66}},"588":{start:{line:3158,column:12},end:{line:3158,column:31}},"589":{start:{line:3173,column:32},end:{line:3173,column:49}},"590":{start:{line:3175,column:12},end:{line:3180,column:13}},"591":{start:{line:3176,column:16},end:{line:3176,column:28}},"592":{start:{line:3179,column:16},end:{line:3179,column:37}},"593":{start:{line:3195,column:12},end:{line:3195,column:49}},"594":{start:{line:3196,column:23},end:{line:3196,column:27}},"595":{start:{line:3199,column:29},end:{line:3199,column:61}},"596":{start:{line:3202,column:12},end:{line:3208,column:13}},"597":{start:{line:3204,column:16},end:{line:3204,column:51}},"598":{start:{line:3206,column:16},end:{line:3206,column:82}},"599":{start:{line:3207,column:16},end:{line:3207,column:59}},"600":{start:{line:3211,column:31},end:{line:3211,column:75}},"601":{start:{line:3214,column:12},end:{line:3226,column:13}},"602":{start:{line:3216,column:16},end:{line:3218,column:19}},"603":{start:{line:3217,column:20},end:{line:3217,column:31}},"604":{start:{line:3223,column:16},end:{line:3225,column:19}},"605":{start:{line:3224,column:20},end:{line:3224,column:31}},"606":{start:{line:3238,column:4},end:{line:3829,column:7}},"607":{start:{line:3245,column:12},end:{line:3245,column:68}},"608":{start:{line:3263,column:12},end:{line:3263,column:28}},"609":{start:{line:3264,column:12},end:{line:3264,column:57}},"610":{start:{line:3265,column:12},end:{line:3265,column:27}},"611":{start:{line:3269,column:12},end:{line:3269,column:64}},"612":{start:{line:3270,column:12},end:{line:3270,column:72}},"613":{start:{line:3271,column:12},end:{line:3271,column:71}},"614":{start:{line:3272,column:12},end:{line:3272,column:64}},"615":{start:{line:3273,column:12},end:{line:3273,column:66}},"616":{start:{line:3274,column:12},end:{line:3274,column:63}},"617":{start:{line:3275,column:12},end:{line:3275,column:65}},"618":{start:{line:3276,column:12},end:{line:3276,column:65}},"619":{start:{line:3277,column:12},end:{line:3277,column:67}},"620":{start:{line:3278,column:12},end:{line:3278,column:69}},"621":{start:{line:3279,column:12},end:{line:3279,column:64}},"622":{start:{line:3280,column:12},end:{line:3280,column:65}},"623":{start:{line:3281,column:12},end:{line:3281,column:66}},"624":{start:{line:3282,column:12},end:{line:3282,column:63}},"625":{start:{line:3283,column:12},end:{line:3283,column:65}},"626":{start:{line:3302,column:22},end:{line:3302,column:72}},"627":{start:{line:3304,column:12},end:{line:3304,column:23}},"628":{start:{line:3323,column:12},end:{line:3323,column:49}},"629":{start:{line:3325,column:23},end:{line:3325,column:27}},"630":{start:{line:3326,column:22},end:{line:3328,column:14}},"631":{start:{line:3327,column:16},end:{line:3327,column:36}},"632":{start:{line:3330,column:12},end:{line:3330,column:23}},"633":{start:{line:3349,column:12},end:{line:3349,column:49}},"634":{start:{line:3351,column:23},end:{line:3351,column:27}},"635":{start:{line:3352,column:22},end:{line:3354,column:14}},"636":{start:{line:3353,column:16},end:{line:3353,column:36}},"637":{start:{line:3356,column:12},end:{line:3356,column:23}},"638":{start:{line:3376,column:12},end:{line:3376,column:49}},"639":{start:{line:3377,column:12},end:{line:3377,column:34}},"640":{start:{line:3378,column:12},end:{line:3378,column:67}},"641":{start:{line:3380,column:23},end:{line:3380,column:27}},"642":{start:{line:3381,column:12},end:{line:3388,column:15}},"643":{start:{line:3382,column:16},end:{line:3387,column:17}},"644":{start:{line:3383,column:20},end:{line:3383,column:34}},"645":{start:{line:3386,column:20},end:{line:3386,column:56}},"646":{start:{line:3407,column:12},end:{line:3407,column:49}},"647":{start:{line:3409,column:23},end:{line:3409,column:27}},"648":{start:{line:3410,column:22},end:{line:3412,column:14}},"649":{start:{line:3411,column:16},end:{line:3411,column:36}},"650":{start:{line:3414,column:12},end:{line:3414,column:23}},"651":{start:{line:3429,column:12},end:{line:3429,column:74}},"652":{start:{line:3448,column:12},end:{line:3448,column:49}},"653":{start:{line:3450,column:23},end:{line:3450,column:27}},"654":{start:{line:3451,column:22},end:{line:3453,column:14}},"655":{start:{line:3452,column:16},end:{line:3452,column:36}},"656":{start:{line:3455,column:12},end:{line:3455,column:23}},"657":{start:{line:3475,column:12},end:{line:3475,column:49}},"658":{start:{line:3476,column:12},end:{line:3476,column:34}},"659":{start:{line:3477,column:12},end:{line:3477,column:67}},"660":{start:{line:3479,column:23},end:{line:3479,column:27}},"661":{start:{line:3480,column:12},end:{line:3487,column:15}},"662":{start:{line:3481,column:16},end:{line:3486,column:17}},"663":{start:{line:3482,column:20},end:{line:3482,column:34}},"664":{start:{line:3485,column:20},end:{line:3485,column:56}},"665":{start:{line:3512,column:12},end:{line:3512,column:49}},"666":{start:{line:3513,column:12},end:{line:3513,column:34}},"667":{start:{line:3514,column:12},end:{line:3514,column:67}},"668":{start:{line:3516,column:23},end:{line:3516,column:27}},"669":{start:{line:3517,column:12},end:{line:3524,column:15}},"670":{start:{line:3518,column:16},end:{line:3523,column:17}},"671":{start:{line:3519,column:20},end:{line:3519,column:34}},"672":{start:{line:3522,column:20},end:{line:3522,column:56}},"673":{start:{line:3543,column:12},end:{line:3543,column:49}},"674":{start:{line:3545,column:23},end:{line:3545,column:27}},"675":{start:{line:3546,column:12},end:{line:3553,column:15}},"676":{start:{line:3547,column:16},end:{line:3552,column:17}},"677":{start:{line:3548,column:20},end:{line:3548,column:34}},"678":{start:{line:3551,column:20},end:{line:3551,column:56}},"679":{start:{line:3573,column:12},end:{line:3573,column:49}},"680":{start:{line:3575,column:23},end:{line:3575,column:27}},"681":{start:{line:3576,column:22},end:{line:3578,column:14}},"682":{start:{line:3577,column:16},end:{line:3577,column:36}},"683":{start:{line:3580,column:12},end:{line:3580,column:23}},"684":{start:{line:3601,column:12},end:{line:3601,column:49}},"685":{start:{line:3603,column:23},end:{line:3603,column:27}},"686":{start:{line:3604,column:22},end:{line:3606,column:14}},"687":{start:{line:3605,column:16},end:{line:3605,column:36}},"688":{start:{line:3608,column:12},end:{line:3608,column:23}},"689":{start:{line:3628,column:12},end:{line:3628,column:49}},"690":{start:{line:3630,column:23},end:{line:3630,column:27}},"691":{start:{line:3631,column:12},end:{line:3638,column:15}},"692":{start:{line:3632,column:16},end:{line:3637,column:17}},"693":{start:{line:3633,column:20},end:{line:3633,column:34}},"694":{start:{line:3636,column:20},end:{line:3636,column:56}},"695":{start:{line:3658,column:12},end:{line:3658,column:49}},"696":{start:{line:3660,column:23},end:{line:3660,column:27}},"697":{start:{line:3661,column:12},end:{line:3668,column:15}},"698":{start:{line:3662,column:16},end:{line:3667,column:17}},"699":{start:{line:3663,column:20},end:{line:3663,column:34}},"700":{start:{line:3666,column:20},end:{line:3666,column:56}},"701":{start:{line:3688,column:12},end:{line:3688,column:49}},"702":{start:{line:3690,column:23},end:{line:3690,column:27}},"703":{start:{line:3691,column:22},end:{line:3693,column:14}},"704":{start:{line:3692,column:16},end:{line:3692,column:36}},"705":{start:{line:3695,column:12},end:{line:3695,column:23}},"706":{start:{line:3715,column:25},end:{line:3715,column:46}},"707":{start:{line:3717,column:12},end:{line:3721,column:13}},"708":{start:{line:3718,column:16},end:{line:3720,column:18}},"709":{start:{line:3724,column:16},end:{line:3727,column:32}},"710":{start:{line:3730,column:12},end:{line:3730,column:63}},"711":{start:{line:3731,column:12},end:{line:3731,column:69}},"712":{start:{line:3732,column:12},end:{line:3732,column:61}},"713":{start:{line:3733,column:12},end:{line:3733,column:65}},"714":{start:{line:3734,column:12},end:{line:3734,column:63}},"715":{start:{line:3737,column:12},end:{line:3737,column:71}},"716":{start:{line:3738,column:12},end:{line:3738,column:89}},"717":{start:{line:3740,column:23},end:{line:3740,column:27}},"718":{start:{line:3741,column:31},end:{line:3741,column:36}},"719":{start:{line:3742,column:30},end:{line:3742,column:35}},"720":{start:{line:3743,column:12},end:{line:3801,column:14}},"721":{start:{line:3744,column:29},end:{line:3744,column:49}},"722":{start:{line:3746,column:20},end:{line:3794,column:23}},"723":{start:{line:3747,column:24},end:{line:3750,column:25}},"724":{start:{line:3748,column:28},end:{line:3748,column:47}},"725":{start:{line:3749,column:28},end:{line:3749,column:35}},"726":{start:{line:3752,column:44},end:{line:3752,column:74}},"727":{start:{line:3753,column:39},end:{line:3753,column:96}},"728":{start:{line:3754,column:24},end:{line:3791,column:25}},"729":{start:{line:3755,column:28},end:{line:3755,column:53}},"730":{start:{line:3758,column:28},end:{line:3771,column:29}},"731":{start:{line:3759,column:32},end:{line:3759,column:53}},"732":{start:{line:3760,column:32},end:{line:3760,column:52}},"733":{start:{line:3764,column:32},end:{line:3770,column:33}},"734":{start:{line:3765,column:36},end:{line:3765,column:70}},"735":{start:{line:3767,column:36},end:{line:3767,column:55}},"736":{start:{line:3768,column:36},end:{line:3768,column:52}},"737":{start:{line:3769,column:36},end:{line:3769,column:43}},"738":{start:{line:3773,column:28},end:{line:3773,column:52}},"739":{start:{line:3775,column:40},end:{line:3775,column:56}},"740":{start:{line:3777,column:28},end:{line:3790,column:29}},"741":{start:{line:3778,column:32},end:{line:3778,column:52}},"742":{start:{line:3780,column:32},end:{line:3780,column:51}},"743":{start:{line:3781,column:32},end:{line:3781,column:48}},"744":{start:{line:3782,column:32},end:{line:3782,column:39}},"745":{start:{line:3784,column:33},end:{line:3790,column:29}},"746":{start:{line:3785,column:32},end:{line:3785,column:54}},"747":{start:{line:3787,column:32},end:{line:3787,column:51}},"748":{start:{line:3788,column:32},end:{line:3788,column:48}},"749":{start:{line:3789,column:32},end:{line:3789,column:39}},"750":{start:{line:3793,column:24},end:{line:3793,column:59}},"751":{start:{line:3797,column:20},end:{line:3799,column:21}},"752":{start:{line:3798,column:24},end:{line:3798,column:45}},"753":{start:{line:3820,column:12},end:{line:3820,column:49}},"754":{start:{line:3822,column:23},end:{line:3822,column:27}},"755":{start:{line:3823,column:22},end:{line:3825,column:14}},"756":{start:{line:3824,column:16},end:{line:3824,column:36}},"757":{start:{line:3827,column:12},end:{line:3827,column:23}},"758":{start:{line:3839,column:4},end:{line:4030,column:7}},"759":{start:{line:3846,column:12},end:{line:3846,column:30}},"760":{start:{line:3858,column:22},end:{line:3858,column:39}},"761":{start:{line:3859,column:34},end:{line:3859,column:70}},"762":{start:{line:3860,column:12},end:{line:3860,column:68}},"763":{start:{line:3877,column:12},end:{line:3877,column:57}},"764":{start:{line:3881,column:12},end:{line:3881,column:60}},"765":{start:{line:3904,column:12},end:{line:3908,column:13}},"766":{start:{line:3905,column:16},end:{line:3905,column:34}},"767":{start:{line:3906,column:16},end:{line:3906,column:31}},"768":{start:{line:3907,column:16},end:{line:3907,column:38}},"769":{start:{line:3910,column:12},end:{line:3910,column:49}},"770":{start:{line:3911,column:12},end:{line:3911,column:34}},"771":{start:{line:3912,column:12},end:{line:3912,column:34}},"772":{start:{line:3914,column:12},end:{line:3916,column:13}},"773":{start:{line:3915,column:16},end:{line:3915,column:104}},"774":{start:{line:3918,column:12},end:{line:3921,column:13}},"775":{start:{line:3919,column:16},end:{line:3919,column:72}},"776":{start:{line:3920,column:16},end:{line:3920,column:23}},"777":{start:{line:3922,column:23},end:{line:3922,column:27}},"778":{start:{line:3923,column:12},end:{line:3931,column:15}},"779":{start:{line:3924,column:16},end:{line:3930,column:17}},"780":{start:{line:3925,column:20},end:{line:3925,column:34}},"781":{start:{line:3928,column:30},end:{line:3928,column:91}},"782":{start:{line:3929,column:20},end:{line:3929,column:40}},"783":{start:{line:3960,column:12},end:{line:3960,column:56}},"784":{start:{line:3987,column:12},end:{line:3991,column:13}},"785":{start:{line:3988,column:16},end:{line:3988,column:34}},"786":{start:{line:3989,column:16},end:{line:3989,column:31}},"787":{start:{line:3990,column:16},end:{line:3990,column:38}},"788":{start:{line:3993,column:12},end:{line:3993,column:49}},"789":{start:{line:3994,column:12},end:{line:3994,column:34}},"790":{start:{line:3995,column:12},end:{line:3995,column:34}},"791":{start:{line:3996,column:12},end:{line:3996,column:41}},"792":{start:{line:3998,column:12},end:{line:4000,column:13}},"793":{start:{line:3999,column:16},end:{line:3999,column:72}},"794":{start:{line:4002,column:29},end:{line:4002,column:62}},"795":{start:{line:4004,column:23},end:{line:4004,column:41}},"796":{start:{line:4005,column:25},end:{line:4005,column:31}},"797":{start:{line:4006,column:26},end:{line:4006,column:28}},"798":{start:{line:4007,column:23},end:{line:4007,column:29}},"799":{start:{line:4008,column:22},end:{line:4008,column:47}},"800":{start:{line:4009,column:23},end:{line:4009,column:27}},"801":{start:{line:4011,column:22},end:{line:4026,column:13}},"802":{start:{line:4019,column:20},end:{line:4024,column:21}},"803":{start:{line:4020,column:24},end:{line:4020,column:38}},"804":{start:{line:4023,column:24},end:{line:4023,column:54}},"805":{start:{line:4028,column:12},end:{line:4028,column:23}},"806":{start:{line:4062,column:4},end:{line:4179,column:7}},"807":{start:{line:4087,column:12},end:{line:4087,column:32}},"808":{start:{line:4088,column:12},end:{line:4088,column:44}},"809":{start:{line:4090,column:12},end:{line:4090,column:50}},"810":{start:{line:4091,column:12},end:{line:4091,column:52}},"811":{start:{line:4092,column:12},end:{line:4092,column:45}},"812":{start:{line:4093,column:12},end:{line:4093,column:51}},"813":{start:{line:4094,column:12},end:{line:4094,column:49}},"814":{start:{line:4095,column:12},end:{line:4095,column:47}},"815":{start:{line:4096,column:12},end:{line:4096,column:49}},"816":{start:{line:4097,column:12},end:{line:4097,column:56}},"817":{start:{line:4098,column:12},end:{line:4098,column:52}},"818":{start:{line:4099,column:12},end:{line:4099,column:57}},"819":{start:{line:4100,column:12},end:{line:4100,column:72}},"820":{start:{line:4111,column:12},end:{line:4111,column:42}},"821":{start:{line:4122,column:12},end:{line:4122,column:42}},"822":{start:{line:4133,column:12},end:{line:4133,column:45}},"823":{start:{line:4144,column:12},end:{line:4144,column:47}},"824":{start:{line:4155,column:12},end:{line:4155,column:46}},"825":{start:{line:4166,column:12},end:{line:4166,column:40}},"826":{start:{line:4177,column:12},end:{line:4177,column:43}},"827":{start:{line:4192,column:4},end:{line:4214,column:7}},"828":{start:{line:4207,column:12},end:{line:4207,column:32}},"829":{start:{line:4208,column:12},end:{line:4208,column:44}},"830":{start:{line:4210,column:12},end:{line:4210,column:40}},"831":{start:{line:4211,column:12},end:{line:4211,column:50}},"832":{start:{line:4212,column:12},end:{line:4212,column:65}},"833":{start:{line:4247,column:4},end:{line:4365,column:7}},"834":{start:{line:4273,column:12},end:{line:4273,column:32}},"835":{start:{line:4274,column:12},end:{line:4274,column:44}},"836":{start:{line:4276,column:12},end:{line:4276,column:54}},"837":{start:{line:4277,column:12},end:{line:4277,column:56}},"838":{start:{line:4278,column:12},end:{line:4278,column:56}},"839":{start:{line:4279,column:12},end:{line:4279,column:49}},"840":{start:{line:4280,column:12},end:{line:4280,column:57}},"841":{start:{line:4281,column:12},end:{line:4281,column:72}},"842":{start:{line:4283,column:12},end:{line:4283,column:35}},"843":{start:{line:4284,column:12},end:{line:4286,column:13}},"844":{start:{line:4284,column:25},end:{line:4284,column:26}},"845":{start:{line:4285,column:16},end:{line:4285,column:116}},"846":{start:{line:4288,column:12},end:{line:4290,column:13}},"847":{start:{line:4289,column:16},end:{line:4289,column:51}},"848":{start:{line:4291,column:12},end:{line:4293,column:13}},"849":{start:{line:4292,column:16},end:{line:4292,column:51}},"850":{start:{line:4294,column:12},end:{line:4297,column:13}},"851":{start:{line:4295,column:16},end:{line:4295,column:51}},"852":{start:{line:4296,column:16},end:{line:4296,column:64}},"853":{start:{line:4308,column:12},end:{line:4308,column:50}},"854":{start:{line:4319,column:12},end:{line:4319,column:35}},"855":{start:{line:4330,column:12},end:{line:4330,column:42}},"856":{start:{line:4341,column:12},end:{line:4341,column:40}},"857":{start:{line:4352,column:12},end:{line:4352,column:39}},"858":{start:{line:4363,column:12},end:{line:4363,column:41}},"859":{start:{line:4381,column:4},end:{line:4428,column:7}},"860":{start:{line:4398,column:12},end:{line:4398,column:35}},"861":{start:{line:4399,column:12},end:{line:4399,column:39}},"862":{start:{line:4400,column:12},end:{line:4400,column:58}},"863":{start:{line:4401,column:12},end:{line:4401,column:72}},"864":{start:{line:4402,column:12},end:{line:4402,column:50}},"865":{start:{line:4403,column:12},end:{line:4403,column:60}},"866":{start:{line:4405,column:12},end:{line:4405,column:50}},"867":{start:{line:4417,column:12},end:{line:4420,column:13}},"868":{start:{line:4418,column:16},end:{line:4418,column:32}},"869":{start:{line:4419,column:16},end:{line:4419,column:26}},"870":{start:{line:4421,column:12},end:{line:4423,column:13}},"871":{start:{line:4422,column:16},end:{line:4422,column:26}},"872":{start:{line:4426,column:12},end:{line:4426,column:87}},"873":{start:{line:4539,column:4},end:{line:5184,column:7}},"874":{start:{line:4559,column:12},end:{line:4559,column:51}},"875":{start:{line:4560,column:12},end:{line:4560,column:30}},"876":{start:{line:4561,column:12},end:{line:4561,column:27}},"877":{start:{line:4562,column:12},end:{line:4562,column:30}},"878":{start:{line:4563,column:12},end:{line:4563,column:28}},"879":{start:{line:4565,column:12},end:{line:4566,column:54}},"880":{start:{line:4568,column:12},end:{line:4568,column:52}},"881":{start:{line:4569,column:12},end:{line:4569,column:54}},"882":{start:{line:4585,column:12},end:{line:4587,column:13}},"883":{start:{line:4586,column:16},end:{line:4586,column:30}},"884":{start:{line:4589,column:12},end:{line:4591,column:13}},"885":{start:{line:4590,column:16},end:{line:4590,column:81}},"886":{start:{line:4593,column:12},end:{line:4593,column:54}},"887":{start:{line:4594,column:12},end:{line:4594,column:24}},"888":{start:{line:4610,column:12},end:{line:4612,column:13}},"889":{start:{line:4611,column:16},end:{line:4611,column:77}},"890":{start:{line:4613,column:12},end:{line:4619,column:13}},"891":{start:{line:4614,column:16},end:{line:4618,column:70}},"892":{start:{line:4620,column:12},end:{line:4625,column:13}},"893":{start:{line:4621,column:16},end:{line:4624,column:59}},"894":{start:{line:4627,column:22},end:{line:4631,column:13}},"895":{start:{line:4633,column:12},end:{line:4638,column:13}},"896":{start:{line:4634,column:16},end:{line:4637,column:18}},"897":{start:{line:4639,column:12},end:{line:4639,column:35}},"898":{start:{line:4641,column:12},end:{line:4641,column:24}},"899":{start:{line:4658,column:12},end:{line:4660,column:13}},"900":{start:{line:4659,column:16},end:{line:4659,column:83}},"901":{start:{line:4662,column:20},end:{line:4662,column:63}},"902":{start:{line:4664,column:12},end:{line:4666,column:13}},"903":{start:{line:4665,column:16},end:{line:4665,column:112}},"904":{start:{line:4668,column:12},end:{line:4671,column:13}},"905":{start:{line:4669,column:16},end:{line:4670,column:35}},"906":{start:{line:4673,column:12},end:{line:4676,column:13}},"907":{start:{line:4674,column:16},end:{line:4675,column:35}},"908":{start:{line:4678,column:12},end:{line:4680,column:13}},"909":{start:{line:4679,column:16},end:{line:4679,column:120}},"910":{start:{line:4682,column:25},end:{line:4691,column:13}},"911":{start:{line:4693,column:12},end:{line:4693,column:84}},"912":{start:{line:4694,column:12},end:{line:4694,column:38}},"913":{start:{line:4696,column:12},end:{line:4696,column:24}},"914":{start:{line:4709,column:12},end:{line:4711,column:13}},"915":{start:{line:4710,column:16},end:{line:4710,column:67}},"916":{start:{line:4712,column:20},end:{line:4712,column:63}},"917":{start:{line:4713,column:12},end:{line:4715,column:13}},"918":{start:{line:4714,column:16},end:{line:4714,column:96}},"919":{start:{line:4717,column:22},end:{line:4722,column:13}},"920":{start:{line:4724,column:12},end:{line:4726,column:13}},"921":{start:{line:4725,column:16},end:{line:4725,column:36}},"922":{start:{line:4728,column:12},end:{line:4728,column:32}},"923":{start:{line:4730,column:12},end:{line:4730,column:24}},"924":{start:{line:4753,column:12},end:{line:4755,column:13}},"925":{start:{line:4754,column:16},end:{line:4754,column:63}},"926":{start:{line:4756,column:20},end:{line:4756,column:59}},"927":{start:{line:4757,column:12},end:{line:4759,column:13}},"928":{start:{line:4758,column:16},end:{line:4758,column:86}},"929":{start:{line:4760,column:31},end:{line:4760,column:33}},"930":{start:{line:4761,column:12},end:{line:4763,column:13}},"931":{start:{line:4762,column:16},end:{line:4762,column:50}},"932":{start:{line:4764,column:12},end:{line:4766,column:13}},"933":{start:{line:4765,column:16},end:{line:4765,column:46}},"934":{start:{line:4767,column:12},end:{line:4769,column:13}},"935":{start:{line:4768,column:16},end:{line:4768,column:48}},"936":{start:{line:4770,column:12},end:{line:4772,column:13}},"937":{start:{line:4771,column:16},end:{line:4771,column:56}},"938":{start:{line:4774,column:12},end:{line:4781,column:15}},"939":{start:{line:4783,column:12},end:{line:4783,column:24}},"940":{start:{line:4798,column:12},end:{line:4800,column:13}},"941":{start:{line:4799,column:16},end:{line:4799,column:63}},"942":{start:{line:4801,column:20},end:{line:4801,column:59}},"943":{start:{line:4802,column:12},end:{line:4804,column:13}},"944":{start:{line:4803,column:16},end:{line:4803,column:87}},"945":{start:{line:4806,column:12},end:{line:4813,column:15}},"946":{start:{line:4815,column:12},end:{line:4815,column:24}},"947":{start:{line:4829,column:12},end:{line:4831,column:13}},"948":{start:{line:4830,column:16},end:{line:4830,column:63}},"949":{start:{line:4832,column:20},end:{line:4832,column:59}},"950":{start:{line:4833,column:12},end:{line:4835,column:13}},"951":{start:{line:4834,column:16},end:{line:4834,column:89}},"952":{start:{line:4836,column:12},end:{line:4838,column:13}},"953":{start:{line:4837,column:16},end:{line:4837,column:120}},"954":{start:{line:4840,column:12},end:{line:4846,column:15}},"955":{start:{line:4848,column:12},end:{line:4848,column:24}},"956":{start:{line:4861,column:12},end:{line:4863,column:13}},"957":{start:{line:4862,column:16},end:{line:4862,column:67}},"958":{start:{line:4864,column:20},end:{line:4864,column:63}},"959":{start:{line:4865,column:12},end:{line:4867,column:13}},"960":{start:{line:4866,column:16},end:{line:4866,column:96}},"961":{start:{line:4869,column:22},end:{line:4873,column:13}},"962":{start:{line:4875,column:12},end:{line:4877,column:13}},"963":{start:{line:4876,column:16},end:{line:4876,column:36}},"964":{start:{line:4879,column:12},end:{line:4879,column:35}},"965":{start:{line:4881,column:12},end:{line:4881,column:24}},"966":{start:{line:4898,column:12},end:{line:4900,column:13}},"967":{start:{line:4899,column:16},end:{line:4899,column:67}},"968":{start:{line:4901,column:20},end:{line:4901,column:63}},"969":{start:{line:4902,column:12},end:{line:4904,column:13}},"970":{start:{line:4903,column:16},end:{line:4903,column:86}},"971":{start:{line:4908,column:32},end:{line:4908,column:34}},"972":{start:{line:4909,column:12},end:{line:4911,column:13}},"973":{start:{line:4910,column:16},end:{line:4910,column:51}},"974":{start:{line:4912,column:12},end:{line:4914,column:13}},"975":{start:{line:4913,column:16},end:{line:4913,column:47}},"976":{start:{line:4915,column:12},end:{line:4917,column:13}},"977":{start:{line:4916,column:16},end:{line:4916,column:49}},"978":{start:{line:4918,column:12},end:{line:4920,column:13}},"979":{start:{line:4919,column:16},end:{line:4919,column:57}},"980":{start:{line:4922,column:12},end:{line:4928,column:15}},"981":{start:{line:4930,column:12},end:{line:4930,column:24}},"982":{start:{line:4944,column:12},end:{line:4946,column:13}},"983":{start:{line:4945,column:16},end:{line:4945,column:67}},"984":{start:{line:4947,column:20},end:{line:4947,column:63}},"985":{start:{line:4948,column:12},end:{line:4950,column:13}},"986":{start:{line:4949,column:16},end:{line:4949,column:87}},"987":{start:{line:4952,column:12},end:{line:4958,column:15}},"988":{start:{line:4960,column:12},end:{line:4960,column:24}},"989":{start:{line:4973,column:12},end:{line:4975,column:13}},"990":{start:{line:4974,column:16},end:{line:4974,column:63}},"991":{start:{line:4976,column:20},end:{line:4976,column:59}},"992":{start:{line:4977,column:12},end:{line:4979,column:13}},"993":{start:{line:4978,column:16},end:{line:4978,column:89}},"994":{start:{line:4980,column:12},end:{line:4982,column:13}},"995":{start:{line:4981,column:16},end:{line:4981,column:120}},"996":{start:{line:4984,column:12},end:{line:4989,column:15}},"997":{start:{line:4991,column:12},end:{line:4991,column:24}},"998":{start:{line:5005,column:12},end:{line:5007,column:13}},"999":{start:{line:5006,column:16},end:{line:5006,column:67}},"1000":{start:{line:5009,column:20},end:{line:5009,column:63}},"1001":{start:{line:5010,column:12},end:{line:5062,column:13}},"1002":{start:{line:5019,column:16},end:{line:5021,column:35}},"1003":{start:{line:5023,column:17},end:{line:5062,column:13}},"1004":{start:{line:5035,column:16},end:{line:5038,column:22}},"1005":{start:{line:5040,column:17},end:{line:5062,column:13}},"1006":{start:{line:5049,column:16},end:{line:5052,column:22}},"1007":{start:{line:5054,column:17},end:{line:5062,column:13}},"1008":{start:{line:5057,column:16},end:{line:5058,column:46}},"1009":{start:{line:5060,column:17},end:{line:5062,column:13}},"1010":{start:{line:5061,column:16},end:{line:5061,column:84}},"1011":{start:{line:5064,column:12},end:{line:5071,column:15}},"1012":{start:{line:5073,column:12},end:{line:5073,column:24}},"1013":{start:{line:5084,column:12},end:{line:5091,column:14}},"1014":{start:{line:5117,column:22},end:{line:5117,column:60}},"1015":{start:{line:5119,column:23},end:{line:5121,column:13}},"1016":{start:{line:5123,column:12},end:{line:5125,column:13}},"1017":{start:{line:5124,column:16},end:{line:5124,column:60}},"1018":{start:{line:5127,column:12},end:{line:5139,column:15}},"1019":{start:{line:5128,column:16},end:{line:5131,column:17}},"1020":{start:{line:5129,column:20},end:{line:5129,column:77}},"1021":{start:{line:5130,column:20},end:{line:5130,column:27}},"1022":{start:{line:5133,column:16},end:{line:5138,column:17}},"1023":{start:{line:5134,column:20},end:{line:5134,column:88}},"1024":{start:{line:5137,column:20},end:{line:5137,column:96}},"1025":{start:{line:5169,column:12},end:{line:5172,column:13}},"1026":{start:{line:5170,column:16},end:{line:5170,column:32}},"1027":{start:{line:5171,column:16},end:{line:5171,column:26}},"1028":{start:{line:5173,column:12},end:{line:5173,column:30}},"1029":{start:{line:5175,column:12},end:{line:5182,column:15}},"1030":{start:{line:5176,column:16},end:{line:5181,column:17}},"1031":{start:{line:5177,column:20},end:{line:5177,column:46}},"1032":{start:{line:5180,column:20},end:{line:5180,column:68}},"1033":{start:{line:5212,column:4},end:{line:5530,column:7}},"1034":{start:{line:5240,column:12},end:{line:5240,column:32}},"1035":{start:{line:5241,column:12},end:{line:5241,column:44}},"1036":{start:{line:5243,column:12},end:{line:5243,column:58}},"1037":{start:{line:5244,column:12},end:{line:5244,column:59}},"1038":{start:{line:5245,column:12},end:{line:5245,column:60}},"1039":{start:{line:5246,column:12},end:{line:5246,column:59}},"1040":{start:{line:5247,column:12},end:{line:5247,column:67}},"1041":{start:{line:5250,column:12},end:{line:5252,column:13}},"1042":{start:{line:5251,column:16},end:{line:5251,column:57}},"1043":{start:{line:5253,column:12},end:{line:5255,column:13}},"1044":{start:{line:5254,column:16},end:{line:5254,column:59}},"1045":{start:{line:5256,column:12},end:{line:5258,column:13}},"1046":{start:{line:5257,column:16},end:{line:5257,column:60}},"1047":{start:{line:5259,column:12},end:{line:5261,column:13}},"1048":{start:{line:5260,column:16},end:{line:5260,column:58}},"1049":{start:{line:5264,column:12},end:{line:5266,column:13}},"1050":{start:{line:5265,column:16},end:{line:5265,column:51}},"1051":{start:{line:5269,column:12},end:{line:5269,column:29}},"1052":{start:{line:5270,column:12},end:{line:5272,column:13}},"1053":{start:{line:5270,column:25},end:{line:5270,column:26}},"1054":{start:{line:5271,column:16},end:{line:5271,column:98}},"1055":{start:{line:5275,column:12},end:{line:5275,column:34}},"1056":{start:{line:5276,column:12},end:{line:5278,column:13}},"1057":{start:{line:5276,column:25},end:{line:5276,column:26}},"1058":{start:{line:5277,column:16},end:{line:5277,column:90}},"1059":{start:{line:5281,column:12},end:{line:5281,column:35}},"1060":{start:{line:5282,column:12},end:{line:5284,column:13}},"1061":{start:{line:5282,column:25},end:{line:5282,column:26}},"1062":{start:{line:5283,column:16},end:{line:5283,column:126}},"1063":{start:{line:5295,column:12},end:{line:5295,column:55}},"1064":{start:{line:5306,column:12},end:{line:5306,column:52}},"1065":{start:{line:5318,column:12},end:{line:5318,column:44}},"1066":{start:{line:5332,column:12},end:{line:5332,column:78}},"1067":{start:{line:5347,column:33},end:{line:5347,column:35}},"1068":{start:{line:5349,column:12},end:{line:5353,column:13}},"1069":{start:{line:5350,column:16},end:{line:5352,column:17}},"1070":{start:{line:5351,column:20},end:{line:5351,column:55}},"1071":{start:{line:5355,column:35},end:{line:5355,column:58}},"1072":{start:{line:5356,column:12},end:{line:5360,column:13}},"1073":{start:{line:5357,column:16},end:{line:5359,column:17}},"1074":{start:{line:5358,column:20},end:{line:5358,column:62}},"1075":{start:{line:5362,column:12},end:{line:5362,column:34}},"1076":{start:{line:5376,column:12},end:{line:5376,column:49}},"1077":{start:{line:5389,column:25},end:{line:5389,column:27}},"1078":{start:{line:5391,column:23},end:{line:5391,column:44}},"1079":{start:{line:5392,column:31},end:{line:5392,column:48}},"1080":{start:{line:5393,column:12},end:{line:5398,column:13}},"1081":{start:{line:5393,column:25},end:{line:5393,column:26}},"1082":{start:{line:5394,column:34},end:{line:5394,column:55}},"1083":{start:{line:5395,column:16},end:{line:5397,column:17}},"1084":{start:{line:5395,column:29},end:{line:5395,column:30}},"1085":{start:{line:5396,column:20},end:{line:5396,column:124}},"1086":{start:{line:5399,column:12},end:{line:5399,column:26}},"1087":{start:{line:5412,column:12},end:{line:5412,column:56}},"1088":{start:{line:5425,column:12},end:{line:5425,column:67}},"1089":{start:{line:5438,column:12},end:{line:5438,column:50}},"1090":{start:{line:5469,column:12},end:{line:5472,column:13}},"1091":{start:{line:5470,column:16},end:{line:5470,column:40}},"1092":{start:{line:5471,column:16},end:{line:5471,column:41}},"1093":{start:{line:5474,column:24},end:{line:5474,column:106}},"1094":{start:{line:5475,column:23},end:{line:5475,column:72}},"1095":{start:{line:5477,column:12},end:{line:5477,column:65}},"1096":{start:{line:5500,column:24},end:{line:5500,column:90}},"1097":{start:{line:5502,column:12},end:{line:5502,column:69}},"1098":{start:{line:5503,column:12},end:{line:5503,column:81}},"1099":{start:{line:5516,column:12},end:{line:5516,column:64}},"1100":{start:{line:5528,column:12},end:{line:5528,column:53}},"1101":{start:{line:5541,column:4},end:{line:5694,column:7}},"1102":{start:{line:5548,column:12},end:{line:5548,column:74}},"1103":{start:{line:5571,column:12},end:{line:5574,column:13}},"1104":{start:{line:5572,column:16},end:{line:5572,column:34}},"1105":{start:{line:5573,column:16},end:{line:5573,column:31}},"1106":{start:{line:5576,column:12},end:{line:5576,column:29}},"1107":{start:{line:5577,column:12},end:{line:5577,column:57}},"1108":{start:{line:5579,column:12},end:{line:5579,column:77}},"1109":{start:{line:5580,column:12},end:{line:5583,column:13}},"1110":{start:{line:5582,column:16},end:{line:5582,column:72}},"1111":{start:{line:5587,column:12},end:{line:5589,column:13}},"1112":{start:{line:5588,column:16},end:{line:5588,column:35}},"1113":{start:{line:5591,column:38},end:{line:5591,column:75}},"1114":{start:{line:5593,column:12},end:{line:5593,column:66}},"1115":{start:{line:5594,column:12},end:{line:5594,column:63}},"1116":{start:{line:5595,column:12},end:{line:5595,column:63}},"1117":{start:{line:5598,column:23},end:{line:5598,column:50}},"1118":{start:{line:5599,column:12},end:{line:5599,column:30}},"1119":{start:{line:5600,column:12},end:{line:5602,column:13}},"1120":{start:{line:5600,column:25},end:{line:5600,column:26}},"1121":{start:{line:5601,column:16},end:{line:5601,column:75}},"1122":{start:{line:5604,column:12},end:{line:5604,column:56}},"1123":{start:{line:5605,column:12},end:{line:5605,column:56}},"1124":{start:{line:5616,column:12},end:{line:5616,column:47}},"1125":{start:{line:5628,column:12},end:{line:5632,column:13}},"1126":{start:{line:5628,column:25},end:{line:5628,column:26}},"1127":{start:{line:5629,column:16},end:{line:5631,column:17}},"1128":{start:{line:5630,column:20},end:{line:5630,column:43}},"1129":{start:{line:5633,column:12},end:{line:5633,column:24}},"1130":{start:{line:5644,column:12},end:{line:5644,column:58}},"1131":{start:{line:5660,column:12},end:{line:5663,column:13}},"1132":{start:{line:5661,column:16},end:{line:5661,column:33}},"1133":{start:{line:5662,column:16},end:{line:5662,column:27}},"1134":{start:{line:5664,column:12},end:{line:5664,column:49}},"1135":{start:{line:5666,column:12},end:{line:5669,column:13}},"1136":{start:{line:5667,column:16},end:{line:5667,column:93}},"1137":{start:{line:5668,column:16},end:{line:5668,column:23}},"1138":{start:{line:5670,column:12},end:{line:5673,column:13}},"1139":{start:{line:5671,column:16},end:{line:5671,column:81}},"1140":{start:{line:5672,column:16},end:{line:5672,column:23}},"1141":{start:{line:5675,column:31},end:{line:5681,column:13}},"1142":{start:{line:5683,column:23},end:{line:5683,column:27}},"1143":{start:{line:5684,column:12},end:{line:5692,column:15}},"1144":{start:{line:5685,column:16},end:{line:5691,column:17}},"1145":{start:{line:5686,column:20},end:{line:5686,column:40}},"1146":{start:{line:5689,column:45},end:{line:5689,column:98}},"1147":{start:{line:5690,column:20},end:{line:5690,column:142}},"1148":{start:{line:5705,column:4},end:{line:5783,column:7}},"1149":{start:{line:5712,column:12},end:{line:5712,column:36}},"1150":{start:{line:5728,column:12},end:{line:5728,column:40}},"1151":{start:{line:5729,column:12},end:{line:5729,column:57}},"1152":{start:{line:5730,column:12},end:{line:5730,column:56}},"1153":{start:{line:5748,column:12},end:{line:5751,column:13}},"1154":{start:{line:5749,column:16},end:{line:5749,column:34}},"1155":{start:{line:5750,column:16},end:{line:5750,column:28}},"1156":{start:{line:5753,column:12},end:{line:5753,column:34}},"1157":{start:{line:5754,column:12},end:{line:5754,column:48}},"1158":{start:{line:5755,column:12},end:{line:5755,column:43}},"1159":{start:{line:5757,column:23},end:{line:5757,column:27}},"1160":{start:{line:5758,column:12},end:{line:5766,column:15}},"1161":{start:{line:5759,column:16},end:{line:5765,column:17}},"1162":{start:{line:5760,column:20},end:{line:5760,column:34}},"1163":{start:{line:5763,column:36},end:{line:5763,column:137}},"1164":{start:{line:5764,column:20},end:{line:5764,column:46}},"1165":{start:{line:5780,column:34},end:{line:5780,column:70}},"1166":{start:{line:5781,column:12},end:{line:5781,column:88}},"1167":{start:{line:5787,column:4},end:{line:5817,column:7}},"1168":{start:{line:5789,column:12},end:{line:5789,column:34}},"1169":{start:{line:5791,column:12},end:{line:5791,column:38}},"1170":{start:{line:5792,column:12},end:{line:5792,column:50}},"1171":{start:{line:5793,column:12},end:{line:5793,column:29}},"1172":{start:{line:5798,column:12},end:{line:5798,column:49}},"1173":{start:{line:5800,column:23},end:{line:5800,column:27}},"1174":{start:{line:5801,column:25},end:{line:5804,column:13}},"1175":{start:{line:5805,column:12},end:{line:5815,column:15}},"1176":{start:{line:5806,column:16},end:{line:5814,column:17}},"1177":{start:{line:5807,column:20},end:{line:5807,column:34}},"1178":{start:{line:5810,column:38},end:{line:5810,column:76}},"1179":{start:{line:5811,column:20},end:{line:5811,column:47}},"1180":{start:{line:5813,column:20},end:{line:5813,column:60}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:12},end:{line:5818,column:1}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:38,column:14},end:{line:38,column:15}},loc:{start:{line:38,column:25},end:{line:40,column:9}},line:38},"2":{name:"(anonymous_2)",decl:{start:{line:72,column:14},end:{line:72,column:15}},loc:{start:{line:72,column:25},end:{line:88,column:9}},line:72},"3":{name:"(anonymous_3)",decl:{start:{line:105,column:20},end:{line:105,column:21}},loc:{start:{line:105,column:41},end:{line:117,column:9}},line:105},"4":{name:"(anonymous_4)",decl:{start:{line:135,column:14},end:{line:135,column:15}},loc:{start:{line:135,column:25},end:{line:137,column:9}},line:135},"5":{name:"(anonymous_5)",decl:{start:{line:163,column:24},end:{line:163,column:25}},loc:{start:{line:163,column:44},end:{line:165,column:9}},line:163},"6":{name:"(anonymous_6)",decl:{start:{line:191,column:17},end:{line:191,column:18}},loc:{start:{line:191,column:37},end:{line:193,column:9}},line:191},"7":{name:"(anonymous_7)",decl:{start:{line:217,column:23},end:{line:217,column:24}},loc:{start:{line:217,column:43},end:{line:219,column:9}},line:217},"8":{name:"(anonymous_8)",decl:{start:{line:243,column:26},end:{line:243,column:27}},loc:{start:{line:243,column:46},end:{line:245,column:9}},line:243},"9":{name:"(anonymous_9)",decl:{start:{line:270,column:26},end:{line:270,column:27}},loc:{start:{line:270,column:46},end:{line:272,column:9}},line:270},"10":{name:"(anonymous_10)",decl:{start:{line:299,column:14},end:{line:299,column:15}},loc:{start:{line:299,column:34},end:{line:301,column:9}},line:299},"11":{name:"(anonymous_11)",decl:{start:{line:311,column:20},end:{line:311,column:21}},loc:{start:{line:311,column:40},end:{line:313,column:9}},line:311},"12":{name:"(anonymous_12)",decl:{start:{line:336,column:15},end:{line:336,column:16}},loc:{start:{line:336,column:26},end:{line:338,column:9}},line:336},"13":{name:"(anonymous_13)",decl:{start:{line:365,column:15},end:{line:365,column:16}},loc:{start:{line:365,column:35},end:{line:367,column:9}},line:365},"14":{name:"(anonymous_14)",decl:{start:{line:396,column:16},end:{line:396,column:17}},loc:{start:{line:396,column:61},end:{line:404,column:9}},line:396},"15":{name:"(anonymous_15)",decl:{start:{line:419,column:16},end:{line:419,column:17}},loc:{start:{line:419,column:51},end:{line:426,column:9}},line:419},"16":{name:"(anonymous_16)",decl:{start:{line:452,column:23},end:{line:452,column:24}},loc:{start:{line:452,column:68},end:{line:460,column:9}},line:452},"17":{name:"(anonymous_17)",decl:{start:{line:477,column:21},end:{line:477,column:22}},loc:{start:{line:477,column:40},end:{line:500,column:9}},line:477},"18":{name:"(anonymous_18)",decl:{start:{line:478,column:35},end:{line:478,column:36}},loc:{start:{line:478,column:46},end:{line:478,column:48}},line:478},"19":{name:"(anonymous_19)",decl:{start:{line:481,column:54},end:{line:481,column:55}},loc:{start:{line:481,column:78},end:{line:497,column:13}},line:481},"20":{name:"(anonymous_20)",decl:{start:{line:488,column:31},end:{line:488,column:32}},loc:{start:{line:488,column:42},end:{line:495,column:21}},line:488},"21":{name:"(anonymous_21)",decl:{start:{line:516,column:20},end:{line:516,column:21}},loc:{start:{line:516,column:39},end:{line:521,column:9}},line:516},"22":{name:"(anonymous_22)",decl:{start:{line:517,column:35},end:{line:517,column:36}},loc:{start:{line:517,column:46},end:{line:517,column:48}},line:517},"23":{name:"(anonymous_23)",decl:{start:{line:543,column:15},end:{line:543,column:16}},loc:{start:{line:543,column:49},end:{line:562,column:9}},line:543},"24":{name:"(anonymous_24)",decl:{start:{line:549,column:35},end:{line:549,column:36}},loc:{start:{line:549,column:46},end:{line:549,column:48}},line:549},"25":{name:"(anonymous_25)",decl:{start:{line:554,column:50},end:{line:554,column:51}},loc:{start:{line:554,column:74},end:{line:561,column:13}},line:554},"26":{name:"(anonymous_26)",decl:{start:{line:580,column:19},end:{line:580,column:20}},loc:{start:{line:580,column:53},end:{line:601,column:9}},line:580},"27":{name:"(anonymous_27)",decl:{start:{line:586,column:35},end:{line:586,column:36}},loc:{start:{line:586,column:46},end:{line:586,column:48}},line:586},"28":{name:"(anonymous_28)",decl:{start:{line:592,column:53},end:{line:592,column:54}},loc:{start:{line:592,column:77},end:{line:600,column:13}},line:592},"29":{name:"(anonymous_29)",decl:{start:{line:624,column:13},end:{line:624,column:14}},loc:{start:{line:624,column:47},end:{line:663,column:9}},line:624},"30":{name:"(anonymous_30)",decl:{start:{line:630,column:35},end:{line:630,column:36}},loc:{start:{line:630,column:46},end:{line:630,column:48}},line:630},"31":{name:"(anonymous_31)",decl:{start:{line:652,column:16},end:{line:652,column:17}},loc:{start:{line:652,column:40},end:{line:659,column:17}},line:652},"32":{name:"(anonymous_32)",decl:{start:{line:685,column:14},end:{line:685,column:15}},loc:{start:{line:685,column:47},end:{line:702,column:9}},line:685},"33":{name:"(anonymous_33)",decl:{start:{line:720,column:13},end:{line:720,column:14}},loc:{start:{line:720,column:58},end:{line:735,column:9}},line:720},"34":{name:"(anonymous_34)",decl:{start:{line:753,column:14},end:{line:753,column:15}},loc:{start:{line:753,column:50},end:{line:767,column:9}},line:753},"35":{name:"(anonymous_35)",decl:{start:{line:785,column:13},end:{line:785,column:14}},loc:{start:{line:785,column:49},end:{line:799,column:9}},line:785},"36":{name:"(anonymous_36)",decl:{start:{line:828,column:14},end:{line:828,column:15}},loc:{start:{line:828,column:49},end:{line:843,column:9}},line:828},"37":{name:"(anonymous_37)",decl:{start:{line:850,column:14},end:{line:850,column:15}},loc:{start:{line:850,column:25},end:{line:852,column:9}},line:850},"38":{name:"(anonymous_38)",decl:{start:{line:862,column:15},end:{line:862,column:16}},loc:{start:{line:862,column:36},end:{line:865,column:9}},line:862},"39":{name:"(anonymous_39)",decl:{start:{line:876,column:15},end:{line:876,column:16}},loc:{start:{line:876,column:34},end:{line:878,column:9}},line:876},"40":{name:"(anonymous_40)",decl:{start:{line:887,column:20},end:{line:887,column:21}},loc:{start:{line:887,column:31},end:{line:889,column:9}},line:887},"41":{name:"(anonymous_41)",decl:{start:{line:898,column:15},end:{line:898,column:16}},loc:{start:{line:898,column:26},end:{line:900,column:9}},line:898},"42":{name:"(anonymous_42)",decl:{start:{line:938,column:14},end:{line:938,column:15}},loc:{start:{line:938,column:49},end:{line:962,column:9}},line:938},"43":{name:"(anonymous_43)",decl:{start:{line:972,column:15},end:{line:972,column:16}},loc:{start:{line:972,column:36},end:{line:994,column:9}},line:972},"44":{name:"(anonymous_44)",decl:{start:{line:1004,column:16},end:{line:1004,column:17}},loc:{start:{line:1004,column:27},end:{line:1006,column:9}},line:1004},"45":{name:"(anonymous_45)",decl:{start:{line:1016,column:13},end:{line:1016,column:14}},loc:{start:{line:1016,column:24},end:{line:1018,column:9}},line:1016},"46":{name:"(anonymous_46)",decl:{start:{line:1028,column:15},end:{line:1028,column:16}},loc:{start:{line:1028,column:26},end:{line:1030,column:9}},line:1028},"47":{name:"(anonymous_47)",decl:{start:{line:1039,column:16},end:{line:1039,column:17}},loc:{start:{line:1039,column:27},end:{line:1041,column:9}},line:1039},"48":{name:"(anonymous_48)",decl:{start:{line:1050,column:17},end:{line:1050,column:18}},loc:{start:{line:1050,column:28},end:{line:1052,column:9}},line:1050},"49":{name:"(anonymous_49)",decl:{start:{line:1061,column:19},end:{line:1061,column:20}},loc:{start:{line:1061,column:30},end:{line:1063,column:9}},line:1061},"50":{name:"(anonymous_50)",decl:{start:{line:1080,column:15},end:{line:1080,column:16}},loc:{start:{line:1080,column:43},end:{line:1099,column:9}},line:1080},"51":{name:"(anonymous_51)",decl:{start:{line:1085,column:35},end:{line:1085,column:36}},loc:{start:{line:1085,column:46},end:{line:1085,column:48}},line:1085},"52":{name:"(anonymous_52)",decl:{start:{line:1090,column:41},end:{line:1090,column:42}},loc:{start:{line:1090,column:65},end:{line:1098,column:13}},line:1090},"53":{name:"(anonymous_53)",decl:{start:{line:1109,column:16},end:{line:1109,column:17}},loc:{start:{line:1109,column:35},end:{line:1116,column:9}},line:1109},"54":{name:"(anonymous_54)",decl:{start:{line:1110,column:35},end:{line:1110,column:36}},loc:{start:{line:1110,column:46},end:{line:1110,column:48}},line:1110},"55":{name:"(anonymous_55)",decl:{start:{line:1113,column:36},end:{line:1113,column:37}},loc:{start:{line:1113,column:50},end:{line:1115,column:13}},line:1113},"56":{name:"(anonymous_56)",decl:{start:{line:1127,column:16},end:{line:1127,column:17}},loc:{start:{line:1127,column:42},end:{line:1156,column:9}},line:1127},"57":{name:"(anonymous_57)",decl:{start:{line:1128,column:35},end:{line:1128,column:36}},loc:{start:{line:1128,column:46},end:{line:1128,column:48}},line:1128},"58":{name:"(anonymous_58)",decl:{start:{line:1135,column:43},end:{line:1135,column:44}},loc:{start:{line:1135,column:67},end:{line:1153,column:13}},line:1135},"59":{name:"(anonymous_59)",decl:{start:{line:1141,column:31},end:{line:1141,column:32}},loc:{start:{line:1141,column:42},end:{line:1148,column:21}},line:1141},"60":{name:"(anonymous_60)",decl:{start:{line:1166,column:17},end:{line:1166,column:18}},loc:{start:{line:1166,column:36},end:{line:1178,column:9}},line:1166},"61":{name:"(anonymous_61)",decl:{start:{line:1167,column:35},end:{line:1167,column:36}},loc:{start:{line:1167,column:46},end:{line:1167,column:48}},line:1167},"62":{name:"(anonymous_62)",decl:{start:{line:1170,column:37},end:{line:1170,column:38}},loc:{start:{line:1170,column:61},end:{line:1177,column:13}},line:1170},"63":{name:"(anonymous_63)",decl:{start:{line:1188,column:16},end:{line:1188,column:17}},loc:{start:{line:1188,column:35},end:{line:1200,column:9}},line:1188},"64":{name:"(anonymous_64)",decl:{start:{line:1189,column:35},end:{line:1189,column:36}},loc:{start:{line:1189,column:46},end:{line:1189,column:48}},line:1189},"65":{name:"(anonymous_65)",decl:{start:{line:1192,column:36},end:{line:1192,column:37}},loc:{start:{line:1192,column:60},end:{line:1199,column:13}},line:1192},"66":{name:"(anonymous_66)",decl:{start:{line:1210,column:16},end:{line:1210,column:17}},loc:{start:{line:1210,column:35},end:{line:1222,column:9}},line:1210},"67":{name:"(anonymous_67)",decl:{start:{line:1211,column:35},end:{line:1211,column:36}},loc:{start:{line:1211,column:46},end:{line:1211,column:48}},line:1211},"68":{name:"(anonymous_68)",decl:{start:{line:1214,column:37},end:{line:1214,column:38}},loc:{start:{line:1214,column:61},end:{line:1221,column:13}},line:1214},"69":{name:"(anonymous_69)",decl:{start:{line:1257,column:14},end:{line:1257,column:15}},loc:{start:{line:1257,column:49},end:{line:1276,column:9}},line:1257},"70":{name:"(anonymous_70)",decl:{start:{line:1286,column:27},end:{line:1286,column:28}},loc:{start:{line:1286,column:43},end:{line:1288,column:9}},line:1286},"71":{name:"(anonymous_71)",decl:{start:{line:1299,column:15},end:{line:1299,column:16}},loc:{start:{line:1299,column:36},end:{line:1323,column:9}},line:1299},"72":{name:"(anonymous_72)",decl:{start:{line:1333,column:15},end:{line:1333,column:16}},loc:{start:{line:1333,column:26},end:{line:1335,column:9}},line:1333},"73":{name:"(anonymous_73)",decl:{start:{line:1344,column:16},end:{line:1344,column:17}},loc:{start:{line:1344,column:27},end:{line:1346,column:9}},line:1344},"74":{name:"(anonymous_74)",decl:{start:{line:1355,column:17},end:{line:1355,column:18}},loc:{start:{line:1355,column:28},end:{line:1357,column:9}},line:1355},"75":{name:"(anonymous_75)",decl:{start:{line:1374,column:15},end:{line:1374,column:16}},loc:{start:{line:1374,column:43},end:{line:1398,column:9}},line:1374},"76":{name:"(anonymous_76)",decl:{start:{line:1379,column:35},end:{line:1379,column:36}},loc:{start:{line:1379,column:46},end:{line:1379,column:48}},line:1379},"77":{name:"(anonymous_77)",decl:{start:{line:1387,column:44},end:{line:1387,column:45}},loc:{start:{line:1387,column:68},end:{line:1395,column:13}},line:1387},"78":{name:"(anonymous_78)",decl:{start:{line:1416,column:20},end:{line:1416,column:21}},loc:{start:{line:1416,column:44},end:{line:1426,column:9}},line:1416},"79":{name:"(anonymous_79)",decl:{start:{line:1449,column:14},end:{line:1449,column:15}},loc:{start:{line:1449,column:38},end:{line:1506,column:9}},line:1449},"80":{name:"(anonymous_80)",decl:{start:{line:1525,column:16},end:{line:1525,column:17}},loc:{start:{line:1525,column:43},end:{line:1558,column:9}},line:1525},"81":{name:"(anonymous_81)",decl:{start:{line:1526,column:35},end:{line:1526,column:36}},loc:{start:{line:1526,column:46},end:{line:1526,column:48}},line:1526},"82":{name:"(anonymous_82)",decl:{start:{line:1528,column:44},end:{line:1528,column:45}},loc:{start:{line:1528,column:68},end:{line:1555,column:13}},line:1528},"83":{name:"(anonymous_83)",decl:{start:{line:1542,column:37},end:{line:1542,column:38}},loc:{start:{line:1542,column:48},end:{line:1549,column:25}},line:1542},"84":{name:"(anonymous_84)",decl:{start:{line:1575,column:14},end:{line:1575,column:15}},loc:{start:{line:1575,column:33},end:{line:1579,column:9}},line:1575},"85":{name:"(anonymous_85)",decl:{start:{line:1576,column:35},end:{line:1576,column:36}},loc:{start:{line:1576,column:46},end:{line:1576,column:48}},line:1576},"86":{name:"(anonymous_86)",decl:{start:{line:1596,column:14},end:{line:1596,column:15}},loc:{start:{line:1596,column:25},end:{line:1598,column:9}},line:1596},"87":{name:"(anonymous_87)",decl:{start:{line:1614,column:14},end:{line:1614,column:15}},loc:{start:{line:1614,column:49},end:{line:1622,column:9}},line:1614},"88":{name:"(anonymous_88)",decl:{start:{line:1637,column:20},end:{line:1637,column:21}},loc:{start:{line:1637,column:31},end:{line:1639,column:9}},line:1637},"89":{name:"(anonymous_89)",decl:{start:{line:1657,column:21},end:{line:1657,column:22}},loc:{start:{line:1657,column:40},end:{line:1666,column:9}},line:1657},"90":{name:"(anonymous_90)",decl:{start:{line:1658,column:35},end:{line:1658,column:36}},loc:{start:{line:1658,column:46},end:{line:1658,column:48}},line:1658},"91":{name:"(anonymous_91)",decl:{start:{line:1661,column:51},end:{line:1661,column:52}},loc:{start:{line:1661,column:65},end:{line:1663,column:13}},line:1661},"92":{name:"(anonymous_92)",decl:{start:{line:1689,column:18},end:{line:1689,column:19}},loc:{start:{line:1689,column:46},end:{line:1712,column:9}},line:1689},"93":{name:"(anonymous_93)",decl:{start:{line:1695,column:35},end:{line:1695,column:36}},loc:{start:{line:1695,column:46},end:{line:1695,column:48}},line:1695},"94":{name:"(anonymous_94)",decl:{start:{line:1699,column:53},end:{line:1699,column:54}},loc:{start:{line:1699,column:77},end:{line:1709,column:13}},line:1699},"95":{name:"(anonymous_95)",decl:{start:{line:1726,column:25},end:{line:1726,column:26}},loc:{start:{line:1726,column:36},end:{line:1728,column:9}},line:1726},"96":{name:"(anonymous_96)",decl:{start:{line:1749,column:17},end:{line:1749,column:18}},loc:{start:{line:1749,column:45},end:{line:1778,column:9}},line:1749},"97":{name:"(anonymous_97)",decl:{start:{line:1755,column:35},end:{line:1755,column:36}},loc:{start:{line:1755,column:46},end:{line:1755,column:48}},line:1755},"98":{name:"(anonymous_98)",decl:{start:{line:1759,column:48},end:{line:1759,column:49}},loc:{start:{line:1759,column:72},end:{line:1777,column:13}},line:1759},"99":{name:"(anonymous_99)",decl:{start:{line:1795,column:22},end:{line:1795,column:23}},loc:{start:{line:1795,column:41},end:{line:1802,column:9}},line:1795},"100":{name:"(anonymous_100)",decl:{start:{line:1796,column:35},end:{line:1796,column:36}},loc:{start:{line:1796,column:46},end:{line:1796,column:48}},line:1796},"101":{name:"(anonymous_101)",decl:{start:{line:1799,column:44},end:{line:1799,column:45}},loc:{start:{line:1799,column:68},end:{line:1801,column:13}},line:1799},"102":{name:"(anonymous_102)",decl:{start:{line:1816,column:16},end:{line:1816,column:17}},loc:{start:{line:1816,column:43},end:{line:1843,column:9}},line:1816},"103":{name:"(anonymous_103)",decl:{start:{line:1821,column:37},end:{line:1821,column:38}},loc:{start:{line:1821,column:59},end:{line:1836,column:17}},line:1821},"104":{name:"(anonymous_104)",decl:{start:{line:1827,column:52},end:{line:1827,column:53}},loc:{start:{line:1827,column:63},end:{line:1834,column:25}},line:1827},"105":{name:"(anonymous_105)",decl:{start:{line:1861,column:14},end:{line:1861,column:15}},loc:{start:{line:1861,column:25},end:{line:1863,column:9}},line:1861},"106":{name:"(anonymous_106)",decl:{start:{line:1873,column:27},end:{line:1873,column:28}},loc:{start:{line:1873,column:43},end:{line:1876,column:9}},line:1873},"107":{name:"(anonymous_107)",decl:{start:{line:1891,column:14},end:{line:1891,column:15}},loc:{start:{line:1891,column:43},end:{line:1893,column:9}},line:1891},"108":{name:"(anonymous_108)",decl:{start:{line:1910,column:14},end:{line:1910,column:15}},loc:{start:{line:1910,column:26},end:{line:1912,column:9}},line:1910},"109":{name:"(anonymous_109)",decl:{start:{line:1928,column:14},end:{line:1928,column:15}},loc:{start:{line:1928,column:50},end:{line:1931,column:9}},line:1928},"110":{name:"(anonymous_110)",decl:{start:{line:1957,column:14},end:{line:1957,column:15}},loc:{start:{line:1957,column:25},end:{line:1959,column:9}},line:1957},"111":{name:"(anonymous_111)",decl:{start:{line:1971,column:27},end:{line:1971,column:28}},loc:{start:{line:1971,column:43},end:{line:1974,column:9}},line:1971},"112":{name:"(anonymous_112)",decl:{start:{line:1989,column:14},end:{line:1989,column:15}},loc:{start:{line:1989,column:43},end:{line:1991,column:9}},line:1989},"113":{name:"(anonymous_113)",decl:{start:{line:2009,column:14},end:{line:2009,column:15}},loc:{start:{line:2009,column:25},end:{line:2011,column:9}},line:2009},"114":{name:"(anonymous_114)",decl:{start:{line:2021,column:17},end:{line:2021,column:18}},loc:{start:{line:2021,column:28},end:{line:2023,column:9}},line:2021},"115":{name:"(anonymous_115)",decl:{start:{line:2031,column:19},end:{line:2031,column:20}},loc:{start:{line:2031,column:30},end:{line:2033,column:9}},line:2031},"116":{name:"(anonymous_116)",decl:{start:{line:2044,column:22},end:{line:2044,column:23}},loc:{start:{line:2044,column:33},end:{line:2047,column:9}},line:2044},"117":{name:"(anonymous_117)",decl:{start:{line:2057,column:24},end:{line:2057,column:25}},loc:{start:{line:2057,column:35},end:{line:2059,column:9}},line:2057},"118":{name:"(anonymous_118)",decl:{start:{line:2067,column:25},end:{line:2067,column:26}},loc:{start:{line:2067,column:36},end:{line:2069,column:9}},line:2067},"119":{name:"(anonymous_119)",decl:{start:{line:2078,column:18},end:{line:2078,column:19}},loc:{start:{line:2078,column:29},end:{line:2080,column:9}},line:2078},"120":{name:"(anonymous_120)",decl:{start:{line:2088,column:13},end:{line:2088,column:14}},loc:{start:{line:2088,column:24},end:{line:2090,column:9}},line:2088},"121":{name:"(anonymous_121)",decl:{start:{line:2098,column:21},end:{line:2098,column:22}},loc:{start:{line:2098,column:32},end:{line:2100,column:9}},line:2098},"122":{name:"(anonymous_122)",decl:{start:{line:2110,column:29},end:{line:2110,column:30}},loc:{start:{line:2110,column:40},end:{line:2112,column:9}},line:2110},"123":{name:"(anonymous_123)",decl:{start:{line:2122,column:29},end:{line:2122,column:30}},loc:{start:{line:2122,column:40},end:{line:2124,column:9}},line:2122},"124":{name:"(anonymous_124)",decl:{start:{line:2140,column:14},end:{line:2140,column:15}},loc:{start:{line:2140,column:49},end:{line:2143,column:9}},line:2140},"125":{name:"(anonymous_125)",decl:{start:{line:2161,column:14},end:{line:2161,column:15}},loc:{start:{line:2161,column:25},end:{line:2163,column:9}},line:2161},"126":{name:"(anonymous_126)",decl:{start:{line:2173,column:15},end:{line:2173,column:16}},loc:{start:{line:2173,column:26},end:{line:2175,column:9}},line:2173},"127":{name:"(anonymous_127)",decl:{start:{line:2194,column:14},end:{line:2194,column:15}},loc:{start:{line:2194,column:42},end:{line:2222,column:9}},line:2194},"128":{name:"(anonymous_128)",decl:{start:{line:2200,column:35},end:{line:2200,column:36}},loc:{start:{line:2200,column:46},end:{line:2200,column:48}},line:2200},"129":{name:"(anonymous_129)",decl:{start:{line:2204,column:41},end:{line:2204,column:42}},loc:{start:{line:2204,column:65},end:{line:2221,column:13}},line:2204},"130":{name:"(anonymous_130)",decl:{start:{line:2238,column:14},end:{line:2238,column:15}},loc:{start:{line:2238,column:49},end:{line:2243,column:9}},line:2238},"131":{name:"(anonymous_131)",decl:{start:{line:2262,column:14},end:{line:2262,column:15}},loc:{start:{line:2262,column:25},end:{line:2264,column:9}},line:2262},"132":{name:"(anonymous_132)",decl:{start:{line:2274,column:27},end:{line:2274,column:28}},loc:{start:{line:2274,column:43},end:{line:2277,column:9}},line:2274},"133":{name:"(anonymous_133)",decl:{start:{line:2284,column:16},end:{line:2284,column:17}},loc:{start:{line:2284,column:27},end:{line:2286,column:9}},line:2284},"134":{name:"(anonymous_134)",decl:{start:{line:2301,column:14},end:{line:2301,column:15}},loc:{start:{line:2301,column:43},end:{line:2306,column:9}},line:2301},"135":{name:"(anonymous_135)",decl:{start:{line:2331,column:14},end:{line:2331,column:15}},loc:{start:{line:2331,column:25},end:{line:2333,column:9}},line:2331},"136":{name:"(anonymous_136)",decl:{start:{line:2345,column:14},end:{line:2345,column:15}},loc:{start:{line:2345,column:38},end:{line:2351,column:9}},line:2345},"137":{name:"(anonymous_137)",decl:{start:{line:2368,column:19},end:{line:2368,column:20}},loc:{start:{line:2368,column:38},end:{line:2380,column:9}},line:2368},"138":{name:"(anonymous_138)",decl:{start:{line:2369,column:35},end:{line:2369,column:36}},loc:{start:{line:2369,column:46},end:{line:2369,column:48}},line:2369},"139":{name:"(anonymous_139)",decl:{start:{line:2372,column:41},end:{line:2372,column:42}},loc:{start:{line:2372,column:65},end:{line:2379,column:13}},line:2372},"140":{name:"(anonymous_140)",decl:{start:{line:2397,column:20},end:{line:2397,column:21}},loc:{start:{line:2397,column:39},end:{line:2409,column:9}},line:2397},"141":{name:"(anonymous_141)",decl:{start:{line:2398,column:35},end:{line:2398,column:36}},loc:{start:{line:2398,column:46},end:{line:2398,column:48}},line:2398},"142":{name:"(anonymous_142)",decl:{start:{line:2401,column:42},end:{line:2401,column:43}},loc:{start:{line:2401,column:66},end:{line:2408,column:13}},line:2401},"143":{name:"(anonymous_143)",decl:{start:{line:2435,column:14},end:{line:2435,column:15}},loc:{start:{line:2435,column:25},end:{line:2437,column:9}},line:2435},"144":{name:"(anonymous_144)",decl:{start:{line:2447,column:27},end:{line:2447,column:28}},loc:{start:{line:2447,column:43},end:{line:2449,column:9}},line:2447},"145":{name:"(anonymous_145)",decl:{start:{line:2460,column:14},end:{line:2460,column:15}},loc:{start:{line:2460,column:32},end:{line:2462,column:9}},line:2460},"146":{name:"(anonymous_146)",decl:{start:{line:2478,column:14},end:{line:2478,column:15}},loc:{start:{line:2478,column:25},end:{line:2480,column:9}},line:2478},"147":{name:"(anonymous_147)",decl:{start:{line:2491,column:14},end:{line:2491,column:15}},loc:{start:{line:2491,column:32},end:{line:2494,column:9}},line:2491},"148":{name:"(anonymous_148)",decl:{start:{line:2511,column:14},end:{line:2511,column:15}},loc:{start:{line:2511,column:25},end:{line:2513,column:9}},line:2511},"149":{name:"(anonymous_149)",decl:{start:{line:2525,column:14},end:{line:2525,column:15}},loc:{start:{line:2525,column:38},end:{line:2528,column:9}},line:2525},"150":{name:"(anonymous_150)",decl:{start:{line:2554,column:14},end:{line:2554,column:15}},loc:{start:{line:2554,column:25},end:{line:2556,column:9}},line:2554},"151":{name:"(anonymous_151)",decl:{start:{line:2566,column:27},end:{line:2566,column:28}},loc:{start:{line:2566,column:43},end:{line:2568,column:9}},line:2566},"152":{name:"(anonymous_152)",decl:{start:{line:2579,column:14},end:{line:2579,column:15}},loc:{start:{line:2579,column:32},end:{line:2581,column:9}},line:2579},"153":{name:"(anonymous_153)",decl:{start:{line:2593,column:16},end:{line:2593,column:17}},loc:{start:{line:2593,column:43},end:{line:2618,column:9}},line:2593},"154":{name:"(anonymous_154)",decl:{start:{line:2594,column:35},end:{line:2594,column:36}},loc:{start:{line:2594,column:46},end:{line:2594,column:48}},line:2594},"155":{name:"(anonymous_155)",decl:{start:{line:2597,column:44},end:{line:2597,column:45}},loc:{start:{line:2597,column:68},end:{line:2615,column:13}},line:2597},"156":{name:"(anonymous_156)",decl:{start:{line:2606,column:33},end:{line:2606,column:34}},loc:{start:{line:2606,column:44},end:{line:2613,column:21}},line:2606},"157":{name:"(anonymous_157)",decl:{start:{line:2635,column:14},end:{line:2635,column:15}},loc:{start:{line:2635,column:25},end:{line:2637,column:9}},line:2635},"158":{name:"(anonymous_158)",decl:{start:{line:2653,column:14},end:{line:2653,column:15}},loc:{start:{line:2653,column:49},end:{line:2656,column:9}},line:2653},"159":{name:"(anonymous_159)",decl:{start:{line:2673,column:14},end:{line:2673,column:15}},loc:{start:{line:2673,column:25},end:{line:2675,column:9}},line:2673},"160":{name:"(anonymous_160)",decl:{start:{line:2685,column:27},end:{line:2685,column:28}},loc:{start:{line:2685,column:43},end:{line:2688,column:9}},line:2685},"161":{name:"(anonymous_161)",decl:{start:{line:2703,column:14},end:{line:2703,column:15}},loc:{start:{line:2703,column:43},end:{line:2705,column:9}},line:2703},"162":{name:"(anonymous_162)",decl:{start:{line:2721,column:14},end:{line:2721,column:15}},loc:{start:{line:2721,column:25},end:{line:2723,column:9}},line:2721},"163":{name:"(anonymous_163)",decl:{start:{line:2739,column:14},end:{line:2739,column:15}},loc:{start:{line:2739,column:49},end:{line:2744,column:9}},line:2739},"164":{name:"(anonymous_164)",decl:{start:{line:2767,column:21},end:{line:2767,column:22}},loc:{start:{line:2767,column:55},end:{line:2783,column:9}},line:2767},"165":{name:"(anonymous_165)",decl:{start:{line:2773,column:35},end:{line:2773,column:36}},loc:{start:{line:2773,column:46},end:{line:2773,column:48}},line:2773},"166":{name:"(anonymous_166)",decl:{start:{line:2780,column:51},end:{line:2780,column:52}},loc:{start:{line:2780,column:73},end:{line:2782,column:13}},line:2780},"167":{name:"(anonymous_167)",decl:{start:{line:2785,column:16},end:{line:2785,column:17}},loc:{start:{line:2785,column:35},end:{line:2792,column:9}},line:2785},"168":{name:"(anonymous_168)",decl:{start:{line:2809,column:14},end:{line:2809,column:15}},loc:{start:{line:2809,column:25},end:{line:2811,column:9}},line:2809},"169":{name:"(anonymous_169)",decl:{start:{line:2821,column:27},end:{line:2821,column:28}},loc:{start:{line:2821,column:43},end:{line:2824,column:9}},line:2821},"170":{name:"(anonymous_170)",decl:{start:{line:2839,column:14},end:{line:2839,column:15}},loc:{start:{line:2839,column:43},end:{line:2841,column:9}},line:2839},"171":{name:"(anonymous_171)",decl:{start:{line:2860,column:16},end:{line:2860,column:17}},loc:{start:{line:2860,column:49},end:{line:2873,column:9}},line:2860},"172":{name:"(anonymous_172)",decl:{start:{line:2890,column:14},end:{line:2890,column:15}},loc:{start:{line:2890,column:25},end:{line:2893,column:9}},line:2890},"173":{name:"(anonymous_173)",decl:{start:{line:2910,column:14},end:{line:2910,column:15}},loc:{start:{line:2910,column:55},end:{line:2914,column:9}},line:2910},"174":{name:"(anonymous_174)",decl:{start:{line:2932,column:14},end:{line:2932,column:15}},loc:{start:{line:2932,column:25},end:{line:2934,column:9}},line:2932},"175":{name:"(anonymous_175)",decl:{start:{line:2946,column:26},end:{line:2946,column:27}},loc:{start:{line:2946,column:37},end:{line:2948,column:9}},line:2946},"176":{name:"(anonymous_176)",decl:{start:{line:2958,column:27},end:{line:2958,column:28}},loc:{start:{line:2958,column:43},end:{line:2961,column:9}},line:2958},"177":{name:"(anonymous_177)",decl:{start:{line:2977,column:14},end:{line:2977,column:15}},loc:{start:{line:2977,column:49},end:{line:2980,column:9}},line:2977},"178":{name:"(anonymous_178)",decl:{start:{line:2999,column:16},end:{line:2999,column:17}},loc:{start:{line:2999,column:55},end:{line:3017,column:9}},line:2999},"179":{name:"(anonymous_179)",decl:{start:{line:3043,column:14},end:{line:3043,column:15}},loc:{start:{line:3043,column:25},end:{line:3045,column:9}},line:3043},"180":{name:"(anonymous_180)",decl:{start:{line:3055,column:27},end:{line:3055,column:28}},loc:{start:{line:3055,column:43},end:{line:3057,column:9}},line:3055},"181":{name:"(anonymous_181)",decl:{start:{line:3072,column:14},end:{line:3072,column:15}},loc:{start:{line:3072,column:43},end:{line:3078,column:9}},line:3072},"182":{name:"(anonymous_182)",decl:{start:{line:3096,column:16},end:{line:3096,column:17}},loc:{start:{line:3096,column:45},end:{line:3124,column:9}},line:3096},"183":{name:"(anonymous_183)",decl:{start:{line:3103,column:35},end:{line:3103,column:36}},loc:{start:{line:3103,column:46},end:{line:3103,column:48}},line:3103},"184":{name:"(anonymous_184)",decl:{start:{line:3106,column:56},end:{line:3106,column:57}},loc:{start:{line:3106,column:80},end:{line:3121,column:13}},line:3106},"185":{name:"(anonymous_185)",decl:{start:{line:3112,column:33},end:{line:3112,column:34}},loc:{start:{line:3112,column:44},end:{line:3119,column:21}},line:3112},"186":{name:"(anonymous_186)",decl:{start:{line:3135,column:21},end:{line:3135,column:22}},loc:{start:{line:3135,column:46},end:{line:3159,column:9}},line:3135},"187":{name:"(anonymous_187)",decl:{start:{line:3145,column:58},end:{line:3145,column:59}},loc:{start:{line:3145,column:63},end:{line:3145,column:82}},line:3145},"188":{name:"(anonymous_188)",decl:{start:{line:3171,column:19},end:{line:3171,column:20}},loc:{start:{line:3171,column:48},end:{line:3181,column:9}},line:3171},"189":{name:"(anonymous_189)",decl:{start:{line:3194,column:21},end:{line:3194,column:22}},loc:{start:{line:3194,column:82},end:{line:3227,column:9}},line:3194},"190":{name:"(anonymous_190)",decl:{start:{line:3195,column:35},end:{line:3195,column:36}},loc:{start:{line:3195,column:46},end:{line:3195,column:48}},line:3195},"191":{name:"(anonymous_191)",decl:{start:{line:3216,column:59},end:{line:3216,column:60}},loc:{start:{line:3216,column:85},end:{line:3218,column:17}},line:3216},"192":{name:"(anonymous_192)",decl:{start:{line:3223,column:49},end:{line:3223,column:50}},loc:{start:{line:3223,column:73},end:{line:3225,column:17}},line:3223},"193":{name:"(anonymous_193)",decl:{start:{line:3244,column:14},end:{line:3244,column:15}},loc:{start:{line:3244,column:25},end:{line:3246,column:9}},line:3244},"194":{name:"(anonymous_194)",decl:{start:{line:3262,column:14},end:{line:3262,column:15}},loc:{start:{line:3262,column:48},end:{line:3284,column:9}},line:3262},"195":{name:"(anonymous_195)",decl:{start:{line:3301,column:16},end:{line:3301,column:17}},loc:{start:{line:3301,column:35},end:{line:3305,column:9}},line:3301},"196":{name:"(anonymous_196)",decl:{start:{line:3322,column:24},end:{line:3322,column:25}},loc:{start:{line:3322,column:43},end:{line:3331,column:9}},line:3322},"197":{name:"(anonymous_197)",decl:{start:{line:3323,column:35},end:{line:3323,column:36}},loc:{start:{line:3323,column:46},end:{line:3323,column:48}},line:3323},"198":{name:"(anonymous_198)",decl:{start:{line:3326,column:71},end:{line:3326,column:72}},loc:{start:{line:3326,column:85},end:{line:3328,column:13}},line:3326},"199":{name:"(anonymous_199)",decl:{start:{line:3348,column:23},end:{line:3348,column:24}},loc:{start:{line:3348,column:42},end:{line:3357,column:9}},line:3348},"200":{name:"(anonymous_200)",decl:{start:{line:3349,column:35},end:{line:3349,column:36}},loc:{start:{line:3349,column:46},end:{line:3349,column:48}},line:3349},"201":{name:"(anonymous_201)",decl:{start:{line:3352,column:70},end:{line:3352,column:71}},loc:{start:{line:3352,column:84},end:{line:3354,column:13}},line:3352},"202":{name:"(anonymous_202)",decl:{start:{line:3375,column:16},end:{line:3375,column:17}},loc:{start:{line:3375,column:43},end:{line:3389,column:9}},line:3375},"203":{name:"(anonymous_203)",decl:{start:{line:3376,column:35},end:{line:3376,column:36}},loc:{start:{line:3376,column:46},end:{line:3376,column:48}},line:3376},"204":{name:"(anonymous_204)",decl:{start:{line:3381,column:46},end:{line:3381,column:47}},loc:{start:{line:3381,column:70},end:{line:3388,column:13}},line:3381},"205":{name:"(anonymous_205)",decl:{start:{line:3406,column:18},end:{line:3406,column:19}},loc:{start:{line:3406,column:37},end:{line:3415,column:9}},line:3406},"206":{name:"(anonymous_206)",decl:{start:{line:3407,column:35},end:{line:3407,column:36}},loc:{start:{line:3407,column:46},end:{line:3407,column:48}},line:3407},"207":{name:"(anonymous_207)",decl:{start:{line:3410,column:65},end:{line:3410,column:66}},loc:{start:{line:3410,column:79},end:{line:3412,column:13}},line:3410},"208":{name:"(anonymous_208)",decl:{start:{line:3428,column:18},end:{line:3428,column:19}},loc:{start:{line:3428,column:41},end:{line:3430,column:9}},line:3428},"209":{name:"(anonymous_209)",decl:{start:{line:3447,column:15},end:{line:3447,column:16}},loc:{start:{line:3447,column:34},end:{line:3456,column:9}},line:3447},"210":{name:"(anonymous_210)",decl:{start:{line:3448,column:35},end:{line:3448,column:36}},loc:{start:{line:3448,column:46},end:{line:3448,column:48}},line:3448},"211":{name:"(anonymous_211)",decl:{start:{line:3451,column:62},end:{line:3451,column:63}},loc:{start:{line:3451,column:76},end:{line:3453,column:13}},line:3451},"212":{name:"(anonymous_212)",decl:{start:{line:3474,column:17},end:{line:3474,column:18}},loc:{start:{line:3474,column:44},end:{line:3488,column:9}},line:3474},"213":{name:"(anonymous_213)",decl:{start:{line:3475,column:35},end:{line:3475,column:36}},loc:{start:{line:3475,column:46},end:{line:3475,column:48}},line:3475},"214":{name:"(anonymous_214)",decl:{start:{line:3480,column:55},end:{line:3480,column:56}},loc:{start:{line:3480,column:79},end:{line:3487,column:13}},line:3480},"215":{name:"(anonymous_215)",decl:{start:{line:3511,column:17},end:{line:3511,column:18}},loc:{start:{line:3511,column:44},end:{line:3525,column:9}},line:3511},"216":{name:"(anonymous_216)",decl:{start:{line:3512,column:35},end:{line:3512,column:36}},loc:{start:{line:3512,column:46},end:{line:3512,column:48}},line:3512},"217":{name:"(anonymous_217)",decl:{start:{line:3517,column:47},end:{line:3517,column:48}},loc:{start:{line:3517,column:71},end:{line:3524,column:13}},line:3517},"218":{name:"(anonymous_218)",decl:{start:{line:3542,column:19},end:{line:3542,column:20}},loc:{start:{line:3542,column:38},end:{line:3554,column:9}},line:3542},"219":{name:"(anonymous_219)",decl:{start:{line:3543,column:35},end:{line:3543,column:36}},loc:{start:{line:3543,column:46},end:{line:3543,column:48}},line:3543},"220":{name:"(anonymous_220)",decl:{start:{line:3546,column:46},end:{line:3546,column:47}},loc:{start:{line:3546,column:70},end:{line:3553,column:13}},line:3546},"221":{name:"(anonymous_221)",decl:{start:{line:3572,column:21},end:{line:3572,column:22}},loc:{start:{line:3572,column:47},end:{line:3581,column:9}},line:3572},"222":{name:"(anonymous_222)",decl:{start:{line:3573,column:35},end:{line:3573,column:36}},loc:{start:{line:3573,column:46},end:{line:3573,column:48}},line:3573},"223":{name:"(anonymous_223)",decl:{start:{line:3576,column:85},end:{line:3576,column:86}},loc:{start:{line:3576,column:99},end:{line:3578,column:13}},line:3576},"224":{name:"(anonymous_224)",decl:{start:{line:3600,column:16},end:{line:3600,column:17}},loc:{start:{line:3600,column:42},end:{line:3609,column:9}},line:3600},"225":{name:"(anonymous_225)",decl:{start:{line:3601,column:35},end:{line:3601,column:36}},loc:{start:{line:3601,column:46},end:{line:3601,column:48}},line:3601},"226":{name:"(anonymous_226)",decl:{start:{line:3604,column:75},end:{line:3604,column:76}},loc:{start:{line:3604,column:89},end:{line:3606,column:13}},line:3604},"227":{name:"(anonymous_227)",decl:{start:{line:3627,column:17},end:{line:3627,column:18}},loc:{start:{line:3627,column:44},end:{line:3639,column:9}},line:3627},"228":{name:"(anonymous_228)",decl:{start:{line:3628,column:35},end:{line:3628,column:36}},loc:{start:{line:3628,column:46},end:{line:3628,column:48}},line:3628},"229":{name:"(anonymous_229)",decl:{start:{line:3631,column:47},end:{line:3631,column:48}},loc:{start:{line:3631,column:71},end:{line:3638,column:13}},line:3631},"230":{name:"(anonymous_230)",decl:{start:{line:3657,column:18},end:{line:3657,column:19}},loc:{start:{line:3657,column:45},end:{line:3669,column:9}},line:3657},"231":{name:"(anonymous_231)",decl:{start:{line:3658,column:35},end:{line:3658,column:36}},loc:{start:{line:3658,column:46},end:{line:3658,column:48}},line:3658},"232":{name:"(anonymous_232)",decl:{start:{line:3661,column:48},end:{line:3661,column:49}},loc:{start:{line:3661,column:72},end:{line:3668,column:13}},line:3661},"233":{name:"(anonymous_233)",decl:{start:{line:3687,column:15},end:{line:3687,column:16}},loc:{start:{line:3687,column:34},end:{line:3696,column:9}},line:3687},"234":{name:"(anonymous_234)",decl:{start:{line:3688,column:35},end:{line:3688,column:36}},loc:{start:{line:3688,column:46},end:{line:3688,column:48}},line:3688},"235":{name:"(anonymous_235)",decl:{start:{line:3691,column:62},end:{line:3691,column:63}},loc:{start:{line:3691,column:76},end:{line:3693,column:13}},line:3691},"236":{name:"(anonymous_236)",decl:{start:{line:3714,column:15},end:{line:3714,column:16}},loc:{start:{line:3714,column:44},end:{line:3802,column:9}},line:3714},"237":{name:"(anonymous_237)",decl:{start:{line:3730,column:49},end:{line:3730,column:50}},loc:{start:{line:3730,column:60},end:{line:3730,column:62}},line:3730},"238":{name:"(anonymous_238)",decl:{start:{line:3731,column:55},end:{line:3731,column:56}},loc:{start:{line:3731,column:66},end:{line:3731,column:68}},line:3731},"239":{name:"(anonymous_239)",decl:{start:{line:3732,column:47},end:{line:3732,column:48}},loc:{start:{line:3732,column:58},end:{line:3732,column:60}},line:3732},"240":{name:"(anonymous_240)",decl:{start:{line:3733,column:51},end:{line:3733,column:52}},loc:{start:{line:3733,column:62},end:{line:3733,column:64}},line:3733},"241":{name:"(anonymous_241)",decl:{start:{line:3734,column:49},end:{line:3734,column:50}},loc:{start:{line:3734,column:60},end:{line:3734,column:62}},line:3734},"242":{name:"(anonymous_242)",decl:{start:{line:3737,column:57},end:{line:3737,column:58}},loc:{start:{line:3737,column:68},end:{line:3737,column:70}},line:3737},"243":{name:"(anonymous_243)",decl:{start:{line:3738,column:75},end:{line:3738,column:76}},loc:{start:{line:3738,column:86},end:{line:3738,column:88}},line:3738},"244":{name:"(anonymous_244)",decl:{start:{line:3744,column:16},end:{line:3744,column:17}},loc:{start:{line:3744,column:27},end:{line:3744,column:51}},line:3744},"245":{name:"(anonymous_245)",decl:{start:{line:3745,column:16},end:{line:3745,column:17}},loc:{start:{line:3745,column:40},end:{line:3795,column:17}},line:3745},"246":{name:"(anonymous_246)",decl:{start:{line:3746,column:31},end:{line:3746,column:32}},loc:{start:{line:3746,column:50},end:{line:3794,column:21}},line:3746},"247":{name:"(anonymous_247)",decl:{start:{line:3796,column:16},end:{line:3796,column:17}},loc:{start:{line:3796,column:30},end:{line:3800,column:17}},line:3796},"248":{name:"(anonymous_248)",decl:{start:{line:3819,column:17},end:{line:3819,column:18}},loc:{start:{line:3819,column:36},end:{line:3828,column:9}},line:3819},"249":{name:"(anonymous_249)",decl:{start:{line:3820,column:35},end:{line:3820,column:36}},loc:{start:{line:3820,column:46},end:{line:3820,column:48}},line:3820},"250":{name:"(anonymous_250)",decl:{start:{line:3823,column:64},end:{line:3823,column:65}},loc:{start:{line:3823,column:78},end:{line:3825,column:13}},line:3823},"251":{name:"(anonymous_251)",decl:{start:{line:3845,column:14},end:{line:3845,column:15}},loc:{start:{line:3845,column:25},end:{line:3847,column:9}},line:3845},"252":{name:"(anonymous_252)",decl:{start:{line:3857,column:27},end:{line:3857,column:28}},loc:{start:{line:3857,column:43},end:{line:3861,column:9}},line:3857},"253":{name:"(anonymous_253)",decl:{start:{line:3876,column:14},end:{line:3876,column:15}},loc:{start:{line:3876,column:43},end:{line:3882,column:9}},line:3876},"254":{name:"(anonymous_254)",decl:{start:{line:3901,column:16},end:{line:3901,column:17}},loc:{start:{line:3901,column:50},end:{line:3932,column:9}},line:3901},"255":{name:"(anonymous_255)",decl:{start:{line:3910,column:35},end:{line:3910,column:36}},loc:{start:{line:3910,column:46},end:{line:3910,column:48}},line:3910},"256":{name:"(anonymous_256)",decl:{start:{line:3923,column:41},end:{line:3923,column:42}},loc:{start:{line:3923,column:65},end:{line:3931,column:13}},line:3923},"257":{name:"(anonymous_257)",decl:{start:{line:3959,column:16},end:{line:3959,column:17}},loc:{start:{line:3959,column:50},end:{line:3961,column:9}},line:3959},"258":{name:"(anonymous_258)",decl:{start:{line:3984,column:23},end:{line:3984,column:24}},loc:{start:{line:3984,column:57},end:{line:4029,column:9}},line:3984},"259":{name:"(anonymous_259)",decl:{start:{line:3993,column:35},end:{line:3993,column:36}},loc:{start:{line:3993,column:46},end:{line:3993,column:48}},line:3993},"260":{name:"(anonymous_260)",decl:{start:{line:4018,column:16},end:{line:4018,column:17}},loc:{start:{line:4018,column:40},end:{line:4025,column:17}},line:4018},"261":{name:"(anonymous_261)",decl:{start:{line:4086,column:14},end:{line:4086,column:15}},loc:{start:{line:4086,column:30},end:{line:4101,column:9}},line:4086},"262":{name:"(anonymous_262)",decl:{start:{line:4110,column:18},end:{line:4110,column:19}},loc:{start:{line:4110,column:29},end:{line:4112,column:9}},line:4110},"263":{name:"(anonymous_263)",decl:{start:{line:4121,column:18},end:{line:4121,column:19}},loc:{start:{line:4121,column:29},end:{line:4123,column:9}},line:4121},"264":{name:"(anonymous_264)",decl:{start:{line:4132,column:21},end:{line:4132,column:22}},loc:{start:{line:4132,column:32},end:{line:4134,column:9}},line:4132},"265":{name:"(anonymous_265)",decl:{start:{line:4143,column:23},end:{line:4143,column:24}},loc:{start:{line:4143,column:34},end:{line:4145,column:9}},line:4143},"266":{name:"(anonymous_266)",decl:{start:{line:4154,column:22},end:{line:4154,column:23}},loc:{start:{line:4154,column:33},end:{line:4156,column:9}},line:4154},"267":{name:"(anonymous_267)",decl:{start:{line:4165,column:16},end:{line:4165,column:17}},loc:{start:{line:4165,column:27},end:{line:4167,column:9}},line:4165},"268":{name:"(anonymous_268)",decl:{start:{line:4176,column:19},end:{line:4176,column:20}},loc:{start:{line:4176,column:30},end:{line:4178,column:9}},line:4176},"269":{name:"(anonymous_269)",decl:{start:{line:4206,column:14},end:{line:4206,column:15}},loc:{start:{line:4206,column:30},end:{line:4213,column:9}},line:4206},"270":{name:"(anonymous_270)",decl:{start:{line:4272,column:14},end:{line:4272,column:15}},loc:{start:{line:4272,column:30},end:{line:4298,column:9}},line:4272},"271":{name:"(anonymous_271)",decl:{start:{line:4307,column:26},end:{line:4307,column:27}},loc:{start:{line:4307,column:37},end:{line:4309,column:9}},line:4307},"272":{name:"(anonymous_272)",decl:{start:{line:4318,column:20},end:{line:4318,column:21}},loc:{start:{line:4318,column:31},end:{line:4320,column:9}},line:4318},"273":{name:"(anonymous_273)",decl:{start:{line:4329,column:18},end:{line:4329,column:19}},loc:{start:{line:4329,column:29},end:{line:4331,column:9}},line:4329},"274":{name:"(anonymous_274)",decl:{start:{line:4340,column:16},end:{line:4340,column:17}},loc:{start:{line:4340,column:27},end:{line:4342,column:9}},line:4340},"275":{name:"(anonymous_275)",decl:{start:{line:4351,column:15},end:{line:4351,column:16}},loc:{start:{line:4351,column:26},end:{line:4353,column:9}},line:4351},"276":{name:"(anonymous_276)",decl:{start:{line:4362,column:17},end:{line:4362,column:18}},loc:{start:{line:4362,column:28},end:{line:4364,column:9}},line:4362},"277":{name:"(anonymous_277)",decl:{start:{line:4397,column:14},end:{line:4397,column:15}},loc:{start:{line:4397,column:39},end:{line:4406,column:9}},line:4397},"278":{name:"(anonymous_278)",decl:{start:{line:4416,column:13},end:{line:4416,column:14}},loc:{start:{line:4416,column:38},end:{line:4427,column:9}},line:4416},"279":{name:"(anonymous_279)",decl:{start:{line:4558,column:14},end:{line:4558,column:15}},loc:{start:{line:4558,column:40},end:{line:4570,column:9}},line:4558},"280":{name:"(anonymous_280)",decl:{start:{line:4583,column:28},end:{line:4583,column:29}},loc:{start:{line:4583,column:42},end:{line:4595,column:9}},line:4583},"281":{name:"(anonymous_281)",decl:{start:{line:4609,column:19},end:{line:4609,column:20}},loc:{start:{line:4609,column:80},end:{line:4642,column:9}},line:4609},"282":{name:"(anonymous_282)",decl:{start:{line:4657,column:24},end:{line:4657,column:25}},loc:{start:{line:4657,column:96},end:{line:4697,column:9}},line:4657},"283":{name:"(anonymous_283)",decl:{start:{line:4708,column:21},end:{line:4708,column:22}},loc:{start:{line:4708,column:48},end:{line:4731,column:9}},line:4708},"284":{name:"(anonymous_284)",decl:{start:{line:4752,column:26},end:{line:4752,column:27}},loc:{start:{line:4752,column:57},end:{line:4784,column:9}},line:4752},"285":{name:"(anonymous_285)",decl:{start:{line:4797,column:28},end:{line:4797,column:29}},loc:{start:{line:4797,column:88},end:{line:4816,column:9}},line:4797},"286":{name:"(anonymous_286)",decl:{start:{line:4828,column:30},end:{line:4828,column:31}},loc:{start:{line:4828,column:62},end:{line:4849,column:9}},line:4828},"287":{name:"(anonymous_287)",decl:{start:{line:4860,column:24},end:{line:4860,column:25}},loc:{start:{line:4860,column:44},end:{line:4882,column:9}},line:4860},"288":{name:"(anonymous_288)",decl:{start:{line:4897,column:29},end:{line:4897,column:30}},loc:{start:{line:4897,column:57},end:{line:4931,column:9}},line:4897},"289":{name:"(anonymous_289)",decl:{start:{line:4943,column:31},end:{line:4943,column:32}},loc:{start:{line:4943,column:88},end:{line:4961,column:9}},line:4943},"290":{name:"(anonymous_290)",decl:{start:{line:4972,column:33},end:{line:4972,column:34}},loc:{start:{line:4972,column:58},end:{line:4992,column:9}},line:4972},"291":{name:"(anonymous_291)",decl:{start:{line:5004,column:22},end:{line:5004,column:23}},loc:{start:{line:5004,column:64},end:{line:5074,column:9}},line:5004},"292":{name:"(anonymous_292)",decl:{start:{line:5083,column:22},end:{line:5083,column:23}},loc:{start:{line:5083,column:33},end:{line:5092,column:9}},line:5083},"293":{name:"(anonymous_293)",decl:{start:{line:5116,column:15},end:{line:5116,column:16}},loc:{start:{line:5116,column:34},end:{line:5140,column:9}},line:5116},"294":{name:"(anonymous_294)",decl:{start:{line:5127,column:110},end:{line:5127,column:111}},loc:{start:{line:5127,column:134},end:{line:5139,column:13}},line:5127},"295":{name:"(anonymous_295)",decl:{start:{line:5168,column:13},end:{line:5168,column:14}},loc:{start:{line:5168,column:38},end:{line:5183,column:9}},line:5168},"296":{name:"(anonymous_296)",decl:{start:{line:5175,column:23},end:{line:5175,column:24}},loc:{start:{line:5175,column:44},end:{line:5182,column:13}},line:5175},"297":{name:"(anonymous_297)",decl:{start:{line:5239,column:14},end:{line:5239,column:15}},loc:{start:{line:5239,column:47},end:{line:5285,column:9}},line:5239},"298":{name:"(anonymous_298)",decl:{start:{line:5294,column:22},end:{line:5294,column:23}},loc:{start:{line:5294,column:33},end:{line:5296,column:9}},line:5294},"299":{name:"(anonymous_299)",decl:{start:{line:5305,column:27},end:{line:5305,column:28}},loc:{start:{line:5305,column:38},end:{line:5307,column:9}},line:5305},"300":{name:"(anonymous_300)",decl:{start:{line:5317,column:20},end:{line:5317,column:21}},loc:{start:{line:5317,column:31},end:{line:5319,column:9}},line:5317},"301":{name:"(anonymous_301)",decl:{start:{line:5331,column:21},end:{line:5331,column:22}},loc:{start:{line:5331,column:36},end:{line:5333,column:9}},line:5331},"302":{name:"(anonymous_302)",decl:{start:{line:5345,column:19},end:{line:5345,column:20}},loc:{start:{line:5345,column:30},end:{line:5363,column:9}},line:5345},"303":{name:"(anonymous_303)",decl:{start:{line:5375,column:23},end:{line:5375,column:24}},loc:{start:{line:5375,column:34},end:{line:5377,column:9}},line:5375},"304":{name:"(anonymous_304)",decl:{start:{line:5388,column:26},end:{line:5388,column:27}},loc:{start:{line:5388,column:36},end:{line:5400,column:9}},line:5388},"305":{name:"(anonymous_305)",decl:{start:{line:5411,column:30},end:{line:5411,column:31}},loc:{start:{line:5411,column:41},end:{line:5413,column:9}},line:5411},"306":{name:"(anonymous_306)",decl:{start:{line:5424,column:18},end:{line:5424,column:19}},loc:{start:{line:5424,column:38},end:{line:5426,column:9}},line:5424},"307":{name:"(anonymous_307)",decl:{start:{line:5437,column:24},end:{line:5437,column:25}},loc:{start:{line:5437,column:35},end:{line:5439,column:9}},line:5437},"308":{name:"(anonymous_308)",decl:{start:{line:5467,column:36},end:{line:5467,column:37}},loc:{start:{line:5467,column:69},end:{line:5478,column:9}},line:5467},"309":{name:"(anonymous_309)",decl:{start:{line:5499,column:21},end:{line:5499,column:22}},loc:{start:{line:5499,column:61},end:{line:5504,column:9}},line:5499},"310":{name:"(anonymous_310)",decl:{start:{line:5515,column:16},end:{line:5515,column:17}},loc:{start:{line:5515,column:27},end:{line:5517,column:9}},line:5515},"311":{name:"(anonymous_311)",decl:{start:{line:5526,column:34},end:{line:5526,column:35}},loc:{start:{line:5526,column:45},end:{line:5529,column:9}},line:5526},"312":{name:"(anonymous_312)",decl:{start:{line:5547,column:14},end:{line:5547,column:15}},loc:{start:{line:5547,column:25},end:{line:5549,column:9}},line:5547},"313":{name:"(anonymous_313)",decl:{start:{line:5569,column:14},end:{line:5569,column:15}},loc:{start:{line:5569,column:56},end:{line:5606,column:9}},line:5569},"314":{name:"(anonymous_314)",decl:{start:{line:5615,column:23},end:{line:5615,column:24}},loc:{start:{line:5615,column:34},end:{line:5617,column:9}},line:5615},"315":{name:"(anonymous_315)",decl:{start:{line:5627,column:22},end:{line:5627,column:23}},loc:{start:{line:5627,column:37},end:{line:5634,column:9}},line:5627},"316":{name:"(anonymous_316)",decl:{start:{line:5643,column:19},end:{line:5643,column:20}},loc:{start:{line:5643,column:34},end:{line:5645,column:9}},line:5643},"317":{name:"(anonymous_317)",decl:{start:{line:5659,column:16},end:{line:5659,column:17}},loc:{start:{line:5659,column:42},end:{line:5693,column:9}},line:5659},"318":{name:"(anonymous_318)",decl:{start:{line:5664,column:35},end:{line:5664,column:36}},loc:{start:{line:5664,column:46},end:{line:5664,column:48}},line:5664},"319":{name:"(anonymous_319)",decl:{start:{line:5684,column:47},end:{line:5684,column:48}},loc:{start:{line:5684,column:71},end:{line:5692,column:13}},line:5684},"320":{name:"(anonymous_320)",decl:{start:{line:5711,column:14},end:{line:5711,column:15}},loc:{start:{line:5711,column:25},end:{line:5713,column:9}},line:5711},"321":{name:"(anonymous_321)",decl:{start:{line:5727,column:14},end:{line:5727,column:15}},loc:{start:{line:5727,column:43},end:{line:5731,column:9}},line:5727},"322":{name:"(anonymous_322)",decl:{start:{line:5745,column:16},end:{line:5745,column:17}},loc:{start:{line:5745,column:49},end:{line:5767,column:9}},line:5745},"323":{name:"(anonymous_323)",decl:{start:{line:5754,column:35},end:{line:5754,column:36}},loc:{start:{line:5754,column:45},end:{line:5754,column:47}},line:5754},"324":{name:"(anonymous_324)",decl:{start:{line:5758,column:84},end:{line:5758,column:85}},loc:{start:{line:5758,column:108},end:{line:5766,column:13}},line:5758},"325":{name:"(anonymous_325)",decl:{start:{line:5779,column:27},end:{line:5779,column:28}},loc:{start:{line:5779,column:43},end:{line:5782,column:9}},line:5779},"326":{name:"(anonymous_326)",decl:{start:{line:5788,column:14},end:{line:5788,column:15}},loc:{start:{line:5788,column:41},end:{line:5794,column:9}},line:5788},"327":{name:"(anonymous_327)",decl:{start:{line:5797,column:14},end:{line:5797,column:15}},loc:{start:{line:5797,column:33},end:{line:5816,column:9}},line:5797},"328":{name:"(anonymous_328)",decl:{start:{line:5798,column:35},end:{line:5798,column:36}},loc:{start:{line:5798,column:46},end:{line:5798,column:48}},line:5798},"329":{name:"(anonymous_329)",decl:{start:{line:5805,column:42},end:{line:5805,column:43}},loc:{start:{line:5805,column:65},end:{line:5815,column:13}},line:5805}},branchMap:{"0":{loc:{start:{line:26,column:15},end:{line:26,column:30}},type:"binary-expr",locations:[{start:{line:26,column:15},end:{line:26,column:22}},{start:{line:26,column:26},end:{line:26,column:30}}],line:26},"1":{loc:{start:{line:397,column:12},end:{line:400,column:13}},type:"if",locations:[{start:{line:397,column:12},end:{line:400,column:13}},{start:{line:397,column:12},end:{line:400,column:13}}],line:397},"2":{loc:{start:{line:397,column:16},end:{line:397,column:56}},type:"binary-expr",locations:[{start:{line:397,column:16},end:{line:397,column:25}},{start:{line:397,column:29},end:{line:397,column:56}}],line:397},"3":{loc:{start:{line:420,column:12},end:{line:423,column:13}},type:"if",locations:[{start:{line:420,column:12},end:{line:423,column:13}},{start:{line:420,column:12},end:{line:423,column:13}}],line:420},"4":{loc:{start:{line:420,column:16},end:{line:420,column:56}},type:"binary-expr",locations:[{start:{line:420,column:16},end:{line:420,column:25}},{start:{line:420,column:29},end:{line:420,column:56}}],line:420},"5":{loc:{start:{line:453,column:12},end:{line:456,column:13}},type:"if",locations:[{start:{line:453,column:12},end:{line:456,column:13}},{start:{line:453,column:12},end:{line:456,column:13}}],line:453},"6":{loc:{start:{line:453,column:16},end:{line:453,column:56}},type:"binary-expr",locations:[{start:{line:453,column:16},end:{line:453,column:25}},{start:{line:453,column:29},end:{line:453,column:56}}],line:453},"7":{loc:{start:{line:478,column:23},end:{line:478,column:48}},type:"binary-expr",locations:[{start:{line:478,column:23},end:{line:478,column:31}},{start:{line:478,column:35},end:{line:478,column:48}}],line:478},"8":{loc:{start:{line:482,column:16},end:{line:496,column:17}},type:"if",locations:[{start:{line:482,column:16},end:{line:496,column:17}},{start:{line:482,column:16},end:{line:496,column:17}}],line:482},"9":{loc:{start:{line:489,column:24},end:{line:494,column:25}},type:"if",locations:[{start:{line:489,column:24},end:{line:494,column:25}},{start:{line:489,column:24},end:{line:494,column:25}}],line:489},"10":{loc:{start:{line:517,column:23},end:{line:517,column:48}},type:"binary-expr",locations:[{start:{line:517,column:23},end:{line:517,column:31}},{start:{line:517,column:35},end:{line:517,column:48}}],line:517},"11":{loc:{start:{line:544,column:12},end:{line:547,column:13}},type:"if",locations:[{start:{line:544,column:12},end:{line:547,column:13}},{start:{line:544,column:12},end:{line:547,column:13}}],line:544},"12":{loc:{start:{line:544,column:16},end:{line:544,column:53}},type:"binary-expr",locations:[{start:{line:544,column:16},end:{line:544,column:25}},{start:{line:544,column:29},end:{line:544,column:53}}],line:544},"13":{loc:{start:{line:549,column:23},end:{line:549,column:48}},type:"binary-expr",locations:[{start:{line:549,column:23},end:{line:549,column:31}},{start:{line:549,column:35},end:{line:549,column:48}}],line:549},"14":{loc:{start:{line:550,column:21},end:{line:550,column:33}},type:"binary-expr",locations:[{start:{line:550,column:21},end:{line:550,column:27}},{start:{line:550,column:31},end:{line:550,column:33}}],line:550},"15":{loc:{start:{line:555,column:16},end:{line:560,column:17}},type:"if",locations:[{start:{line:555,column:16},end:{line:560,column:17}},{start:{line:555,column:16},end:{line:560,column:17}}],line:555},"16":{loc:{start:{line:581,column:12},end:{line:584,column:13}},type:"if",locations:[{start:{line:581,column:12},end:{line:584,column:13}},{start:{line:581,column:12},end:{line:584,column:13}}],line:581},"17":{loc:{start:{line:581,column:16},end:{line:581,column:52}},type:"binary-expr",locations:[{start:{line:581,column:16},end:{line:581,column:25}},{start:{line:581,column:29},end:{line:581,column:52}}],line:581},"18":{loc:{start:{line:586,column:23},end:{line:586,column:48}},type:"binary-expr",locations:[{start:{line:586,column:23},end:{line:586,column:31}},{start:{line:586,column:35},end:{line:586,column:48}}],line:586},"19":{loc:{start:{line:588,column:23},end:{line:588,column:34}},type:"binary-expr",locations:[{start:{line:588,column:23},end:{line:588,column:28}},{start:{line:588,column:32},end:{line:588,column:34}}],line:588},"20":{loc:{start:{line:593,column:16},end:{line:599,column:17}},type:"if",locations:[{start:{line:593,column:16},end:{line:599,column:17}},{start:{line:593,column:16},end:{line:599,column:17}}],line:593},"21":{loc:{start:{line:597,column:35},end:{line:597,column:54}},type:"binary-expr",locations:[{start:{line:597,column:35},end:{line:597,column:48}},{start:{line:597,column:52},end:{line:597,column:54}}],line:597},"22":{loc:{start:{line:598,column:35},end:{line:598,column:48}},type:"binary-expr",locations:[{start:{line:598,column:35},end:{line:598,column:42}},{start:{line:598,column:46},end:{line:598,column:48}}],line:598},"23":{loc:{start:{line:625,column:12},end:{line:628,column:13}},type:"if",locations:[{start:{line:625,column:12},end:{line:628,column:13}},{start:{line:625,column:12},end:{line:628,column:13}}],line:625},"24":{loc:{start:{line:625,column:16},end:{line:625,column:53}},type:"binary-expr",locations:[{start:{line:625,column:16},end:{line:625,column:25}},{start:{line:625,column:29},end:{line:625,column:53}}],line:625},"25":{loc:{start:{line:630,column:23},end:{line:630,column:48}},type:"binary-expr",locations:[{start:{line:630,column:23},end:{line:630,column:31}},{start:{line:630,column:35},end:{line:630,column:48}}],line:630},"26":{loc:{start:{line:631,column:21},end:{line:631,column:33}},type:"binary-expr",locations:[{start:{line:631,column:21},end:{line:631,column:27}},{start:{line:631,column:31},end:{line:631,column:33}}],line:631},"27":{loc:{start:{line:634,column:12},end:{line:636,column:13}},type:"if",locations:[{start:{line:634,column:12},end:{line:636,column:13}},{start:{line:634,column:12},end:{line:636,column:13}}],line:634},"28":{loc:{start:{line:653,column:20},end:{line:658,column:21}},type:"if",locations:[{start:{line:653,column:20},end:{line:658,column:21}},{start:{line:653,column:20},end:{line:658,column:21}}],line:653},"29":{loc:{start:{line:686,column:12},end:{line:688,column:13}},type:"if",locations:[{start:{line:686,column:12},end:{line:688,column:13}},{start:{line:686,column:12},end:{line:688,column:13}}],line:686},"30":{loc:{start:{line:690,column:12},end:{line:692,column:13}},type:"if",locations:[{start:{line:690,column:12},end:{line:692,column:13}},{start:{line:690,column:12},end:{line:692,column:13}}],line:690},"31":{loc:{start:{line:725,column:12},end:{line:727,column:13}},type:"if",locations:[{start:{line:725,column:12},end:{line:727,column:13}},{start:{line:725,column:12},end:{line:727,column:13}}],line:725},"32":{loc:{start:{line:758,column:12},end:{line:760,column:13}},type:"if",locations:[{start:{line:758,column:12},end:{line:760,column:13}},{start:{line:758,column:12},end:{line:760,column:13}}],line:758},"33":{loc:{start:{line:790,column:12},end:{line:792,column:13}},type:"if",locations:[{start:{line:790,column:12},end:{line:792,column:13}},{start:{line:790,column:12},end:{line:792,column:13}}],line:790},"34":{loc:{start:{line:863,column:31},end:{line:863,column:47}},type:"binary-expr",locations:[{start:{line:863,column:31},end:{line:863,column:41}},{start:{line:863,column:45},end:{line:863,column:47}}],line:863},"35":{loc:{start:{line:864,column:26},end:{line:864,column:42}},type:"binary-expr",locations:[{start:{line:864,column:26},end:{line:864,column:36}},{start:{line:864,column:40},end:{line:864,column:42}}],line:864},"36":{loc:{start:{line:973,column:25},end:{line:973,column:79}},type:"cond-expr",locations:[{start:{line:973,column:53},end:{line:973,column:66}},{start:{line:973,column:69},end:{line:973,column:79}}],line:973},"37":{loc:{start:{line:977,column:25},end:{line:982,column:13}},type:"binary-expr",locations:[{start:{line:977,column:25},end:{line:977,column:35}},{start:{line:977,column:39},end:{line:982,column:13}}],line:977},"38":{loc:{start:{line:987,column:31},end:{line:987,column:57}},type:"binary-expr",locations:[{start:{line:987,column:31},end:{line:987,column:49}},{start:{line:987,column:55},end:{line:987,column:57}}],line:987},"39":{loc:{start:{line:988,column:31},end:{line:988,column:73}},type:"binary-expr",locations:[{start:{line:988,column:31},end:{line:988,column:48}},{start:{line:988,column:55},end:{line:988,column:67}},{start:{line:988,column:71},end:{line:988,column:73}}],line:988},"40":{loc:{start:{line:989,column:31},end:{line:989,column:57}},type:"binary-expr",locations:[{start:{line:989,column:31},end:{line:989,column:45}},{start:{line:989,column:55},end:{line:989,column:57}}],line:989},"41":{loc:{start:{line:990,column:31},end:{line:990,column:57}},type:"binary-expr",locations:[{start:{line:990,column:31},end:{line:990,column:47}},{start:{line:990,column:55},end:{line:990,column:57}}],line:990},"42":{loc:{start:{line:991,column:31},end:{line:991,column:59}},type:"binary-expr",locations:[{start:{line:991,column:31},end:{line:991,column:48}},{start:{line:991,column:55},end:{line:991,column:59}}],line:991},"43":{loc:{start:{line:992,column:31},end:{line:992,column:59}},type:"binary-expr",locations:[{start:{line:992,column:31},end:{line:992,column:49}},{start:{line:992,column:55},end:{line:992,column:59}}],line:992},"44":{loc:{start:{line:993,column:31},end:{line:993,column:59}},type:"binary-expr",locations:[{start:{line:993,column:31},end:{line:993,column:51}},{start:{line:993,column:55},end:{line:993,column:59}}],line:993},"45":{loc:{start:{line:1081,column:12},end:{line:1084,column:13}},type:"if",locations:[{start:{line:1081,column:12},end:{line:1084,column:13}},{start:{line:1081,column:12},end:{line:1084,column:13}}],line:1081},"46":{loc:{start:{line:1081,column:16},end:{line:1081,column:54}},type:"binary-expr",locations:[{start:{line:1081,column:16},end:{line:1081,column:25}},{start:{line:1081,column:29},end:{line:1081,column:54}}],line:1081},"47":{loc:{start:{line:1085,column:23},end:{line:1085,column:48}},type:"binary-expr",locations:[{start:{line:1085,column:23},end:{line:1085,column:31}},{start:{line:1085,column:35},end:{line:1085,column:48}}],line:1085},"48":{loc:{start:{line:1087,column:22},end:{line:1087,column:35}},type:"binary-expr",locations:[{start:{line:1087,column:22},end:{line:1087,column:29}},{start:{line:1087,column:33},end:{line:1087,column:35}}],line:1087},"49":{loc:{start:{line:1091,column:16},end:{line:1097,column:17}},type:"if",locations:[{start:{line:1091,column:16},end:{line:1097,column:17}},{start:{line:1091,column:16},end:{line:1097,column:17}}],line:1091},"50":{loc:{start:{line:1095,column:31},end:{line:1095,column:73}},type:"cond-expr",locations:[{start:{line:1095,column:47},end:{line:1095,column:66}},{start:{line:1095,column:69},end:{line:1095,column:73}}],line:1095},"51":{loc:{start:{line:1110,column:23},end:{line:1110,column:48}},type:"binary-expr",locations:[{start:{line:1110,column:23},end:{line:1110,column:31}},{start:{line:1110,column:35},end:{line:1110,column:48}}],line:1110},"52":{loc:{start:{line:1128,column:23},end:{line:1128,column:48}},type:"binary-expr",locations:[{start:{line:1128,column:23},end:{line:1128,column:31}},{start:{line:1128,column:35},end:{line:1128,column:48}}],line:1128},"53":{loc:{start:{line:1130,column:12},end:{line:1132,column:13}},type:"if",locations:[{start:{line:1130,column:12},end:{line:1132,column:13}},{start:{line:1130,column:12},end:{line:1132,column:13}}],line:1130},"54":{loc:{start:{line:1136,column:16},end:{line:1152,column:17}},type:"if",locations:[{start:{line:1136,column:16},end:{line:1152,column:17}},{start:{line:1136,column:16},end:{line:1152,column:17}}],line:1136},"55":{loc:{start:{line:1136,column:20},end:{line:1136,column:47}},type:"binary-expr",locations:[{start:{line:1136,column:20},end:{line:1136,column:24}},{start:{line:1136,column:28},end:{line:1136,column:47}}],line:1136},"56":{loc:{start:{line:1140,column:21},end:{line:1152,column:17}},type:"if",locations:[{start:{line:1140,column:21},end:{line:1152,column:17}},{start:{line:1140,column:21},end:{line:1152,column:17}}],line:1140},"57":{loc:{start:{line:1140,column:25},end:{line:1140,column:51}},type:"binary-expr",locations:[{start:{line:1140,column:25},end:{line:1140,column:29}},{start:{line:1140,column:33},end:{line:1140,column:51}}],line:1140},"58":{loc:{start:{line:1142,column:24},end:{line:1147,column:25}},type:"if",locations:[{start:{line:1142,column:24},end:{line:1147,column:25}},{start:{line:1142,column:24},end:{line:1147,column:25}}],line:1142},"59":{loc:{start:{line:1167,column:23},end:{line:1167,column:48}},type:"binary-expr",locations:[{start:{line:1167,column:23},end:{line:1167,column:31}},{start:{line:1167,column:35},end:{line:1167,column:48}}],line:1167},"60":{loc:{start:{line:1171,column:16},end:{line:1176,column:17}},type:"if",locations:[{start:{line:1171,column:16},end:{line:1176,column:17}},{start:{line:1171,column:16},end:{line:1176,column:17}}],line:1171},"61":{loc:{start:{line:1189,column:23},end:{line:1189,column:48}},type:"binary-expr",locations:[{start:{line:1189,column:23},end:{line:1189,column:31}},{start:{line:1189,column:35},end:{line:1189,column:48}}],line:1189},"62":{loc:{start:{line:1193,column:16},end:{line:1198,column:17}},type:"if",locations:[{start:{line:1193,column:16},end:{line:1198,column:17}},{start:{line:1193,column:16},end:{line:1198,column:17}}],line:1193},"63":{loc:{start:{line:1211,column:23},end:{line:1211,column:48}},type:"binary-expr",locations:[{start:{line:1211,column:23},end:{line:1211,column:31}},{start:{line:1211,column:35},end:{line:1211,column:48}}],line:1211},"64":{loc:{start:{line:1215,column:16},end:{line:1220,column:17}},type:"if",locations:[{start:{line:1215,column:16},end:{line:1220,column:17}},{start:{line:1215,column:16},end:{line:1220,column:17}}],line:1215},"65":{loc:{start:{line:1304,column:37},end:{line:1304,column:59}},type:"binary-expr",locations:[{start:{line:1304,column:37},end:{line:1304,column:53}},{start:{line:1304,column:57},end:{line:1304,column:59}}],line:1304},"66":{loc:{start:{line:1311,column:16},end:{line:1316,column:17}},type:"if",locations:[{start:{line:1311,column:16},end:{line:1316,column:17}},{start:{line:1311,column:16},end:{line:1316,column:17}}],line:1311},"67":{loc:{start:{line:1320,column:35},end:{line:1320,column:61}},type:"binary-expr",locations:[{start:{line:1320,column:35},end:{line:1320,column:52}},{start:{line:1320,column:59},end:{line:1320,column:61}}],line:1320},"68":{loc:{start:{line:1321,column:35},end:{line:1321,column:61}},type:"binary-expr",locations:[{start:{line:1321,column:35},end:{line:1321,column:51}},{start:{line:1321,column:59},end:{line:1321,column:61}}],line:1321},"69":{loc:{start:{line:1322,column:35},end:{line:1322,column:63}},type:"binary-expr",locations:[{start:{line:1322,column:35},end:{line:1322,column:53}},{start:{line:1322,column:59},end:{line:1322,column:63}}],line:1322},"70":{loc:{start:{line:1375,column:12},end:{line:1378,column:13}},type:"if",locations:[{start:{line:1375,column:12},end:{line:1378,column:13}},{start:{line:1375,column:12},end:{line:1378,column:13}}],line:1375},"71":{loc:{start:{line:1375,column:16},end:{line:1375,column:54}},type:"binary-expr",locations:[{start:{line:1375,column:16},end:{line:1375,column:25}},{start:{line:1375,column:29},end:{line:1375,column:54}}],line:1375},"72":{loc:{start:{line:1379,column:23},end:{line:1379,column:48}},type:"binary-expr",locations:[{start:{line:1379,column:23},end:{line:1379,column:31}},{start:{line:1379,column:35},end:{line:1379,column:48}}],line:1379},"73":{loc:{start:{line:1381,column:22},end:{line:1381,column:35}},type:"binary-expr",locations:[{start:{line:1381,column:22},end:{line:1381,column:29}},{start:{line:1381,column:33},end:{line:1381,column:35}}],line:1381},"74":{loc:{start:{line:1382,column:12},end:{line:1384,column:13}},type:"if",locations:[{start:{line:1382,column:12},end:{line:1384,column:13}},{start:{line:1382,column:12},end:{line:1384,column:13}}],line:1382},"75":{loc:{start:{line:1388,column:16},end:{line:1394,column:17}},type:"if",locations:[{start:{line:1388,column:16},end:{line:1394,column:17}},{start:{line:1388,column:16},end:{line:1394,column:17}}],line:1388},"76":{loc:{start:{line:1417,column:22},end:{line:1417,column:35}},type:"binary-expr",locations:[{start:{line:1417,column:22},end:{line:1417,column:29}},{start:{line:1417,column:33},end:{line:1417,column:35}}],line:1417},"77":{loc:{start:{line:1418,column:12},end:{line:1420,column:13}},type:"if",locations:[{start:{line:1418,column:12},end:{line:1420,column:13}},{start:{line:1418,column:12},end:{line:1420,column:13}}],line:1418},"78":{loc:{start:{line:1450,column:12},end:{line:1452,column:13}},type:"if",locations:[{start:{line:1450,column:12},end:{line:1452,column:13}},{start:{line:1450,column:12},end:{line:1452,column:13}}],line:1450},"79":{loc:{start:{line:1454,column:12},end:{line:1456,column:13}},type:"if",locations:[{start:{line:1454,column:12},end:{line:1456,column:13}},{start:{line:1454,column:12},end:{line:1456,column:13}}],line:1454},"80":{loc:{start:{line:1458,column:12},end:{line:1460,column:13}},type:"if",locations:[{start:{line:1458,column:12},end:{line:1460,column:13}},{start:{line:1458,column:12},end:{line:1460,column:13}}],line:1458},"81":{loc:{start:{line:1458,column:16},end:{line:1458,column:79}},type:"binary-expr",locations:[{start:{line:1458,column:16},end:{line:1458,column:25}},{start:{line:1458,column:30},end:{line:1458,column:51}},{start:{line:1458,column:55},end:{line:1458,column:78}}],line:1458},"82":{loc:{start:{line:1463,column:12},end:{line:1505,column:13}},type:"if",locations:[{start:{line:1463,column:12},end:{line:1505,column:13}},{start:{line:1463,column:12},end:{line:1505,column:13}}],line:1463},"83":{loc:{start:{line:1466,column:16},end:{line:1501,column:17}},type:"if",locations:[{start:{line:1466,column:16},end:{line:1501,column:17}},{start:{line:1466,column:16},end:{line:1501,column:17}}],line:1466},"84":{loc:{start:{line:1466,column:20},end:{line:1466,column:55}},type:"binary-expr",locations:[{start:{line:1466,column:20},end:{line:1466,column:41}},{start:{line:1466,column:45},end:{line:1466,column:55}}],line:1466},"85":{loc:{start:{line:1473,column:21},end:{line:1501,column:17}},type:"if",locations:[{start:{line:1473,column:21},end:{line:1501,column:17}},{start:{line:1473,column:21},end:{line:1501,column:17}}],line:1473},"86":{loc:{start:{line:1473,column:25},end:{line:1473,column:59}},type:"binary-expr",locations:[{start:{line:1473,column:25},end:{line:1473,column:46}},{start:{line:1473,column:50},end:{line:1473,column:59}}],line:1473},"87":{loc:{start:{line:1478,column:20},end:{line:1483,column:21}},type:"if",locations:[{start:{line:1478,column:20},end:{line:1483,column:21}},{start:{line:1478,column:20},end:{line:1483,column:21}}],line:1478},"88":{loc:{start:{line:1485,column:21},end:{line:1501,column:17}},type:"if",locations:[{start:{line:1485,column:21},end:{line:1501,column:17}},{start:{line:1485,column:21},end:{line:1501,column:17}}],line:1485},"89":{loc:{start:{line:1485,column:25},end:{line:1485,column:58}},type:"binary-expr",locations:[{start:{line:1485,column:25},end:{line:1485,column:44}},{start:{line:1485,column:48},end:{line:1485,column:58}}],line:1485},"90":{loc:{start:{line:1497,column:24},end:{line:1499,column:25}},type:"if",locations:[{start:{line:1497,column:24},end:{line:1499,column:25}},{start:{line:1497,column:24},end:{line:1499,column:25}}],line:1497},"91":{loc:{start:{line:1526,column:23},end:{line:1526,column:48}},type:"binary-expr",locations:[{start:{line:1526,column:23},end:{line:1526,column:31}},{start:{line:1526,column:35},end:{line:1526,column:48}}],line:1526},"92":{loc:{start:{line:1529,column:16},end:{line:1554,column:17}},type:"if",locations:[{start:{line:1529,column:16},end:{line:1554,column:17}},{start:{line:1529,column:16},end:{line:1554,column:17}}],line:1529},"93":{loc:{start:{line:1534,column:20},end:{line:1536,column:21}},type:"if",locations:[{start:{line:1534,column:20},end:{line:1536,column:21}},{start:{line:1534,column:20},end:{line:1536,column:21}}],line:1534},"94":{loc:{start:{line:1541,column:20},end:{line:1553,column:21}},type:"if",locations:[{start:{line:1541,column:20},end:{line:1553,column:21}},{start:{line:1541,column:20},end:{line:1553,column:21}}],line:1541},"95":{loc:{start:{line:1543,column:28},end:{line:1548,column:29}},type:"if",locations:[{start:{line:1543,column:28},end:{line:1548,column:29}},{start:{line:1543,column:28},end:{line:1548,column:29}}],line:1543},"96":{loc:{start:{line:1576,column:23},end:{line:1576,column:48}},type:"binary-expr",locations:[{start:{line:1576,column:23},end:{line:1576,column:31}},{start:{line:1576,column:35},end:{line:1576,column:48}}],line:1576},"97":{loc:{start:{line:1638,column:19},end:{line:1638,column:77}},type:"binary-expr",locations:[{start:{line:1638,column:19},end:{line:1638,column:72}},{start:{line:1638,column:76},end:{line:1638,column:77}}],line:1638},"98":{loc:{start:{line:1658,column:23},end:{line:1658,column:48}},type:"binary-expr",locations:[{start:{line:1658,column:23},end:{line:1658,column:31}},{start:{line:1658,column:35},end:{line:1658,column:48}}],line:1658},"99":{loc:{start:{line:1690,column:12},end:{line:1693,column:13}},type:"if",locations:[{start:{line:1690,column:12},end:{line:1693,column:13}},{start:{line:1690,column:12},end:{line:1693,column:13}}],line:1690},"100":{loc:{start:{line:1690,column:16},end:{line:1690,column:54}},type:"binary-expr",locations:[{start:{line:1690,column:16},end:{line:1690,column:25}},{start:{line:1690,column:29},end:{line:1690,column:54}}],line:1690},"101":{loc:{start:{line:1695,column:23},end:{line:1695,column:48}},type:"binary-expr",locations:[{start:{line:1695,column:23},end:{line:1695,column:31}},{start:{line:1695,column:35},end:{line:1695,column:48}}],line:1695},"102":{loc:{start:{line:1696,column:22},end:{line:1696,column:35}},type:"binary-expr",locations:[{start:{line:1696,column:22},end:{line:1696,column:29}},{start:{line:1696,column:33},end:{line:1696,column:35}}],line:1696},"103":{loc:{start:{line:1700,column:16},end:{line:1703,column:17}},type:"if",locations:[{start:{line:1700,column:16},end:{line:1703,column:17}},{start:{line:1700,column:16},end:{line:1703,column:17}}],line:1700},"104":{loc:{start:{line:1750,column:12},end:{line:1753,column:13}},type:"if",locations:[{start:{line:1750,column:12},end:{line:1753,column:13}},{start:{line:1750,column:12},end:{line:1753,column:13}}],line:1750},"105":{loc:{start:{line:1750,column:16},end:{line:1750,column:54}},type:"binary-expr",locations:[{start:{line:1750,column:16},end:{line:1750,column:25}},{start:{line:1750,column:29},end:{line:1750,column:54}}],line:1750},"106":{loc:{start:{line:1755,column:23},end:{line:1755,column:48}},type:"binary-expr",locations:[{start:{line:1755,column:23},end:{line:1755,column:31}},{start:{line:1755,column:35},end:{line:1755,column:48}}],line:1755},"107":{loc:{start:{line:1756,column:22},end:{line:1756,column:35}},type:"binary-expr",locations:[{start:{line:1756,column:22},end:{line:1756,column:29}},{start:{line:1756,column:33},end:{line:1756,column:35}}],line:1756},"108":{loc:{start:{line:1760,column:16},end:{line:1763,column:17}},type:"if",locations:[{start:{line:1760,column:16},end:{line:1763,column:17}},{start:{line:1760,column:16},end:{line:1763,column:17}}],line:1760},"109":{loc:{start:{line:1766,column:27},end:{line:1766,column:52}},type:"binary-expr",locations:[{start:{line:1766,column:27},end:{line:1766,column:46}},{start:{line:1766,column:50},end:{line:1766,column:52}}],line:1766},"110":{loc:{start:{line:1796,column:23},end:{line:1796,column:48}},type:"binary-expr",locations:[{start:{line:1796,column:23},end:{line:1796,column:31}},{start:{line:1796,column:35},end:{line:1796,column:48}}],line:1796},"111":{loc:{start:{line:1817,column:21},end:{line:1817,column:33}},type:"binary-expr",locations:[{start:{line:1817,column:21},end:{line:1817,column:27}},{start:{line:1817,column:31},end:{line:1817,column:33}}],line:1817},"112":{loc:{start:{line:1819,column:12},end:{line:1842,column:13}},type:"if",locations:[{start:{line:1819,column:12},end:{line:1842,column:13}},{start:{line:1819,column:12},end:{line:1842,column:13}}],line:1819},"113":{loc:{start:{line:1822,column:20},end:{line:1835,column:21}},type:"if",locations:[{start:{line:1822,column:20},end:{line:1835,column:21}},{start:{line:1822,column:20},end:{line:1835,column:21}}],line:1822},"114":{loc:{start:{line:1828,column:28},end:{line:1833,column:29}},type:"if",locations:[{start:{line:1828,column:28},end:{line:1833,column:29}},{start:{line:1828,column:28},end:{line:1833,column:29}}],line:1828},"115":{loc:{start:{line:2022,column:19},end:{line:2022,column:50}},type:"binary-expr",locations:[{start:{line:2022,column:19},end:{line:2022,column:44}},{start:{line:2022,column:48},end:{line:2022,column:50}}],line:2022},"116":{loc:{start:{line:2032,column:19},end:{line:2032,column:55}},type:"binary-expr",locations:[{start:{line:2032,column:19},end:{line:2032,column:47}},{start:{line:2032,column:51},end:{line:2032,column:55}}],line:2032},"117":{loc:{start:{line:2058,column:19},end:{line:2058,column:69}},type:"binary-expr",locations:[{start:{line:2058,column:19},end:{line:2058,column:61}},{start:{line:2058,column:65},end:{line:2058,column:69}}],line:2058},"118":{loc:{start:{line:2068,column:19},end:{line:2068,column:61}},type:"binary-expr",locations:[{start:{line:2068,column:19},end:{line:2068,column:53}},{start:{line:2068,column:57},end:{line:2068,column:61}}],line:2068},"119":{loc:{start:{line:2079,column:19},end:{line:2079,column:65}},type:"binary-expr",locations:[{start:{line:2079,column:19},end:{line:2079,column:59}},{start:{line:2079,column:63},end:{line:2079,column:65}}],line:2079},"120":{loc:{start:{line:2089,column:19},end:{line:2089,column:48}},type:"binary-expr",locations:[{start:{line:2089,column:19},end:{line:2089,column:40}},{start:{line:2089,column:44},end:{line:2089,column:48}}],line:2089},"121":{loc:{start:{line:2099,column:19},end:{line:2099,column:57}},type:"binary-expr",locations:[{start:{line:2099,column:19},end:{line:2099,column:49}},{start:{line:2099,column:53},end:{line:2099,column:57}}],line:2099},"122":{loc:{start:{line:2111,column:19},end:{line:2111,column:66}},type:"binary-expr",locations:[{start:{line:2111,column:19},end:{line:2111,column:58}},{start:{line:2111,column:62},end:{line:2111,column:66}}],line:2111},"123":{loc:{start:{line:2123,column:19},end:{line:2123,column:73}},type:"binary-expr",locations:[{start:{line:2123,column:19},end:{line:2123,column:67}},{start:{line:2123,column:71},end:{line:2123,column:73}}],line:2123},"124":{loc:{start:{line:2174,column:19},end:{line:2174,column:77}},type:"binary-expr",locations:[{start:{line:2174,column:19},end:{line:2174,column:72}},{start:{line:2174,column:76},end:{line:2174,column:77}}],line:2174},"125":{loc:{start:{line:2195,column:12},end:{line:2198,column:13}},type:"if",locations:[{start:{line:2195,column:12},end:{line:2198,column:13}},{start:{line:2195,column:12},end:{line:2198,column:13}}],line:2195},"126":{loc:{start:{line:2195,column:16},end:{line:2195,column:54}},type:"binary-expr",locations:[{start:{line:2195,column:16},end:{line:2195,column:25}},{start:{line:2195,column:29},end:{line:2195,column:54}}],line:2195},"127":{loc:{start:{line:2200,column:23},end:{line:2200,column:48}},type:"binary-expr",locations:[{start:{line:2200,column:23},end:{line:2200,column:31}},{start:{line:2200,column:35},end:{line:2200,column:48}}],line:2200},"128":{loc:{start:{line:2201,column:22},end:{line:2201,column:35}},type:"binary-expr",locations:[{start:{line:2201,column:22},end:{line:2201,column:29}},{start:{line:2201,column:33},end:{line:2201,column:35}}],line:2201},"129":{loc:{start:{line:2205,column:16},end:{line:2208,column:17}},type:"if",locations:[{start:{line:2205,column:16},end:{line:2208,column:17}},{start:{line:2205,column:16},end:{line:2208,column:17}}],line:2205},"130":{loc:{start:{line:2211,column:27},end:{line:2211,column:52}},type:"binary-expr",locations:[{start:{line:2211,column:27},end:{line:2211,column:46}},{start:{line:2211,column:50},end:{line:2211,column:52}}],line:2211},"131":{loc:{start:{line:2369,column:23},end:{line:2369,column:48}},type:"binary-expr",locations:[{start:{line:2369,column:23},end:{line:2369,column:31}},{start:{line:2369,column:35},end:{line:2369,column:48}}],line:2369},"132":{loc:{start:{line:2373,column:16},end:{line:2378,column:17}},type:"if",locations:[{start:{line:2373,column:16},end:{line:2378,column:17}},{start:{line:2373,column:16},end:{line:2378,column:17}}],line:2373},"133":{loc:{start:{line:2398,column:23},end:{line:2398,column:48}},type:"binary-expr",locations:[{start:{line:2398,column:23},end:{line:2398,column:31}},{start:{line:2398,column:35},end:{line:2398,column:48}}],line:2398},"134":{loc:{start:{line:2402,column:16},end:{line:2407,column:17}},type:"if",locations:[{start:{line:2402,column:16},end:{line:2407,column:17}},{start:{line:2402,column:16},end:{line:2407,column:17}}],line:2402},"135":{loc:{start:{line:2594,column:23},end:{line:2594,column:48}},type:"binary-expr",locations:[{start:{line:2594,column:23},end:{line:2594,column:31}},{start:{line:2594,column:35},end:{line:2594,column:48}}],line:2594},"136":{loc:{start:{line:2598,column:16},end:{line:2614,column:17}},type:"if",locations:[{start:{line:2598,column:16},end:{line:2614,column:17}},{start:{line:2598,column:16},end:{line:2614,column:17}}],line:2598},"137":{loc:{start:{line:2607,column:24},end:{line:2612,column:25}},type:"if",locations:[{start:{line:2607,column:24},end:{line:2612,column:25}},{start:{line:2607,column:24},end:{line:2612,column:25}}],line:2607},"138":{loc:{start:{line:2768,column:12},end:{line:2771,column:13}},type:"if",locations:[{start:{line:2768,column:12},end:{line:2771,column:13}},{start:{line:2768,column:12},end:{line:2771,column:13}}],line:2768},"139":{loc:{start:{line:2768,column:16},end:{line:2768,column:53}},type:"binary-expr",locations:[{start:{line:2768,column:16},end:{line:2768,column:25}},{start:{line:2768,column:29},end:{line:2768,column:53}}],line:2768},"140":{loc:{start:{line:2773,column:23},end:{line:2773,column:48}},type:"binary-expr",locations:[{start:{line:2773,column:23},end:{line:2773,column:31}},{start:{line:2773,column:35},end:{line:2773,column:48}}],line:2773},"141":{loc:{start:{line:2774,column:21},end:{line:2774,column:33}},type:"binary-expr",locations:[{start:{line:2774,column:21},end:{line:2774,column:27}},{start:{line:2774,column:31},end:{line:2774,column:33}}],line:2774},"142":{loc:{start:{line:2786,column:12},end:{line:2791,column:13}},type:"if",locations:[{start:{line:2786,column:12},end:{line:2791,column:13}},{start:{line:2786,column:12},end:{line:2791,column:13}}],line:2786},"143":{loc:{start:{line:2863,column:12},end:{line:2867,column:13}},type:"if",locations:[{start:{line:2863,column:12},end:{line:2867,column:13}},{start:{line:2863,column:12},end:{line:2867,column:13}}],line:2863},"144":{loc:{start:{line:2863,column:16},end:{line:2863,column:77}},type:"binary-expr",locations:[{start:{line:2863,column:16},end:{line:2863,column:36}},{start:{line:2863,column:40},end:{line:2863,column:64}},{start:{line:2863,column:68},end:{line:2863,column:77}}],line:2863},"145":{loc:{start:{line:2869,column:21},end:{line:2869,column:33}},type:"binary-expr",locations:[{start:{line:2869,column:21},end:{line:2869,column:27}},{start:{line:2869,column:31},end:{line:2869,column:33}}],line:2869},"146":{loc:{start:{line:2891,column:23},end:{line:2891,column:67}},type:"cond-expr",locations:[{start:{line:2891,column:49},end:{line:2891,column:55}},{start:{line:2891,column:58},end:{line:2891,column:67}}],line:2891},"147":{loc:{start:{line:3002,column:12},end:{line:3006,column:13}},type:"if",locations:[{start:{line:3002,column:12},end:{line:3006,column:13}},{start:{line:3002,column:12},end:{line:3006,column:13}}],line:3002},"148":{loc:{start:{line:3002,column:16},end:{line:3002,column:83}},type:"binary-expr",locations:[{start:{line:3002,column:16},end:{line:3002,column:42}},{start:{line:3002,column:46},end:{line:3002,column:70}},{start:{line:3002,column:74},end:{line:3002,column:83}}],line:3002},"149":{loc:{start:{line:3008,column:12},end:{line:3011,column:13}},type:"if",locations:[{start:{line:3008,column:12},end:{line:3011,column:13}},{start:{line:3008,column:12},end:{line:3011,column:13}}],line:3008},"150":{loc:{start:{line:3008,column:16},end:{line:3008,column:53}},type:"binary-expr",locations:[{start:{line:3008,column:16},end:{line:3008,column:40}},{start:{line:3008,column:44},end:{line:3008,column:53}}],line:3008},"151":{loc:{start:{line:3013,column:21},end:{line:3013,column:33}},type:"binary-expr",locations:[{start:{line:3013,column:21},end:{line:3013,column:27}},{start:{line:3013,column:31},end:{line:3013,column:33}}],line:3013},"152":{loc:{start:{line:3073,column:12},end:{line:3075,column:13}},type:"if",locations:[{start:{line:3073,column:12},end:{line:3075,column:13}},{start:{line:3073,column:12},end:{line:3075,column:13}}],line:3073},"153":{loc:{start:{line:3073,column:16},end:{line:3073,column:78}},type:"binary-expr",locations:[{start:{line:3073,column:16},end:{line:3073,column:26}},{start:{line:3073,column:30},end:{line:3073,column:53}},{start:{line:3073,column:57},end:{line:3073,column:78}}],line:3073},"154":{loc:{start:{line:3099,column:12},end:{line:3101,column:13}},type:"if",locations:[{start:{line:3099,column:12},end:{line:3101,column:13}},{start:{line:3099,column:12},end:{line:3101,column:13}}],line:3099},"155":{loc:{start:{line:3103,column:23},end:{line:3103,column:48}},type:"binary-expr",locations:[{start:{line:3103,column:23},end:{line:3103,column:31}},{start:{line:3103,column:35},end:{line:3103,column:48}}],line:3103},"156":{loc:{start:{line:3107,column:16},end:{line:3120,column:17}},type:"if",locations:[{start:{line:3107,column:16},end:{line:3120,column:17}},{start:{line:3107,column:16},end:{line:3120,column:17}}],line:3107},"157":{loc:{start:{line:3113,column:24},end:{line:3118,column:25}},type:"if",locations:[{start:{line:3113,column:24},end:{line:3118,column:25}},{start:{line:3113,column:24},end:{line:3118,column:25}}],line:3113},"158":{loc:{start:{line:3142,column:24},end:{line:3145,column:83}},type:"binary-expr",locations:[{start:{line:3142,column:24},end:{line:3142,column:32}},{start:{line:3143,column:31},end:{line:3143,column:44}},{start:{line:3144,column:31},end:{line:3144,column:50}},{start:{line:3145,column:31},end:{line:3145,column:83}}],line:3142},"159":{loc:{start:{line:3148,column:12},end:{line:3150,column:13}},type:"if",locations:[{start:{line:3148,column:12},end:{line:3150,column:13}},{start:{line:3148,column:12},end:{line:3150,column:13}}],line:3148},"160":{loc:{start:{line:3148,column:15},end:{line:3148,column:41}},type:"binary-expr",locations:[{start:{line:3148,column:15},end:{line:3148,column:20}},{start:{line:3148,column:24},end:{line:3148,column:41}}],line:3148},"161":{loc:{start:{line:3175,column:12},end:{line:3180,column:13}},type:"if",locations:[{start:{line:3175,column:12},end:{line:3180,column:13}},{start:{line:3175,column:12},end:{line:3180,column:13}}],line:3175},"162":{loc:{start:{line:3195,column:23},end:{line:3195,column:48}},type:"binary-expr",locations:[{start:{line:3195,column:23},end:{line:3195,column:31}},{start:{line:3195,column:35},end:{line:3195,column:48}}],line:3195},"163":{loc:{start:{line:3202,column:12},end:{line:3208,column:13}},type:"if",locations:[{start:{line:3202,column:12},end:{line:3208,column:13}},{start:{line:3202,column:12},end:{line:3208,column:13}}],line:3202},"164":{loc:{start:{line:3214,column:12},end:{line:3226,column:13}},type:"if",locations:[{start:{line:3214,column:12},end:{line:3226,column:13}},{start:{line:3214,column:12},end:{line:3226,column:13}}],line:3214},"165":{loc:{start:{line:3323,column:23},end:{line:3323,column:48}},type:"binary-expr",locations:[{start:{line:3323,column:23},end:{line:3323,column:31}},{start:{line:3323,column:35},end:{line:3323,column:48}}],line:3323},"166":{loc:{start:{line:3349,column:23},end:{line:3349,column:48}},type:"binary-expr",locations:[{start:{line:3349,column:23},end:{line:3349,column:31}},{start:{line:3349,column:35},end:{line:3349,column:48}}],line:3349},"167":{loc:{start:{line:3376,column:23},end:{line:3376,column:48}},type:"binary-expr",locations:[{start:{line:3376,column:23},end:{line:3376,column:31}},{start:{line:3376,column:35},end:{line:3376,column:48}}],line:3376},"168":{loc:{start:{line:3377,column:21},end:{line:3377,column:33}},type:"binary-expr",locations:[{start:{line:3377,column:21},end:{line:3377,column:27}},{start:{line:3377,column:31},end:{line:3377,column:33}}],line:3377},"169":{loc:{start:{line:3378,column:33},end:{line:3378,column:66}},type:"binary-expr",locations:[{start:{line:3378,column:33},end:{line:3378,column:51}},{start:{line:3378,column:55},end:{line:3378,column:66}}],line:3378},"170":{loc:{start:{line:3382,column:16},end:{line:3387,column:17}},type:"if",locations:[{start:{line:3382,column:16},end:{line:3387,column:17}},{start:{line:3382,column:16},end:{line:3387,column:17}}],line:3382},"171":{loc:{start:{line:3407,column:23},end:{line:3407,column:48}},type:"binary-expr",locations:[{start:{line:3407,column:23},end:{line:3407,column:31}},{start:{line:3407,column:35},end:{line:3407,column:48}}],line:3407},"172":{loc:{start:{line:3448,column:23},end:{line:3448,column:48}},type:"binary-expr",locations:[{start:{line:3448,column:23},end:{line:3448,column:31}},{start:{line:3448,column:35},end:{line:3448,column:48}}],line:3448},"173":{loc:{start:{line:3475,column:23},end:{line:3475,column:48}},type:"binary-expr",locations:[{start:{line:3475,column:23},end:{line:3475,column:31}},{start:{line:3475,column:35},end:{line:3475,column:48}}],line:3475},"174":{loc:{start:{line:3476,column:21},end:{line:3476,column:33}},type:"binary-expr",locations:[{start:{line:3476,column:21},end:{line:3476,column:27}},{start:{line:3476,column:31},end:{line:3476,column:33}}],line:3476},"175":{loc:{start:{line:3477,column:33},end:{line:3477,column:66}},type:"binary-expr",locations:[{start:{line:3477,column:33},end:{line:3477,column:51}},{start:{line:3477,column:55},end:{line:3477,column:66}}],line:3477},"176":{loc:{start:{line:3481,column:16},end:{line:3486,column:17}},type:"if",locations:[{start:{line:3481,column:16},end:{line:3486,column:17}},{start:{line:3481,column:16},end:{line:3486,column:17}}],line:3481},"177":{loc:{start:{line:3512,column:23},end:{line:3512,column:48}},type:"binary-expr",locations:[{start:{line:3512,column:23},end:{line:3512,column:31}},{start:{line:3512,column:35},end:{line:3512,column:48}}],line:3512},"178":{loc:{start:{line:3513,column:21},end:{line:3513,column:33}},type:"binary-expr",locations:[{start:{line:3513,column:21},end:{line:3513,column:27}},{start:{line:3513,column:31},end:{line:3513,column:33}}],line:3513},"179":{loc:{start:{line:3514,column:33},end:{line:3514,column:66}},type:"binary-expr",locations:[{start:{line:3514,column:33},end:{line:3514,column:51}},{start:{line:3514,column:55},end:{line:3514,column:66}}],line:3514},"180":{loc:{start:{line:3518,column:16},end:{line:3523,column:17}},type:"if",locations:[{start:{line:3518,column:16},end:{line:3523,column:17}},{start:{line:3518,column:16},end:{line:3523,column:17}}],line:3518},"181":{loc:{start:{line:3543,column:23},end:{line:3543,column:48}},type:"binary-expr",locations:[{start:{line:3543,column:23},end:{line:3543,column:31}},{start:{line:3543,column:35},end:{line:3543,column:48}}],line:3543},"182":{loc:{start:{line:3547,column:16},end:{line:3552,column:17}},type:"if",locations:[{start:{line:3547,column:16},end:{line:3552,column:17}},{start:{line:3547,column:16},end:{line:3552,column:17}}],line:3547},"183":{loc:{start:{line:3573,column:23},end:{line:3573,column:48}},type:"binary-expr",locations:[{start:{line:3573,column:23},end:{line:3573,column:31}},{start:{line:3573,column:35},end:{line:3573,column:48}}],line:3573},"184":{loc:{start:{line:3601,column:23},end:{line:3601,column:48}},type:"binary-expr",locations:[{start:{line:3601,column:23},end:{line:3601,column:31}},{start:{line:3601,column:35},end:{line:3601,column:48}}],line:3601},"185":{loc:{start:{line:3628,column:23},end:{line:3628,column:48}},type:"binary-expr",locations:[{start:{line:3628,column:23},end:{line:3628,column:31}},{start:{line:3628,column:35},end:{line:3628,column:48}}],line:3628},"186":{loc:{start:{line:3632,column:16},end:{line:3637,column:17}},type:"if",locations:[{start:{line:3632,column:16},end:{line:3637,column:17}},{start:{line:3632,column:16},end:{line:3637,column:17}}],line:3632},"187":{loc:{start:{line:3658,column:23},end:{line:3658,column:48}},type:"binary-expr",locations:[{start:{line:3658,column:23},end:{line:3658,column:31}},{start:{line:3658,column:35},end:{line:3658,column:48}}],line:3658},"188":{loc:{start:{line:3662,column:16},end:{line:3667,column:17}},type:"if",locations:[{start:{line:3662,column:16},end:{line:3667,column:17}},{start:{line:3662,column:16},end:{line:3667,column:17}}],line:3662},"189":{loc:{start:{line:3688,column:23},end:{line:3688,column:48}},type:"binary-expr",locations:[{start:{line:3688,column:23},end:{line:3688,column:31}},{start:{line:3688,column:35},end:{line:3688,column:48}}],line:3688},"190":{loc:{start:{line:3715,column:25},end:{line:3715,column:46}},type:"binary-expr",locations:[{start:{line:3715,column:25},end:{line:3715,column:39}},{start:{line:3715,column:43},end:{line:3715,column:46}}],line:3715},"191":{loc:{start:{line:3717,column:12},end:{line:3721,column:13}},type:"if",locations:[{start:{line:3717,column:12},end:{line:3721,column:13}},{start:{line:3717,column:12},end:{line:3721,column:13}}],line:3717},"192":{loc:{start:{line:3724,column:16},end:{line:3727,column:32}},type:"binary-expr",locations:[{start:{line:3724,column:16},end:{line:3724,column:35}},{start:{line:3725,column:16},end:{line:3725,column:31}},{start:{line:3726,column:16},end:{line:3726,column:33}},{start:{line:3727,column:16},end:{line:3727,column:32}}],line:3724},"193":{loc:{start:{line:3730,column:30},end:{line:3730,column:62}},type:"binary-expr",locations:[{start:{line:3730,column:30},end:{line:3730,column:45}},{start:{line:3730,column:49},end:{line:3730,column:62}}],line:3730},"194":{loc:{start:{line:3731,column:33},end:{line:3731,column:68}},type:"binary-expr",locations:[{start:{line:3731,column:33},end:{line:3731,column:51}},{start:{line:3731,column:55},end:{line:3731,column:68}}],line:3731},"195":{loc:{start:{line:3732,column:29},end:{line:3732,column:60}},type:"binary-expr",locations:[{start:{line:3732,column:29},end:{line:3732,column:43}},{start:{line:3732,column:47},end:{line:3732,column:60}}],line:3732},"196":{loc:{start:{line:3733,column:31},end:{line:3733,column:64}},type:"binary-expr",locations:[{start:{line:3733,column:31},end:{line:3733,column:47}},{start:{line:3733,column:51},end:{line:3733,column:64}}],line:3733},"197":{loc:{start:{line:3734,column:30},end:{line:3734,column:62}},type:"binary-expr",locations:[{start:{line:3734,column:30},end:{line:3734,column:45}},{start:{line:3734,column:49},end:{line:3734,column:62}}],line:3734},"198":{loc:{start:{line:3737,column:34},end:{line:3737,column:70}},type:"binary-expr",locations:[{start:{line:3737,column:34},end:{line:3737,column:53}},{start:{line:3737,column:57},end:{line:3737,column:70}}],line:3737},"199":{loc:{start:{line:3738,column:43},end:{line:3738,column:88}},type:"binary-expr",locations:[{start:{line:3738,column:43},end:{line:3738,column:71}},{start:{line:3738,column:75},end:{line:3738,column:88}}],line:3738},"200":{loc:{start:{line:3747,column:24},end:{line:3750,column:25}},type:"if",locations:[{start:{line:3747,column:24},end:{line:3750,column:25}},{start:{line:3747,column:24},end:{line:3750,column:25}}],line:3747},"201":{loc:{start:{line:3753,column:39},end:{line:3753,column:96}},type:"binary-expr",locations:[{start:{line:3753,column:39},end:{line:3753,column:65}},{start:{line:3753,column:69},end:{line:3753,column:96}}],line:3753},"202":{loc:{start:{line:3754,column:24},end:{line:3791,column:25}},type:"if",locations:[{start:{line:3754,column:24},end:{line:3791,column:25}},{start:{line:3754,column:24},end:{line:3791,column:25}}],line:3754},"203":{loc:{start:{line:3758,column:28},end:{line:3771,column:29}},type:"if",locations:[{start:{line:3758,column:28},end:{line:3771,column:29}},{start:{line:3758,column:28},end:{line:3771,column:29}}],line:3758},"204":{loc:{start:{line:3764,column:32},end:{line:3770,column:33}},type:"if",locations:[{start:{line:3764,column:32},end:{line:3770,column:33}},{start:{line:3764,column:32},end:{line:3770,column:33}}],line:3764},"205":{loc:{start:{line:3777,column:28},end:{line:3790,column:29}},type:"if",locations:[{start:{line:3777,column:28},end:{line:3790,column:29}},{start:{line:3777,column:28},end:{line:3790,column:29}}],line:3777},"206":{loc:{start:{line:3777,column:32},end:{line:3777,column:72}},type:"binary-expr",locations:[{start:{line:3777,column:32},end:{line:3777,column:56}},{start:{line:3777,column:60},end:{line:3777,column:72}}],line:3777},"207":{loc:{start:{line:3784,column:33},end:{line:3790,column:29}},type:"if",locations:[{start:{line:3784,column:33},end:{line:3790,column:29}},{start:{line:3784,column:33},end:{line:3790,column:29}}],line:3784},"208":{loc:{start:{line:3784,column:37},end:{line:3784,column:81}},type:"binary-expr",locations:[{start:{line:3784,column:37},end:{line:3784,column:63}},{start:{line:3784,column:67},end:{line:3784,column:81}}],line:3784},"209":{loc:{start:{line:3797,column:20},end:{line:3799,column:21}},type:"if",locations:[{start:{line:3797,column:20},end:{line:3799,column:21}},{start:{line:3797,column:20},end:{line:3799,column:21}}],line:3797},"210":{loc:{start:{line:3820,column:23},end:{line:3820,column:48}},type:"binary-expr",locations:[{start:{line:3820,column:23},end:{line:3820,column:31}},{start:{line:3820,column:35},end:{line:3820,column:48}}],line:3820},"211":{loc:{start:{line:3904,column:12},end:{line:3908,column:13}},type:"if",locations:[{start:{line:3904,column:12},end:{line:3908,column:13}},{start:{line:3904,column:12},end:{line:3908,column:13}}],line:3904},"212":{loc:{start:{line:3904,column:16},end:{line:3904,column:78}},type:"binary-expr",locations:[{start:{line:3904,column:16},end:{line:3904,column:37}},{start:{line:3904,column:41},end:{line:3904,column:65}},{start:{line:3904,column:69},end:{line:3904,column:78}}],line:3904},"213":{loc:{start:{line:3910,column:23},end:{line:3910,column:48}},type:"binary-expr",locations:[{start:{line:3910,column:23},end:{line:3910,column:31}},{start:{line:3910,column:35},end:{line:3910,column:48}}],line:3910},"214":{loc:{start:{line:3911,column:21},end:{line:3911,column:33}},type:"binary-expr",locations:[{start:{line:3911,column:21},end:{line:3911,column:27}},{start:{line:3911,column:31},end:{line:3911,column:33}}],line:3911},"215":{loc:{start:{line:3914,column:12},end:{line:3916,column:13}},type:"if",locations:[{start:{line:3914,column:12},end:{line:3916,column:13}},{start:{line:3914,column:12},end:{line:3916,column:13}}],line:3914},"216":{loc:{start:{line:3914,column:17},end:{line:3914,column:39}},type:"binary-expr",locations:[{start:{line:3914,column:17},end:{line:3914,column:33}},{start:{line:3914,column:37},end:{line:3914,column:39}}],line:3914},"217":{loc:{start:{line:3918,column:12},end:{line:3921,column:13}},type:"if",locations:[{start:{line:3918,column:12},end:{line:3921,column:13}},{start:{line:3918,column:12},end:{line:3921,column:13}}],line:3918},"218":{loc:{start:{line:3924,column:16},end:{line:3930,column:17}},type:"if",locations:[{start:{line:3924,column:16},end:{line:3930,column:17}},{start:{line:3924,column:16},end:{line:3930,column:17}}],line:3924},"219":{loc:{start:{line:3987,column:12},end:{line:3991,column:13}},type:"if",locations:[{start:{line:3987,column:12},end:{line:3991,column:13}},{start:{line:3987,column:12},end:{line:3991,column:13}}],line:3987},"220":{loc:{start:{line:3987,column:16},end:{line:3987,column:78}},type:"binary-expr",locations:[{start:{line:3987,column:16},end:{line:3987,column:37}},{start:{line:3987,column:41},end:{line:3987,column:65}},{start:{line:3987,column:69},end:{line:3987,column:78}}],line:3987},"221":{loc:{start:{line:3993,column:23},end:{line:3993,column:48}},type:"binary-expr",locations:[{start:{line:3993,column:23},end:{line:3993,column:31}},{start:{line:3993,column:35},end:{line:3993,column:48}}],line:3993},"222":{loc:{start:{line:3994,column:21},end:{line:3994,column:33}},type:"binary-expr",locations:[{start:{line:3994,column:21},end:{line:3994,column:27}},{start:{line:3994,column:31},end:{line:3994,column:33}}],line:3994},"223":{loc:{start:{line:3998,column:12},end:{line:4000,column:13}},type:"if",locations:[{start:{line:3998,column:12},end:{line:4000,column:13}},{start:{line:3998,column:12},end:{line:4000,column:13}}],line:3998},"224":{loc:{start:{line:4002,column:29},end:{line:4002,column:62}},type:"binary-expr",locations:[{start:{line:4002,column:29},end:{line:4002,column:47}},{start:{line:4002,column:51},end:{line:4002,column:62}}],line:4002},"225":{loc:{start:{line:4019,column:20},end:{line:4024,column:21}},type:"if",locations:[{start:{line:4019,column:20},end:{line:4024,column:21}},{start:{line:4019,column:20},end:{line:4024,column:21}}],line:4019},"226":{loc:{start:{line:4087,column:20},end:{line:4087,column:31}},type:"binary-expr",locations:[{start:{line:4087,column:20},end:{line:4087,column:25}},{start:{line:4087,column:29},end:{line:4087,column:31}}],line:4087},"227":{loc:{start:{line:4088,column:26},end:{line:4088,column:43}},type:"binary-expr",locations:[{start:{line:4088,column:26},end:{line:4088,column:37}},{start:{line:4088,column:41},end:{line:4088,column:43}}],line:4088},"228":{loc:{start:{line:4097,column:34},end:{line:4097,column:55}},type:"binary-expr",locations:[{start:{line:4097,column:34},end:{line:4097,column:47}},{start:{line:4097,column:51},end:{line:4097,column:55}}],line:4097},"229":{loc:{start:{line:4207,column:20},end:{line:4207,column:31}},type:"binary-expr",locations:[{start:{line:4207,column:20},end:{line:4207,column:25}},{start:{line:4207,column:29},end:{line:4207,column:31}}],line:4207},"230":{loc:{start:{line:4208,column:26},end:{line:4208,column:43}},type:"binary-expr",locations:[{start:{line:4208,column:26},end:{line:4208,column:37}},{start:{line:4208,column:41},end:{line:4208,column:43}}],line:4208},"231":{loc:{start:{line:4273,column:20},end:{line:4273,column:31}},type:"binary-expr",locations:[{start:{line:4273,column:20},end:{line:4273,column:25}},{start:{line:4273,column:29},end:{line:4273,column:31}}],line:4273},"232":{loc:{start:{line:4274,column:26},end:{line:4274,column:43}},type:"binary-expr",locations:[{start:{line:4274,column:26},end:{line:4274,column:37}},{start:{line:4274,column:41},end:{line:4274,column:43}}],line:4274},"233":{loc:{start:{line:4278,column:34},end:{line:4278,column:55}},type:"binary-expr",locations:[{start:{line:4278,column:34},end:{line:4278,column:47}},{start:{line:4278,column:51},end:{line:4278,column:55}}],line:4278},"234":{loc:{start:{line:4288,column:12},end:{line:4290,column:13}},type:"if",locations:[{start:{line:4288,column:12},end:{line:4290,column:13}},{start:{line:4288,column:12},end:{line:4290,column:13}}],line:4288},"235":{loc:{start:{line:4288,column:16},end:{line:4288,column:59}},type:"binary-expr",locations:[{start:{line:4288,column:16},end:{line:4288,column:36}},{start:{line:4288,column:40},end:{line:4288,column:59}}],line:4288},"236":{loc:{start:{line:4291,column:12},end:{line:4293,column:13}},type:"if",locations:[{start:{line:4291,column:12},end:{line:4293,column:13}},{start:{line:4291,column:12},end:{line:4293,column:13}}],line:4291},"237":{loc:{start:{line:4291,column:16},end:{line:4291,column:60}},type:"binary-expr",locations:[{start:{line:4291,column:16},end:{line:4291,column:37}},{start:{line:4291,column:41},end:{line:4291,column:60}}],line:4291},"238":{loc:{start:{line:4294,column:12},end:{line:4297,column:13}},type:"if",locations:[{start:{line:4294,column:12},end:{line:4297,column:13}},{start:{line:4294,column:12},end:{line:4297,column:13}}],line:4294},"239":{loc:{start:{line:4403,column:32},end:{line:4403,column:59}},type:"binary-expr",locations:[{start:{line:4403,column:32},end:{line:4403,column:51}},{start:{line:4403,column:55},end:{line:4403,column:59}}],line:4403},"240":{loc:{start:{line:4417,column:12},end:{line:4420,column:13}},type:"if",locations:[{start:{line:4417,column:12},end:{line:4420,column:13}},{start:{line:4417,column:12},end:{line:4420,column:13}}],line:4417},"241":{loc:{start:{line:4421,column:12},end:{line:4423,column:13}},type:"if",locations:[{start:{line:4421,column:12},end:{line:4423,column:13}},{start:{line:4421,column:12},end:{line:4423,column:13}}],line:4421},"242":{loc:{start:{line:4421,column:16},end:{line:4421,column:55}},type:"binary-expr",locations:[{start:{line:4421,column:16},end:{line:4421,column:21}},{start:{line:4421,column:25},end:{line:4421,column:55}}],line:4421},"243":{loc:{start:{line:4426,column:32},end:{line:4426,column:69}},type:"binary-expr",locations:[{start:{line:4426,column:32},end:{line:4426,column:49}},{start:{line:4426,column:53},end:{line:4426,column:69}}],line:4426},"244":{loc:{start:{line:4565,column:41},end:{line:4566,column:53}},type:"cond-expr",locations:[{start:{line:4566,column:16},end:{line:4566,column:46}},{start:{line:4566,column:49},end:{line:4566,column:53}}],line:4565},"245":{loc:{start:{line:4585,column:12},end:{line:4587,column:13}},type:"if",locations:[{start:{line:4585,column:12},end:{line:4587,column:13}},{start:{line:4585,column:12},end:{line:4587,column:13}}],line:4585},"246":{loc:{start:{line:4585,column:16},end:{line:4585,column:49}},type:"binary-expr",locations:[{start:{line:4585,column:16},end:{line:4585,column:19}},{start:{line:4585,column:23},end:{line:4585,column:49}}],line:4585},"247":{loc:{start:{line:4589,column:12},end:{line:4591,column:13}},type:"if",locations:[{start:{line:4589,column:12},end:{line:4591,column:13}},{start:{line:4589,column:12},end:{line:4591,column:13}}],line:4589},"248":{loc:{start:{line:4610,column:12},end:{line:4612,column:13}},type:"if",locations:[{start:{line:4610,column:12},end:{line:4612,column:13}},{start:{line:4610,column:12},end:{line:4612,column:13}}],line:4610},"249":{loc:{start:{line:4613,column:12},end:{line:4619,column:13}},type:"if",locations:[{start:{line:4613,column:12},end:{line:4619,column:13}},{start:{line:4613,column:12},end:{line:4619,column:13}}],line:4613},"250":{loc:{start:{line:4620,column:12},end:{line:4625,column:13}},type:"if",locations:[{start:{line:4620,column:12},end:{line:4625,column:13}},{start:{line:4620,column:12},end:{line:4625,column:13}}],line:4620},"251":{loc:{start:{line:4633,column:12},end:{line:4638,column:13}},type:"if",locations:[{start:{line:4633,column:12},end:{line:4638,column:13}},{start:{line:4633,column:12},end:{line:4638,column:13}}],line:4633},"252":{loc:{start:{line:4658,column:12},end:{line:4660,column:13}},type:"if",locations:[{start:{line:4658,column:12},end:{line:4660,column:13}},{start:{line:4658,column:12},end:{line:4660,column:13}}],line:4658},"253":{loc:{start:{line:4664,column:12},end:{line:4666,column:13}},type:"if",locations:[{start:{line:4664,column:12},end:{line:4666,column:13}},{start:{line:4664,column:12},end:{line:4666,column:13}}],line:4664},"254":{loc:{start:{line:4668,column:12},end:{line:4671,column:13}},type:"if",locations:[{start:{line:4668,column:12},end:{line:4671,column:13}},{start:{line:4668,column:12},end:{line:4671,column:13}}],line:4668},"255":{loc:{start:{line:4668,column:16},end:{line:4668,column:86}},type:"binary-expr",locations:[{start:{line:4668,column:16},end:{line:4668,column:35}},{start:{line:4668,column:39},end:{line:4668,column:86}}],line:4668},"256":{loc:{start:{line:4673,column:12},end:{line:4676,column:13}},type:"if",locations:[{start:{line:4673,column:12},end:{line:4676,column:13}},{start:{line:4673,column:12},end:{line:4676,column:13}}],line:4673},"257":{loc:{start:{line:4673,column:16},end:{line:4673,column:104}},type:"binary-expr",locations:[{start:{line:4673,column:16},end:{line:4673,column:35}},{start:{line:4673,column:39},end:{line:4673,column:104}}],line:4673},"258":{loc:{start:{line:4678,column:12},end:{line:4680,column:13}},type:"if",locations:[{start:{line:4678,column:12},end:{line:4680,column:13}},{start:{line:4678,column:12},end:{line:4680,column:13}}],line:4678},"259":{loc:{start:{line:4678,column:16},end:{line:4678,column:85}},type:"binary-expr",locations:[{start:{line:4678,column:16},end:{line:4678,column:40}},{start:{line:4678,column:44},end:{line:4678,column:85}}],line:4678},"260":{loc:{start:{line:4693,column:31},end:{line:4693,column:83}},type:"cond-expr",locations:[{start:{line:4693,column:63},end:{line:4693,column:71}},{start:{line:4693,column:74},end:{line:4693,column:83}}],line:4693},"261":{loc:{start:{line:4709,column:12},end:{line:4711,column:13}},type:"if",locations:[{start:{line:4709,column:12},end:{line:4711,column:13}},{start:{line:4709,column:12},end:{line:4711,column:13}}],line:4709},"262":{loc:{start:{line:4713,column:12},end:{line:4715,column:13}},type:"if",locations:[{start:{line:4713,column:12},end:{line:4715,column:13}},{start:{line:4713,column:12},end:{line:4715,column:13}}],line:4713},"263":{loc:{start:{line:4724,column:12},end:{line:4726,column:13}},type:"if",locations:[{start:{line:4724,column:12},end:{line:4726,column:13}},{start:{line:4724,column:12},end:{line:4726,column:13}}],line:4724},"264":{loc:{start:{line:4753,column:12},end:{line:4755,column:13}},type:"if",locations:[{start:{line:4753,column:12},end:{line:4755,column:13}},{start:{line:4753,column:12},end:{line:4755,column:13}}],line:4753},"265":{loc:{start:{line:4757,column:12},end:{line:4759,column:13}},type:"if",locations:[{start:{line:4757,column:12},end:{line:4759,column:13}},{start:{line:4757,column:12},end:{line:4759,column:13}}],line:4757},"266":{loc:{start:{line:4761,column:12},end:{line:4763,column:13}},type:"if",locations:[{start:{line:4761,column:12},end:{line:4763,column:13}},{start:{line:4761,column:12},end:{line:4763,column:13}}],line:4761},"267":{loc:{start:{line:4761,column:16},end:{line:4761,column:73}},type:"binary-expr",locations:[{start:{line:4761,column:16},end:{line:4761,column:48}},{start:{line:4761,column:52},end:{line:4761,column:73}}],line:4761},"268":{loc:{start:{line:4764,column:12},end:{line:4766,column:13}},type:"if",locations:[{start:{line:4764,column:12},end:{line:4766,column:13}},{start:{line:4764,column:12},end:{line:4766,column:13}}],line:4764},"269":{loc:{start:{line:4764,column:16},end:{line:4764,column:69}},type:"binary-expr",locations:[{start:{line:4764,column:16},end:{line:4764,column:46}},{start:{line:4764,column:50},end:{line:4764,column:69}}],line:4764},"270":{loc:{start:{line:4767,column:12},end:{line:4769,column:13}},type:"if",locations:[{start:{line:4767,column:12},end:{line:4769,column:13}},{start:{line:4767,column:12},end:{line:4769,column:13}}],line:4767},"271":{loc:{start:{line:4767,column:16},end:{line:4767,column:71}},type:"binary-expr",locations:[{start:{line:4767,column:16},end:{line:4767,column:47}},{start:{line:4767,column:51},end:{line:4767,column:71}}],line:4767},"272":{loc:{start:{line:4770,column:12},end:{line:4772,column:13}},type:"if",locations:[{start:{line:4770,column:12},end:{line:4772,column:13}},{start:{line:4770,column:12},end:{line:4772,column:13}}],line:4770},"273":{loc:{start:{line:4770,column:16},end:{line:4770,column:73}},type:"binary-expr",locations:[{start:{line:4770,column:16},end:{line:4770,column:48}},{start:{line:4770,column:52},end:{line:4770,column:73}}],line:4770},"274":{loc:{start:{line:4798,column:12},end:{line:4800,column:13}},type:"if",locations:[{start:{line:4798,column:12},end:{line:4800,column:13}},{start:{line:4798,column:12},end:{line:4800,column:13}}],line:4798},"275":{loc:{start:{line:4802,column:12},end:{line:4804,column:13}},type:"if",locations:[{start:{line:4802,column:12},end:{line:4804,column:13}},{start:{line:4802,column:12},end:{line:4804,column:13}}],line:4802},"276":{loc:{start:{line:4829,column:12},end:{line:4831,column:13}},type:"if",locations:[{start:{line:4829,column:12},end:{line:4831,column:13}},{start:{line:4829,column:12},end:{line:4831,column:13}}],line:4829},"277":{loc:{start:{line:4833,column:12},end:{line:4835,column:13}},type:"if",locations:[{start:{line:4833,column:12},end:{line:4835,column:13}},{start:{line:4833,column:12},end:{line:4835,column:13}}],line:4833},"278":{loc:{start:{line:4836,column:12},end:{line:4838,column:13}},type:"if",locations:[{start:{line:4836,column:12},end:{line:4838,column:13}},{start:{line:4836,column:12},end:{line:4838,column:13}}],line:4836},"279":{loc:{start:{line:4861,column:12},end:{line:4863,column:13}},type:"if",locations:[{start:{line:4861,column:12},end:{line:4863,column:13}},{start:{line:4861,column:12},end:{line:4863,column:13}}],line:4861},"280":{loc:{start:{line:4865,column:12},end:{line:4867,column:13}},type:"if",locations:[{start:{line:4865,column:12},end:{line:4867,column:13}},{start:{line:4865,column:12},end:{line:4867,column:13}}],line:4865},"281":{loc:{start:{line:4875,column:12},end:{line:4877,column:13}},type:"if",locations:[{start:{line:4875,column:12},end:{line:4877,column:13}},{start:{line:4875,column:12},end:{line:4877,column:13}}],line:4875},"282":{loc:{start:{line:4898,column:12},end:{line:4900,column:13}},type:"if",locations:[{start:{line:4898,column:12},end:{line:4900,column:13}},{start:{line:4898,column:12},end:{line:4900,column:13}}],line:4898},"283":{loc:{start:{line:4902,column:12},end:{line:4904,column:13}},type:"if",locations:[{start:{line:4902,column:12},end:{line:4904,column:13}},{start:{line:4902,column:12},end:{line:4904,column:13}}],line:4902},"284":{loc:{start:{line:4909,column:12},end:{line:4911,column:13}},type:"if",locations:[{start:{line:4909,column:12},end:{line:4911,column:13}},{start:{line:4909,column:12},end:{line:4911,column:13}}],line:4909},"285":{loc:{start:{line:4909,column:16},end:{line:4909,column:73}},type:"binary-expr",locations:[{start:{line:4909,column:16},end:{line:4909,column:48}},{start:{line:4909,column:52},end:{line:4909,column:73}}],line:4909},"286":{loc:{start:{line:4912,column:12},end:{line:4914,column:13}},type:"if",locations:[{start:{line:4912,column:12},end:{line:4914,column:13}},{start:{line:4912,column:12},end:{line:4914,column:13}}],line:4912},"287":{loc:{start:{line:4912,column:16},end:{line:4912,column:69}},type:"binary-expr",locations:[{start:{line:4912,column:16},end:{line:4912,column:46}},{start:{line:4912,column:50},end:{line:4912,column:69}}],line:4912},"288":{loc:{start:{line:4915,column:12},end:{line:4917,column:13}},type:"if",locations:[{start:{line:4915,column:12},end:{line:4917,column:13}},{start:{line:4915,column:12},end:{line:4917,column:13}}],line:4915},"289":{loc:{start:{line:4915,column:16},end:{line:4915,column:71}},type:"binary-expr",locations:[{start:{line:4915,column:16},end:{line:4915,column:47}},{start:{line:4915,column:51},end:{line:4915,column:71}}],line:4915},"290":{loc:{start:{line:4918,column:12},end:{line:4920,column:13}},type:"if",locations:[{start:{line:4918,column:12},end:{line:4920,column:13}},{start:{line:4918,column:12},end:{line:4920,column:13}}],line:4918},"291":{loc:{start:{line:4918,column:16},end:{line:4918,column:73}},type:"binary-expr",locations:[{start:{line:4918,column:16},end:{line:4918,column:48}},{start:{line:4918,column:52},end:{line:4918,column:73}}],line:4918},"292":{loc:{start:{line:4944,column:12},end:{line:4946,column:13}},type:"if",locations:[{start:{line:4944,column:12},end:{line:4946,column:13}},{start:{line:4944,column:12},end:{line:4946,column:13}}],line:4944},"293":{loc:{start:{line:4948,column:12},end:{line:4950,column:13}},type:"if",locations:[{start:{line:4948,column:12},end:{line:4950,column:13}},{start:{line:4948,column:12},end:{line:4950,column:13}}],line:4948},"294":{loc:{start:{line:4973,column:12},end:{line:4975,column:13}},type:"if",locations:[{start:{line:4973,column:12},end:{line:4975,column:13}},{start:{line:4973,column:12},end:{line:4975,column:13}}],line:4973},"295":{loc:{start:{line:4977,column:12},end:{line:4979,column:13}},type:"if",locations:[{start:{line:4977,column:12},end:{line:4979,column:13}},{start:{line:4977,column:12},end:{line:4979,column:13}}],line:4977},"296":{loc:{start:{line:4980,column:12},end:{line:4982,column:13}},type:"if",locations:[{start:{line:4980,column:12},end:{line:4982,column:13}},{start:{line:4980,column:12},end:{line:4982,column:13}}],line:4980},"297":{loc:{start:{line:5005,column:12},end:{line:5007,column:13}},type:"if",locations:[{start:{line:5005,column:12},end:{line:5007,column:13}},{start:{line:5005,column:12},end:{line:5007,column:13}}],line:5005},"298":{loc:{start:{line:5010,column:12},end:{line:5062,column:13}},type:"if",locations:[{start:{line:5010,column:12},end:{line:5062,column:13}},{start:{line:5010,column:12},end:{line:5062,column:13}}],line:5010},"299":{loc:{start:{line:5010,column:16},end:{line:5017,column:41}},type:"binary-expr",locations:[{start:{line:5010,column:16},end:{line:5010,column:58}},{start:{line:5011,column:16},end:{line:5017,column:41}}],line:5010},"300":{loc:{start:{line:5023,column:17},end:{line:5062,column:13}},type:"if",locations:[{start:{line:5023,column:17},end:{line:5062,column:13}},{start:{line:5023,column:17},end:{line:5062,column:13}}],line:5023},"301":{loc:{start:{line:5023,column:21},end:{line:5033,column:37}},type:"binary-expr",locations:[{start:{line:5023,column:21},end:{line:5023,column:40}},{start:{line:5024,column:16},end:{line:5033,column:37}}],line:5023},"302":{loc:{start:{line:5040,column:17},end:{line:5062,column:13}},type:"if",locations:[{start:{line:5040,column:17},end:{line:5062,column:13}},{start:{line:5040,column:17},end:{line:5062,column:13}}],line:5040},"303":{loc:{start:{line:5040,column:21},end:{line:5047,column:37}},type:"binary-expr",locations:[{start:{line:5040,column:21},end:{line:5040,column:43}},{start:{line:5041,column:16},end:{line:5047,column:37}}],line:5040},"304":{loc:{start:{line:5054,column:17},end:{line:5062,column:13}},type:"if",locations:[{start:{line:5054,column:17},end:{line:5062,column:13}},{start:{line:5054,column:17},end:{line:5062,column:13}}],line:5054},"305":{loc:{start:{line:5054,column:21},end:{line:5055,column:41}},type:"binary-expr",locations:[{start:{line:5054,column:21},end:{line:5054,column:74}},{start:{line:5055,column:16},end:{line:5055,column:41}}],line:5054},"306":{loc:{start:{line:5060,column:17},end:{line:5062,column:13}},type:"if",locations:[{start:{line:5060,column:17},end:{line:5062,column:13}},{start:{line:5060,column:17},end:{line:5062,column:13}}],line:5060},"307":{loc:{start:{line:5123,column:12},end:{line:5125,column:13}},type:"if",locations:[{start:{line:5123,column:12},end:{line:5125,column:13}},{start:{line:5123,column:12},end:{line:5125,column:13}}],line:5123},"308":{loc:{start:{line:5128,column:16},end:{line:5131,column:17}},type:"if",locations:[{start:{line:5128,column:16},end:{line:5131,column:17}},{start:{line:5128,column:16},end:{line:5131,column:17}}],line:5128},"309":{loc:{start:{line:5133,column:16},end:{line:5138,column:17}},type:"if",locations:[{start:{line:5133,column:16},end:{line:5138,column:17}},{start:{line:5133,column:16},end:{line:5138,column:17}}],line:5133},"310":{loc:{start:{line:5133,column:20},end:{line:5133,column:65}},type:"binary-expr",locations:[{start:{line:5133,column:20},end:{line:5133,column:39}},{start:{line:5133,column:43},end:{line:5133,column:65}}],line:5133},"311":{loc:{start:{line:5169,column:12},end:{line:5172,column:13}},type:"if",locations:[{start:{line:5169,column:12},end:{line:5172,column:13}},{start:{line:5169,column:12},end:{line:5172,column:13}}],line:5169},"312":{loc:{start:{line:5173,column:19},end:{line:5173,column:29}},type:"binary-expr",locations:[{start:{line:5173,column:19},end:{line:5173,column:23}},{start:{line:5173,column:27},end:{line:5173,column:29}}],line:5173},"313":{loc:{start:{line:5176,column:16},end:{line:5181,column:17}},type:"if",locations:[{start:{line:5176,column:16},end:{line:5181,column:17}},{start:{line:5176,column:16},end:{line:5181,column:17}}],line:5176},"314":{loc:{start:{line:5240,column:20},end:{line:5240,column:31}},type:"binary-expr",locations:[{start:{line:5240,column:20},end:{line:5240,column:25}},{start:{line:5240,column:29},end:{line:5240,column:31}}],line:5240},"315":{loc:{start:{line:5241,column:26},end:{line:5241,column:43}},type:"binary-expr",locations:[{start:{line:5241,column:26},end:{line:5241,column:37}},{start:{line:5241,column:41},end:{line:5241,column:43}}],line:5241},"316":{loc:{start:{line:5250,column:12},end:{line:5252,column:13}},type:"if",locations:[{start:{line:5250,column:12},end:{line:5252,column:13}},{start:{line:5250,column:12},end:{line:5252,column:13}}],line:5250},"317":{loc:{start:{line:5253,column:12},end:{line:5255,column:13}},type:"if",locations:[{start:{line:5253,column:12},end:{line:5255,column:13}},{start:{line:5253,column:12},end:{line:5255,column:13}}],line:5253},"318":{loc:{start:{line:5256,column:12},end:{line:5258,column:13}},type:"if",locations:[{start:{line:5256,column:12},end:{line:5258,column:13}},{start:{line:5256,column:12},end:{line:5258,column:13}}],line:5256},"319":{loc:{start:{line:5259,column:12},end:{line:5261,column:13}},type:"if",locations:[{start:{line:5259,column:12},end:{line:5261,column:13}},{start:{line:5259,column:12},end:{line:5261,column:13}}],line:5259},"320":{loc:{start:{line:5264,column:12},end:{line:5266,column:13}},type:"if",locations:[{start:{line:5264,column:12},end:{line:5266,column:13}},{start:{line:5264,column:12},end:{line:5266,column:13}}],line:5264},"321":{loc:{start:{line:5332,column:19},end:{line:5332,column:77}},type:"binary-expr",locations:[{start:{line:5332,column:19},end:{line:5332,column:48}},{start:{line:5332,column:52},end:{line:5332,column:69}},{start:{line:5332,column:73},end:{line:5332,column:77}}],line:5332},"322":{loc:{start:{line:5350,column:16},end:{line:5352,column:17}},type:"if",locations:[{start:{line:5350,column:16},end:{line:5352,column:17}},{start:{line:5350,column:16},end:{line:5352,column:17}}],line:5350},"323":{loc:{start:{line:5357,column:16},end:{line:5359,column:17}},type:"if",locations:[{start:{line:5357,column:16},end:{line:5359,column:17}},{start:{line:5357,column:16},end:{line:5359,column:17}}],line:5357},"324":{loc:{start:{line:5469,column:12},end:{line:5472,column:13}},type:"if",locations:[{start:{line:5469,column:12},end:{line:5472,column:13}},{start:{line:5469,column:12},end:{line:5472,column:13}}],line:5469},"325":{loc:{start:{line:5469,column:16},end:{line:5469,column:59}},type:"binary-expr",locations:[{start:{line:5469,column:16},end:{line:5469,column:25}},{start:{line:5469,column:29},end:{line:5469,column:59}}],line:5469},"326":{loc:{start:{line:5475,column:23},end:{line:5475,column:72}},type:"cond-expr",locations:[{start:{line:5475,column:38},end:{line:5475,column:67}},{start:{line:5475,column:70},end:{line:5475,column:72}}],line:5475},"327":{loc:{start:{line:5502,column:26},end:{line:5502,column:68}},type:"cond-expr",locations:[{start:{line:5502,column:43},end:{line:5502,column:60}},{start:{line:5502,column:65},end:{line:5502,column:67}}],line:5502},"328":{loc:{start:{line:5571,column:12},end:{line:5574,column:13}},type:"if",locations:[{start:{line:5571,column:12},end:{line:5574,column:13}},{start:{line:5571,column:12},end:{line:5574,column:13}}],line:5571},"329":{loc:{start:{line:5579,column:32},end:{line:5579,column:76}},type:"binary-expr",locations:[{start:{line:5579,column:32},end:{line:5579,column:70}},{start:{line:5579,column:74},end:{line:5579,column:76}}],line:5579},"330":{loc:{start:{line:5580,column:12},end:{line:5583,column:13}},type:"if",locations:[{start:{line:5580,column:12},end:{line:5583,column:13}},{start:{line:5580,column:12},end:{line:5583,column:13}}],line:5580},"331":{loc:{start:{line:5587,column:12},end:{line:5589,column:13}},type:"if",locations:[{start:{line:5587,column:12},end:{line:5589,column:13}},{start:{line:5587,column:12},end:{line:5589,column:13}}],line:5587},"332":{loc:{start:{line:5587,column:16},end:{line:5587,column:84}},type:"binary-expr",locations:[{start:{line:5587,column:16},end:{line:5587,column:48}},{start:{line:5587,column:52},end:{line:5587,column:84}}],line:5587},"333":{loc:{start:{line:5629,column:16},end:{line:5631,column:17}},type:"if",locations:[{start:{line:5629,column:16},end:{line:5631,column:17}},{start:{line:5629,column:16},end:{line:5631,column:17}}],line:5629},"334":{loc:{start:{line:5660,column:12},end:{line:5663,column:13}},type:"if",locations:[{start:{line:5660,column:12},end:{line:5663,column:13}},{start:{line:5660,column:12},end:{line:5663,column:13}}],line:5660},"335":{loc:{start:{line:5664,column:23},end:{line:5664,column:48}},type:"binary-expr",locations:[{start:{line:5664,column:23},end:{line:5664,column:31}},{start:{line:5664,column:35},end:{line:5664,column:48}}],line:5664},"336":{loc:{start:{line:5666,column:12},end:{line:5669,column:13}},type:"if",locations:[{start:{line:5666,column:12},end:{line:5669,column:13}},{start:{line:5666,column:12},end:{line:5669,column:13}}],line:5666},"337":{loc:{start:{line:5670,column:12},end:{line:5673,column:13}},type:"if",locations:[{start:{line:5670,column:12},end:{line:5673,column:13}},{start:{line:5670,column:12},end:{line:5673,column:13}}],line:5670},"338":{loc:{start:{line:5677,column:29},end:{line:5677,column:107}},type:"binary-expr",locations:[{start:{line:5677,column:29},end:{line:5677,column:48}},{start:{line:5677,column:52},end:{line:5677,column:78}},{start:{line:5677,column:82},end:{line:5677,column:107}}],line:5677},"339":{loc:{start:{line:5678,column:35},end:{line:5678,column:123}},type:"binary-expr",locations:[{start:{line:5678,column:35},end:{line:5678,column:54}},{start:{line:5678,column:58},end:{line:5678,column:89}},{start:{line:5678,column:93},end:{line:5678,column:123}}],line:5678},"340":{loc:{start:{line:5679,column:35},end:{line:5679,column:123}},type:"binary-expr",locations:[{start:{line:5679,column:35},end:{line:5679,column:54}},{start:{line:5679,column:58},end:{line:5679,column:89}},{start:{line:5679,column:93},end:{line:5679,column:123}}],line:5679},"341":{loc:{start:{line:5685,column:16},end:{line:5691,column:17}},type:"if",locations:[{start:{line:5685,column:16},end:{line:5691,column:17}},{start:{line:5685,column:16},end:{line:5691,column:17}}],line:5685},"342":{loc:{start:{line:5728,column:24},end:{line:5728,column:39}},type:"binary-expr",locations:[{start:{line:5728,column:24},end:{line:5728,column:33}},{start:{line:5728,column:37},end:{line:5728,column:39}}],line:5728},"343":{loc:{start:{line:5748,column:12},end:{line:5751,column:13}},type:"if",locations:[{start:{line:5748,column:12},end:{line:5751,column:13}},{start:{line:5748,column:12},end:{line:5751,column:13}}],line:5748},"344":{loc:{start:{line:5748,column:16},end:{line:5748,column:53}},type:"binary-expr",locations:[{start:{line:5748,column:16},end:{line:5748,column:40}},{start:{line:5748,column:44},end:{line:5748,column:53}}],line:5748},"345":{loc:{start:{line:5753,column:21},end:{line:5753,column:33}},type:"binary-expr",locations:[{start:{line:5753,column:21},end:{line:5753,column:27}},{start:{line:5753,column:31},end:{line:5753,column:33}}],line:5753},"346":{loc:{start:{line:5754,column:23},end:{line:5754,column:47}},type:"binary-expr",locations:[{start:{line:5754,column:23},end:{line:5754,column:31}},{start:{line:5754,column:35},end:{line:5754,column:47}}],line:5754},"347":{loc:{start:{line:5759,column:16},end:{line:5765,column:17}},type:"if",locations:[{start:{line:5759,column:16},end:{line:5765,column:17}},{start:{line:5759,column:16},end:{line:5765,column:17}}],line:5759},"348":{loc:{start:{line:5789,column:21},end:{line:5789,column:33}},type:"binary-expr",locations:[{start:{line:5789,column:21},end:{line:5789,column:27}},{start:{line:5789,column:31},end:{line:5789,column:33}}],line:5789},"349":{loc:{start:{line:5792,column:29},end:{line:5792,column:49}},type:"binary-expr",locations:[{start:{line:5792,column:29},end:{line:5792,column:44}},{start:{line:5792,column:48},end:{line:5792,column:49}}],line:5792},"350":{loc:{start:{line:5798,column:23},end:{line:5798,column:48}},type:"binary-expr",locations:[{start:{line:5798,column:23},end:{line:5798,column:31}},{start:{line:5798,column:35},end:{line:5798,column:48}}],line:5798},"351":{loc:{start:{line:5806,column:16},end:{line:5814,column:17}},type:"if",locations:[{start:{line:5806,column:16},end:{line:5814,column:17}},{start:{line:5806,column:16},end:{line:5814,column:17}}],line:5806},"352":{loc:{start:{line:5810,column:38},end:{line:5810,column:76}},type:"cond-expr",locations:[{start:{line:5810,column:53},end:{line:5810,column:72}},{start:{line:5810,column:75},end:{line:5810,column:76}}],line:5810}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":0,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0,"516":0,"517":0,"518":0,"519":0,"520":0,"521":0,"522":0,"523":0,"524":0,"525":0,"526":0,"527":0,"528":0,"529":0,"530":0,"531":0,"532":0,"533":0,"534":0,"535":0,"536":0,"537":0,"538":0,"539":0,"540":0,"541":0,"542":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"549":0,"550":0,"551":0,"552":0,"553":0,"554":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"562":0,"563":0,"564":0,"565":0,"566":0,"567":0,"568":0,"569":0,"570":0,"571":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":0,"578":0,"579":0,"580":0,"581":0,"582":0,"583":0,"584":0,"585":0,"586":0,"587":0,"588":0,"589":0,"590":0,"591":0,"592":0,"593":0,"594":0,"595":0,"596":0,"597":0,"598":0,"599":0,"600":0,"601":0,"602":0,"603":0,"604":0,"605":0,"606":0,"607":0,"608":0,"609":0,"610":0,"611":0,"612":0,"613":0,"614":0,"615":0,"616":0,"617":0,"618":0,"619":0,"620":0,"621":0,"622":0,"623":0,"624":0,"625":0,"626":0,"627":0,"628":0,"629":0,"630":0,"631":0,"632":0,"633":0,"634":0,"635":0,"636":0,"637":0,"638":0,"639":0,"640":0,"641":0,"642":0,"643":0,"644":0,"645":0,"646":0,"647":0,"648":0,"649":0,"650":0,"651":0,"652":0,"653":0,"654":0,"655":0,"656":0,"657":0,"658":0,"659":0,"660":0,"661":0,"662":0,"663":0,"664":0,"665":0,"666":0,"667":0,"668":0,"669":0,"670":0,"671":0,"672":0,"673":0,"674":0,"675":0,"676":0,"677":0,"678":0,"679":0,"680":0,"681":0,"682":0,"683":0,"684":0,"685":0,"686":0,"687":0,"688":0,"689":0,"690":0,"691":0,"692":0,"693":0,"694":0,"695":0,"696":0,"697":0,"698":0,"699":0,"700":0,"701":0,"702":0,"703":0,"704":0,"705":0,"706":0,"707":0,"708":0,"709":0,"710":0,"711":0,"712":0,"713":0,"714":0,"715":0,"716":0,"717":0,"718":0,"719":0,"720":0,"721":0,"722":0,"723":0,"724":0,"725":0,"726":0,"727":0,"728":0,"729":0,"730":0,"731":0,"732":0,"733":0,"734":0,"735":0,"736":0,"737":0,"738":0,"739":0,"740":0,"741":0,"742":0,"743":0,"744":0,"745":0,"746":0,"747":0,"748":0,"749":0,"750":0,"751":0,"752":0,"753":0,"754":0,"755":0,"756":0,"757":0,"758":0,"759":0,"760":0,"761":0,"762":0,"763":0,"764":0,"765":0,"766":0,"767":0,"768":0,"769":0,"770":0,"771":0,"772":0,"773":0,"774":0,"775":0,"776":0,"777":0,"778":0,"779":0,"780":0,"781":0,"782":0,"783":0,"784":0,"785":0,"786":0,"787":0,"788":0,"789":0,"790":0,"791":0,"792":0,"793":0,"794":0,"795":0,"796":0,"797":0,"798":0,"799":0,"800":0,"801":0,"802":0,"803":0,"804":0,"805":0,"806":0,"807":0,"808":0,"809":0,"810":0,"811":0,"812":0,"813":0,"814":0,"815":0,"816":0,"817":0,"818":0,"819":0,"820":0,"821":0,"822":0,"823":0,"824":0,"825":0,"826":0,"827":0,"828":0,"829":0,"830":0,"831":0,"832":0,"833":0,"834":0,"835":0,"836":0,"837":0,"838":0,"839":0,"840":0,"841":0,"842":0,"843":0,"844":0,"845":0,"846":0,"847":0,"848":0,"849":0,"850":0,"851":0,"852":0,"853":0,"854":0,"855":0,"856":0,"857":0,"858":0,"859":0,"860":0,"861":0,"862":0,"863":0,"864":0,"865":0,"866":0,"867":0,"868":0,"869":0,"870":0,"871":0,"872":0,"873":0,"874":0,"875":0,"876":0,"877":0,"878":0,"879":0,"880":0,"881":0,"882":0,"883":0,"884":0,"885":0,"886":0,"887":0,"888":0,"889":0,"890":0,"891":0,"892":0,"893":0,"894":0,"895":0,"896":0,"897":0,"898":0,"899":0,"900":0,"901":0,"902":0,"903":0,"904":0,"905":0,"906":0,"907":0,"908":0,"909":0,"910":0,"911":0,"912":0,"913":0,"914":0,"915":0,"916":0,"917":0,"918":0,"919":0,"920":0,"921":0,"922":0,"923":0,"924":0,"925":0,"926":0,"927":0,"928":0,"929":0,"930":0,"931":0,"932":0,"933":0,"934":0,"935":0,"936":0,"937":0,"938":0,"939":0,"940":0,"941":0,"942":0,"943":0,"944":0,"945":0,"946":0,"947":0,"948":0,"949":0,"950":0,"951":0,"952":0,"953":0,"954":0,"955":0,"956":0,"957":0,"958":0,"959":0,"960":0,"961":0,"962":0,"963":0,"964":0,"965":0,"966":0,"967":0,"968":0,"969":0,"970":0,"971":0,"972":0,"973":0,"974":0,"975":0,"976":0,"977":0,"978":0,"979":0,"980":0,"981":0,"982":0,"983":0,"984":0,"985":0,"986":0,"987":0,"988":0,"989":0,"990":0,"991":0,"992":0,"993":0,"994":0,"995":0,"996":0,"997":0,"998":0,"999":0,"1000":0,"1001":0,"1002":0,"1003":0,"1004":0,"1005":0,"1006":0,"1007":0,"1008":0,"1009":0,"1010":0,"1011":0,"1012":0,"1013":0,"1014":0,"1015":0,"1016":0,"1017":0,"1018":0,"1019":0,"1020":0,"1021":0,"1022":0,"1023":0,"1024":0,"1025":0,"1026":0,"1027":0,"1028":0,"1029":0,"1030":0,"1031":0,"1032":0,"1033":0,"1034":0,"1035":0,"1036":0,"1037":0,"1038":0,"1039":0,"1040":0,"1041":0,"1042":0,"1043":0,"1044":0,"1045":0,"1046":0,"1047":0,"1048":0,"1049":0,"1050":0,"1051":0,"1052":0,"1053":0,"1054":0,"1055":0,"1056":0,"1057":0,"1058":0,"1059":0,"1060":0,"1061":0,"1062":0,"1063":0,"1064":0,"1065":0,"1066":0,"1067":0,"1068":0,"1069":0,"1070":0,"1071":0,"1072":0,"1073":0,"1074":0,"1075":0,"1076":0,"1077":0,"1078":0,"1079":0,"1080":0,"1081":0,"1082":0,"1083":0,"1084":0,"1085":0,"1086":0,"1087":0,"1088":0,"1089":0,"1090":0,"1091":0,"1092":0,"1093":0,"1094":0,"1095":0,"1096":0,"1097":0,"1098":0,"1099":0,"1100":0,"1101":0,"1102":0,"1103":0,"1104":0,"1105":0,"1106":0,"1107":0,"1108":0,"1109":0,"1110":0,"1111":0,"1112":0,"1113":0,"1114":0,"1115":0,"1116":0,"1117":0,"1118":0,"1119":0,"1120":0,"1121":0,"1122":0,"1123":0,"1124":0,"1125":0,"1126":0,"1127":0,"1128":0,"1129":0,"1130":0,"1131":0,"1132":0,"1133":0,"1134":0,"1135":0,"1136":0,"1137":0,"1138":0,"1139":0,"1140":0,"1141":0,"1142":0,"1143":0,"1144":0,"1145":0,"1146":0,"1147":0,"1148":0,"1149":0,"1150":0,"1151":0,"1152":0,"1153":0,"1154":0,"1155":0,"1156":0,"1157":0,"1158":0,"1159":0,"1160":0,"1161":0,"1162":0,"1163":0,"1164":0,"1165":0,"1166":0,"1167":0,"1168":0,"1169":0,"1170":0,"1171":0,"1172":0,"1173":0,"1174":0,"1175":0,"1176":0,"1177":0,"1178":0,"1179":0,"1180":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0],"125":[0,0],"126":[0,0],"127":[0,0],"128":[0,0],"129":[0,0],"130":[0,0],"131":[0,0],"132":[0,0],"133":[0,0],"134":[0,0],"135":[0,0],"136":[0,0],"137":[0,0],"138":[0,0],"139":[0,0],"140":[0,0],"141":[0,0],"142":[0,0],"143":[0,0],"144":[0,0,0],"145":[0,0],"146":[0,0],"147":[0,0],"148":[0,0,0],"149":[0,0],"150":[0,0],"151":[0,0],"152":[0,0],"153":[0,0,0],"154":[0,0],"155":[0,0],"156":[0,0],"157":[0,0],"158":[0,0,0,0],"159":[0,0],"160":[0,0],"161":[0,0],"162":[0,0],"163":[0,0],"164":[0,0],"165":[0,0],"166":[0,0],"167":[0,0],"168":[0,0],"169":[0,0],"170":[0,0],"171":[0,0],"172":[0,0],"173":[0,0],"174":[0,0],"175":[0,0],"176":[0,0],"177":[0,0],"178":[0,0],"179":[0,0],"180":[0,0],"181":[0,0],"182":[0,0],"183":[0,0],"184":[0,0],"185":[0,0],"186":[0,0],"187":[0,0],"188":[0,0],"189":[0,0],"190":[0,0],"191":[0,0],"192":[0,0,0,0],"193":[0,0],"194":[0,0],"195":[0,0],"196":[0,0],"197":[0,0],"198":[0,0],"199":[0,0],"200":[0,0],"201":[0,0],"202":[0,0],"203":[0,0],"204":[0,0],"205":[0,0],"206":[0,0],"207":[0,0],"208":[0,0],"209":[0,0],"210":[0,0],"211":[0,0],"212":[0,0,0],"213":[0,0],"214":[0,0],"215":[0,0],"216":[0,0],"217":[0,0],"218":[0,0],"219":[0,0],"220":[0,0,0],"221":[0,0],"222":[0,0],"223":[0,0],"224":[0,0],"225":[0,0],"226":[0,0],"227":[0,0],"228":[0,0],"229":[0,0],"230":[0,0],"231":[0,0],"232":[0,0],"233":[0,0],"234":[0,0],"235":[0,0],"236":[0,0],"237":[0,0],"238":[0,0],"239":[0,0],"240":[0,0],"241":[0,0],"242":[0,0],"243":[0,0],"244":[0,0],"245":[0,0],"246":[0,0],"247":[0,0],"248":[0,0],"249":[0,0],"250":[0,0],"251":[0,0],"252":[0,0],"253":[0,0],"254":[0,0],"255":[0,0],"256":[0,0],"257":[0,0],"258":[0,0],"259":[0,0],"260":[0,0],"261":[0,0],"262":[0,0],"263":[0,0],"264":[0,0],"265":[0,0],"266":[0,0],"267":[0,0],"268":[0,0],"269":[0,0],"270":[0,0],"271":[0,0],"272":[0,0],"273":[0,0],"274":[0,0],"275":[0,0],"276":[0,0],"277":[0,0],"278":[0,0],"279":[0,0],"280":[0,0],"281":[0,0],"282":[0,0],"283":[0,0],"284":[0,0],"285":[0,0],"286":[0,0],"287":[0,0],"288":[0,0],"289":[0,0],"290":[0,0],"291":[0,0],"292":[0,0],"293":[0,0],"294":[0,0],"295":[0,0],"296":[0,0],"297":[0,0],"298":[0,0],"299":[0,0],"300":[0,0],"301":[0,0],"302":[0,0],"303":[0,0],"304":[0,0],"305":[0,0],"306":[0,0],"307":[0,0],"308":[0,0],"309":[0,0],"310":[0,0],"311":[0,0],"312":[0,0],"313":[0,0],"314":[0,0],"315":[0,0],"316":[0,0],"317":[0,0],"318":[0,0],"319":[0,0],"320":[0,0],"321":[0,0,0],"322":[0,0],"323":[0,0],"324":[0,0],"325":[0,0],"326":[0,0],"327":[0,0],"328":[0,0],"329":[0,0],"330":[0,0],"331":[0,0],"332":[0,0],"333":[0,0],"334":[0,0],"335":[0,0],"336":[0,0],"337":[0,0],"338":[0,0,0],"339":[0,0,0],"340":[0,0,0],"341":[0,0],"342":[0,0],"343":[0,0],"344":[0,0],"345":[0,0],"346":[0,0],"347":[0,0],"348":[0,0],"349":[0,0],"350":[0,0],"351":[0,0],"352":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ce0c734d65dbde409d28986f2e59fa44663d58aa"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1nf65u3g4c=function(){return actualCoverage;};}return actualCoverage;}cov_1nf65u3g4c();cov_1nf65u3g4c().s[0]++;/*!*/ // Copyright 2014 Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
(function(){"use strict";cov_1nf65u3g4c().f[0]++;var Context=(cov_1nf65u3g4c().s[1]++,require('./context'));var Http=(cov_1nf65u3g4c().s[2]++,require('./http'));var Async=(cov_1nf65u3g4c().s[3]++,require('./async'));var Paths=(cov_1nf65u3g4c().s[4]++,require('./paths').Paths);var Class=(cov_1nf65u3g4c().s[5]++,require('./jquery.class').Class);var utils=(cov_1nf65u3g4c().s[6]++,require('./utils'));var root=(cov_1nf65u3g4c().s[7]++,(cov_1nf65u3g4c().b[0][0]++,exports)||(cov_1nf65u3g4c().b[0][1]++,this));var Service=(cov_1nf65u3g4c().s[8]++,null);/**
     * Contains functionality common to Splunk Enterprise and Splunk Storm.
     * 
     * This class is an implementation detail and is therefore SDK-private.
     * 
     * @class splunkjs.private.BaseService
     * @extends splunkjs.Context
     */var BaseService=(cov_1nf65u3g4c().s[9]++,Context.extend({init:function(){cov_1nf65u3g4c().f[1]++;cov_1nf65u3g4c().s[10]++;this._super.apply(this,arguments);}}));/**
     * Provides a root access point to Splunk functionality with typed access to 
     * Splunk resources such as searches, indexes, inputs, and more. Provides
     * methods to authenticate and create specialized instances of the service.
     *
     * @class splunkjs.Service
     * @extends splunkjs.private.BaseService
     */cov_1nf65u3g4c().s[11]++;module.exports=root=Service=BaseService.extend({/**
         * Constructor for `splunkjs.Service`.
         *
         * @constructor
         * @param {splunkjs.Http} http An instance of a `splunkjs.Http` class.
         * @param {Object} params A dictionary of optional parameters: 
         *    - `scheme` (_string_): The scheme ("http" or "https") for accessing Splunk.
         *    - `host` (_string_): The host name (the default is "localhost").
         *    - `port` (_integer_): The port number (the default is 8089).
         *    - `username` (_string_): The Splunk account username, which is used to authenticate the Splunk instance.
         *    - `password` (_string_): The password, which is used to authenticate the Splunk instance.
         *    - `owner` (_string_): The owner (username) component of the namespace.
         *    - `app` (_string_): The app component of the namespace.
         *    - `sessionKey` (_string_): The current session token.
         *    - `autologin` (_boolean_): `true` to automatically try to log in again if the session terminates, `false` if not (`true` by default).
         *    - `version` (_string_): The version string for Splunk, for example "4.3.2" (the default is "5.0").
         * @return {splunkjs.Service} A new `splunkjs.Service` instance.
         *
         * @method splunkjs.Service
         */init:function(){cov_1nf65u3g4c().f[2]++;cov_1nf65u3g4c().s[12]++;this._super.apply(this,arguments);// We perform the bindings so that every function works 
// properly when it is passed as a callback.
cov_1nf65u3g4c().s[13]++;this.specialize=utils.bind(this,this.specialize);cov_1nf65u3g4c().s[14]++;this.apps=utils.bind(this,this.apps);cov_1nf65u3g4c().s[15]++;this.configurations=utils.bind(this,this.configurations);cov_1nf65u3g4c().s[16]++;this.indexes=utils.bind(this,this.indexes);cov_1nf65u3g4c().s[17]++;this.savedSearches=utils.bind(this,this.savedSearches);cov_1nf65u3g4c().s[18]++;this.jobs=utils.bind(this,this.jobs);cov_1nf65u3g4c().s[19]++;this.users=utils.bind(this,this.users);cov_1nf65u3g4c().s[20]++;this.currentUser=utils.bind(this,this.currentUser);cov_1nf65u3g4c().s[21]++;this.views=utils.bind(this,this.views);cov_1nf65u3g4c().s[22]++;this.firedAlertGroups=utils.bind(this,this.firedAlertGroups);cov_1nf65u3g4c().s[23]++;this.dataModels=utils.bind(this,this.dataModels);},/**
         * Creates a specialized version of the current `Service` instance for
         * a specific namespace context. 
         *
         * @example
         *
         *      var svc = ...;
         *      var newService = svc.specialize("myuser", "unix");
         *
         * @param {String} owner The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         * @param {String} app The app context for this resource (such as "search"). The "-" wildcard means all apps.
         * @return {splunkjs.Service} The specialized `Service` instance.
         *
         * @method splunkjs.Service
         */specialize:function(owner,app){cov_1nf65u3g4c().f[3]++;cov_1nf65u3g4c().s[24]++;return new Service(this.http,{scheme:this.scheme,host:this.host,port:this.port,username:this.username,password:this.password,owner:owner,app:app,sessionKey:this.sessionKey,version:this.version});},/**
         * Gets the `Applications` collection, which allows you to 
         * list installed apps and retrieve information about them.
         *
         * @example
         *
         *      // List installed apps
         *      var apps = svc.apps();
         *      apps.fetch(function(err) { console.log(apps.list()); });
         *
         * @return {splunkjs.Service.Collection} The `Applications` collection.
         *
         * @endpoint apps/local
         * @method splunkjs.Service
         * @see splunkjs.Service.Applications
         */apps:function(){cov_1nf65u3g4c().f[4]++;cov_1nf65u3g4c().s[25]++;return new root.Applications(this);},/**
         * Gets the `Configurations` collection, which lets you 
         * create, list, and retrieve configuration (.conf) files.
         *
         * @example
         *
         *      // List all properties in the 'props.conf' file
         *      var files = svc.configurations();
         *      files.item("props", function(err, propsFile) {
         *          propsFile.fetch(function(err, props) {
         *              console.log(props.properties()); 
         *          });
         *      });
         *
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Configurations} The `Configurations` collection.
         *
         * @endpoint configs
         * @method splunkjs.Service
         * @see splunkjs.Service.Configurations
         */configurations:function(namespace){cov_1nf65u3g4c().f[5]++;cov_1nf65u3g4c().s[26]++;return new root.Configurations(this,namespace);},/**
         * Gets the `Indexes` collection, which lets you create, 
         * list, and update indexes. 
         *
         * @example
         *
         *      // Check if we have an _internal index
         *      var indexes = svc.indexes();
         *      indexes.fetch(function(err, indexes) {
         *          var index = indexes.item("_internal");
         *          console.log("Was index found: " + !!index);
         *          // `index` is an Index object.
         *      });
         *
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Indexes} The `Indexes` collection.
         *
         * @endpoint data/indexes
         * @method splunkjs.Service
         * @see splunkjs.Service.Indexes
         */indexes:function(namespace){cov_1nf65u3g4c().f[6]++;cov_1nf65u3g4c().s[27]++;return new root.Indexes(this,namespace);},/**
         * Gets the `SavedSearches` collection, which lets you
         * create, list, and update saved searches. 
         *
         * @example
         *
         *      // List all # of saved searches
         *      var savedSearches = svc.savedSearches();
         *      savedSearches.fetch(function(err, savedSearches) {
         *          console.log("# Of Saved Searches: " + savedSearches.list().length);
         *      });
         *
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.SavedSearches} The `SavedSearches` collection.
         *
         * @endpoint saved/searches
         * @method splunkjs.Service
         * @see splunkjs.Service.SavedSearches
         */savedSearches:function(namespace){cov_1nf65u3g4c().f[7]++;cov_1nf65u3g4c().s[28]++;return new root.SavedSearches(this,namespace);},/**
         * Gets the `StoragePasswords` collection, which lets you
         * create, list, and update storage passwords. 
         *
         * @example
         *
         *      // List all # of storage passwords
         *      var storagePasswords = svc.storagePasswords();
         *      storagePasswords.fetch(function(err, storagePasswords) {
         *          console.log("# of Storage Passwords: " + storagePasswords.list().length);
         *      });
         *
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.StoragePasswords} The `StoragePasswords` collection.
         *
         * @endpoint storage/passwords
         * @method splunkjs.Service
         * @see splunkjs.Service.StoragePasswords
         */storagePasswords:function(namespace){cov_1nf65u3g4c().f[8]++;cov_1nf65u3g4c().s[29]++;return new root.StoragePasswords(this,namespace);},/**
         * Gets the `FiredAlertGroupCollection` collection, which lets you
         * list alert groups.
         * 
         * @example
         *      
         *      // List all # of fired alert groups
         *      var firedAlertGroups = svc.firedAlertGroups();
         *      firedAlertGroups.fetch(function(err, firedAlertGroups) {
         *          console.log("# of alert groups: " + firedAlertGroups.list().length);
         *      });
         *
         *
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.FiredAlertGroupCollection} The `FiredAlertGroupCollection` collection.
         *
         * @endpoint saved/searches
         * @method splunkjs.Service
         * @see splunkjs.Service.FiredAlertGroupCollection
         */firedAlertGroups:function(namespace){cov_1nf65u3g4c().f[9]++;cov_1nf65u3g4c().s[30]++;return new root.FiredAlertGroupCollection(this,namespace);},/**
         * Gets the `Jobs` collection, which lets you create, list,
         * and retrieve search jobs. 
         *
         * @example
         *
         *      // List all job IDs
         *      var jobs = svc.jobs();
         *      jobs.fetch(function(err, jobs) {
         *          var list = jobs.list();
         *          for(var i = 0; i < list.length; i++) {
         *              console.log("Job " + (i+1) + ": " + list[i].sid);
         *          }
         *      });
         *
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Jobs} The `Jobs` collection.
         *
         * @endpoint search/jobs
         * @method splunkjs.Service
         * @see splunkjs.Service.Jobs
         */jobs:function(namespace){cov_1nf65u3g4c().f[10]++;cov_1nf65u3g4c().s[31]++;return new root.Jobs(this,namespace);},/**
         * Gets the `DataModels` collection, which lets you create, list,
         * and retrieve data models.
         *
         * @endpoint datamodel/model
         * @method splunkjs.Service
         * @see splunkjs.Service.DataModels
         */dataModels:function(namespace){cov_1nf65u3g4c().f[11]++;cov_1nf65u3g4c().s[32]++;return new root.DataModels(this,namespace);},/**
         * Gets the `Users` collection, which lets you create, 
         * list, and retrieve users. 
         *
         * @example
         *
         *      // List all usernames
         *      var users = svc.users();
         *      users.fetch(function(err, users) {
         *          var list = users.list();
         *          for(var i = 0; i < list.length; i++) {
         *              console.log("User " + (i+1) + ": " + list[i].properties().name);
         *          }
         *      });
         *
         * @return {splunkjs.Service.Users} The `Users` collection.
         *
         * @endpoint authorization/users
         * @method splunkjs.Service
         * @see splunkjs.Service.Users
         */users:function(){cov_1nf65u3g4c().f[12]++;cov_1nf65u3g4c().s[33]++;return new root.Users(this);},/**
         * Gets the `Views` collection, which lets you create,
         * list, and retrieve views (custom UIs built in Splunk's app framework). 
         *
         * @example
         *
         *      // List all views
         *      var views = svc.views();
         *      views.fetch(function(err, views) {
         *          var list = views.list();
         *          for(var i = 0; i < list.length; i++) {
         *              console.log("View " + (i+1) + ": " + list[i].properties().name);
         *          }
         *      });
         *
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Views} The `Views` collection.
         *
         * @endpoint data/ui/views
         * @method splunkjs.Service
         * @see splunkjs.Service.Views
         */views:function(namespace){cov_1nf65u3g4c().f[13]++;cov_1nf65u3g4c().s[34]++;return new root.Views(this,namespace);},/**
         * Creates a search job with a given search query and optional parameters, including `exec_mode` to specify the type of search:
         *
         *    - Use `exec_mode=normal` to return a search job ID immediately (default).
         *      Poll for completion to find out when you can retrieve search results. 
         *
         *    - Use `exec_mode=blocking` to return the search job ID when the search has finished.
         * 
         * To run a oneshot search, which does not create a job but rather returns the search results, use `Service.oneshotSearch`.
         *
         * @example
         *
         *      service.search("search ERROR", {id: "myjob_123"}, function(err, newJob) {
         *          console.log("CREATED": newJob.sid);
         *      });
         *
         * @param {String} query The search query.
         * @param {Object} params A dictionary of properties for the job. For a list of available parameters, see <a href=" http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams" target="_blank">Search job parameters</a> on Splunk Developer Portal.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @param {Function} callback A function to call with the created job: `(err, createdJob)`.
         *
         * @endpoint search/jobs
         * @method splunkjs.Service
         */search:function(query,params,namespace,callback){cov_1nf65u3g4c().f[14]++;cov_1nf65u3g4c().s[35]++;if((cov_1nf65u3g4c().b[2][0]++,!callback)&&(cov_1nf65u3g4c().b[2][1]++,utils.isFunction(namespace))){cov_1nf65u3g4c().b[1][0]++;cov_1nf65u3g4c().s[36]++;callback=namespace;cov_1nf65u3g4c().s[37]++;namespace=null;}else{cov_1nf65u3g4c().b[1][1]++;}var jobs=(cov_1nf65u3g4c().s[38]++,new root.Jobs(this,namespace));cov_1nf65u3g4c().s[39]++;return jobs.search(query,params,callback);},/**
         * A convenience method to get a `Job` by its sid.
         *
         * @param {String} sid The search ID for a search job.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @param {Function} callback A function to call with the created job: `(err, job)`.
         *
         * @endpoint search/jobs
         * @method splunkjs.Service
         */getJob:function(sid,namespace,callback){cov_1nf65u3g4c().f[15]++;cov_1nf65u3g4c().s[40]++;if((cov_1nf65u3g4c().b[4][0]++,!callback)&&(cov_1nf65u3g4c().b[4][1]++,utils.isFunction(namespace))){cov_1nf65u3g4c().b[3][0]++;cov_1nf65u3g4c().s[41]++;callback=namespace;cov_1nf65u3g4c().s[42]++;namespace=null;}else{cov_1nf65u3g4c().b[3][1]++;}var job=(cov_1nf65u3g4c().s[43]++,new root.Job(this,sid,namespace));cov_1nf65u3g4c().s[44]++;return job.fetch({},callback);},/**
         * Creates a oneshot search from a given search query and optional parameters.
         *
         * @example
         *
         *      service.oneshotSearch("search ERROR", {id: "myjob_123"}, function(err, results) {
         *          console.log("RESULT FIELDS": results.fields);
         *      });
         *
         * @param {String} query The search query.
         * @param {Object} params A dictionary of properties for the search:
         *    - `output_mode` (_string_): Specifies the output format of the results (XML, JSON, or CSV).
         *    - `earliest_time` (_string_): Specifies the earliest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.
         *    - `latest_time` (_string_): Specifies the latest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.
         *    - `rf` (_string_): Specifies one or more fields to add to the search.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @param {Function} callback A function to call with the results of the search: `(err, results)`.
         *
         * @endpoint search/jobs
         * @method splunkjs.Service
         */oneshotSearch:function(query,params,namespace,callback){cov_1nf65u3g4c().f[16]++;cov_1nf65u3g4c().s[45]++;if((cov_1nf65u3g4c().b[6][0]++,!callback)&&(cov_1nf65u3g4c().b[6][1]++,utils.isFunction(namespace))){cov_1nf65u3g4c().b[5][0]++;cov_1nf65u3g4c().s[46]++;callback=namespace;cov_1nf65u3g4c().s[47]++;namespace=null;}else{cov_1nf65u3g4c().b[5][1]++;}var jobs=(cov_1nf65u3g4c().s[48]++,new root.Jobs(this,namespace));cov_1nf65u3g4c().s[49]++;return jobs.oneshotSearch(query,params,callback);},/**
         * Gets the user that is currently logged in.
         *
         * @example
         *
         *      service.currentUser(function(err, user) {
         *          console.log("Real name: ", user.properties().realname);
         *      });
         *
         * @param {Function} callback A function to call with the user instance: `(err, user)`.
         * @return {splunkjs.Service.currentUser} The `User`.
         *
         * @endpoint authorization/current-context
         * @method splunkjs.Service
         */currentUser:function(callback){cov_1nf65u3g4c().f[17]++;cov_1nf65u3g4c().s[50]++;callback=(cov_1nf65u3g4c().b[7][0]++,callback)||(cov_1nf65u3g4c().b[7][1]++,function(){cov_1nf65u3g4c().f[18]++;});var that=(cov_1nf65u3g4c().s[51]++,this);var req=(cov_1nf65u3g4c().s[52]++,this.get(Paths.currentUser,{},function(err,response){cov_1nf65u3g4c().f[19]++;cov_1nf65u3g4c().s[53]++;if(err){cov_1nf65u3g4c().b[8][0]++;cov_1nf65u3g4c().s[54]++;callback(err);}else{cov_1nf65u3g4c().b[8][1]++;var username=(cov_1nf65u3g4c().s[55]++,response.data.entry[0].content.username);var user=(cov_1nf65u3g4c().s[56]++,new root.User(that,username));cov_1nf65u3g4c().s[57]++;user.fetch(function(){cov_1nf65u3g4c().f[20]++;cov_1nf65u3g4c().s[58]++;if(req.wasAborted){cov_1nf65u3g4c().b[9][0]++;cov_1nf65u3g4c().s[59]++;return;// aborted, so ignore
}else{cov_1nf65u3g4c().b[9][1]++;cov_1nf65u3g4c().s[60]++;callback.apply(null,arguments);}});}}));cov_1nf65u3g4c().s[61]++;return req;},/**
         * Gets configuration information about the server.
         *
         * @example
         *
         *      service.serverInfo(function(err, info) {
         *          console.log("Splunk Version: ", info.properties().version);
         *      });
         *
         * @param {Function} callback A function to call with the server info: `(err, info)`.
         *
         * @endpoint server/info
         * @method splunkjs.Service
         */serverInfo:function(callback){cov_1nf65u3g4c().f[21]++;cov_1nf65u3g4c().s[62]++;callback=(cov_1nf65u3g4c().b[10][0]++,callback)||(cov_1nf65u3g4c().b[10][1]++,function(){cov_1nf65u3g4c().f[22]++;});var serverInfo=(cov_1nf65u3g4c().s[63]++,new root.ServerInfo(this));cov_1nf65u3g4c().s[64]++;return serverInfo.fetch(callback);},/**
         * Parses a search query.
         *
         * @example
         *
         *      service.parse("search index=_internal | head 1", function(err, parse) {
         *          console.log("Commands: ", parse.commands);
         *      });
         *
         * @param {String} query The search query to parse.
         * @param {Object} params An object of options for the parser:
         *    - `enable_lookups` (_boolean_): If `true`, performs reverse lookups to expand the search expression.
         *    - `output_mode` (_string_): The output format (XML or JSON).
         *    - `parse_only` (_boolean_): If `true`, disables the expansion of search due to evaluation of subsearches, time term expansion, lookups, tags, eventtypes, and sourcetype alias.
         *    - `reload_macros` (_boolean_): If `true`, reloads macro definitions from macros.conf.
         * @param {Function} callback A function to call with the parse info: `(err, parse)`.
         *
         * @endpoint search/parser
         * @method splunkjs.Service
         */parse:function(query,params,callback){cov_1nf65u3g4c().f[23]++;cov_1nf65u3g4c().s[65]++;if((cov_1nf65u3g4c().b[12][0]++,!callback)&&(cov_1nf65u3g4c().b[12][1]++,utils.isFunction(params))){cov_1nf65u3g4c().b[11][0]++;cov_1nf65u3g4c().s[66]++;callback=params;cov_1nf65u3g4c().s[67]++;params={};}else{cov_1nf65u3g4c().b[11][1]++;}cov_1nf65u3g4c().s[68]++;callback=(cov_1nf65u3g4c().b[13][0]++,callback)||(cov_1nf65u3g4c().b[13][1]++,function(){cov_1nf65u3g4c().f[24]++;});cov_1nf65u3g4c().s[69]++;params=(cov_1nf65u3g4c().b[14][0]++,params)||(cov_1nf65u3g4c().b[14][1]++,{});cov_1nf65u3g4c().s[70]++;params.q=query;cov_1nf65u3g4c().s[71]++;return this.get(Paths.parser,params,function(err,response){cov_1nf65u3g4c().f[25]++;cov_1nf65u3g4c().s[72]++;if(err){cov_1nf65u3g4c().b[15][0]++;cov_1nf65u3g4c().s[73]++;callback(err);}else{cov_1nf65u3g4c().b[15][1]++;cov_1nf65u3g4c().s[74]++;callback(null,response.data);}});},/**
         * Provides auto-complete suggestions for search queries.
         *
         * @example
         *
         *      service.typeahead("index=", 10, function(err, options) {
         *          console.log("Autocompletion options: ", options);
         *      });
         *
         * @param {String} prefix The query fragment to autocomplete.
         * @param {Number} count The number of options to return (optional).
         * @param {Function} callback A function to call with the autocompletion info: `(err, options)`.
         *
         * @endpoint search/typeahead
         * @method splunkjs.Service
         */typeahead:function(prefix,count,callback){cov_1nf65u3g4c().f[26]++;cov_1nf65u3g4c().s[75]++;if((cov_1nf65u3g4c().b[17][0]++,!callback)&&(cov_1nf65u3g4c().b[17][1]++,utils.isFunction(count))){cov_1nf65u3g4c().b[16][0]++;cov_1nf65u3g4c().s[76]++;callback=count;cov_1nf65u3g4c().s[77]++;count=10;}else{cov_1nf65u3g4c().b[16][1]++;}cov_1nf65u3g4c().s[78]++;callback=(cov_1nf65u3g4c().b[18][0]++,callback)||(cov_1nf65u3g4c().b[18][1]++,function(){cov_1nf65u3g4c().f[27]++;});var params=(cov_1nf65u3g4c().s[79]++,{count:(cov_1nf65u3g4c().b[19][0]++,count)||(cov_1nf65u3g4c().b[19][1]++,10),prefix:prefix});cov_1nf65u3g4c().s[80]++;return this.get(Paths.typeahead,params,function(err,response){cov_1nf65u3g4c().f[28]++;cov_1nf65u3g4c().s[81]++;if(err){cov_1nf65u3g4c().b[20][0]++;cov_1nf65u3g4c().s[82]++;callback(err);}else{cov_1nf65u3g4c().b[20][1]++;var results=(cov_1nf65u3g4c().s[83]++,((cov_1nf65u3g4c().b[21][0]++,response.data)||(cov_1nf65u3g4c().b[21][1]++,{})).results);cov_1nf65u3g4c().s[84]++;callback(null,(cov_1nf65u3g4c().b[22][0]++,results)||(cov_1nf65u3g4c().b[22][1]++,[]));}});},/**
         * Logs an event to Splunk.
         *
         * @example
         *
         *      service.log("A new event", {index: "_internal", sourcetype: "mysourcetype"}, function(err, result) {
         *          console.log("Submitted event: ", result);
         *      });
         *
         * @param {String|Object} event The text for this event, or a JSON object.
         * @param {Object} params A dictionary of parameters for indexing: 
         *    - `index` (_string_): The index to send events from this input to.
         *    - `host` (_string_): The value to populate in the Host field for events from this data input. 
         *    - `host_regex` (_string_): A regular expression used to extract the host value from each event. 
         *    - `source` (_string_): The value to populate in the Source field for events from this data input.
         *    - `sourcetype` (_string_): The value to populate in the Sourcetype field for events from this data input.
         * @param {Function} callback A function to call when the event is submitted: `(err, result)`.
         *
         * @endpoint receivers/simple
         * @method splunkjs.Service
         */log:function(event,params,callback){cov_1nf65u3g4c().f[29]++;cov_1nf65u3g4c().s[85]++;if((cov_1nf65u3g4c().b[24][0]++,!callback)&&(cov_1nf65u3g4c().b[24][1]++,utils.isFunction(params))){cov_1nf65u3g4c().b[23][0]++;cov_1nf65u3g4c().s[86]++;callback=params;cov_1nf65u3g4c().s[87]++;params={};}else{cov_1nf65u3g4c().b[23][1]++;}cov_1nf65u3g4c().s[88]++;callback=(cov_1nf65u3g4c().b[25][0]++,callback)||(cov_1nf65u3g4c().b[25][1]++,function(){cov_1nf65u3g4c().f[30]++;});cov_1nf65u3g4c().s[89]++;params=(cov_1nf65u3g4c().b[26][0]++,params)||(cov_1nf65u3g4c().b[26][1]++,{});// If the event is a JSON object, convert it to a string.
cov_1nf65u3g4c().s[90]++;if(utils.isObject(event)){cov_1nf65u3g4c().b[27][0]++;cov_1nf65u3g4c().s[91]++;event=JSON.stringify(event);}else{cov_1nf65u3g4c().b[27][1]++;}var path=(cov_1nf65u3g4c().s[92]++,this.paths.submitEvent);var method=(cov_1nf65u3g4c().s[93]++,"POST");var headers=(cov_1nf65u3g4c().s[94]++,{"Content-Type":"text/plain"});var body=(cov_1nf65u3g4c().s[95]++,event);var get=(cov_1nf65u3g4c().s[96]++,params);var post=(cov_1nf65u3g4c().s[97]++,{});var req=(cov_1nf65u3g4c().s[98]++,this.request(path,method,get,post,body,headers,function(err,response){cov_1nf65u3g4c().f[31]++;cov_1nf65u3g4c().s[99]++;if(err){cov_1nf65u3g4c().b[28][0]++;cov_1nf65u3g4c().s[100]++;callback(err);}else{cov_1nf65u3g4c().b[28][1]++;cov_1nf65u3g4c().s[101]++;callback(null,response.data);}}));cov_1nf65u3g4c().s[102]++;return req;}});/**
     * Provides a base definition for a Splunk endpoint, which is a combination of
     * a specific service and path. Provides convenience methods for GET, POST, and
     * DELETE operations used in splunkjs, automatically preparing the path correctly
     * and allowing for relative calls.
     *
     * @class splunkjs.Service.Endpoint
     */cov_1nf65u3g4c().s[103]++;root.Endpoint=Class.extend({/**
         * Constructor for `splunkjs.Service.Endpoint`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} qualifiedPath A fully-qualified relative endpoint path (for example, "/services/search/jobs").
         * @return {splunkjs.Service.Endpoint} A new `splunkjs.Service.Endpoint` instance.
         *
         * @method splunkjs.Service.Endpoint
         */init:function(service,qualifiedPath){cov_1nf65u3g4c().f[32]++;cov_1nf65u3g4c().s[104]++;if(!service){cov_1nf65u3g4c().b[29][0]++;cov_1nf65u3g4c().s[105]++;throw new Error("Passed in a null Service.");}else{cov_1nf65u3g4c().b[29][1]++;}cov_1nf65u3g4c().s[106]++;if(!qualifiedPath){cov_1nf65u3g4c().b[30][0]++;cov_1nf65u3g4c().s[107]++;throw new Error("Passed in an empty path.");}else{cov_1nf65u3g4c().b[30][1]++;}cov_1nf65u3g4c().s[108]++;this.service=service;cov_1nf65u3g4c().s[109]++;this.qualifiedPath=qualifiedPath;// We perform the bindings so that every function works 
// properly when it is passed as a callback.
cov_1nf65u3g4c().s[110]++;this.get=utils.bind(this,this.get);cov_1nf65u3g4c().s[111]++;this.post=utils.bind(this,this.post);cov_1nf65u3g4c().s[112]++;this.del=utils.bind(this,this.del);},/**
         * Performs a relative GET request on an endpoint's path,
         * combined with the parameters and a relative path if specified.
         *
         * @example
         *
         *      // Will make a request to {service.prefix}/search/jobs/123456/results?offset=1
         *      var endpoint = new splunkjs.Service.Endpoint(service, "search/jobs/12345");
         *      endpoint.get("results", {offset: 1}, function() { console.log("DONE"))});
         *
         * @param {String} relpath A relative path to append to the endpoint path.
         * @param {Object} params A dictionary of entity-specific parameters to add to the query string.
         * @param {Function} callback A function to call when the request is complete: `(err, response)`.
         *
         * @method splunkjs.Service.Endpoint
         */get:function(relpath,params,callback,isAsync){cov_1nf65u3g4c().f[33]++;var url=(cov_1nf65u3g4c().s[113]++,this.qualifiedPath);// If we have a relative path, we will append it with a preceding
// slash.
cov_1nf65u3g4c().s[114]++;if(relpath){cov_1nf65u3g4c().b[31][0]++;cov_1nf65u3g4c().s[115]++;url=url+"/"+relpath;}else{cov_1nf65u3g4c().b[31][1]++;}cov_1nf65u3g4c().s[116]++;return this.service.get(url,params,callback,isAsync);},/**
         * Performs a relative POST request on an endpoint's path,
         * combined with the parameters and a relative path if specified.
         *
         * @example
         *
         *      // Will make a request to {service.prefix}/search/jobs/123456/control
         *      var endpoint = new splunkjs.Service.Endpoint(service, "search/jobs/12345");
         *      endpoint.post("control", {action: "cancel"}, function() { console.log("CANCELLED"))});
         *
         * @param {String} relpath A relative path to append to the endpoint path.
         * @param {Object} params A dictionary of entity-specific parameters to add to the body.
         * @param {Function} callback A function to call when the request is complete: `(err, response)`.
         *
         * @method splunkjs.Service.Endpoint
         */post:function(relpath,params,callback){cov_1nf65u3g4c().f[34]++;var url=(cov_1nf65u3g4c().s[117]++,this.qualifiedPath);// If we have a relative path, we will append it with a preceding
// slash.
cov_1nf65u3g4c().s[118]++;if(relpath){cov_1nf65u3g4c().b[32][0]++;cov_1nf65u3g4c().s[119]++;url=url+"/"+relpath;}else{cov_1nf65u3g4c().b[32][1]++;}cov_1nf65u3g4c().s[120]++;return this.service.post(url,params,callback);},/**
         * Performs a relative DELETE request on an endpoint's path,
         * combined with the parameters and a relative path if specified.
         *
         * @example
         *
         *      // Will make a request to {service.prefix}/search/jobs/123456
         *      var endpoint = new splunkjs.Service.Endpoint(service, "search/jobs/12345");
         *      endpoint.delete("", {}, function() { console.log("DELETED"))});
         *
         * @param {String} relpath A relative path to append to the endpoint path.
         * @param {Object} params A dictionary of entity-specific parameters to add to the query string.
         * @param {Function} callback A function to call when the request is complete: `(err, response)`.
         *
         * @method splunkjs.Service.Endpoint
         */del:function(relpath,params,callback){cov_1nf65u3g4c().f[35]++;var url=(cov_1nf65u3g4c().s[121]++,this.qualifiedPath);// If we have a relative path, we will append it with a preceding
// slash.
cov_1nf65u3g4c().s[122]++;if(relpath){cov_1nf65u3g4c().b[33][0]++;cov_1nf65u3g4c().s[123]++;url=url+"/"+relpath;}else{cov_1nf65u3g4c().b[33][1]++;}cov_1nf65u3g4c().s[124]++;return this.service.del(url,params,callback);}});/**
     * Provides a base definition for a Splunk resource (for example, an entity 
     * such as an index or search job, or a collection of entities). Provides 
     * basic methods for handling Splunk resources, such as validation and 
     * accessing properties. 
     *
     * This class should not be used directly because most methods are meant to be overridden.
     *
     * @class splunkjs.Service.Resource
     * @extends splunkjs.Service.Endpoint
     */cov_1nf65u3g4c().s[125]++;root.Resource=root.Endpoint.extend({/**
         * Constructor for `splunkjs.Service.Resource`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} path A relative endpoint path (for example, "search/jobs").
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Resource} A new `splunkjs.Service.Resource` instance.
         *
         * @method splunkjs.Service.Resource
         */init:function(service,path,namespace){cov_1nf65u3g4c().f[36]++;var fullpath=(cov_1nf65u3g4c().s[126]++,service.fullpath(path,namespace));cov_1nf65u3g4c().s[127]++;this._super(service,fullpath);cov_1nf65u3g4c().s[128]++;this.namespace=namespace;cov_1nf65u3g4c().s[129]++;this._properties={};cov_1nf65u3g4c().s[130]++;this._state={};// We perform the bindings so that every function works 
// properly when it is passed as a callback.
cov_1nf65u3g4c().s[131]++;this._load=utils.bind(this,this._load);cov_1nf65u3g4c().s[132]++;this.fetch=utils.bind(this,this.fetch);cov_1nf65u3g4c().s[133]++;this.properties=utils.bind(this,this.properties);cov_1nf65u3g4c().s[134]++;this.state=utils.bind(this,this.state);cov_1nf65u3g4c().s[135]++;this.path=utils.bind(this,this.path);},/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Resource
         */path:function(){cov_1nf65u3g4c().f[37]++;cov_1nf65u3g4c().s[136]++;throw new Error("MUST BE OVERRIDDEN");},/**
         * Loads the resource and stores the properties.
         *
         * @param {Object} properties The properties for this resource.
         *
         * @method splunkjs.Service.Resource
         * @protected
         */_load:function(properties){cov_1nf65u3g4c().f[38]++;cov_1nf65u3g4c().s[137]++;this._properties=(cov_1nf65u3g4c().b[34][0]++,properties)||(cov_1nf65u3g4c().b[34][1]++,{});cov_1nf65u3g4c().s[138]++;this._state=(cov_1nf65u3g4c().b[35][0]++,properties)||(cov_1nf65u3g4c().b[35][1]++,{});},/**
         * Refreshes the resource by fetching the object from the server
         * and loading it.
         *
         * @param {Function} callback A function to call when the object is retrieved: `(err, resource)`.
         *
         * @method splunkjs.Service.Resource
         * @protected
         */fetch:function(callback){cov_1nf65u3g4c().f[39]++;cov_1nf65u3g4c().s[139]++;throw new Error("MUST BE OVERRIDDEN");},/**
         * Retrieves the current properties for this resource.
         *
         * @return {Object} The properties.
         *
         * @method splunkjs.Service.Resource
         */properties:function(){cov_1nf65u3g4c().f[40]++;cov_1nf65u3g4c().s[140]++;return this._properties;},/**
         * Retrieves the current full state (properties and metadata) of this resource.
         *
         * @return {Object} The current full state of this resource.
         *
         * @method splunkjs.Service.Resource
         */state:function(){cov_1nf65u3g4c().f[41]++;cov_1nf65u3g4c().s[141]++;return this._state;}});/**
     * Defines a base class for a Splunk entity, which is a well-defined construct
     * with certain operations (such as "properties", "update", and "delete"). 
     * Entities include search jobs, indexes, inputs, apps, and more. 
     *
     * Provides basic methods for working with Splunk entities, such as fetching and
     * updating them.
     *
     * @class splunkjs.Service.Entity
     * @extends splunkjs.Service.Resource
     */cov_1nf65u3g4c().s[142]++;root.Entity=root.Resource.extend({/**
         * A static property that indicates whether to call `fetch` after an 
         * update to get the updated entity. By default, the entity is not 
         * fetched because the endpoint returns (echoes) the updated entity.
         *
         * @method splunkjs.Service.Entity
         */fetchOnUpdate:false,/**
         * Constructor for `splunkjs.Service.Entity`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} path A relative endpoint path (for example, "search/jobs").
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Entity} A new `splunkjs.Service.Entity` instance.
         *
         * @method splunkjs.Service.Entity
         */init:function(service,path,namespace){cov_1nf65u3g4c().f[42]++;cov_1nf65u3g4c().s[143]++;this._super(service,path,namespace);// We perform the bindings so that every function works 
// properly when it is passed as a callback.
cov_1nf65u3g4c().s[144]++;this._load=utils.bind(this,this._load);cov_1nf65u3g4c().s[145]++;this.fetch=utils.bind(this,this.fetch);cov_1nf65u3g4c().s[146]++;this.remove=utils.bind(this,this.remove);cov_1nf65u3g4c().s[147]++;this.update=utils.bind(this,this.update);cov_1nf65u3g4c().s[148]++;this.fields=utils.bind(this,this.fields);cov_1nf65u3g4c().s[149]++;this.links=utils.bind(this,this.links);cov_1nf65u3g4c().s[150]++;this.acl=utils.bind(this,this.acl);cov_1nf65u3g4c().s[151]++;this.author=utils.bind(this,this.author);cov_1nf65u3g4c().s[152]++;this.updated=utils.bind(this,this.updated);cov_1nf65u3g4c().s[153]++;this.published=utils.bind(this,this.published);cov_1nf65u3g4c().s[154]++;this.enable=utils.bind(this,this.enable);cov_1nf65u3g4c().s[155]++;this.disable=utils.bind(this,this.disable);cov_1nf65u3g4c().s[156]++;this.reload=utils.bind(this,this.reload);// Initial values
cov_1nf65u3g4c().s[157]++;this._properties={};cov_1nf65u3g4c().s[158]++;this._fields={};cov_1nf65u3g4c().s[159]++;this._acl={};cov_1nf65u3g4c().s[160]++;this._links={};},/**
         * Loads the entity and stores the properties.
         *
         * @param {Object} properties The properties for this entity.
         *
         * @method splunkjs.Service.Entity
         * @protected
         */_load:function(properties){cov_1nf65u3g4c().f[43]++;cov_1nf65u3g4c().s[161]++;properties=utils.isArray(properties)?(cov_1nf65u3g4c().b[36][0]++,properties[0]):(cov_1nf65u3g4c().b[36][1]++,properties);// Initialize the properties to
// empty values
cov_1nf65u3g4c().s[162]++;properties=(cov_1nf65u3g4c().b[37][0]++,properties)||(cov_1nf65u3g4c().b[37][1]++,{content:{},fields:{},acl:{},links:{}});cov_1nf65u3g4c().s[163]++;this._super(properties);// Take out the entity-specific content
cov_1nf65u3g4c().s[164]++;this._properties=(cov_1nf65u3g4c().b[38][0]++,properties.content)||(cov_1nf65u3g4c().b[38][1]++,{});cov_1nf65u3g4c().s[165]++;this._fields=(cov_1nf65u3g4c().b[39][0]++,properties.fields)||(cov_1nf65u3g4c().b[39][1]++,this._fields)||(cov_1nf65u3g4c().b[39][2]++,{});cov_1nf65u3g4c().s[166]++;this._acl=(cov_1nf65u3g4c().b[40][0]++,properties.acl)||(cov_1nf65u3g4c().b[40][1]++,{});cov_1nf65u3g4c().s[167]++;this._links=(cov_1nf65u3g4c().b[41][0]++,properties.links)||(cov_1nf65u3g4c().b[41][1]++,{});cov_1nf65u3g4c().s[168]++;this._author=(cov_1nf65u3g4c().b[42][0]++,properties.author)||(cov_1nf65u3g4c().b[42][1]++,null);cov_1nf65u3g4c().s[169]++;this._updated=(cov_1nf65u3g4c().b[43][0]++,properties.updated)||(cov_1nf65u3g4c().b[43][1]++,null);cov_1nf65u3g4c().s[170]++;this._published=(cov_1nf65u3g4c().b[44][0]++,properties.published)||(cov_1nf65u3g4c().b[44][1]++,null);},/**
         * Retrieves the fields information for this entity, indicating which 
         * fields are wildcards, required, and optional.
         *
         * @return {Object} The fields information.
         *
         * @method splunkjs.Service.Entity
         */fields:function(){cov_1nf65u3g4c().f[44]++;cov_1nf65u3g4c().s[171]++;return this._fields;},/**
         * Retrieves the access control list (ACL) information for this entity,
         * which contains the permissions for accessing the entity.
         *
         * @return {Object} The ACL.
         *
         * @method splunkjs.Service.Entity
         */acl:function(){cov_1nf65u3g4c().f[45]++;cov_1nf65u3g4c().s[172]++;return this._acl;},/**
         * Retrieves the links information for this entity, which is the URI of
         * the entity relative to the management port of a Splunk instance.
         *
         * @return {Object} The links information.
         *
         * @method splunkjs.Service.Entity
         */links:function(){cov_1nf65u3g4c().f[46]++;cov_1nf65u3g4c().s[173]++;return this._links;},/**
         * Retrieves the author information for this entity.
         *
         * @return {String} The author.
         *
         * @method splunkjs.Service.Entity
         */author:function(){cov_1nf65u3g4c().f[47]++;cov_1nf65u3g4c().s[174]++;return this._author;},/**
         * Retrieves the updated time for this entity.
         *
         * @return {String} The updated time.
         *
         * @method splunkjs.Service.Entity
         */updated:function(){cov_1nf65u3g4c().f[48]++;cov_1nf65u3g4c().s[175]++;return this._updated;},/**
         * Retrieves the published time for this entity.
         *
         * @return {String} The published time.
         *
         * @method splunkjs.Service.Entity
         */published:function(){cov_1nf65u3g4c().f[49]++;cov_1nf65u3g4c().s[176]++;return this._published;},/**
         * Refreshes the entity by fetching the object from the server and 
         * loading it.
         *
         * @param {Object} options An optional dictionary of collection filtering and pagination options:
         *    - `count` (_integer_): The maximum number of items to return.
         *    - `offset` (_integer_): The offset of the first item to return.
         *    - `search` (_string_): The search query to filter responses.
         *    - `sort_dir` (_string_): The direction to sort returned items: “asc” or “desc”.
         *    - `sort_key` (_string_): The field to use for sorting (optional).
         *    - `sort_mode` (_string_): The collating sequence for sorting returned items: “auto”, “alpha”, “alpha_case”, or “num”.
         * @param {Function} callback A function to call when the object is retrieved: `(err, resource)`.
         *
         * @method splunkjs.Service.Entity
         */fetch:function(options,callback){cov_1nf65u3g4c().f[50]++;cov_1nf65u3g4c().s[177]++;if((cov_1nf65u3g4c().b[46][0]++,!callback)&&(cov_1nf65u3g4c().b[46][1]++,utils.isFunction(options))){cov_1nf65u3g4c().b[45][0]++;cov_1nf65u3g4c().s[178]++;callback=options;cov_1nf65u3g4c().s[179]++;options={};}else{cov_1nf65u3g4c().b[45][1]++;}cov_1nf65u3g4c().s[180]++;callback=(cov_1nf65u3g4c().b[47][0]++,callback)||(cov_1nf65u3g4c().b[47][1]++,function(){cov_1nf65u3g4c().f[51]++;});cov_1nf65u3g4c().s[181]++;options=(cov_1nf65u3g4c().b[48][0]++,options)||(cov_1nf65u3g4c().b[48][1]++,{});var that=(cov_1nf65u3g4c().s[182]++,this);cov_1nf65u3g4c().s[183]++;return this.get("",options,function(err,response){cov_1nf65u3g4c().f[52]++;cov_1nf65u3g4c().s[184]++;if(err){cov_1nf65u3g4c().b[49][0]++;cov_1nf65u3g4c().s[185]++;callback(err);}else{cov_1nf65u3g4c().b[49][1]++;cov_1nf65u3g4c().s[186]++;that._load(response.data?(cov_1nf65u3g4c().b[50][0]++,response.data.entry):(cov_1nf65u3g4c().b[50][1]++,null));cov_1nf65u3g4c().s[187]++;callback(null,that);}});},/**
         * Deletes the entity from the server.
         *
         * @param {Function} callback A function to call when the object is deleted: `(err)`.
         *
         * @method splunkjs.Service.Entity
         * @protected
         */remove:function(callback){cov_1nf65u3g4c().f[53]++;cov_1nf65u3g4c().s[188]++;callback=(cov_1nf65u3g4c().b[51][0]++,callback)||(cov_1nf65u3g4c().b[51][1]++,function(){cov_1nf65u3g4c().f[54]++;});var that=(cov_1nf65u3g4c().s[189]++,this);cov_1nf65u3g4c().s[190]++;return this.del("",{},function(err){cov_1nf65u3g4c().f[55]++;cov_1nf65u3g4c().s[191]++;callback(err);});},/**
         * Updates the entity on the server.
         *
         * @param {Object} props The properties to update the object with.
         * @param {Function} callback A function to call when the object is updated: `(err, entity)`.
         *
         * @method splunkjs.Service.Entity
         * @protected
         */update:function(props,callback){cov_1nf65u3g4c().f[56]++;cov_1nf65u3g4c().s[192]++;callback=(cov_1nf65u3g4c().b[52][0]++,callback)||(cov_1nf65u3g4c().b[52][1]++,function(){cov_1nf65u3g4c().f[57]++;});cov_1nf65u3g4c().s[193]++;if(props.hasOwnProperty("name")){cov_1nf65u3g4c().b[53][0]++;cov_1nf65u3g4c().s[194]++;throw new Error("Cannot set 'name' field in 'update'");}else{cov_1nf65u3g4c().b[53][1]++;}var that=(cov_1nf65u3g4c().s[195]++,this);var req=(cov_1nf65u3g4c().s[196]++,this.post("",props,function(err,response){cov_1nf65u3g4c().f[58]++;cov_1nf65u3g4c().s[197]++;if((cov_1nf65u3g4c().b[55][0]++,!err)&&(cov_1nf65u3g4c().b[55][1]++,!that.fetchOnUpdate)){cov_1nf65u3g4c().b[54][0]++;cov_1nf65u3g4c().s[198]++;that._load(response.data.entry);cov_1nf65u3g4c().s[199]++;callback(err,that);}else{cov_1nf65u3g4c().b[54][1]++;cov_1nf65u3g4c().s[200]++;if((cov_1nf65u3g4c().b[57][0]++,!err)&&(cov_1nf65u3g4c().b[57][1]++,that.fetchOnUpdate)){cov_1nf65u3g4c().b[56][0]++;cov_1nf65u3g4c().s[201]++;that.fetch(function(){cov_1nf65u3g4c().f[59]++;cov_1nf65u3g4c().s[202]++;if(req.wasAborted){cov_1nf65u3g4c().b[58][0]++;cov_1nf65u3g4c().s[203]++;return;// aborted, so ignore
}else{cov_1nf65u3g4c().b[58][1]++;cov_1nf65u3g4c().s[204]++;callback.apply(null,arguments);}});}else{cov_1nf65u3g4c().b[56][1]++;cov_1nf65u3g4c().s[205]++;callback(err,that);}}}));cov_1nf65u3g4c().s[206]++;return req;},/**
         * Disables the entity on the server.
         *
         * @param {Function} callback A function to call when the object is disabled: `(err, entity)`.
         *
         * @method splunkjs.Service.Entity
         * @protected
         */disable:function(callback){cov_1nf65u3g4c().f[60]++;cov_1nf65u3g4c().s[207]++;callback=(cov_1nf65u3g4c().b[59][0]++,callback)||(cov_1nf65u3g4c().b[59][1]++,function(){cov_1nf65u3g4c().f[61]++;});var that=(cov_1nf65u3g4c().s[208]++,this);cov_1nf65u3g4c().s[209]++;this.post("disable",{},function(err,response){cov_1nf65u3g4c().f[62]++;cov_1nf65u3g4c().s[210]++;if(err){cov_1nf65u3g4c().b[60][0]++;cov_1nf65u3g4c().s[211]++;callback(err);}else{cov_1nf65u3g4c().b[60][1]++;cov_1nf65u3g4c().s[212]++;callback(null,that);}});},/**
         * Enables the entity on the server.
         *
         * @param {Function} callback A function to call when the object is enabled: `(err, entity)`.
         *
         * @method splunkjs.Service.Entity
         * @protected
         */enable:function(callback){cov_1nf65u3g4c().f[63]++;cov_1nf65u3g4c().s[213]++;callback=(cov_1nf65u3g4c().b[61][0]++,callback)||(cov_1nf65u3g4c().b[61][1]++,function(){cov_1nf65u3g4c().f[64]++;});var that=(cov_1nf65u3g4c().s[214]++,this);cov_1nf65u3g4c().s[215]++;this.post("enable",{},function(err,response){cov_1nf65u3g4c().f[65]++;cov_1nf65u3g4c().s[216]++;if(err){cov_1nf65u3g4c().b[62][0]++;cov_1nf65u3g4c().s[217]++;callback(err);}else{cov_1nf65u3g4c().b[62][1]++;cov_1nf65u3g4c().s[218]++;callback(null,that);}});},/**
         * Reloads the entity on the server.
         *
         * @param {Function} callback A function to call when the object is reloaded: `(err, entity)`.
         *
         * @method splunkjs.Service.Entity
         * @protected
         */reload:function(callback){cov_1nf65u3g4c().f[66]++;cov_1nf65u3g4c().s[219]++;callback=(cov_1nf65u3g4c().b[63][0]++,callback)||(cov_1nf65u3g4c().b[63][1]++,function(){cov_1nf65u3g4c().f[67]++;});var that=(cov_1nf65u3g4c().s[220]++,this);cov_1nf65u3g4c().s[221]++;this.post("_reload",{},function(err,response){cov_1nf65u3g4c().f[68]++;cov_1nf65u3g4c().s[222]++;if(err){cov_1nf65u3g4c().b[64][0]++;cov_1nf65u3g4c().s[223]++;callback(err);}else{cov_1nf65u3g4c().b[64][1]++;cov_1nf65u3g4c().s[224]++;callback(null,that);}});}});/**
     * Defines a base class for a Splunk collection, which is a well-defined construct
     * that provides basic methods for working with collections of entities, such as 
     * creating and listing entities.
     *
     * @class splunkjs.Service.Collection
     * @extends splunkjs.Service.Resource
     */cov_1nf65u3g4c().s[225]++;root.Collection=root.Resource.extend({/**
         * A static property that indicates whether to call `fetch` after an 
         * entity has been created. By default, the entity is not fetched 
         * because the endpoint returns (echoes) the new entity.

         * @method splunkjs.Service.Collection
         */fetchOnEntityCreation:false,/**
         * Constructor for `splunkjs.Service.Collection`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} path A relative endpoint path (for example, "search/jobs").
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Collection} A new `splunkjs.Service.Collection` instance.
         *
         * @method splunkjs.Service.Collection
         */init:function(service,path,namespace){cov_1nf65u3g4c().f[69]++;cov_1nf65u3g4c().s[226]++;this._super(service,path,namespace);// We perform the bindings so that every function works 
// properly when it is passed as a callback.
cov_1nf65u3g4c().s[227]++;this._load=utils.bind(this,this._load);cov_1nf65u3g4c().s[228]++;this.fetch=utils.bind(this,this.fetch);cov_1nf65u3g4c().s[229]++;this.create=utils.bind(this,this.create);cov_1nf65u3g4c().s[230]++;this.createAsync=utils.bind(this,this.createAsync);cov_1nf65u3g4c().s[231]++;this.list=utils.bind(this,this.list);cov_1nf65u3g4c().s[232]++;this.item=utils.bind(this,this.item);cov_1nf65u3g4c().s[233]++;this.instantiateEntity=utils.bind(this,this.instantiateEntity);// Initial values
cov_1nf65u3g4c().s[234]++;this._entities=[];cov_1nf65u3g4c().s[235]++;this._entitiesByName={};cov_1nf65u3g4c().s[236]++;this._properties={};cov_1nf65u3g4c().s[237]++;this._paging={};cov_1nf65u3g4c().s[238]++;this._links={};},/**
         * Creates a local instance of an entity. 
         *
         * @param {Object} props The properties for this entity.
         * @return {splunkjs.Service.Entity} A new `splunkjs.Service.Entity` instance.
         *
         * @method splunkjs.Service.Collection
         */instantiateEntity:function(props){cov_1nf65u3g4c().f[70]++;cov_1nf65u3g4c().s[239]++;throw new Error("MUST BE OVERRIDDEN");},/**
         * Loads the collection and properties, and creates a map of entity
         * names to entity IDs (for retrieval purposes).
         *
         * @param {Object} properties The properties for this collection.
         *
         * @method splunkjs.Service.Collection
         * @private
         */_load:function(properties){cov_1nf65u3g4c().f[71]++;cov_1nf65u3g4c().s[240]++;this._super(properties);var entities=(cov_1nf65u3g4c().s[241]++,[]);var entitiesByName=(cov_1nf65u3g4c().s[242]++,{});var entityPropertyList=(cov_1nf65u3g4c().s[243]++,(cov_1nf65u3g4c().b[65][0]++,properties.entry)||(cov_1nf65u3g4c().b[65][1]++,[]));cov_1nf65u3g4c().s[244]++;for(var i=(cov_1nf65u3g4c().s[245]++,0);i<entityPropertyList.length;i++){var props=(cov_1nf65u3g4c().s[246]++,entityPropertyList[i]);var entity=(cov_1nf65u3g4c().s[247]++,this.instantiateEntity(props));cov_1nf65u3g4c().s[248]++;entity._load(props);cov_1nf65u3g4c().s[249]++;entities.push(entity);cov_1nf65u3g4c().s[250]++;if(entitiesByName.hasOwnProperty(entity.name)){cov_1nf65u3g4c().b[66][0]++;cov_1nf65u3g4c().s[251]++;entitiesByName[entity.name].push(entity);}else{cov_1nf65u3g4c().b[66][1]++;cov_1nf65u3g4c().s[252]++;entitiesByName[entity.name]=[entity];}}cov_1nf65u3g4c().s[253]++;this._entities=entities;cov_1nf65u3g4c().s[254]++;this._entitiesByName=entitiesByName;cov_1nf65u3g4c().s[255]++;this._paging=(cov_1nf65u3g4c().b[67][0]++,properties.paging)||(cov_1nf65u3g4c().b[67][1]++,{});cov_1nf65u3g4c().s[256]++;this._links=(cov_1nf65u3g4c().b[68][0]++,properties.links)||(cov_1nf65u3g4c().b[68][1]++,{});cov_1nf65u3g4c().s[257]++;this._updated=(cov_1nf65u3g4c().b[69][0]++,properties.updated)||(cov_1nf65u3g4c().b[69][1]++,null);},/**
         * Retrieves the links information for this collection, which is the URI of
         * the resource relative to the management port of a Splunk instance.
         *
         * @return {Object} The links information.
         *
         * @method splunkjs.Service.Collection
         */links:function(){cov_1nf65u3g4c().f[72]++;cov_1nf65u3g4c().s[258]++;return this._links;},/**
         * Retrieves the author information for this collection.
         *
         * @return {String} The author.
         *
         * @method splunkjs.Service.Collection
         */paging:function(){cov_1nf65u3g4c().f[73]++;cov_1nf65u3g4c().s[259]++;return this._paging;},/**
         * Retrieves the updated time for this collection.
         *
         * @return {String} The updated time.
         *
         * @method splunkjs.Service.Collection
         */updated:function(){cov_1nf65u3g4c().f[74]++;cov_1nf65u3g4c().s[260]++;return this._updated;},/**
         * Refreshes the resource by fetching the object from the server and 
         * loading it.
         *
         * @param {Object} options A dictionary of collection filtering and pagination options:
         *    - `count` (_integer_): The maximum number of items to return.
         *    - `offset` (_integer_): The offset of the first item to return.
         *    - `search` (_string_): The search query to filter responses.
         *    - `sort_dir` (_string_): The direction to sort returned items: “asc” or “desc”.
         *    - `sort_key` (_string_): The field to use for sorting (optional).
         *    - `sort_mode` (_string_): The collating sequence for sorting returned items: “auto”, “alpha”, “alpha_case”, or “num”.
         * @param {Function} callback A function to call when the object is retrieved: `(err, resource)`.
         *
         * @method splunkjs.Service.Collection
         */fetch:function(options,callback){cov_1nf65u3g4c().f[75]++;cov_1nf65u3g4c().s[261]++;if((cov_1nf65u3g4c().b[71][0]++,!callback)&&(cov_1nf65u3g4c().b[71][1]++,utils.isFunction(options))){cov_1nf65u3g4c().b[70][0]++;cov_1nf65u3g4c().s[262]++;callback=options;cov_1nf65u3g4c().s[263]++;options={};}else{cov_1nf65u3g4c().b[70][1]++;}cov_1nf65u3g4c().s[264]++;callback=(cov_1nf65u3g4c().b[72][0]++,callback)||(cov_1nf65u3g4c().b[72][1]++,function(){cov_1nf65u3g4c().f[76]++;});cov_1nf65u3g4c().s[265]++;options=(cov_1nf65u3g4c().b[73][0]++,options)||(cov_1nf65u3g4c().b[73][1]++,{});cov_1nf65u3g4c().s[266]++;if(!options.count){cov_1nf65u3g4c().b[74][0]++;cov_1nf65u3g4c().s[267]++;options.count=0;}else{cov_1nf65u3g4c().b[74][1]++;}var that=(cov_1nf65u3g4c().s[268]++,this);var req=(cov_1nf65u3g4c().s[269]++,that.get("",options,function(err,response){cov_1nf65u3g4c().f[77]++;cov_1nf65u3g4c().s[270]++;if(err){cov_1nf65u3g4c().b[75][0]++;cov_1nf65u3g4c().s[271]++;callback(err);}else{cov_1nf65u3g4c().b[75][1]++;cov_1nf65u3g4c().s[272]++;that._load(response.data);cov_1nf65u3g4c().s[273]++;callback(null,that);}}));cov_1nf65u3g4c().s[274]++;return req;},/**
         * It's an asynchronous version of fetch(options, callback) function.
         * 
         * Refreshes the resource by fetching the object from the server and 
         * loading it.
         *
         * @param {Object} options A dictionary of collection filtering and pagination options:
         *    - `count` (_integer_): The maximum number of items to return.
         *    - `offset` (_integer_): The offset of the first item to return.
         *    - `search` (_string_): The search query to filter responses.
         *    - `sort_dir` (_string_): The direction to sort returned items: “asc” or “desc”.
         *    - `sort_key` (_string_): The field to use for sorting (optional).
         *    - `sort_mode` (_string_): The collating sequence for sorting returned items: “auto”, “alpha”, “alpha_case”, or “num”.
         *
         * @method splunkjs.Service.Collection
         */fetchAsync:async function(options){cov_1nf65u3g4c().f[78]++;cov_1nf65u3g4c().s[275]++;options=(cov_1nf65u3g4c().b[76][0]++,options)||(cov_1nf65u3g4c().b[76][1]++,{});cov_1nf65u3g4c().s[276]++;if(!options.count){cov_1nf65u3g4c().b[77][0]++;cov_1nf65u3g4c().s[277]++;options.count=0;}else{cov_1nf65u3g4c().b[77][1]++;}var that=(cov_1nf65u3g4c().s[278]++,this);var response=(cov_1nf65u3g4c().s[279]++,await that.get("",options,null,true));cov_1nf65u3g4c().s[280]++;that._load(response.body);cov_1nf65u3g4c().s[281]++;return that;},/**
         * Returns a specific entity from the collection.
         *
         * @example
         *
         *      var apps = service.apps();
         *      apps.fetch(function(err, apps) {
         *          var app = apps.item("search");
         *          console.log("Search App Found: " + !!app);
         *          // `app` is an Application object.
         *      });
         *
         * @param {String} id The name of the entity to retrieve.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The wildcard value "-", is not acceptable when searching for an entity.
         *    - `app` (_string_): The app context for this resource (such as "search"). The wildcard value "-" is unacceptable when searching for an entity.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @returns {splunkjs.Service.Entity} The entity, or `null` if one is not found.
         *
         * @method splunkjs.Service.Collection
         */item:function(id,namespace){cov_1nf65u3g4c().f[79]++;cov_1nf65u3g4c().s[282]++;if(utils.isEmpty(namespace)){cov_1nf65u3g4c().b[78][0]++;cov_1nf65u3g4c().s[283]++;namespace=null;}else{cov_1nf65u3g4c().b[78][1]++;}cov_1nf65u3g4c().s[284]++;if(!id){cov_1nf65u3g4c().b[79][0]++;cov_1nf65u3g4c().s[285]++;throw new Error("Must suply a non-empty name.");}else{cov_1nf65u3g4c().b[79][1]++;}cov_1nf65u3g4c().s[286]++;if((cov_1nf65u3g4c().b[81][0]++,namespace)&&((cov_1nf65u3g4c().b[81][1]++,namespace.app==='-')||(cov_1nf65u3g4c().b[81][2]++,namespace.owner==='-'))){cov_1nf65u3g4c().b[80][0]++;cov_1nf65u3g4c().s[287]++;throw new Error("When searching for an entity, wildcards are not allowed in the namespace. Please refine your search.");}else{cov_1nf65u3g4c().b[80][1]++;}var fullPath=(cov_1nf65u3g4c().s[288]++,null);cov_1nf65u3g4c().s[289]++;if(this._entitiesByName.hasOwnProperty(id)){cov_1nf65u3g4c().b[82][0]++;var entities=(cov_1nf65u3g4c().s[290]++,this._entitiesByName[id]);cov_1nf65u3g4c().s[291]++;if((cov_1nf65u3g4c().b[84][0]++,entities.length===1)&&(cov_1nf65u3g4c().b[84][1]++,!namespace)){cov_1nf65u3g4c().b[83][0]++;cov_1nf65u3g4c().s[292]++;// If there is only one entity with the
// specified name and the user did not
// specify a namespace, then we just
// return it
return entities[0];}else{cov_1nf65u3g4c().b[83][1]++;cov_1nf65u3g4c().s[293]++;if((cov_1nf65u3g4c().b[86][0]++,entities.length===1)&&(cov_1nf65u3g4c().b[86][1]++,namespace)){cov_1nf65u3g4c().b[85][0]++;cov_1nf65u3g4c().s[294]++;// If we specified a namespace, then we 
// only return the entity if it matches
// the full path
fullPath=this.service.fullpath(entities[0].path(),namespace);cov_1nf65u3g4c().s[295]++;if(entities[0].qualifiedPath===fullPath){cov_1nf65u3g4c().b[87][0]++;cov_1nf65u3g4c().s[296]++;return entities[0];}else{cov_1nf65u3g4c().b[87][1]++;cov_1nf65u3g4c().s[297]++;return null;}}else{cov_1nf65u3g4c().b[85][1]++;cov_1nf65u3g4c().s[298]++;if((cov_1nf65u3g4c().b[89][0]++,entities.length>1)&&(cov_1nf65u3g4c().b[89][1]++,!namespace)){cov_1nf65u3g4c().b[88][0]++;cov_1nf65u3g4c().s[299]++;// If there is more than one entity and we didn't
// specify a namespace, then we return an error
// saying the match is ambiguous
throw new Error("Ambiguous match for name '"+id+"'");}else{cov_1nf65u3g4c().b[88][1]++;cov_1nf65u3g4c().s[300]++;// There is more than one entity, and we do have
// a namespace, so we try and find it
for(var i=(cov_1nf65u3g4c().s[301]++,0);i<entities.length;i++){var entity=(cov_1nf65u3g4c().s[302]++,entities[i]);cov_1nf65u3g4c().s[303]++;fullPath=this.service.fullpath(entities[i].path(),namespace);cov_1nf65u3g4c().s[304]++;if(entity.qualifiedPath===fullPath){cov_1nf65u3g4c().b[90][0]++;cov_1nf65u3g4c().s[305]++;return entity;}else{cov_1nf65u3g4c().b[90][1]++;}}}}}}else{cov_1nf65u3g4c().b[82][1]++;cov_1nf65u3g4c().s[306]++;return null;}},/**
         * Creates an entity on the server for this collection with the specified
         * parameters.
         *
         * @example
         *
         *      var apps = service.apps();
         *      apps.create({name: "NewSearchApp"}, function(err, newApp) {
         *          console.log("CREATED");
         *      });
         *
         * @param {Object} params A dictionary of entity-specific properties.
         * @param {Function} callback The function to call when the request is complete: `(err, response)`.
         * @returns {Array} An array of `splunkjs.Service.Entity` objects.
         *
         * @method splunkjs.Service.Collection
         */create:function(params,callback){cov_1nf65u3g4c().f[80]++;cov_1nf65u3g4c().s[307]++;callback=(cov_1nf65u3g4c().b[91][0]++,callback)||(cov_1nf65u3g4c().b[91][1]++,function(){cov_1nf65u3g4c().f[81]++;});var that=(cov_1nf65u3g4c().s[308]++,this);var req=(cov_1nf65u3g4c().s[309]++,this.post("",params,function(err,response){cov_1nf65u3g4c().f[82]++;cov_1nf65u3g4c().s[310]++;if(err){cov_1nf65u3g4c().b[92][0]++;cov_1nf65u3g4c().s[311]++;callback(err);}else{cov_1nf65u3g4c().b[92][1]++;var props=(cov_1nf65u3g4c().s[312]++,response.data.entry);cov_1nf65u3g4c().s[313]++;if(utils.isArray(props)){cov_1nf65u3g4c().b[93][0]++;cov_1nf65u3g4c().s[314]++;props=props[0];}else{cov_1nf65u3g4c().b[93][1]++;}var entity=(cov_1nf65u3g4c().s[315]++,that.instantiateEntity(props));cov_1nf65u3g4c().s[316]++;entity._load(props);cov_1nf65u3g4c().s[317]++;if(that.fetchOnEntityCreation){cov_1nf65u3g4c().b[94][0]++;cov_1nf65u3g4c().s[318]++;entity.fetch(function(){cov_1nf65u3g4c().f[83]++;cov_1nf65u3g4c().s[319]++;if(req.wasAborted){cov_1nf65u3g4c().b[95][0]++;cov_1nf65u3g4c().s[320]++;return;// aborted, so ignore
}else{cov_1nf65u3g4c().b[95][1]++;cov_1nf65u3g4c().s[321]++;callback.apply(null,arguments);}});}else{cov_1nf65u3g4c().b[94][1]++;cov_1nf65u3g4c().s[322]++;callback(null,entity);}}}));cov_1nf65u3g4c().s[323]++;return req;},/**
         * Retrieves a list of all entities in the collection.
         *
         * @example
         *
         *      var apps = service.apps();
         *      apps.fetch(function(err, apps) {
         *          var appList = apps.list();
         *          console.log(appList.length);
         *      });
         *
         * @param {Function} callback A function to call with the list of entities: `(err, list)`.
         *
         * @method splunkjs.Service.Collection
         */list:function(callback){cov_1nf65u3g4c().f[84]++;cov_1nf65u3g4c().s[324]++;callback=(cov_1nf65u3g4c().b[96][0]++,callback)||(cov_1nf65u3g4c().b[96][1]++,function(){cov_1nf65u3g4c().f[85]++;});cov_1nf65u3g4c().s[325]++;return utils.clone(this._entities);}});/**
     * Represents a specific saved search, which you can then view, modify, and
     * remove.
     *
     * @endpoint saved/searches/{name}
     * @class splunkjs.Service.SavedSearch
     * @extends splunkjs.Service.Entity
     */cov_1nf65u3g4c().s[326]++;root.SavedSearch=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.SavedSearch
         */path:function(){cov_1nf65u3g4c().f[86]++;cov_1nf65u3g4c().s[327]++;return Paths.savedSearches+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.SavedSearch`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name for the new saved search.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.SavedSearch} A new `splunkjs.Service.SavedSearch` instance.
         *
         * @method splunkjs.Service.SavedSearch
         */init:function(service,name,namespace){cov_1nf65u3g4c().f[87]++;cov_1nf65u3g4c().s[328]++;this.name=name;cov_1nf65u3g4c().s[329]++;this._super(service,this.path(),namespace);cov_1nf65u3g4c().s[330]++;this.acknowledge=utils.bind(this,this.acknowledge);cov_1nf65u3g4c().s[331]++;this.dispatch=utils.bind(this,this.dispatch);cov_1nf65u3g4c().s[332]++;this.history=utils.bind(this,this.history);cov_1nf65u3g4c().s[333]++;this.suppressInfo=utils.bind(this,this.suppressInfo);},/**
         * Gets the count of triggered alerts for this savedSearch,
         * defaulting to 0 when undefined.
         *
         * @example
         *
         *      var savedSearch = service.savedSearches().item("MySavedSearch");
         *      var alertCount = savedSearch.alertCount();
         * 
         * @return {Number} The count of triggered alerts.
         *
         * @method splunkjs.Service.SavedSearch
         */alertCount:function(){cov_1nf65u3g4c().f[88]++;cov_1nf65u3g4c().s[334]++;return(cov_1nf65u3g4c().b[97][0]++,parseInt(this.properties().triggered_alert_count,10))||(cov_1nf65u3g4c().b[97][1]++,0);},/**
         * Acknowledges the suppression of the alerts from a saved search and
         * resumes alerting.
         *
         * @example
         *
         *      var savedSearch = service.savedSearches().item("MySavedSearch");
         *      savedSearch.acknowledge(function(err, search) {
         *          console.log("ACKNOWLEDGED");
         *      });
         *
         * @param {Function} callback A function to call when the saved search is acknowledged: `(err, savedSearch)`.
         *
         * @endpoint saved/searches/{name}/acknowledge
         * @method splunkjs.Service.SavedSearch
         */acknowledge:function(callback){cov_1nf65u3g4c().f[89]++;cov_1nf65u3g4c().s[335]++;callback=(cov_1nf65u3g4c().b[98][0]++,callback)||(cov_1nf65u3g4c().b[98][1]++,function(){cov_1nf65u3g4c().f[90]++;});var that=(cov_1nf65u3g4c().s[336]++,this);var req=(cov_1nf65u3g4c().s[337]++,this.post("acknowledge",{},function(err){cov_1nf65u3g4c().f[91]++;cov_1nf65u3g4c().s[338]++;callback(err,that);}));cov_1nf65u3g4c().s[339]++;return req;},/**
         * Dispatches a saved search, which creates a search job and returns a 
         * `splunkjs.Service.Job` instance in the callback function.
         *
         * @example
         *
         *      var savedSearch = service.savedSearches().item("MySavedSearch");
         *      savedSearch.dispatch({force_dispatch: false}, function(err, job, savedSearch) {
         *          console.log("Job SID: ", job.sid);
         *      });
         *
         * @param {Object} options The options for dispatching this saved search:
         *    - `dispatch.now` (_string_): The time that is used to dispatch the search as though the specified time were the current time.
         *    - `dispatch.*` (_string_): Overwrites the value of the search field specified in *.
         *    - `trigger_actions` (_boolean_): Indicates whether to trigger alert actions.
         *    - `force_dispatch` (_boolean_): Indicates whether to start a new search if another instance of this search is already running.
         * @param {Function} callback A function to call when the saved search is dispatched: `(err, job, savedSearch)`.
         *
         * @endpoint saved/searches/{name}/dispatch
         * @method splunkjs.Service.SavedSearch
         */dispatch:function(options,callback){cov_1nf65u3g4c().f[92]++;cov_1nf65u3g4c().s[340]++;if((cov_1nf65u3g4c().b[100][0]++,!callback)&&(cov_1nf65u3g4c().b[100][1]++,utils.isFunction(options))){cov_1nf65u3g4c().b[99][0]++;cov_1nf65u3g4c().s[341]++;callback=options;cov_1nf65u3g4c().s[342]++;options={};}else{cov_1nf65u3g4c().b[99][1]++;}cov_1nf65u3g4c().s[343]++;callback=(cov_1nf65u3g4c().b[101][0]++,callback)||(cov_1nf65u3g4c().b[101][1]++,function(){cov_1nf65u3g4c().f[93]++;});cov_1nf65u3g4c().s[344]++;options=(cov_1nf65u3g4c().b[102][0]++,options)||(cov_1nf65u3g4c().b[102][1]++,{});var that=(cov_1nf65u3g4c().s[345]++,this);var req=(cov_1nf65u3g4c().s[346]++,this.post("dispatch",options,function(err,response){cov_1nf65u3g4c().f[94]++;cov_1nf65u3g4c().s[347]++;if(err){cov_1nf65u3g4c().b[103][0]++;cov_1nf65u3g4c().s[348]++;callback(err);cov_1nf65u3g4c().s[349]++;return;}else{cov_1nf65u3g4c().b[103][1]++;}var sid=(cov_1nf65u3g4c().s[350]++,response.data.sid);var job=(cov_1nf65u3g4c().s[351]++,new root.Job(that.service,sid,that.namespace));cov_1nf65u3g4c().s[352]++;callback(null,job,that);}));cov_1nf65u3g4c().s[353]++;return req;},/** 
         * Gets the `splunkjs.Service.FiredAlertGroup` for firedAlerts associated with this saved search.
         *
         * @example
         *
         *      var alerts = service.firedAlertGroups().item("MySavedSearch");
         *
         * @return {splunkjs.Service.FiredAlertGroup} An AlertGroup object with the
         * same name as this SavedSearch object.
         *
         * @method splunkjs.Service.SavedSearch
         */firedAlertGroup:function(){cov_1nf65u3g4c().f[95]++;cov_1nf65u3g4c().s[354]++;return new root.FiredAlertGroup(this.service,this.name);},/**
         * Retrieves the job history for a saved search, which is a list of 
         * `splunkjs.Service.Job` instances.
         *
         * @example
         *
         *      var savedSearch = service.savedSearches().item("MySavedSearch");
         *      savedSearch.history({count: 10}, function(err, jobs, search) {
         *          for(var i = 0; i < jobs.length; i++) {
         *              console.log("Job", i, ":", jobs[i].sid);
         *          }
         *      });
         *
         * @param {Object} options Options for retrieving history. For a full list, see the <a href="https://docs.splunk.com/Documentation/Splunk/8.0.2/RESTREF/RESTprolog#Pagination_and_filtering_parameters" target="_blank">Pagination and Filtering options</a> in the REST API documentation.
         * @param {Function} callback A function to call when the history is retrieved: `(err, job, savedSearch)`.
         *
         * @endpoint saved/searches/{name}/history
         * @method splunkjs.Service.SavedSearch
         */history:function(options,callback){cov_1nf65u3g4c().f[96]++;cov_1nf65u3g4c().s[355]++;if((cov_1nf65u3g4c().b[105][0]++,!callback)&&(cov_1nf65u3g4c().b[105][1]++,utils.isFunction(options))){cov_1nf65u3g4c().b[104][0]++;cov_1nf65u3g4c().s[356]++;callback=options;cov_1nf65u3g4c().s[357]++;options={};}else{cov_1nf65u3g4c().b[104][1]++;}cov_1nf65u3g4c().s[358]++;callback=(cov_1nf65u3g4c().b[106][0]++,callback)||(cov_1nf65u3g4c().b[106][1]++,function(){cov_1nf65u3g4c().f[97]++;});cov_1nf65u3g4c().s[359]++;options=(cov_1nf65u3g4c().b[107][0]++,options)||(cov_1nf65u3g4c().b[107][1]++,{});var that=(cov_1nf65u3g4c().s[360]++,this);cov_1nf65u3g4c().s[361]++;return this.get("history",options,function(err,response){cov_1nf65u3g4c().f[98]++;cov_1nf65u3g4c().s[362]++;if(err){cov_1nf65u3g4c().b[108][0]++;cov_1nf65u3g4c().s[363]++;callback(err);cov_1nf65u3g4c().s[364]++;return;}else{cov_1nf65u3g4c().b[108][1]++;}var jobs=(cov_1nf65u3g4c().s[365]++,[]);var data=(cov_1nf65u3g4c().s[366]++,(cov_1nf65u3g4c().b[109][0]++,response.data.entry)||(cov_1nf65u3g4c().b[109][1]++,[]));cov_1nf65u3g4c().s[367]++;for(var i=(cov_1nf65u3g4c().s[368]++,0);i<data.length;i++){var jobData=(cov_1nf65u3g4c().s[369]++,response.data.entry[i]);var namespace=(cov_1nf65u3g4c().s[370]++,utils.namespaceFromProperties(jobData));var job=(cov_1nf65u3g4c().s[371]++,new root.Job(that.service,jobData.name,namespace));cov_1nf65u3g4c().s[372]++;job._load(jobData);cov_1nf65u3g4c().s[373]++;jobs.push(job);}cov_1nf65u3g4c().s[374]++;callback(null,jobs,that);});},/**
         * Retrieves the suppression state of a saved search.
         *
         * @example
         *
         *      var savedSearch = service.savedSearches().item("MySavedSearch");
         *      savedSearch.history(function(err, suppressionState, search) {
         *          console.log("STATE: ", suppressionState);
         *      });
         *
         * @param {Function} callback A function to call when the suppression state is retrieved: `(err, suppressionState, savedSearch)`.
         *
         * @endpoint saved/searches/{name}/suppress
         * @method splunkjs.Service.SavedSearch
         */suppressInfo:function(callback){cov_1nf65u3g4c().f[99]++;cov_1nf65u3g4c().s[375]++;callback=(cov_1nf65u3g4c().b[110][0]++,callback)||(cov_1nf65u3g4c().b[110][1]++,function(){cov_1nf65u3g4c().f[100]++;});var that=(cov_1nf65u3g4c().s[376]++,this);cov_1nf65u3g4c().s[377]++;return this.get("suppress",{},function(err,response){cov_1nf65u3g4c().f[101]++;cov_1nf65u3g4c().s[378]++;callback(err,response.data.entry.content,that);});},/**
         * Updates the saved search on the server. 
         *
         * **Note:** The search query is required, even when it isn't being modified.
         * If you don't provide it, this method will fetch the search string from
         * the server or from the local cache. 
         *
         * @param {Object} props The properties to update the saved search with. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#savedsearchparams" target="_blank">Saved search parameters</a> on Splunk Developer Portal.
         * @param {Function} callback A function to call when the object is updated: `(err, entity)`.
         *
         * @method splunkjs.Service.SavedSearch
         */update:function(params,callback){cov_1nf65u3g4c().f[102]++;cov_1nf65u3g4c().s[379]++;params=(cov_1nf65u3g4c().b[111][0]++,params)||(cov_1nf65u3g4c().b[111][1]++,{});cov_1nf65u3g4c().s[380]++;if(!params.search){cov_1nf65u3g4c().b[112][0]++;var update=(cov_1nf65u3g4c().s[381]++,this._super);var req=(cov_1nf65u3g4c().s[382]++,this.fetch(function(err,search){cov_1nf65u3g4c().f[103]++;cov_1nf65u3g4c().s[383]++;if(err){cov_1nf65u3g4c().b[113][0]++;cov_1nf65u3g4c().s[384]++;callback(err);}else{cov_1nf65u3g4c().b[113][1]++;cov_1nf65u3g4c().s[385]++;params.search=search.properties().search;cov_1nf65u3g4c().s[386]++;update.call(search,params,function(){cov_1nf65u3g4c().f[104]++;cov_1nf65u3g4c().s[387]++;if(req.wasAborted){cov_1nf65u3g4c().b[114][0]++;cov_1nf65u3g4c().s[388]++;return;// aborted, so ignore
}else{cov_1nf65u3g4c().b[114][1]++;cov_1nf65u3g4c().s[389]++;callback.apply(null,arguments);}});}}));cov_1nf65u3g4c().s[390]++;return req;}else{cov_1nf65u3g4c().b[112][1]++;cov_1nf65u3g4c().s[391]++;return this._super(params,callback);}}});/**
     * Represents a collection of saved searches. You can create and list saved 
     * searches using this collection container, or get a specific saved search.
     *
     *
     * @endpoint saved/searches
     * @class splunkjs.Service.SavedSearches
     * @extends splunkjs.Service.Collection
     */cov_1nf65u3g4c().s[392]++;root.SavedSearches=root.Collection.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.SavedSearches
         */path:function(){cov_1nf65u3g4c().f[105]++;cov_1nf65u3g4c().s[393]++;return Paths.savedSearches;},/**
         * Creates a local instance of a saved search.
         *
         * @param {Object} props The properties for the new saved search. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#savedsearchparams" target="_blank">Saved search parameters</a> on Splunk Developer Portal.
         * @return {splunkjs.Service.SavedSearch} A new `splunkjs.Service.SavedSearch` instance.
         *
         * @method splunkjs.Service.SavedSearches
         */instantiateEntity:function(props){cov_1nf65u3g4c().f[106]++;var entityNamespace=(cov_1nf65u3g4c().s[394]++,utils.namespaceFromProperties(props));cov_1nf65u3g4c().s[395]++;return new root.SavedSearch(this.service,props.name,entityNamespace);},/**
         * Constructor for `splunkjs.Service.SavedSearches`. 
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.SavedSearches} A new `splunkjs.Service.SavedSearches` instance.
         *
         * @method splunkjs.Service.SavedSearches
         */init:function(service,namespace){cov_1nf65u3g4c().f[107]++;cov_1nf65u3g4c().s[396]++;this._super(service,this.path(),namespace);}});/**
     * Represents a specific storage password, which you can then view, modify, and
     * remove.
     *
     * @endpoint storage/passwords/{name}
     * @class splunkjs.Service.StoragePassword
     * @extends splunkjs.Service.Entity
     */cov_1nf65u3g4c().s[397]++;root.StoragePassword=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.StoragePassword
         */path:function(){cov_1nf65u3g4c().f[108]++;cov_1nf65u3g4c().s[398]++;return Paths.storagePasswords+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.StoragePassword`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name for the new storage password.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.StoragePassword} A new `splunkjs.Service.StoragePassword` instance.
         *
         * @method splunkjs.Service.StoragePassword
         */init:function(service,name,namespace){cov_1nf65u3g4c().f[109]++;cov_1nf65u3g4c().s[399]++;this.name=name;cov_1nf65u3g4c().s[400]++;this._super(service,this.path(),namespace);}});/**
     * Represents a collection of storage passwords. You can create and list storage 
     * passwords using this collection container, or get a specific storage password.
     *
     * @endpoint storage/passwords
     * @class splunkjs.Service.StoragePasswords
     * @extends splunkjs.Service.Collection
     */cov_1nf65u3g4c().s[401]++;root.StoragePasswords=root.Collection.extend({/**
         * Indicates whether to call `fetch` after an entity has been created. By 
         * default, the entity is not fetched because the endpoint returns
         * (echoes) the new entity.
         *
         * @method splunkjs.Service.StoragePasswords
         */fetchOnEntityCreation:true,/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.StoragePasswords
         */path:function(){cov_1nf65u3g4c().f[110]++;cov_1nf65u3g4c().s[402]++;return Paths.storagePasswords;},/**
         * Creates a local instance of a storage password.
         *
         * @param {Object} props The properties for the new storage password. For a list of available parameters,
         * see <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTaccess#POST_storage.2Fpasswords" target="_blank">
         * POST storage/passwords</a> on Splunk Developer Portal.
         * @return {splunkjs.Service.SavedSearch} A new `splunkjs.Service.StoragePassword` instance.
         *
         * @method splunkjs.Service.StoragePasswords
         */instantiateEntity:function(props){cov_1nf65u3g4c().f[111]++;var entityNamespace=(cov_1nf65u3g4c().s[403]++,utils.namespaceFromProperties(props));cov_1nf65u3g4c().s[404]++;return new root.StoragePassword(this.service,props.name,entityNamespace);},/**
         * Constructor for `splunkjs.Service.StoragePasswords`. 
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.StoragePasswords} A new `splunkjs.Service.StoragePasswords` instance.
         *
         * @method splunkjs.Service.StoragePasswords
         */init:function(service,namespace){cov_1nf65u3g4c().f[112]++;cov_1nf65u3g4c().s[405]++;this._super(service,this.path(),namespace);}});/**
     * Represents a fired alert. 
     * You can retrieve several of the fired alert's properties by
     * the corresponding function name.
     *
     * @endpoint alerts/fired_alerts/{name}
     * @class splunkjs.Service.FiredAlert
     * @extends splunkjs.Service.Entity
     */cov_1nf65u3g4c().s[406]++;root.FiredAlert=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.FiredAlert
         */path:function(){cov_1nf65u3g4c().f[113]++;cov_1nf65u3g4c().s[407]++;return Paths.firedAlerts+"/"+encodeURIComponent(this.name);},/**
         * Returns this alert's actions (such as notifying by email, running a 
         * script, adding to RSS, tracking in Alert Manager, and enabling 
         * summary indexing). 
         *
         * @return {Array} of actions, an empty {Array} if no actions
         * @method splunkjs.Service.FiredAlert
         */actions:function(){cov_1nf65u3g4c().f[114]++;cov_1nf65u3g4c().s[408]++;return(cov_1nf65u3g4c().b[115][0]++,this.properties().actions)||(cov_1nf65u3g4c().b[115][1]++,[]);},/**
         * Returns this alert's type.
         *
         * @return {String} the alert's type.
         * @method splunkjs.Service.FiredAlert
         */alertType:function(){cov_1nf65u3g4c().f[115]++;cov_1nf65u3g4c().s[409]++;return(cov_1nf65u3g4c().b[116][0]++,this.properties().alert_type)||(cov_1nf65u3g4c().b[116][1]++,null);},/**
         * Indicates whether the result is a set of events (digest) or a single
         * event (per result).
         *
         * This method is available in Splunk 4.3 and later.
         *
         * @return {Boolean} true if the result is a digest, false if per result
         * @method splunkjs.Service.FiredAlert
         */isDigestMode:function(){cov_1nf65u3g4c().f[116]++;cov_1nf65u3g4c().s[410]++;// Convert this property to a Boolean
return!!this.properties().digest_mode;},/**
         * Returns the rendered expiration time for this alert.
         *
         * This method is available in Splunk 4.3 and later.
         *
         * @return {String}
         * @method splunkjs.Service.FiredAlert
         */expirationTime:function(){cov_1nf65u3g4c().f[117]++;cov_1nf65u3g4c().s[411]++;return(cov_1nf65u3g4c().b[117][0]++,this.properties().expiration_time_rendered)||(cov_1nf65u3g4c().b[117][1]++,null);},/**
         * Returns the saved search for this alert.
         *
         * @return {String} The saved search name, or {null} if not available.
         * @method splunkjs.Service.FiredAlert
         */savedSearchName:function(){cov_1nf65u3g4c().f[118]++;cov_1nf65u3g4c().s[412]++;return(cov_1nf65u3g4c().b[118][0]++,this.properties().savedsearch_name)||(cov_1nf65u3g4c().b[118][1]++,null);},/**
         * Returns this alert's severity on a scale of 1 to 10, with 1 being the
         * highest severity.
         *
         * @return {Number} this alert's severity, -1 if not specified
         * @method splunkjs.Service.FiredAlert
         */severity:function(){cov_1nf65u3g4c().f[119]++;cov_1nf65u3g4c().s[413]++;return(cov_1nf65u3g4c().b[119][0]++,parseInt(this.properties().severity,10))||(cov_1nf65u3g4c().b[119][1]++,-1);},/**
         * Returns this alert's search ID (SID).
         *
         * @return {String} This alert's SID, or {null} if not available.
         * @method splunkjs.Service.FiredAlert
         */sid:function(){cov_1nf65u3g4c().f[120]++;cov_1nf65u3g4c().s[414]++;return(cov_1nf65u3g4c().b[120][0]++,this.properties().sid)||(cov_1nf65u3g4c().b[120][1]++,null);},/**
         * Returns the time this alert was triggered.
         *
         * @return {Number} This alert's trigger time, or {null} if not available.
         * @method splunkjs.Service.FiredAlert
         */triggerTime:function(){cov_1nf65u3g4c().f[121]++;cov_1nf65u3g4c().s[415]++;return(cov_1nf65u3g4c().b[121][0]++,this.properties().trigger_time)||(cov_1nf65u3g4c().b[121][1]++,null);},/**
         * Returns this alert's rendered trigger time.
         *
         * This method is available in Splunk 4.3 and later.
         *
         * @return {String} This alert's rendered trigger time, or {null} if not available.
         * @method splunkjs.Service.FiredAlert
         */triggerTimeRendered:function(){cov_1nf65u3g4c().f[122]++;cov_1nf65u3g4c().s[416]++;return(cov_1nf65u3g4c().b[122][0]++,this.properties().trigger_time_rendered)||(cov_1nf65u3g4c().b[122][1]++,null);},/**
         * Returns the count of triggered alerts.
         *
         * This method is available in Splunk 4.3 and later.
         *
         * @return {Number} The number of triggered alerts, or -1 if not specified.
         * @method splunkjs.Service.FiredAlert
         */triggeredAlertCount:function(){cov_1nf65u3g4c().f[123]++;cov_1nf65u3g4c().s[417]++;return(cov_1nf65u3g4c().b[123][0]++,parseInt(this.properties().triggered_alerts,10))||(cov_1nf65u3g4c().b[123][1]++,-1);},/**
         * Constructor for `splunkjs.Service.FiredAlert`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name for the new alert group.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.FiredAlert} A new `splunkjs.Service.FiredAlert` instance.
         *
         * @method splunkjs.Service.FiredAlert
         */init:function(service,name,namespace){cov_1nf65u3g4c().f[124]++;cov_1nf65u3g4c().s[418]++;this.name=name;cov_1nf65u3g4c().s[419]++;this._super(service,this.path(),namespace);}});/**
     * Represents a specific alert group, which you can then view and
     * remove.
     *
     * @endpoint alerts/fired_alerts/{name}
     * @class splunkjs.Service.FiredAlertGroup
     * @extends splunkjs.Service.Entity
     */cov_1nf65u3g4c().s[420]++;root.FiredAlertGroup=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.FiredAlertGroup
         */path:function(){cov_1nf65u3g4c().f[125]++;cov_1nf65u3g4c().s[421]++;return Paths.firedAlerts+"/"+encodeURIComponent(this.name);},/**
         * Returns the `triggered_alert_count` property, the count
         * of triggered alerts.
         *
         * @return {Number} the count of triggered alerts
         *
         * @method splunkjs.Service.FiredAlertGroup
         */count:function(){cov_1nf65u3g4c().f[126]++;cov_1nf65u3g4c().s[422]++;return(cov_1nf65u3g4c().b[124][0]++,parseInt(this.properties().triggered_alert_count,10))||(cov_1nf65u3g4c().b[124][1]++,0);},/**
         * Returns fired instances of this alert, which is
         * a list of `splunkjs.Service.FiredAlert` instances.
         *
         * @example
         *
         *      var alertGroup = service.firedAlertGroups().item("MyAlert");
         *      alertGroup.list(function(err, firedAlerts, alert) {
         *          for(var i = 0; i < firedAlerts.length; i++) {
         *              console.log("Fired alert", i, ":", firedAlerts[i].sid);
         *          }
         *      });
         *
         * @param {Function} callback A function to call when the fired alerts are retrieved: `(err, firedAlerts, alertGroup)`.
         *
         * @method splunkjs.Service.FiredAlertGroup
         */list:function(options,callback){cov_1nf65u3g4c().f[127]++;cov_1nf65u3g4c().s[423]++;if((cov_1nf65u3g4c().b[126][0]++,!callback)&&(cov_1nf65u3g4c().b[126][1]++,utils.isFunction(options))){cov_1nf65u3g4c().b[125][0]++;cov_1nf65u3g4c().s[424]++;callback=options;cov_1nf65u3g4c().s[425]++;options={};}else{cov_1nf65u3g4c().b[125][1]++;}cov_1nf65u3g4c().s[426]++;callback=(cov_1nf65u3g4c().b[127][0]++,callback)||(cov_1nf65u3g4c().b[127][1]++,function(){cov_1nf65u3g4c().f[128]++;});cov_1nf65u3g4c().s[427]++;options=(cov_1nf65u3g4c().b[128][0]++,options)||(cov_1nf65u3g4c().b[128][1]++,{});var that=(cov_1nf65u3g4c().s[428]++,this);cov_1nf65u3g4c().s[429]++;return this.get("",options,function(err,response){cov_1nf65u3g4c().f[129]++;cov_1nf65u3g4c().s[430]++;if(err){cov_1nf65u3g4c().b[129][0]++;cov_1nf65u3g4c().s[431]++;callback(err);cov_1nf65u3g4c().s[432]++;return;}else{cov_1nf65u3g4c().b[129][1]++;}var firedAlerts=(cov_1nf65u3g4c().s[433]++,[]);var data=(cov_1nf65u3g4c().s[434]++,(cov_1nf65u3g4c().b[130][0]++,response.data.entry)||(cov_1nf65u3g4c().b[130][1]++,[]));cov_1nf65u3g4c().s[435]++;for(var i=(cov_1nf65u3g4c().s[436]++,0);i<data.length;i++){var firedAlertData=(cov_1nf65u3g4c().s[437]++,response.data.entry[i]);var namespace=(cov_1nf65u3g4c().s[438]++,utils.namespaceFromProperties(firedAlertData));var firedAlert=(cov_1nf65u3g4c().s[439]++,new root.FiredAlert(that.service,firedAlertData.name,namespace));cov_1nf65u3g4c().s[440]++;firedAlert._load(firedAlertData);cov_1nf65u3g4c().s[441]++;firedAlerts.push(firedAlert);}cov_1nf65u3g4c().s[442]++;callback(null,firedAlerts,that);});},/**
         * Constructor for `splunkjs.Service.FiredAlertGroup`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name for the new alert group.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.FiredAlertGroup} A new `splunkjs.Service.FiredAlertGroup` instance.
         *
         * @method splunkjs.Service.FiredAlertGroup
         */init:function(service,name,namespace){cov_1nf65u3g4c().f[130]++;cov_1nf65u3g4c().s[443]++;this.name=name;cov_1nf65u3g4c().s[444]++;this._super(service,this.path(),namespace);cov_1nf65u3g4c().s[445]++;this.list=utils.bind(this,this.list);}});/**
     * Represents a collection of fired alerts for a saved search. You can
     * create and list saved searches using this collection container, or
     * get a specific alert group. 
     *
     *
     * @endpoint alerts/fired_alerts
     * @class splunkjs.Service.FiredAlertGroupCollection
     * @extends splunkjs.Service.Collection
     */cov_1nf65u3g4c().s[446]++;root.FiredAlertGroupCollection=root.Collection.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.FiredAlertGroupCollection
         */path:function(){cov_1nf65u3g4c().f[131]++;cov_1nf65u3g4c().s[447]++;return Paths.firedAlerts;},/**
         * Creates a local instance of an alert group.
         *
         * @param {Object} props The properties for the alert group.
         * @return {splunkjs.Service.FiredAlertGroup} A new `splunkjs.Service.FiredAlertGroup` instance.
         *
         * @method splunkjs.Service.FiredAlertGroupCollection
         */instantiateEntity:function(props){cov_1nf65u3g4c().f[132]++;var entityNamespace=(cov_1nf65u3g4c().s[448]++,utils.namespaceFromProperties(props));cov_1nf65u3g4c().s[449]++;return new root.FiredAlertGroup(this.service,props.name,entityNamespace);},/**
         * Suppress removing alerts via the fired alerts endpoint.
         *
         * @method splunkjs.Service.FiredAlertGroupCollection
         */remove:function(){cov_1nf65u3g4c().f[133]++;cov_1nf65u3g4c().s[450]++;throw new Error("To remove an alert, remove the saved search with the same name.");},/**
         * Constructor for `splunkjs.Service.FiredAlertGroupCollection`. 
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.FiredAlertGroupCollection} A new `splunkjs.Service.FiredAlertGroupCollection` instance.
         *
         * @method splunkjs.Service.FiredAlertGroupCollection
         */init:function(service,namespace){cov_1nf65u3g4c().f[134]++;cov_1nf65u3g4c().s[451]++;this._super(service,this.path(),namespace);cov_1nf65u3g4c().s[452]++;this.instantiateEntity=utils.bind(this,this.instantiateEntity);cov_1nf65u3g4c().s[453]++;this.remove=utils.bind(this,this.remove);}});/**
     * Represents a specific Splunk app that you can view, modify, and
     * remove.
     *
     * @endpoint apps/local/{name}
     * @class splunkjs.Service.Application
     * @extends splunkjs.Service.Entity
     */cov_1nf65u3g4c().s[454]++;root.Application=root.Entity.extend({/**
         * Indicates whether to call `fetch` after an update to get the updated 
         * item.
         *
         * @method splunkjs.Service.Application
         */fetchOnUpdate:true,/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Application
         */path:function(){cov_1nf65u3g4c().f[135]++;cov_1nf65u3g4c().s[455]++;return Paths.apps+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.Application`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name of the Splunk app.
         * @return {splunkjs.Service.Application} A new `splunkjs.Service.Application` instance.
         *
         * @method splunkjs.Service.Application
         */init:function(service,name){cov_1nf65u3g4c().f[136]++;cov_1nf65u3g4c().s[456]++;this.name=name;cov_1nf65u3g4c().s[457]++;this._super(service,this.path(),{});cov_1nf65u3g4c().s[458]++;this.setupInfo=utils.bind(this,this.setupInfo);cov_1nf65u3g4c().s[459]++;this.updateInfo=utils.bind(this,this.updateInfo);},/**
         * Retrieves the setup information for a Splunk app.
         *
         * @example
         *
         *      var app = service.apps().item("app");
         *      app.setup(function(err, info, search) {
         *          console.log("SETUP INFO: ", info);
         *      });
         *
         * @param {Function} callback A function to call when setup information is retrieved: `(err, info, app)`.
         *
         * @endpoint apps/local/{name}/setup
         * @method splunkjs.Service.Application
         */setupInfo:function(callback){cov_1nf65u3g4c().f[137]++;cov_1nf65u3g4c().s[460]++;callback=(cov_1nf65u3g4c().b[131][0]++,callback)||(cov_1nf65u3g4c().b[131][1]++,function(){cov_1nf65u3g4c().f[138]++;});var that=(cov_1nf65u3g4c().s[461]++,this);cov_1nf65u3g4c().s[462]++;return this.get("setup",{},function(err,response){cov_1nf65u3g4c().f[139]++;cov_1nf65u3g4c().s[463]++;if(err){cov_1nf65u3g4c().b[132][0]++;cov_1nf65u3g4c().s[464]++;callback(err);}else{cov_1nf65u3g4c().b[132][1]++;cov_1nf65u3g4c().s[465]++;callback(null,response.data.entry.content,that);}});},/**
         * Retrieves any information for an update to a locally-installed Splunk app.
         *
         * @example
         *
         *      var app = service.apps().item("MyApp");
         *      app.updateInfo(function(err, info, app) {
         *          console.log("UPDATE INFO: ", info);
         *      });
         *
         * @param {Function} callback A function to call when update information is retrieved: `(err, info, app)`.
         *
         * @endpoint apps/local/{name}/update
         * @method splunkjs.Service.Application
         */updateInfo:function(callback){cov_1nf65u3g4c().f[140]++;cov_1nf65u3g4c().s[466]++;callback=(cov_1nf65u3g4c().b[133][0]++,callback)||(cov_1nf65u3g4c().b[133][1]++,function(){cov_1nf65u3g4c().f[141]++;});var that=(cov_1nf65u3g4c().s[467]++,this);cov_1nf65u3g4c().s[468]++;return this.get("update",{},function(err,response){cov_1nf65u3g4c().f[142]++;cov_1nf65u3g4c().s[469]++;if(err){cov_1nf65u3g4c().b[134][0]++;cov_1nf65u3g4c().s[470]++;callback(err);}else{cov_1nf65u3g4c().b[134][1]++;cov_1nf65u3g4c().s[471]++;callback(null,response.data.entry.content,that);}});}});/**
     * Represents a collection of Splunk apps. You can create and list applications 
     * using this collection container, or get a specific app.
     *
     * @endpoint apps/local
     * @class splunkjs.Service.Applications
     * @extends splunkjs.Service.Collection
     */cov_1nf65u3g4c().s[472]++;root.Applications=root.Collection.extend({/**
         * Indicates whether to call `fetch` after an entity has been created. By 
         * default, the entity is not fetched because the endpoint returns
         * (echoes) the new entity.
         *
         * @method splunkjs.Service.Applications
         */fetchOnEntityCreation:true,/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Applications
         */path:function(){cov_1nf65u3g4c().f[143]++;cov_1nf65u3g4c().s[473]++;return Paths.apps;},/**
         * Creates a local instance of an app.
         *
         * @param {Object} props The properties for the new app. For details, see the <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTapps#POST_apps.2Flocal" target="_blank">POST apps/local</a> endpoint in the REST API documentation.
         * @return {splunkjs.Service.Application} A new `splunkjs.Service.Application` instance.
         *
         * @method splunkjs.Service.Applications
         */instantiateEntity:function(props){cov_1nf65u3g4c().f[144]++;cov_1nf65u3g4c().s[474]++;return new root.Application(this.service,props.name,{});},/**
         * Constructor for `splunkjs.Service.Applications`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @return {splunkjs.Service.Applications} A new `splunkjs.Service.Applications` instance.
         *
         * @method splunkjs.Service.Applications
         */init:function(service){cov_1nf65u3g4c().f[145]++;cov_1nf65u3g4c().s[475]++;this._super(service,this.path(),{});}});/**
     * Provides access to configuration information about the server.
     *
     * @endpoint server/info
     * @class splunkjs.Service.ServerInfo
     * @extends splunkjs.Service.Entity
     */cov_1nf65u3g4c().s[476]++;root.ServerInfo=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.ServerInfo
         */path:function(){cov_1nf65u3g4c().f[146]++;cov_1nf65u3g4c().s[477]++;return Paths.info;},/**
         * Constructor for `splunkjs.Service.ServerInfo`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @return {splunkjs.Service.ServerInfo} A new `splunkjs.Service.ServerInfo` instance.
         *
         * @method splunkjs.Service.ServerInfo
         */init:function(service){cov_1nf65u3g4c().f[147]++;cov_1nf65u3g4c().s[478]++;this.name="server-info";cov_1nf65u3g4c().s[479]++;this._super(service,this.path(),{});}});/**
     * Represents a specific Splunk user, which you can view, modify, and
     * remove.
     *
     * @endpoint authentication/users/{name}
     * @class splunkjs.Service.User
     * @extends splunkjs.Service.Entity
     */cov_1nf65u3g4c().s[480]++;root.User=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.User
         */path:function(){cov_1nf65u3g4c().f[148]++;cov_1nf65u3g4c().s[481]++;return Paths.users+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.User`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The Splunk username.
         * @return {splunkjs.Service.User} A new `splunkjs.Service.User` instance.
         *
         * @method splunkjs.Service.User
         */init:function(service,name){cov_1nf65u3g4c().f[149]++;cov_1nf65u3g4c().s[482]++;this.name=name;cov_1nf65u3g4c().s[483]++;this._super(service,this.path(),{});}});/**
     * Represents a collection of users. You can create and list users using 
     * this collection container, or get a specific user.
     *
     * @endpoint authentication/users
     * @class splunkjs.Service.Users
     * @extends splunkjs.Service.Collection
     */cov_1nf65u3g4c().s[484]++;root.Users=root.Collection.extend({/**
         * Indicates whether to call `fetch` after an entity has been created. By 
         * default, the entity is not fetched because the endpoint returns
         * (echoes) the new entity.
         *
         * @method splunkjs.Service.Users
         */fetchOnEntityCreation:true,/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Users
         */path:function(){cov_1nf65u3g4c().f[150]++;cov_1nf65u3g4c().s[485]++;return Paths.users;},/**
         * Creates a local instance of a user.
         *
         * @param {Object} props The properties for this new user. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEJ8#userauthparams" target="_blank">User authentication parameters</a> on Splunk Developer Portal.
         * @return {splunkjs.Service.User} A new `splunkjs.Service.User` instance.
         *
         * @method splunkjs.Service.Users
         */instantiateEntity:function(props){cov_1nf65u3g4c().f[151]++;cov_1nf65u3g4c().s[486]++;return new root.User(this.service,props.name,{});},/**
         * Constructor for `splunkjs.Service.Users`. 
         * 
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @return {splunkjs.Service.Users} A new `splunkjs.Service.Users` instance.
         *
         * @method splunkjs.Service.Users
         */init:function(service){cov_1nf65u3g4c().f[152]++;cov_1nf65u3g4c().s[487]++;this._super(service,this.path(),{});},/**
         * Creates a new user. 
         *
         * **Note:** This endpoint requires a special implementation.
         *
         * @param {Object} params A dictionary of properties. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEJ8#userauthparams" target="_blank">User authentication parameters</a> on Splunk Developer Portal.
         * @param {Function} callback A function to call with the new entity: `(err, createdEntity)`.
         *
         * @method splunkjs.Service.Users
         */create:function(params,callback){cov_1nf65u3g4c().f[153]++;cov_1nf65u3g4c().s[488]++;callback=(cov_1nf65u3g4c().b[135][0]++,callback)||(cov_1nf65u3g4c().b[135][1]++,function(){cov_1nf65u3g4c().f[154]++;});var that=(cov_1nf65u3g4c().s[489]++,this);var req=(cov_1nf65u3g4c().s[490]++,this.post("",params,function(err,response){cov_1nf65u3g4c().f[155]++;cov_1nf65u3g4c().s[491]++;if(err){cov_1nf65u3g4c().b[136][0]++;cov_1nf65u3g4c().s[492]++;callback(err);}else{cov_1nf65u3g4c().b[136][1]++;// This endpoint requires us to use the passed-in name
var props=(cov_1nf65u3g4c().s[493]++,{name:params.name});var entity=(cov_1nf65u3g4c().s[494]++,that.instantiateEntity(props));cov_1nf65u3g4c().s[495]++;entity.fetch(function(){cov_1nf65u3g4c().f[156]++;cov_1nf65u3g4c().s[496]++;if(req.wasAborted){cov_1nf65u3g4c().b[137][0]++;cov_1nf65u3g4c().s[497]++;return;// aborted, so ignore
}else{cov_1nf65u3g4c().b[137][1]++;cov_1nf65u3g4c().s[498]++;callback.apply(null,arguments);}});}}));cov_1nf65u3g4c().s[499]++;return req;}});/**
     * Represents a specific Splunk view, which you can view, modify, and
     * remove.
     *
     * @endpoint data/ui/views/{name}
     * @class splunkjs.Service.View
     * @extends splunkjs.Service.Entity
     */cov_1nf65u3g4c().s[500]++;root.View=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.View
         */path:function(){cov_1nf65u3g4c().f[157]++;cov_1nf65u3g4c().s[501]++;return Paths.views+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.View`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name of the view.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.View} A new `splunkjs.Service.View` instance.
         *
         * @method splunkjs.Service.View
         */init:function(service,name,namespace){cov_1nf65u3g4c().f[158]++;cov_1nf65u3g4c().s[502]++;this.name=name;cov_1nf65u3g4c().s[503]++;this._super(service,this.path(),namespace);}});/**
     * Represents a collection of views. You can create and list views using 
     * this collection container, or get a specific view.
     *
     * @endpoint data/ui/views
     * @class splunkjs.Service.Views
     * @extends splunkjs.Service.Collection
     */cov_1nf65u3g4c().s[504]++;root.Views=root.Collection.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Views
         */path:function(){cov_1nf65u3g4c().f[159]++;cov_1nf65u3g4c().s[505]++;return Paths.views;},/**
         * Creates a local instance of a view.
         *
         * @param {Object} props The properties for the new view. For a list of available parameters, see the <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#POST_scheduled.2Fviews.2F.7Bname.7D" target="_blank">POST scheduled/views/{name}</a> endpoint in the REST API documentation.
         * @return {splunkjs.Service.View} A new `splunkjs.Service.View` instance.
         *
         * @method splunkjs.Service.Views
         */instantiateEntity:function(props){cov_1nf65u3g4c().f[160]++;var entityNamespace=(cov_1nf65u3g4c().s[506]++,utils.namespaceFromProperties(props));cov_1nf65u3g4c().s[507]++;return new root.View(this.service,props.name,entityNamespace);},/**
         * Constructor for `splunkjs.Service.Views`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Views} A new `splunkjs.Service.Views` instance.
         *
         * @method splunkjs.Service.Views
         */init:function(service,namespace){cov_1nf65u3g4c().f[161]++;cov_1nf65u3g4c().s[508]++;this._super(service,this.path(),namespace);}});/**
     * Represents an index, which you can update and submit events to.
     *
     * @endpoint data/indexes/name
     * @class splunkjs.Service.Index
     * @extends splunkjs.Service.Entity
     */cov_1nf65u3g4c().s[509]++;root.Index=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Index
         */path:function(){cov_1nf65u3g4c().f[162]++;cov_1nf65u3g4c().s[510]++;return Paths.indexes+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.Index`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name of the index.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Index} A new `splunkjs.Service.Index` instance.
         *
         * @method splunkjs.Service.Index
         */init:function(service,name,namespace){cov_1nf65u3g4c().f[163]++;cov_1nf65u3g4c().s[511]++;this.name=name;cov_1nf65u3g4c().s[512]++;this._super(service,this.path(),namespace);cov_1nf65u3g4c().s[513]++;this.submitEvent=utils.bind(this,this.submitEvent);},/**
         * Submits an event to this index.
         *
         * @example
         *
         *      var index = service.indexes().item("_internal");
         *      index.submitEvent("A new event", {sourcetype: "mysourcetype"}, function(err, result, index) {
         *          console.log("Submitted event: ", result);
         *      });
         *
         * @param {String} event The text for this event.
         * @param {Object} params A dictionary of parameters for indexing: 
         *    - `host` (_string_): The value to populate in the host field for events from this data input. 
         *    - `host_regex` (_string_): A regular expression used to extract the host value from each event. 
         *    - `source` (_string_): The source value to fill in the metadata for this input's events.
         *    - `sourcetype` (_string_): The sourcetype to apply to events from this input.
         * @param {Function} callback A function to call when the event is submitted: `(err, result, index)`.
         *
         * @endpoint receivers/simple?index={name}
         * @method splunkjs.Service.Index
         */submitEvent:function(event,params,callback){cov_1nf65u3g4c().f[164]++;cov_1nf65u3g4c().s[514]++;if((cov_1nf65u3g4c().b[139][0]++,!callback)&&(cov_1nf65u3g4c().b[139][1]++,utils.isFunction(params))){cov_1nf65u3g4c().b[138][0]++;cov_1nf65u3g4c().s[515]++;callback=params;cov_1nf65u3g4c().s[516]++;params={};}else{cov_1nf65u3g4c().b[138][1]++;}cov_1nf65u3g4c().s[517]++;callback=(cov_1nf65u3g4c().b[140][0]++,callback)||(cov_1nf65u3g4c().b[140][1]++,function(){cov_1nf65u3g4c().f[165]++;});cov_1nf65u3g4c().s[518]++;params=(cov_1nf65u3g4c().b[141][0]++,params)||(cov_1nf65u3g4c().b[141][1]++,{});// Add the index name
cov_1nf65u3g4c().s[519]++;params["index"]=this.name;var that=(cov_1nf65u3g4c().s[520]++,this);cov_1nf65u3g4c().s[521]++;return this.service.log(event,params,function(err,result){cov_1nf65u3g4c().f[166]++;cov_1nf65u3g4c().s[522]++;callback(err,result,that);});},remove:function(callback){cov_1nf65u3g4c().f[167]++;cov_1nf65u3g4c().s[523]++;if(this.service.versionCompare("5.0")<0){cov_1nf65u3g4c().b[142][0]++;cov_1nf65u3g4c().s[524]++;throw new Error("Indexes cannot be removed in Splunk 4.x");}else{cov_1nf65u3g4c().b[142][1]++;cov_1nf65u3g4c().s[525]++;return this._super(callback);}}});/**
     * Represents a collection of indexes. You can create and list indexes using 
     * this collection container, or get a specific index.
     *
     * @endpoint data/indexes
     * @class splunkjs.Service.Indexes
     * @extends splunkjs.Service.Collection
     */cov_1nf65u3g4c().s[526]++;root.Indexes=root.Collection.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Indexes
         */path:function(){cov_1nf65u3g4c().f[168]++;cov_1nf65u3g4c().s[527]++;return Paths.indexes;},/**
         * Creates a local instance of an index.
         *
         * @param {Object} props The properties for the new index. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEJ3#indexparams" target="_blank">Index parameters</a> on Splunk Developer Portal.
         * @return {splunkjs.Service.Index} A new `splunkjs.Service.Index` instance.
         *
         * @method splunkjs.Service.Indexes
         */instantiateEntity:function(props){cov_1nf65u3g4c().f[169]++;var entityNamespace=(cov_1nf65u3g4c().s[528]++,utils.namespaceFromProperties(props));cov_1nf65u3g4c().s[529]++;return new root.Index(this.service,props.name,entityNamespace);},/**
         * Constructor for `splunkjs.Service.Indexes`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Indexes} A new `splunkjs.Service.Indexes` instance.
         *
         * @method splunkjs.Service.Indexes
         */init:function(service,namespace){cov_1nf65u3g4c().f[170]++;cov_1nf65u3g4c().s[530]++;this._super(service,this.path(),namespace);},/**
         * Creates an index with the given name and parameters.
         *
         * @example
         *
         *      var indexes = service.indexes();
         *      indexes.create("NewIndex", {assureUTF8: true}, function(err, newIndex) {
         *          console.log("CREATED");
         *      });
         *
         * @param {String} name A name for this index.
         * @param {Object} params A dictionary of properties. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEJ3#indexparams" target="_blank">Index parameters</a> on Splunk Developer Portal.
         * @param {Function} callback A function to call with the new index: `(err, createdIndex)`.
         *
         * @endpoint data/indexes
         * @method splunkjs.Service.Indexes
         */create:function(name,params,callback){cov_1nf65u3g4c().f[171]++;cov_1nf65u3g4c().s[531]++;// If someone called us with the default style of (params, callback),
// lets make it work
if((cov_1nf65u3g4c().b[144][0]++,utils.isObject(name))&&(cov_1nf65u3g4c().b[144][1]++,utils.isFunction(params))&&(cov_1nf65u3g4c().b[144][2]++,!callback)){cov_1nf65u3g4c().b[143][0]++;cov_1nf65u3g4c().s[532]++;callback=params;cov_1nf65u3g4c().s[533]++;params=name;cov_1nf65u3g4c().s[534]++;name=params.name;}else{cov_1nf65u3g4c().b[143][1]++;}cov_1nf65u3g4c().s[535]++;params=(cov_1nf65u3g4c().b[145][0]++,params)||(cov_1nf65u3g4c().b[145][1]++,{});cov_1nf65u3g4c().s[536]++;params["name"]=name;cov_1nf65u3g4c().s[537]++;return this._super(params,callback);}});/**
     * Represents a specific stanza, which you can update and remove, from a 
     * configuration file.
     *
     * @endpoint configs/conf-{file}/{name}`
     * @class splunkjs.Service.ConfigurationStanza
     * @extends splunkjs.Service.Entity
     */cov_1nf65u3g4c().s[538]++;root.ConfigurationStanza=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.ConfigurationStanza
         */path:function(){cov_1nf65u3g4c().f[172]++;var name=(cov_1nf65u3g4c().s[539]++,this.name==="default"?(cov_1nf65u3g4c().b[146][0]++,"_new"):(cov_1nf65u3g4c().b[146][1]++,this.name));cov_1nf65u3g4c().s[540]++;return Paths.configurations+"/conf-"+encodeURIComponent(this.file)+"/"+encodeURIComponent(name);},/**
         * Constructor for `splunkjs.Service.ConfigurationStanza`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} file The name of the configuration file.
         * @param {String} name The name of the new stanza.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.ConfigurationStanza} A new `splunkjs.Service.ConfigurationStanza` instance.
         *
         * @method splunkjs.Service.ConfigurationStanza
         */init:function(service,file,name,namespace){cov_1nf65u3g4c().f[173]++;cov_1nf65u3g4c().s[541]++;this.name=name;cov_1nf65u3g4c().s[542]++;this.file=file;cov_1nf65u3g4c().s[543]++;this._super(service,this.path(),namespace);}});/**
     * Represents a collection of stanzas for a specific property file. You can
     * create and list stanzas using this collection container, or get a specific 
     * stanza.
     *
     * @endpoint configs/conf-{file}
     * @class splunkjs.Service.ConfigurationFile
     * @extends splunkjs.Service.Collection
     */cov_1nf65u3g4c().s[544]++;root.ConfigurationFile=root.Collection.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.ConfigurationFile
         */path:function(){cov_1nf65u3g4c().f[174]++;cov_1nf65u3g4c().s[545]++;return Paths.configurations+"/conf-"+encodeURIComponent(this.name);},/**
         * Creates a local instance of the default stanza in a configuration file.
         * You cannot directly update the `ConfigurationStanza` returned by this function.
         *
         * This is equivalent to viewing `configs/conf-{file}/_new`.
         *
         * @return {splunkjs.Service.ConfigurationStanza} A new `splunkjs.Service.ConfigurationStanza` instance.
         *
         * @method splunkjs.Service.ConfigurationFile
         */getDefaultStanza:function(){cov_1nf65u3g4c().f[175]++;cov_1nf65u3g4c().s[546]++;return new root.ConfigurationStanza(this.service,this.name,"default",this.namespace);},/**
         * Creates a local instance of a stanza in a configuration file.
         *
         * @param {Object} props The key-value properties for the new stanza. 
         * @return {splunkjs.Service.ConfigurationStanza} A new `splunkjs.Service.ConfigurationStanza` instance.
         *
         * @method splunkjs.Service.ConfigurationFile
         */instantiateEntity:function(props){cov_1nf65u3g4c().f[176]++;var entityNamespace=(cov_1nf65u3g4c().s[547]++,utils.namespaceFromProperties(props));cov_1nf65u3g4c().s[548]++;return new root.ConfigurationStanza(this.service,this.name,props.name,entityNamespace);},/**
         * Constructor for `splunkjs.Service.ConfigurationFile`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name of the configuration file.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.ConfigurationFile} A new `splunkjs.Service.ConfigurationFile` instance.
         *
         * @method splunkjs.Service.ConfigurationFile
         */init:function(service,name,namespace){cov_1nf65u3g4c().f[177]++;cov_1nf65u3g4c().s[549]++;this.name=name;cov_1nf65u3g4c().s[550]++;this._super(service,this.path(),namespace);},/**
         * Creates a stanza in this configuration file.
         *
         * @example
         *
         *      var file = service.configurations().item("props");
         *      file.create("my_stanza", function(err, newStanza) {
         *          console.log("CREATED");
         *      });
         *
         * @param {String} stanzaName A name for this stanza.
         * @param {Object} values A dictionary of key-value pairs to put in this stanza.
         * @param {Function} callback A function to call with the created stanza: `(err, createdStanza)`.
         *
         * @endpoint configs/conf-{file}
         * @method splunkjs.Service.ConfigurationFile
         */create:function(stanzaName,values,callback){cov_1nf65u3g4c().f[178]++;cov_1nf65u3g4c().s[551]++;// If someone called us with the default style of (params, callback),
// lets make it work
if((cov_1nf65u3g4c().b[148][0]++,utils.isObject(stanzaName))&&(cov_1nf65u3g4c().b[148][1]++,utils.isFunction(values))&&(cov_1nf65u3g4c().b[148][2]++,!callback)){cov_1nf65u3g4c().b[147][0]++;cov_1nf65u3g4c().s[552]++;callback=values;cov_1nf65u3g4c().s[553]++;values=stanzaName;cov_1nf65u3g4c().s[554]++;stanzaName=values.name;}else{cov_1nf65u3g4c().b[147][1]++;}cov_1nf65u3g4c().s[555]++;if((cov_1nf65u3g4c().b[150][0]++,utils.isFunction(values))&&(cov_1nf65u3g4c().b[150][1]++,!callback)){cov_1nf65u3g4c().b[149][0]++;cov_1nf65u3g4c().s[556]++;callback=values;cov_1nf65u3g4c().s[557]++;values={};}else{cov_1nf65u3g4c().b[149][1]++;}cov_1nf65u3g4c().s[558]++;values=(cov_1nf65u3g4c().b[151][0]++,values)||(cov_1nf65u3g4c().b[151][1]++,{});cov_1nf65u3g4c().s[559]++;values["name"]=stanzaName;cov_1nf65u3g4c().s[560]++;return this._super(values,callback);}});/**
     * Represents a collection of configuration files. You can create and list 
     * configuration files using this collection container, or get a specific file.
     *
     * @endpoint properties
     * @class splunkjs.Service.Configurations
     * @extends splunkjs.Service.Collection
     */cov_1nf65u3g4c().s[561]++;root.Configurations=root.Collection.extend({/**
         * Indicates whether to call `fetch` after an entity has been created. By 
         * default, the entity is not fetched because the endpoint returns
         * (echoes) the new entity.
         *
         * @method splunkjs.Service.Configurations
         */fetchOnEntityCreation:true,/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Configurations
         */path:function(){cov_1nf65u3g4c().f[179]++;cov_1nf65u3g4c().s[562]++;return Paths.properties;},/**
         * Creates a local instance of a configuration file.
         *
         * @param {Object} props The properties for this configuration file.
         * @return {splunkjs.Service.ConfigurationFile} A new `splunkjs.Service.ConfigurationFile` instance.
         *
         * @method splunkjs.Service.Configurations
         */instantiateEntity:function(props){cov_1nf65u3g4c().f[180]++;cov_1nf65u3g4c().s[563]++;return new root.ConfigurationFile(this.service,props.name,this.namespace);},/**
         * Constructor for `splunkjs.Service.Configurations`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Configurations} A new `splunkjs.Service.Configurations` instance.
         *
         * @method splunkjs.Service.Configurations
         */init:function(service,namespace){cov_1nf65u3g4c().f[181]++;cov_1nf65u3g4c().s[564]++;if((cov_1nf65u3g4c().b[153][0]++,!namespace)||(cov_1nf65u3g4c().b[153][1]++,namespace.owner==="-")||(cov_1nf65u3g4c().b[153][2]++,namespace.app==="-")){cov_1nf65u3g4c().b[152][0]++;cov_1nf65u3g4c().s[565]++;throw new Error("Configurations requires a non-wildcard owner/app");}else{cov_1nf65u3g4c().b[152][1]++;}cov_1nf65u3g4c().s[566]++;this._super(service,this.path(),namespace);},/**
         * Creates a configuration file.
         *
         * @example
         *
         *      var configurations = service.configurations();
         *      configurations.create("myprops", function(err, newFile) {
         *          console.log("CREATED");
         *      });
         *
         * @param {String} filename A name for this configuration file.
         * @param {Function} callback A function to call with the new configuration file: `(err, createdFile)`.
         *
         * @endpoint properties
         * @method splunkjs.Service.Configurations
         */create:function(filename,callback){cov_1nf65u3g4c().f[182]++;cov_1nf65u3g4c().s[567]++;// If someone called us with the default style of (params, callback),
// lets make it work
if(utils.isObject(filename)){cov_1nf65u3g4c().b[154][0]++;cov_1nf65u3g4c().s[568]++;filename=filename["__conf"];}else{cov_1nf65u3g4c().b[154][1]++;}cov_1nf65u3g4c().s[569]++;callback=(cov_1nf65u3g4c().b[155][0]++,callback)||(cov_1nf65u3g4c().b[155][1]++,function(){cov_1nf65u3g4c().f[183]++;});var that=(cov_1nf65u3g4c().s[570]++,this);var req=(cov_1nf65u3g4c().s[571]++,this.post("",{__conf:filename},function(err,response){cov_1nf65u3g4c().f[184]++;cov_1nf65u3g4c().s[572]++;if(err){cov_1nf65u3g4c().b[156][0]++;cov_1nf65u3g4c().s[573]++;callback(err);}else{cov_1nf65u3g4c().b[156][1]++;var entity=(cov_1nf65u3g4c().s[574]++,new root.ConfigurationFile(that.service,filename));cov_1nf65u3g4c().s[575]++;entity.fetch(function(){cov_1nf65u3g4c().f[185]++;cov_1nf65u3g4c().s[576]++;if(req.wasAborted){cov_1nf65u3g4c().b[157][0]++;cov_1nf65u3g4c().s[577]++;return;// aborted, so ignore
}else{cov_1nf65u3g4c().b[157][1]++;cov_1nf65u3g4c().s[578]++;callback.apply(null,arguments);}});}}));cov_1nf65u3g4c().s[579]++;return req;},/**
         * Fetch a configuration file.
         *
         * @param {String} file A name for configuration file.
         * @return file, if exists or null
         * 
         * @endpoint properties
         * @method splunkjs.Service.Configurations
         */getConfFile:async function(filename){cov_1nf65u3g4c().f[186]++;var that=(cov_1nf65u3g4c().s[580]++,this);// 1. Fetch files list
var response=(cov_1nf65u3g4c().s[581]++,await this.get("",{__conf:filename},null,true));// 2. Filter the files
var files=(cov_1nf65u3g4c().s[582]++,(cov_1nf65u3g4c().b[158][0]++,response)&&(cov_1nf65u3g4c().b[158][1]++,response.body)&&(cov_1nf65u3g4c().b[158][2]++,response.body.entry)&&(cov_1nf65u3g4c().b[158][3]++,response.body.entry.filter(f=>{cov_1nf65u3g4c().f[187]++;cov_1nf65u3g4c().s[583]++;return f.name===filename;})));// 3. Check if the file exists
cov_1nf65u3g4c().s[584]++;if((cov_1nf65u3g4c().b[160][0]++,files)&&(cov_1nf65u3g4c().b[160][1]++,files.length==0)){cov_1nf65u3g4c().b[159][0]++;cov_1nf65u3g4c().s[585]++;return null;}else{cov_1nf65u3g4c().b[159][1]++;}// 4. Create a local instance
var configurationFile=(cov_1nf65u3g4c().s[586]++,new root.ConfigurationFile(that.service,filename));// 5. Load the file content
var fetchedFile=(cov_1nf65u3g4c().s[587]++,await configurationFile.fetchAsync());cov_1nf65u3g4c().s[588]++;return fetchedFile;},/**
         * Fetch a configuration stanza.
         *
         * @param {String} file A configuration file.
         * @param {String} stanza A configuration stanza.
         * @return stanza, if exists or null
         * 
         * @endpoint properties
         * @method splunkjs.Service.Configurations
         */getStanza:async function(file,stanza){cov_1nf65u3g4c().f[188]++;// 1. check if the stanza exists
var fetchedStanza=(cov_1nf65u3g4c().s[589]++,file.item(stanza));cov_1nf65u3g4c().s[590]++;if(fetchedStanza==undefined){cov_1nf65u3g4c().b[161][0]++;cov_1nf65u3g4c().s[591]++;return null;}else{cov_1nf65u3g4c().b[161][1]++;cov_1nf65u3g4c().s[592]++;return fetchedStanza;}},/**
         * Creates/Updates a configuration file and stanza.
         *
         * @param {String} filename A name for this configuration file to be created/updated.
         * @param {String} stanzaName A name for the stanza to be created/updated.
         * @param {String} keyValueMap A key-value map of properties to be put under the stanza.
         * @param {Function} callback A function to call with the new configuration file.
         *
         * @endpoint properties
         * @method splunkjs.Service.Configurations
         */createAsync:async function(filename,stanzaName,keyValueMap,callback){cov_1nf65u3g4c().f[189]++;cov_1nf65u3g4c().s[593]++;callback=(cov_1nf65u3g4c().b[162][0]++,callback)||(cov_1nf65u3g4c().b[162][1]++,function(){cov_1nf65u3g4c().f[190]++;});var that=(cov_1nf65u3g4c().s[594]++,this);// 1. Check if the file exists
var configFile=(cov_1nf65u3g4c().s[595]++,await this.getConfFile(filename));// 2. If the file doesn't exist, create a new file
cov_1nf65u3g4c().s[596]++;if(configFile==undefined){cov_1nf65u3g4c().b[163][0]++;cov_1nf65u3g4c().s[597]++;that.create({__conf:filename});cov_1nf65u3g4c().s[598]++;configFile=new root.ConfigurationFile(that.service,filename);cov_1nf65u3g4c().s[599]++;configFile=await configFile.fetchAsync();}else{cov_1nf65u3g4c().b[163][1]++;}// 3. Check if the stanza exists
var configStanza=(cov_1nf65u3g4c().s[600]++,await this.getStanza(configFile,stanzaName));// 4. If the stanza doesn't exist, create a new stanza with given keyValueMap
cov_1nf65u3g4c().s[601]++;if(configStanza==undefined){cov_1nf65u3g4c().b[164][0]++;cov_1nf65u3g4c().s[602]++;configFile.create(stanzaName,keyValueMap,function(err,newStanza){cov_1nf65u3g4c().f[191]++;cov_1nf65u3g4c().s[603]++;callback();});}// 5. If the stanza exists, update it with the keyValueMap
else{cov_1nf65u3g4c().b[164][1]++;cov_1nf65u3g4c().s[604]++;configStanza.update(keyValueMap,(err,updatedStanza)=>{cov_1nf65u3g4c().f[192]++;cov_1nf65u3g4c().s[605]++;callback();});}}});/**
     * Represents a specific search job. You can perform different operations
     * on this job, such as reading its status, canceling it, and getting results.
     *
     * @endpoint search/jobs/{search_id}
     * @class splunkjs.Service.Job
     * @extends splunkjs.Service.Entity
     */cov_1nf65u3g4c().s[606]++;root.Job=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Job
         */path:function(){cov_1nf65u3g4c().f[193]++;cov_1nf65u3g4c().s[607]++;return Paths.jobs+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.Job`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} sid The search ID for this search job.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Job} A new `splunkjs.Service.Job` instance.
         *
         * @method splunkjs.Service.Job
         */init:function(service,sid,namespace){cov_1nf65u3g4c().f[194]++;cov_1nf65u3g4c().s[608]++;this.name=sid;cov_1nf65u3g4c().s[609]++;this._super(service,this.path(),namespace);cov_1nf65u3g4c().s[610]++;this.sid=sid;// We perform the bindings so that every function works 
// properly when it is passed as a callback.
cov_1nf65u3g4c().s[611]++;this.cancel=utils.bind(this,this.cancel);cov_1nf65u3g4c().s[612]++;this.disablePreview=utils.bind(this,this.disablePreview);cov_1nf65u3g4c().s[613]++;this.enablePreview=utils.bind(this,this.enablePreview);cov_1nf65u3g4c().s[614]++;this.events=utils.bind(this,this.events);cov_1nf65u3g4c().s[615]++;this.finalize=utils.bind(this,this.finalize);cov_1nf65u3g4c().s[616]++;this.pause=utils.bind(this,this.pause);cov_1nf65u3g4c().s[617]++;this.preview=utils.bind(this,this.preview);cov_1nf65u3g4c().s[618]++;this.results=utils.bind(this,this.results);cov_1nf65u3g4c().s[619]++;this.searchlog=utils.bind(this,this.searchlog);cov_1nf65u3g4c().s[620]++;this.setPriority=utils.bind(this,this.setPriority);cov_1nf65u3g4c().s[621]++;this.setTTL=utils.bind(this,this.setTTL);cov_1nf65u3g4c().s[622]++;this.summary=utils.bind(this,this.summary);cov_1nf65u3g4c().s[623]++;this.timeline=utils.bind(this,this.timeline);cov_1nf65u3g4c().s[624]++;this.touch=utils.bind(this,this.touch);cov_1nf65u3g4c().s[625]++;this.unpause=utils.bind(this,this.unpause);},/**
         * Cancels a search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.cancel(function(err) {
         *          console.log("CANCELLED");
         *      });
         *
         * @param {Function} callback A function to call when the search is done: `(err)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */cancel:function(callback){cov_1nf65u3g4c().f[195]++;var req=(cov_1nf65u3g4c().s[626]++,this.post("control",{action:"cancel"},callback));cov_1nf65u3g4c().s[627]++;return req;},/**
         * Disables preview generation for a search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.disablePreview(function(err, job) {
         *          console.log("PREVIEW DISABLED");
         *      });
         *
         * @param {Function} callback A function to call with this search job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */disablePreview:function(callback){cov_1nf65u3g4c().f[196]++;cov_1nf65u3g4c().s[628]++;callback=(cov_1nf65u3g4c().b[165][0]++,callback)||(cov_1nf65u3g4c().b[165][1]++,function(){cov_1nf65u3g4c().f[197]++;});var that=(cov_1nf65u3g4c().s[629]++,this);var req=(cov_1nf65u3g4c().s[630]++,this.post("control",{action:"disablepreview"},function(err){cov_1nf65u3g4c().f[198]++;cov_1nf65u3g4c().s[631]++;callback(err,that);}));cov_1nf65u3g4c().s[632]++;return req;},/**
         * Enables preview generation for a search job. 
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.disablePreview(function(err, job) {
         *          console.log("PREVIEW ENABLED");
         *      });
         *
         * @param {Function} callback A function to call with this search job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */enablePreview:function(callback){cov_1nf65u3g4c().f[199]++;cov_1nf65u3g4c().s[633]++;callback=(cov_1nf65u3g4c().b[166][0]++,callback)||(cov_1nf65u3g4c().b[166][1]++,function(){cov_1nf65u3g4c().f[200]++;});var that=(cov_1nf65u3g4c().s[634]++,this);var req=(cov_1nf65u3g4c().s[635]++,this.post("control",{action:"enablepreview"},function(err){cov_1nf65u3g4c().f[201]++;cov_1nf65u3g4c().s[636]++;callback(err,that);}));cov_1nf65u3g4c().s[637]++;return req;},/**
         * Returns the events of a search job with given parameters.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.events({count: 10}, function(err, events, job) {
         *          console.log("Fields: ", events.fields);
         *      });
         *
         * @param {Object} params The parameters for retrieving events. For a list of available parameters, see the <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fevents" target="_blank">GET search/jobs/{search_id}/events</a> endpoint in the REST API documentation.
         * @param {Function} callback A function to call when the events are retrieved: `(err, events, job)`.
         *
         * @endpoint search/jobs/{search_id}/events
         * @method splunkjs.Service.Job
         */events:function(params,callback){cov_1nf65u3g4c().f[202]++;cov_1nf65u3g4c().s[638]++;callback=(cov_1nf65u3g4c().b[167][0]++,callback)||(cov_1nf65u3g4c().b[167][1]++,function(){cov_1nf65u3g4c().f[203]++;});cov_1nf65u3g4c().s[639]++;params=(cov_1nf65u3g4c().b[168][0]++,params)||(cov_1nf65u3g4c().b[168][1]++,{});cov_1nf65u3g4c().s[640]++;params.output_mode=(cov_1nf65u3g4c().b[169][0]++,params.output_mode)||(cov_1nf65u3g4c().b[169][1]++,"json_rows");var that=(cov_1nf65u3g4c().s[641]++,this);cov_1nf65u3g4c().s[642]++;return this.get("events",params,function(err,response){cov_1nf65u3g4c().f[204]++;cov_1nf65u3g4c().s[643]++;if(err){cov_1nf65u3g4c().b[170][0]++;cov_1nf65u3g4c().s[644]++;callback(err);}else{cov_1nf65u3g4c().b[170][1]++;cov_1nf65u3g4c().s[645]++;callback(null,response.data,that);}});},/**
         * Finalizes a search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.finalize(function(err, job) {
         *          console.log("JOB FINALIZED");
         *      });
         *
         * @param {Function} callback A function to call with the job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */finalize:function(callback){cov_1nf65u3g4c().f[205]++;cov_1nf65u3g4c().s[646]++;callback=(cov_1nf65u3g4c().b[171][0]++,callback)||(cov_1nf65u3g4c().b[171][1]++,function(){cov_1nf65u3g4c().f[206]++;});var that=(cov_1nf65u3g4c().s[647]++,this);var req=(cov_1nf65u3g4c().s[648]++,this.post("control",{action:"finalize"},function(err){cov_1nf65u3g4c().f[207]++;cov_1nf65u3g4c().s[649]++;callback(err,that);}));cov_1nf65u3g4c().s[650]++;return req;},/**
         * Returns an iterator over this search job's events or results.
         *
         * @param {String} type One of {"events", "preview", "results"}.
         * @param {Object} params A dictionary of optional parameters:
         *    - `pagesize` (_integer_): The number of items to return on each request. Defaults to as many as possible.
         * @return {Object} An iterator object with a `next(callback)` method, where `callback` is of the form `(err, results, hasMoreResults)`.
         * 
         * @endpoint search/jobs/{search_id}/results
         * @method splunkjs.Service.Job
         */iterator:function(type,params){cov_1nf65u3g4c().f[208]++;cov_1nf65u3g4c().s[651]++;return new root.PaginatedEndpointIterator(this[type],params);},/**
         * Pauses a search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.pause(function(err, job) {
         *          console.log("JOB PAUSED");
         *      });
         *
         * @param {Function} callback A function to call with the job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */pause:function(callback){cov_1nf65u3g4c().f[209]++;cov_1nf65u3g4c().s[652]++;callback=(cov_1nf65u3g4c().b[172][0]++,callback)||(cov_1nf65u3g4c().b[172][1]++,function(){cov_1nf65u3g4c().f[210]++;});var that=(cov_1nf65u3g4c().s[653]++,this);var req=(cov_1nf65u3g4c().s[654]++,this.post("control",{action:"pause"},function(err){cov_1nf65u3g4c().f[211]++;cov_1nf65u3g4c().s[655]++;callback(err,that);}));cov_1nf65u3g4c().s[656]++;return req;},/*
         * Gets the preview results for a search job with given parameters.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.preview({count: 10}, function(err, results, job) {
         *          console.log("Fields: ", results.fields);
         *      });
         *
         * @param {Object} params The parameters for retrieving preview results. For a list of available parameters, see the <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fresults_preview" target="_blank">GET search/jobs/{search_id}/results_preview</a> endpoint in the REST API documentation.
         * @param {Function} callback A function to call when the preview results are retrieved : `(err, results, job)`.
         *
         * @endpoint search/jobs/{search_id}/results_preview
         * @method splunkjs.Service.Job
         */preview:function(params,callback){cov_1nf65u3g4c().f[212]++;cov_1nf65u3g4c().s[657]++;callback=(cov_1nf65u3g4c().b[173][0]++,callback)||(cov_1nf65u3g4c().b[173][1]++,function(){cov_1nf65u3g4c().f[213]++;});cov_1nf65u3g4c().s[658]++;params=(cov_1nf65u3g4c().b[174][0]++,params)||(cov_1nf65u3g4c().b[174][1]++,{});cov_1nf65u3g4c().s[659]++;params.output_mode=(cov_1nf65u3g4c().b[175][0]++,params.output_mode)||(cov_1nf65u3g4c().b[175][1]++,"json_rows");var that=(cov_1nf65u3g4c().s[660]++,this);cov_1nf65u3g4c().s[661]++;return this.get("results_preview",params,function(err,response){cov_1nf65u3g4c().f[214]++;cov_1nf65u3g4c().s[662]++;if(err){cov_1nf65u3g4c().b[176][0]++;cov_1nf65u3g4c().s[663]++;callback(err);}else{cov_1nf65u3g4c().b[176][1]++;cov_1nf65u3g4c().s[664]++;callback(null,response.data,that);}});},/**
         * Gets the results for a search job with given parameters.
         * 
         * The callback can get `undefined` for its `results` parameter if the
         * job is not yet done. To avoid this, use the `Job.track()` method to
         * wait until the job is complete prior to fetching the results with
         * this method.
         * 
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.results({count: 10}, function(err, results, job) {
         *          console.log("Fields: ", results.results);
         *      });
         *
         * @param {Object} params The parameters for retrieving search results. For a list of available parameters, see the <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fresults" target="_blank">GET search/jobs/{search_id}/results</a> endpoint in the REST API documentation.
         * @param {Function} callback A function to call when the results are retrieved: `(err, results, job)`.
         *
         * @endpoint search/jobs/{search_id}/results
         * @method splunkjs.Service.Job
         */results:function(params,callback){cov_1nf65u3g4c().f[215]++;cov_1nf65u3g4c().s[665]++;callback=(cov_1nf65u3g4c().b[177][0]++,callback)||(cov_1nf65u3g4c().b[177][1]++,function(){cov_1nf65u3g4c().f[216]++;});cov_1nf65u3g4c().s[666]++;params=(cov_1nf65u3g4c().b[178][0]++,params)||(cov_1nf65u3g4c().b[178][1]++,{});cov_1nf65u3g4c().s[667]++;params.output_mode=(cov_1nf65u3g4c().b[179][0]++,params.output_mode)||(cov_1nf65u3g4c().b[179][1]++,"json_rows");var that=(cov_1nf65u3g4c().s[668]++,this);cov_1nf65u3g4c().s[669]++;return this.get("results",params,function(err,response){cov_1nf65u3g4c().f[217]++;cov_1nf65u3g4c().s[670]++;if(err){cov_1nf65u3g4c().b[180][0]++;cov_1nf65u3g4c().s[671]++;callback(err);}else{cov_1nf65u3g4c().b[180][1]++;cov_1nf65u3g4c().s[672]++;callback(null,response.data,that);}});},/**
         * Gets the search log for this search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.searchlog(function(err, searchlog, job) {
         *          console.log(searchlog);
         *      });
         *
         * @param {Function} callback A function to call with the search log and job: `(err, searchlog, job)`.
         *
         * @endpoint search/jobs/{search_id}/search.log
         * @method splunkjs.Service.Job
         */searchlog:function(callback){cov_1nf65u3g4c().f[218]++;cov_1nf65u3g4c().s[673]++;callback=(cov_1nf65u3g4c().b[181][0]++,callback)||(cov_1nf65u3g4c().b[181][1]++,function(){cov_1nf65u3g4c().f[219]++;});var that=(cov_1nf65u3g4c().s[674]++,this);cov_1nf65u3g4c().s[675]++;return this.get("search.log",{},function(err,response){cov_1nf65u3g4c().f[220]++;cov_1nf65u3g4c().s[676]++;if(err){cov_1nf65u3g4c().b[182][0]++;cov_1nf65u3g4c().s[677]++;callback(err);}else{cov_1nf65u3g4c().b[182][1]++;cov_1nf65u3g4c().s[678]++;callback(null,response.data,that);}});},/**
         * Sets the priority for this search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.setPriority(6, function(err, job) {
         *          console.log("JOB PRIORITY SET");
         *      });
         *
         * @param {Number} value The priority (an integer between 1-10). A higher value means a higher priority.
         * @param {Function} callback A function to call with the search job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */setPriority:function(value,callback){cov_1nf65u3g4c().f[221]++;cov_1nf65u3g4c().s[679]++;callback=(cov_1nf65u3g4c().b[183][0]++,callback)||(cov_1nf65u3g4c().b[183][1]++,function(){cov_1nf65u3g4c().f[222]++;});var that=(cov_1nf65u3g4c().s[680]++,this);var req=(cov_1nf65u3g4c().s[681]++,this.post("control",{action:"setpriority",priority:value},function(err){cov_1nf65u3g4c().f[223]++;cov_1nf65u3g4c().s[682]++;callback(err,that);}));cov_1nf65u3g4c().s[683]++;return req;},/**
         * Sets the time to live (TTL) for the search job, which is the time before
         * the search job expires after it has been completed and is still available.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.setTTL(1000, function(err, job) {
         *          console.log("JOB TTL SET");
         *      });
         *
         * @param {Number} value The time to live, in seconds. 
         * @param {Function} callback A function to call with the search job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */setTTL:function(value,callback){cov_1nf65u3g4c().f[224]++;cov_1nf65u3g4c().s[684]++;callback=(cov_1nf65u3g4c().b[184][0]++,callback)||(cov_1nf65u3g4c().b[184][1]++,function(){cov_1nf65u3g4c().f[225]++;});var that=(cov_1nf65u3g4c().s[685]++,this);var req=(cov_1nf65u3g4c().s[686]++,this.post("control",{action:"setttl",ttl:value},function(err){cov_1nf65u3g4c().f[226]++;cov_1nf65u3g4c().s[687]++;callback(err,that);}));cov_1nf65u3g4c().s[688]++;return req;},/**
         * Gets the summary for this search job with the given parameters.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.summary({top_count: 5}, function(err, summary, job) {
         *          console.log("Summary: ", summary);
         *      });
         *
         * @param {Object} params The parameters for retrieving the summary. For a list of available parameters, see the <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fsummary" target="_blank">GET search/jobs/{search_id}/summary</a> endpoint in the REST API documentation.
         * @param {Function} callback A function to call with the summary and search job: `(err, summary, job)`.
         *
         * @endpoint search/jobs/{search_id}/summmary
         * @method splunkjs.Service.Job
         */summary:function(params,callback){cov_1nf65u3g4c().f[227]++;cov_1nf65u3g4c().s[689]++;callback=(cov_1nf65u3g4c().b[185][0]++,callback)||(cov_1nf65u3g4c().b[185][1]++,function(){cov_1nf65u3g4c().f[228]++;});var that=(cov_1nf65u3g4c().s[690]++,this);cov_1nf65u3g4c().s[691]++;return this.get("summary",params,function(err,response){cov_1nf65u3g4c().f[229]++;cov_1nf65u3g4c().s[692]++;if(err){cov_1nf65u3g4c().b[186][0]++;cov_1nf65u3g4c().s[693]++;callback(err);}else{cov_1nf65u3g4c().b[186][1]++;cov_1nf65u3g4c().s[694]++;callback(null,response.data,that);}});},/**
         * Gets the timeline for this search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.timeline({time_format: "%c"}, function(err, job, timeline) {
         *          console.log("Timeline: ", timeline);
         *      });
         *
         * @param {Object} params The parameters for retrieving the timeline. For a list of available parameters, see the <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Ftimeline" target="_blank">GET search/jobs/{search_id}/timeline </a> endpoint in the REST API documentation.
         * @param {Function} callback A function to call with the timeline and search job: `(err, timeline, job)`.
         *
         * @endpoint search/jobs/{search_id}/timeline
         * @method splunkjs.Service.Job
         */timeline:function(params,callback){cov_1nf65u3g4c().f[230]++;cov_1nf65u3g4c().s[695]++;callback=(cov_1nf65u3g4c().b[187][0]++,callback)||(cov_1nf65u3g4c().b[187][1]++,function(){cov_1nf65u3g4c().f[231]++;});var that=(cov_1nf65u3g4c().s[696]++,this);cov_1nf65u3g4c().s[697]++;return this.get("timeline",params,function(err,response){cov_1nf65u3g4c().f[232]++;cov_1nf65u3g4c().s[698]++;if(err){cov_1nf65u3g4c().b[188][0]++;cov_1nf65u3g4c().s[699]++;callback(err);}else{cov_1nf65u3g4c().b[188][1]++;cov_1nf65u3g4c().s[700]++;callback(null,response.data,that);}});},/**
         * Touches a search job, which means extending the expiration time of 
         * the search to now plus the time to live (TTL).
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.touch(function(err) {
         *          console.log("JOB TOUCHED");
         *      });
         *
         * @param {Function} callback A function to call with the search job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */touch:function(callback){cov_1nf65u3g4c().f[233]++;cov_1nf65u3g4c().s[701]++;callback=(cov_1nf65u3g4c().b[189][0]++,callback)||(cov_1nf65u3g4c().b[189][1]++,function(){cov_1nf65u3g4c().f[234]++;});var that=(cov_1nf65u3g4c().s[702]++,this);var req=(cov_1nf65u3g4c().s[703]++,this.post("control",{action:"touch"},function(err){cov_1nf65u3g4c().f[235]++;cov_1nf65u3g4c().s[704]++;callback(err,that);}));cov_1nf65u3g4c().s[705]++;return req;},/**
         * Starts polling the status of this search job, and fires callbacks
         * upon each status change.
         * 
         * @param {Object} options A dictionary of optional parameters:
         *    - `period` (_integer_): The number of milliseconds to wait between each poll. Defaults to 500.
         * @param {Object|Function} callbacks A dictionary of optional callbacks:
         *    - `ready`: A function `(job)` invoked when the job's properties first become available.
         *    - `progress`: A function `(job)` invoked whenever new job properties are available.
         *    - `done`: A function `(job)` invoked if the job completes successfully. No further polling is done.
         *    - `failed`: A function `(job)` invoked if the job fails executing on the server. No further polling is done.
         *    - `error`: A function `(err)` invoked if an error occurs while polling. No further polling is done.
         * Or, if a function `(job)`, equivalent to passing it as a `done` callback.
         *
         * @method splunkjs.Service.Job
         */track:function(options,callbacks){cov_1nf65u3g4c().f[236]++;var period=(cov_1nf65u3g4c().s[706]++,(cov_1nf65u3g4c().b[190][0]++,options.period)||(cov_1nf65u3g4c().b[190][1]++,500));// ms
cov_1nf65u3g4c().s[707]++;if(utils.isFunction(callbacks)){cov_1nf65u3g4c().b[191][0]++;cov_1nf65u3g4c().s[708]++;callbacks={done:callbacks};}else{cov_1nf65u3g4c().b[191][1]++;}var noCallbacksAfterReady=(cov_1nf65u3g4c().s[709]++,(cov_1nf65u3g4c().b[192][0]++,!callbacks.progress)&&(cov_1nf65u3g4c().b[192][1]++,!callbacks.done)&&(cov_1nf65u3g4c().b[192][2]++,!callbacks.failed)&&(cov_1nf65u3g4c().b[192][3]++,!callbacks.error));cov_1nf65u3g4c().s[710]++;callbacks.ready=(cov_1nf65u3g4c().b[193][0]++,callbacks.ready)||(cov_1nf65u3g4c().b[193][1]++,function(){cov_1nf65u3g4c().f[237]++;});cov_1nf65u3g4c().s[711]++;callbacks.progress=(cov_1nf65u3g4c().b[194][0]++,callbacks.progress)||(cov_1nf65u3g4c().b[194][1]++,function(){cov_1nf65u3g4c().f[238]++;});cov_1nf65u3g4c().s[712]++;callbacks.done=(cov_1nf65u3g4c().b[195][0]++,callbacks.done)||(cov_1nf65u3g4c().b[195][1]++,function(){cov_1nf65u3g4c().f[239]++;});cov_1nf65u3g4c().s[713]++;callbacks.failed=(cov_1nf65u3g4c().b[196][0]++,callbacks.failed)||(cov_1nf65u3g4c().b[196][1]++,function(){cov_1nf65u3g4c().f[240]++;});cov_1nf65u3g4c().s[714]++;callbacks.error=(cov_1nf65u3g4c().b[197][0]++,callbacks.error)||(cov_1nf65u3g4c().b[197][1]++,function(){cov_1nf65u3g4c().f[241]++;});// For use by tests only
cov_1nf65u3g4c().s[715]++;callbacks._preready=(cov_1nf65u3g4c().b[198][0]++,callbacks._preready)||(cov_1nf65u3g4c().b[198][1]++,function(){cov_1nf65u3g4c().f[242]++;});cov_1nf65u3g4c().s[716]++;callbacks._stoppedAfterReady=(cov_1nf65u3g4c().b[199][0]++,callbacks._stoppedAfterReady)||(cov_1nf65u3g4c().b[199][1]++,function(){cov_1nf65u3g4c().f[243]++;});var that=(cov_1nf65u3g4c().s[717]++,this);var emittedReady=(cov_1nf65u3g4c().s[718]++,false);var doneLooping=(cov_1nf65u3g4c().s[719]++,false);cov_1nf65u3g4c().s[720]++;Async.whilst(function(){cov_1nf65u3g4c().f[244]++;cov_1nf65u3g4c().s[721]++;return!doneLooping;},function(nextIteration){cov_1nf65u3g4c().f[245]++;cov_1nf65u3g4c().s[722]++;that.fetch(function(err,job){cov_1nf65u3g4c().f[246]++;cov_1nf65u3g4c().s[723]++;if(err){cov_1nf65u3g4c().b[200][0]++;cov_1nf65u3g4c().s[724]++;nextIteration(err);cov_1nf65u3g4c().s[725]++;return;}else{cov_1nf65u3g4c().b[200][1]++;}var dispatchState=(cov_1nf65u3g4c().s[726]++,job.properties().dispatchState);var notReady=(cov_1nf65u3g4c().s[727]++,(cov_1nf65u3g4c().b[201][0]++,dispatchState==="QUEUED")||(cov_1nf65u3g4c().b[201][1]++,dispatchState==="PARSING"));cov_1nf65u3g4c().s[728]++;if(notReady){cov_1nf65u3g4c().b[202][0]++;cov_1nf65u3g4c().s[729]++;callbacks._preready(job);}else{cov_1nf65u3g4c().b[202][1]++;cov_1nf65u3g4c().s[730]++;if(!emittedReady){cov_1nf65u3g4c().b[203][0]++;cov_1nf65u3g4c().s[731]++;callbacks.ready(job);cov_1nf65u3g4c().s[732]++;emittedReady=true;// Optimization: Don't keep polling the job if the
// caller only cares about the `ready` event.
cov_1nf65u3g4c().s[733]++;if(noCallbacksAfterReady){cov_1nf65u3g4c().b[204][0]++;cov_1nf65u3g4c().s[734]++;callbacks._stoppedAfterReady(job);cov_1nf65u3g4c().s[735]++;doneLooping=true;cov_1nf65u3g4c().s[736]++;nextIteration();cov_1nf65u3g4c().s[737]++;return;}else{cov_1nf65u3g4c().b[204][1]++;}}else{cov_1nf65u3g4c().b[203][1]++;}cov_1nf65u3g4c().s[738]++;callbacks.progress(job);var props=(cov_1nf65u3g4c().s[739]++,job.properties());cov_1nf65u3g4c().s[740]++;if((cov_1nf65u3g4c().b[206][0]++,dispatchState==="DONE")&&(cov_1nf65u3g4c().b[206][1]++,props.isDone)){cov_1nf65u3g4c().b[205][0]++;cov_1nf65u3g4c().s[741]++;callbacks.done(job);cov_1nf65u3g4c().s[742]++;doneLooping=true;cov_1nf65u3g4c().s[743]++;nextIteration();cov_1nf65u3g4c().s[744]++;return;}else{cov_1nf65u3g4c().b[205][1]++;cov_1nf65u3g4c().s[745]++;if((cov_1nf65u3g4c().b[208][0]++,dispatchState==="FAILED")&&(cov_1nf65u3g4c().b[208][1]++,props.isFailed)){cov_1nf65u3g4c().b[207][0]++;cov_1nf65u3g4c().s[746]++;callbacks.failed(job);cov_1nf65u3g4c().s[747]++;doneLooping=true;cov_1nf65u3g4c().s[748]++;nextIteration();cov_1nf65u3g4c().s[749]++;return;}else{cov_1nf65u3g4c().b[207][1]++;}}}cov_1nf65u3g4c().s[750]++;Async.sleep(period,nextIteration);});},function(err){cov_1nf65u3g4c().f[247]++;cov_1nf65u3g4c().s[751]++;if(err){cov_1nf65u3g4c().b[209][0]++;cov_1nf65u3g4c().s[752]++;callbacks.error(err);}else{cov_1nf65u3g4c().b[209][1]++;}});},/**
         * Resumes a search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.unpause(function(err) {
         *          console.log("JOB UNPAUSED");
         *      });
         *
         * @param {Function} callback A function to call with the search job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */unpause:function(callback){cov_1nf65u3g4c().f[248]++;cov_1nf65u3g4c().s[753]++;callback=(cov_1nf65u3g4c().b[210][0]++,callback)||(cov_1nf65u3g4c().b[210][1]++,function(){cov_1nf65u3g4c().f[249]++;});var that=(cov_1nf65u3g4c().s[754]++,this);var req=(cov_1nf65u3g4c().s[755]++,this.post("control",{action:"unpause"},function(err){cov_1nf65u3g4c().f[250]++;cov_1nf65u3g4c().s[756]++;callback(err,that);}));cov_1nf65u3g4c().s[757]++;return req;}});/**
     * Represents a collection of search jobs. You can create and list search 
     * jobs using this collection container, or get a specific search job.
     *
     * @endpoint search/jobs
     * @class splunkjs.Service.Jobs
     * @extends splunkjs.Service.Collection
     */cov_1nf65u3g4c().s[758]++;root.Jobs=root.Collection.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Jobs
         */path:function(){cov_1nf65u3g4c().f[251]++;cov_1nf65u3g4c().s[759]++;return Paths.jobs;},/**
         * Creates a local instance of a job.
         *
         * @param {Object} props The properties for this new job. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams" target="_blank">Search job parameters</a> on Splunk Developer Portal.
         * @return {splunkjs.Service.Job} A new `splunkjs.Service.Job` instance.
         *
         * @method splunkjs.Service.Jobs
         */instantiateEntity:function(props){cov_1nf65u3g4c().f[252]++;var sid=(cov_1nf65u3g4c().s[760]++,props.content.sid);var entityNamespace=(cov_1nf65u3g4c().s[761]++,utils.namespaceFromProperties(props));cov_1nf65u3g4c().s[762]++;return new root.Job(this.service,sid,entityNamespace);},/**
         * Constructor for `splunkjs.Service.Jobs`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Jobs} A new `splunkjs.Service.Jobs` instance.
         *
         * @method splunkjs.Service.Jobs
         */init:function(service,namespace){cov_1nf65u3g4c().f[253]++;cov_1nf65u3g4c().s[763]++;this._super(service,this.path(),namespace);// We perform the bindings so that every function works 
// properly when it is passed as a callback.
cov_1nf65u3g4c().s[764]++;this.create=utils.bind(this,this.create);},/**
         * Creates a search job with a given search query and optional parameters, including `exec_mode` to specify the type of search:
         *
         *    - Use `exec_mode=normal` to return a search job ID immediately (default).
         *      Poll for completion to find out when you can retrieve search results. 
         *
         *    - Use `exec_mode=blocking` to return the search job ID when the search has finished.
         * 
         * To run a oneshot search, which does not create a job but rather returns the search results, use `Service.Jobs.oneshotSearch`.
         *
         * @param {String} query The search query.
         * @param {Object} params A dictionary of properties for the search job. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams" target="_blank">Search job parameters</a> on Splunk Developer Portal.
         * @param {Function} callback A function to call with the created job: `(err, createdJob)`.
         *
         * @endpoint search/jobs
         * @method splunkjs.Service.Jobs
         */create:function(query,params,callback){cov_1nf65u3g4c().f[254]++;cov_1nf65u3g4c().s[765]++;// If someone called us with the default style of (params, callback),
// lets make it work
if((cov_1nf65u3g4c().b[212][0]++,utils.isObject(query))&&(cov_1nf65u3g4c().b[212][1]++,utils.isFunction(params))&&(cov_1nf65u3g4c().b[212][2]++,!callback)){cov_1nf65u3g4c().b[211][0]++;cov_1nf65u3g4c().s[766]++;callback=params;cov_1nf65u3g4c().s[767]++;params=query;cov_1nf65u3g4c().s[768]++;query=params.search;}else{cov_1nf65u3g4c().b[211][1]++;}cov_1nf65u3g4c().s[769]++;callback=(cov_1nf65u3g4c().b[213][0]++,callback)||(cov_1nf65u3g4c().b[213][1]++,function(){cov_1nf65u3g4c().f[255]++;});cov_1nf65u3g4c().s[770]++;params=(cov_1nf65u3g4c().b[214][0]++,params)||(cov_1nf65u3g4c().b[214][1]++,{});cov_1nf65u3g4c().s[771]++;params.search=query;cov_1nf65u3g4c().s[772]++;if(((cov_1nf65u3g4c().b[216][0]++,params.exec_mode)||(cov_1nf65u3g4c().b[216][1]++,"")).toLowerCase()==="oneshot"){cov_1nf65u3g4c().b[215][0]++;cov_1nf65u3g4c().s[773]++;throw new Error("Please use splunkjs.Service.Jobs.oneshotSearch for exec_mode=oneshot");}else{cov_1nf65u3g4c().b[215][1]++;}cov_1nf65u3g4c().s[774]++;if(!params.search){cov_1nf65u3g4c().b[217][0]++;cov_1nf65u3g4c().s[775]++;callback("Must provide a query to create a search job");cov_1nf65u3g4c().s[776]++;return;}else{cov_1nf65u3g4c().b[217][1]++;}var that=(cov_1nf65u3g4c().s[777]++,this);cov_1nf65u3g4c().s[778]++;return this.post("",params,function(err,response){cov_1nf65u3g4c().f[256]++;cov_1nf65u3g4c().s[779]++;if(err){cov_1nf65u3g4c().b[218][0]++;cov_1nf65u3g4c().s[780]++;callback(err);}else{cov_1nf65u3g4c().b[218][1]++;var job=(cov_1nf65u3g4c().s[781]++,new root.Job(that.service,response.data.sid,that.namespace));cov_1nf65u3g4c().s[782]++;callback(null,job);}});},/**
         * Creates a search job with a given search query and optional parameters, including `exec_mode` to specify the type of search:
         *
         *    - Use `exec_mode=normal` to return a search job ID immediately (default).
         *      Poll for completion to find out when you can retrieve search results. 
         *
         *    - Use `exec_mode=blocking` to return the search job ID when the search has finished.
         * 
         * To run a oneshot search, which does not create a job but rather returns the search results, use `Service.Jobs.oneshotSearch`.
         *
         * @example
         *
         *      var jobs = service.jobs();
         *      jobs.search("search ERROR", {id: "myjob_123"}, function(err, newJob) {
         *          console.log("CREATED": newJob.sid);
         *      });
         *
         * @param {String} query The search query.
         * @param {Object} params A dictionary of properties for the search job. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams" target="_blank">Search job parameters</a> on Splunk Developer Portal.
         *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.
         * @param {Function} callback A function to call with the new search job: `(err, createdJob)`.
         *
         * @endpoint search/jobs
         * @method splunkjs.Service.Jobs
         */search:function(query,params,callback){cov_1nf65u3g4c().f[257]++;cov_1nf65u3g4c().s[783]++;return this.create(query,params,callback);},/**
         * Creates a oneshot search from a given search query and parameters.
         *
         * @example
         *
         *      var jobs = service.jobs();
         *      jobs.oneshotSearch("search ERROR", {id: "myjob_123"}, function(err, results) {
         *          console.log("RESULT FIELDS": results.fields);
         *      });
         *
         * @param {String} query The search query. 
         * @param {Object} params A dictionary of properties for the search:
         *    - `output_mode` (_string_): Specifies the output format of the results (XML, JSON, or CSV).
         *    - `earliest_time` (_string_): Specifies the earliest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.
         *    - `latest_time` (_string_): Specifies the latest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.
         *    - `rf` (_string_): Specifies one or more fields to add to the search.
         * @param {Function} callback A function to call with the results of the search: `(err, results)`.
         *
         * @endpoint search/jobs
         * @method splunkjs.Service.Jobs
         */oneshotSearch:function(query,params,callback){cov_1nf65u3g4c().f[258]++;cov_1nf65u3g4c().s[784]++;// If someone called us with the default style of (params, callback),
// lets make it work
if((cov_1nf65u3g4c().b[220][0]++,utils.isObject(query))&&(cov_1nf65u3g4c().b[220][1]++,utils.isFunction(params))&&(cov_1nf65u3g4c().b[220][2]++,!callback)){cov_1nf65u3g4c().b[219][0]++;cov_1nf65u3g4c().s[785]++;callback=params;cov_1nf65u3g4c().s[786]++;params=query;cov_1nf65u3g4c().s[787]++;query=params.search;}else{cov_1nf65u3g4c().b[219][1]++;}cov_1nf65u3g4c().s[788]++;callback=(cov_1nf65u3g4c().b[221][0]++,callback)||(cov_1nf65u3g4c().b[221][1]++,function(){cov_1nf65u3g4c().f[259]++;});cov_1nf65u3g4c().s[789]++;params=(cov_1nf65u3g4c().b[222][0]++,params)||(cov_1nf65u3g4c().b[222][1]++,{});cov_1nf65u3g4c().s[790]++;params.search=query;cov_1nf65u3g4c().s[791]++;params.exec_mode="oneshot";cov_1nf65u3g4c().s[792]++;if(!params.search){cov_1nf65u3g4c().b[223][0]++;cov_1nf65u3g4c().s[793]++;callback("Must provide a query to create a search job");}else{cov_1nf65u3g4c().b[223][1]++;}var outputMode=(cov_1nf65u3g4c().s[794]++,(cov_1nf65u3g4c().b[224][0]++,params.output_mode)||(cov_1nf65u3g4c().b[224][1]++,"json_rows"));var path=(cov_1nf65u3g4c().s[795]++,this.qualifiedPath);var method=(cov_1nf65u3g4c().s[796]++,"POST");var headers=(cov_1nf65u3g4c().s[797]++,{});var post=(cov_1nf65u3g4c().s[798]++,params);var get=(cov_1nf65u3g4c().s[799]++,{output_mode:outputMode});var body=(cov_1nf65u3g4c().s[800]++,null);var req=(cov_1nf65u3g4c().s[801]++,this.service.request(path,method,get,post,body,headers,function(err,response){cov_1nf65u3g4c().f[260]++;cov_1nf65u3g4c().s[802]++;if(err){cov_1nf65u3g4c().b[225][0]++;cov_1nf65u3g4c().s[803]++;callback(err);}else{cov_1nf65u3g4c().b[225][1]++;cov_1nf65u3g4c().s[804]++;callback(null,response.data);}}));cov_1nf65u3g4c().s[805]++;return req;}});/**
     * Represents a field of a data model object.
     * This is a helper class for `DataModelCalculation`
     * and `DataModelObject`.
     *
     * Has these properties:
     *    - `fieldName` (_string_): The name of this field.
     *    - `displayName` (_string_):  A human readable name for this field.
     *    - `type` (_string_): The type of this field.
     *    - `multivalued` (_boolean_): Whether this field is multivalued.
     *    - `required` (_boolean_): Whether this field is required.
     *    - `hidden` (_boolean_): Whether this field should be displayed in a data model UI.
     *    - `editable` (_boolean_): Whether this field can be edited.
     *    - `comment` (_string_): A comment for this field, or `null` if there isn't one.
     *    - `fieldSearch` (_string_): A search query fragment for this field.
     *    - `lineage` (_array_): An array of strings of the lineage of the data model
     *          on which this field is defined.
     *    - `owner` (_string_): The name of the data model object on which this field is defined.
     *
     * Possible types for a data model field:
     *    - `string`
     *    - `boolean`
     *    - `number`
     *    - `timestamp`
     *    - `objectCount`
     *    - `childCount`
     *    - `ipv4`
     *
     * @class splunkjs.Service.DataModelField
     */cov_1nf65u3g4c().s[806]++;root.DataModelField=Class.extend({_types:["string","number","timestamp","objectCount","childCount","ipv4","boolean"],/**
         * Constructor for a data model field.
         * SDK users are not expected to invoke this constructor directly.
         *
         * @constructor
         * @param {Object} props A dictionary of properties to set:
         *     - `fieldName` (_string_): The name of this field.
         *     - `displayName` (_string_): A human readable name for this field.
         *     - `type` (_string_): The type of this field, see valid types in class docs.
         *     - `multivalue` (_boolean_): Whether this field is multivalued.
         *     - `required` (_boolean_): Whether this field is required on events in the object
         *     - `hidden` (_boolean_): Whether this field should be displayed in a data model UI.
         *     - `editable` (_boolean_): Whether this field can be edited.
         *     - `comment` (_string_): A comment for this field, or `null` if there isn't one.
         *     - `fieldSearch` (_string_): A search query fragment for this field.
         *     - `lineage` (_string_): The lineage of the data model object on which this field
         *          is defined, items are delimited by a dot. This is converted into an array of
         *          strings upon construction.
         *
         * @method splunkjs.Service.DataModelField
         */init:function(props){cov_1nf65u3g4c().f[261]++;cov_1nf65u3g4c().s[807]++;props=(cov_1nf65u3g4c().b[226][0]++,props)||(cov_1nf65u3g4c().b[226][1]++,{});cov_1nf65u3g4c().s[808]++;props.owner=(cov_1nf65u3g4c().b[227][0]++,props.owner)||(cov_1nf65u3g4c().b[227][1]++,"");cov_1nf65u3g4c().s[809]++;this.name=props.fieldName;cov_1nf65u3g4c().s[810]++;this.displayName=props.displayName;cov_1nf65u3g4c().s[811]++;this.type=props.type;cov_1nf65u3g4c().s[812]++;this.multivalued=props.multivalue;cov_1nf65u3g4c().s[813]++;this.required=props.required;cov_1nf65u3g4c().s[814]++;this.hidden=props.hidden;cov_1nf65u3g4c().s[815]++;this.editable=props.editable;cov_1nf65u3g4c().s[816]++;this.comment=(cov_1nf65u3g4c().b[228][0]++,props.comment)||(cov_1nf65u3g4c().b[228][1]++,null);cov_1nf65u3g4c().s[817]++;this.fieldSearch=props.fieldSearch;cov_1nf65u3g4c().s[818]++;this.lineage=props.owner.split(".");cov_1nf65u3g4c().s[819]++;this.owner=this.lineage[this.lineage.length-1];},/**
         * Is this data model field of type string?
         *
         * @return {Boolean} True if this data model field is of type string.
         *
         * @method splunkjs.Service.DataModelField
         */isString:function(){cov_1nf65u3g4c().f[262]++;cov_1nf65u3g4c().s[820]++;return"string"===this.type;},/**
         * Is this data model field of type number?
         *
         * @return {Boolean} True if this data model field is of type number.
         *
         * @method splunkjs.Service.DataModelField
         */isNumber:function(){cov_1nf65u3g4c().f[263]++;cov_1nf65u3g4c().s[821]++;return"number"===this.type;},/**
         * Is this data model field of type timestamp?
         *
         * @return {Boolean} True if this data model field is of type timestamp.
         *
         * @method splunkjs.Service.DataModelField
         */isTimestamp:function(){cov_1nf65u3g4c().f[264]++;cov_1nf65u3g4c().s[822]++;return"timestamp"===this.type;},/**
         * Is this data model field of type object count?
         *
         * @return {Boolean} True if this data model field is of type object count.
         *
         * @method splunkjs.Service.DataModelField
         */isObjectcount:function(){cov_1nf65u3g4c().f[265]++;cov_1nf65u3g4c().s[823]++;return"objectCount"===this.type;},/**
         * Is this data model field of type child count?
         *
         * @return {Boolean} True if this data model field is of type child count.
         *
         * @method splunkjs.Service.DataModelField
         */isChildcount:function(){cov_1nf65u3g4c().f[266]++;cov_1nf65u3g4c().s[824]++;return"childCount"===this.type;},/**
         * Is this data model field of type ipv4?
         *
         * @return {Boolean} True if this data model field is of type ipv4.
         *
         * @method splunkjs.Service.DataModelField
         */isIPv4:function(){cov_1nf65u3g4c().f[267]++;cov_1nf65u3g4c().s[825]++;return"ipv4"===this.type;},/**
         * Is this data model field of type boolean?
         *
         * @return {Boolean} True if this data model field is of type boolean.
         *
         * @method splunkjs.Service.DataModelField
         */isBoolean:function(){cov_1nf65u3g4c().f[268]++;cov_1nf65u3g4c().s[826]++;return"boolean"===this.type;}});/**
     * Represents a constraint on a `DataModelObject` or a `DataModelField`.
     *
     * Has these properties:
     *    - `query` (_string_): The search query defining this data model constraint.
     *    - `lineage` (_array_): The lineage of this data model constraint.
     *    - `owner` (_string_): The name of the data model object that owns
     *          this data model constraint.
     *
     * @class splunkjs.Service.DataModelConstraint
     */cov_1nf65u3g4c().s[827]++;root.DataModelConstraint=Class.extend({/**
         * Constructor for a data model constraint.
         * SDK users are not expected to invoke this constructor directly.
         *
         * @constructor
         * @param {Object} props A dictionary of properties to set:
         *     - `search` (_string_): The Splunk search query this constraint specifies.
         *     - `owner` (_string_): The lineage of the data model object that owns this
         *          constraint, items are delimited by a dot. This is converted into
         *          an array of strings upon construction.
         *
         * @method splunkjs.Service.DataModelConstraint
         */init:function(props){cov_1nf65u3g4c().f[269]++;cov_1nf65u3g4c().s[828]++;props=(cov_1nf65u3g4c().b[229][0]++,props)||(cov_1nf65u3g4c().b[229][1]++,{});cov_1nf65u3g4c().s[829]++;props.owner=(cov_1nf65u3g4c().b[230][0]++,props.owner)||(cov_1nf65u3g4c().b[230][1]++,"");cov_1nf65u3g4c().s[830]++;this.query=props.search;cov_1nf65u3g4c().s[831]++;this.lineage=props.owner.split(".");cov_1nf65u3g4c().s[832]++;this.owner=this.lineage[this.lineage.length-1];}});/**
     * Used for specifying a calculation on a `DataModelObject`.
     *
     * Has these properties:
     *    - `id` (_string_): The ID for this data model calculation.
     *    - `type` (_string_): The type of this data model calculation.
     *    - `comment` (_string_|_null_): The comment for this data model calculation, or `null`.
     *    - `editable` (_boolean_): True if this calculation can be edited, false otherwise.
     *    - `lineage` (_array_): The lineage of the data model object on which this calculation
     *          is defined in an array of strings.
     *    - `owner` (_string_): The data model that this calculation belongs to.
     *    - `outputFields` (_array_): The fields output by this calculation.
     *
     * The Rex and Eval types have an additional property:
     *    - `expression` (_string_): The expression to use for this calculation.
     *
     * The Rex and GeoIP types have an additional property:
     *    - `inputField` (_string_): The field to use for calculation.
     *
     * The Lookup type has additional properties:
     *    - `lookupName` (_string_): The name of the lookup to perform.
     *    - `inputFieldMappings` (_object_): The mappings from fields in the events to fields in the lookup.
     *
     * Valid types of calculations are:
     *    - `Lookup`
     *    - `Eval`
     *    - `GeoIP`
     *    - `Rex`
     *
     * @class splunkjs.Service.DataModelCalculation
     */cov_1nf65u3g4c().s[833]++;root.DataModelCalculation=Class.extend({_types:["Lookup","Eval","GeoIP","Rex"],/**
         * Constructor for a data model calculation.
         * SDK users are not expected to invoke this constructor directly.
         *
         * @constructor
         * @param {Object} props A dictionary of properties to set:
         *     - `calculationID` (_string_): The ID of this calculation.
         *     - `calculationType` (_string_): The type of this calculation, see class docs for valid types.
         *     - `editable` (_boolean_): Whether this calculation can be edited.
         *     - `comment` (_string_): A comment for this calculation, or `null` if there isn't one.
         *     - `owner` (_string_): The lineage of the data model object on which this calculation
         *          is defined, items are delimited by a dot. This is converted into an array of
         *          strings upon construction.
         *     - `outputFields` (_array_): An array of the fields this calculation generates.
         *     - `expression` (_string_): The expression to use for this calculation; exclusive to `Eval` and `Rex` calculations (optional)
         *     - `inputField` (_string_): The field to use for calculation; exclusive to `GeoIP` and `Rex` calculations (optional)
         *     - `lookupName` (_string_): The name of the lookup to perform; exclusive to `Lookup` calculations (optional)
         *     - `inputFieldMappings` (_array_): One element array containing an object with the mappings from fields in the events to fields
         *         in the lookup; exclusive to `Lookup` calculations (optional)
         *
         * @method splunkjs.Service.DataModelCalculation
         */init:function(props){cov_1nf65u3g4c().f[270]++;cov_1nf65u3g4c().s[834]++;props=(cov_1nf65u3g4c().b[231][0]++,props)||(cov_1nf65u3g4c().b[231][1]++,{});cov_1nf65u3g4c().s[835]++;props.owner=(cov_1nf65u3g4c().b[232][0]++,props.owner)||(cov_1nf65u3g4c().b[232][1]++,"");cov_1nf65u3g4c().s[836]++;this.id=props.calculationID;cov_1nf65u3g4c().s[837]++;this.type=props.calculationType;cov_1nf65u3g4c().s[838]++;this.comment=(cov_1nf65u3g4c().b[233][0]++,props.comment)||(cov_1nf65u3g4c().b[233][1]++,null);cov_1nf65u3g4c().s[839]++;this.editable=props.editable;cov_1nf65u3g4c().s[840]++;this.lineage=props.owner.split(".");cov_1nf65u3g4c().s[841]++;this.owner=this.lineage[this.lineage.length-1];cov_1nf65u3g4c().s[842]++;this.outputFields=[];cov_1nf65u3g4c().s[843]++;for(var i=(cov_1nf65u3g4c().s[844]++,0);i<props.outputFields.length;i++){cov_1nf65u3g4c().s[845]++;this.outputFields[props.outputFields[i].fieldName]=new root.DataModelField(props.outputFields[i]);}cov_1nf65u3g4c().s[846]++;if((cov_1nf65u3g4c().b[235][0]++,"Eval"===this.type)||(cov_1nf65u3g4c().b[235][1]++,"Rex"===this.type)){cov_1nf65u3g4c().b[234][0]++;cov_1nf65u3g4c().s[847]++;this.expression=props.expression;}else{cov_1nf65u3g4c().b[234][1]++;}cov_1nf65u3g4c().s[848]++;if((cov_1nf65u3g4c().b[237][0]++,"GeoIP"===this.type)||(cov_1nf65u3g4c().b[237][1]++,"Rex"===this.type)){cov_1nf65u3g4c().b[236][0]++;cov_1nf65u3g4c().s[849]++;this.inputField=props.inputField;}else{cov_1nf65u3g4c().b[236][1]++;}cov_1nf65u3g4c().s[850]++;if("Lookup"===this.type){cov_1nf65u3g4c().b[238][0]++;cov_1nf65u3g4c().s[851]++;this.lookupName=props.lookupName;cov_1nf65u3g4c().s[852]++;this.inputFieldMappings=props.lookupInputs[0];}else{cov_1nf65u3g4c().b[238][1]++;}},/**
         * Returns an array of strings of output field names.
         *
         * @return {Array} An array of strings of output field names.
         *
         * @method splunkjs.Service.DataModelCalculation
         */outputFieldNames:function(){cov_1nf65u3g4c().f[271]++;cov_1nf65u3g4c().s[853]++;return Object.keys(this.outputFields);},/**
         * Is this data model calculation editable?
         *
         * @return {Boolean} True if this data model calculation is editable.
         *
         * @method splunkjs.Service.DataModelCalculation
         */isEditable:function(){cov_1nf65u3g4c().f[272]++;cov_1nf65u3g4c().s[854]++;return!!this.editable;},/**
         * Is this data model calculation of type lookup?
         *
         * @return {Boolean} True if this data model calculation is of type lookup.
         *
         * @method splunkjs.Service.DataModelCalculation
         */isLookup:function(){cov_1nf65u3g4c().f[273]++;cov_1nf65u3g4c().s[855]++;return"Lookup"===this.type;},/**
         * Is this data model calculation of type eval?
         *
         * @return {Boolean} True if this data model calculation is of type eval.
         *
         * @method splunkjs.Service.DataModelCalculation
         */isEval:function(){cov_1nf65u3g4c().f[274]++;cov_1nf65u3g4c().s[856]++;return"Eval"===this.type;},/**
         * Is this data model calculation of type Rex?
         *
         * @return {Boolean} True if this data model calculation is of type Rex.
         *
         * @method splunkjs.Service.DataModelCalculation
         */isRex:function(){cov_1nf65u3g4c().f[275]++;cov_1nf65u3g4c().s[857]++;return"Rex"===this.type;},/**
         * Is this data model calculation of type GeoIP?
         *
         * @return {Boolean} True if this data model calculation is of type GeoIP.
         *
         * @method splunkjs.Service.DataModelCalculation
         */isGeoIP:function(){cov_1nf65u3g4c().f[276]++;cov_1nf65u3g4c().s[858]++;return"GeoIP"===this.type;}});/**
     * Pivot represents data about a pivot report returned by the Splunk Server.
     *
     * Has these properties:
     *    - `service` (_splunkjs.Service_): A `Service` instance.
     *    - `search` (_string_): The search string for running the pivot report.
     *    - `drilldownSearch` (_string_): The search for running this pivot report using drilldown.
     *    - `openInSearch` (_string_): Equivalent to search parameter, but listed more simply.
     *    - `prettyQuery` (_string_): Equivalent to `openInSearch`.
     *    - `pivotSearch` (_string_): A pivot search command based on the named data model.
     *    - `tstatsSearch` (_string_): The search for running this pivot report using tstats.
     *
     * @class splunkjs.Service.Pivot
     */cov_1nf65u3g4c().s[859]++;root.Pivot=Class.extend({/**
         * Constructor for a pivot.
         * SDK users are not expected to invoke this constructor directly.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} props A dictionary of properties to set:
         *    - `search` (_string_): The search string for running the pivot report.
         *    - `drilldown_search` (_string_): The search for running this pivot report using drilldown.
         *    - `open_in_search` (_string_): Equivalent to search parameter, but listed more simply.
         *    - `pivot_search` (_string_): A pivot search command based on the named data model.
         *    - `tstats_search` (_string_|_null_): The search for running this pivot report using tstats, null if acceleration is disabled.
         *
         * @method splunkjs.Service.Pivot
         */init:function(service,props){cov_1nf65u3g4c().f[277]++;cov_1nf65u3g4c().s[860]++;this.service=service;cov_1nf65u3g4c().s[861]++;this.search=props.search;cov_1nf65u3g4c().s[862]++;this.drilldownSearch=props.drilldown_search;cov_1nf65u3g4c().s[863]++;this.prettyQuery=this.openInSearch=props.open_in_search;cov_1nf65u3g4c().s[864]++;this.pivotSearch=props.pivot_search;cov_1nf65u3g4c().s[865]++;this.tstatsSearch=(cov_1nf65u3g4c().b[239][0]++,props.tstats_search)||(cov_1nf65u3g4c().b[239][1]++,null);cov_1nf65u3g4c().s[866]++;this.run=utils.bind(this,this.run);},/**
         * Starts a search job running this pivot, accelerated if possible.
         *
         * @param {Object} args A dictionary of properties for the search job (optional). For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams" target="_blank">Search job parameters</a> on Splunk Developer Portal.
         *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.
         * @param {Function} callback A function to call when done creating the search job: `(err, job)`.
         * @method splunkjs.Service.Pivot
         */run:function(args,callback){cov_1nf65u3g4c().f[278]++;cov_1nf65u3g4c().s[867]++;if(utils.isUndefined(callback)){cov_1nf65u3g4c().b[240][0]++;cov_1nf65u3g4c().s[868]++;callback=args;cov_1nf65u3g4c().s[869]++;args={};}else{cov_1nf65u3g4c().b[240][1]++;}cov_1nf65u3g4c().s[870]++;if((cov_1nf65u3g4c().b[242][0]++,!args)||(cov_1nf65u3g4c().b[242][1]++,Object.keys(args).length===0)){cov_1nf65u3g4c().b[241][0]++;cov_1nf65u3g4c().s[871]++;args={};}else{cov_1nf65u3g4c().b[241][1]++;}// If tstats is undefined, use pivotSearch (try to run an accelerated search if possible)
cov_1nf65u3g4c().s[872]++;this.service.search((cov_1nf65u3g4c().b[243][0]++,this.tstatsSearch)||(cov_1nf65u3g4c().b[243][1]++,this.pivotSearch),args,callback);}});/**
     * PivotSpecification represents a pivot to be done on a particular data model object.
     * The user creates a PivotSpecification on some data model object, adds filters, row splits,
     * column splits, and cell values, then calls the pivot method to query splunkd and
     * get a set of SPL queries corresponding to this specification.
     *
     * Call the `pivot` method to query Splunk for SPL queries corresponding to this pivot.
     *
     * This class supports a fluent API, each function except `init`, `toJsonObject` & `pivot`
     * return the modified `splunkjs.Service.PivotSpecification` instance.
     *
     * @example
     *     service.dataModels().fetch(function(err, dataModels) {
     *         var searches = dataModels.item("internal_audit_logs").objectByName("searches");
     *         var pivotSpecification = searches.createPivotSpecification();
     *         pivotSpecification
     *             .addRowSplit("user", "Executing user")
     *             .addRangeColumnSplit("exec_time", {limit: 4})
     *             .addCellValue("search", "Search Query", "values")
     *             .pivot(function(err, pivot) {
     *                 console.log("Got a Pivot object from the Splunk server!");
     *             });
     *     });
     *
     * Has these properties:
     *    - `dataModelObject` (_splunkjs.Service.DataModelObject_): The `DataModelObject` from which
     *        this `PivotSpecification` was created.
     *    - `columns` (_array_): The column splits on this `PivotSpecification`.
     *    - `rows` (_array_): The row splits on this `PivotSpecification`.
     *    - `filters` (_array_): The filters on this `PivotSpecification`.
     *    - `cells` (_array_): The cell aggregations for this`PivotSpecification`.
     *    - `accelerationNamespace` (_string_|_null_): The name of the `DataModel` that owns the `DataModelObject`
     *        on which this `PivotSpecification` was created if the `DataModel` is accelerated. Alternatively,
     *        you can set this property manually to the sid of an acceleration job in the format `sid=<sid>`.
     *
     * Valid comparison types are:
     *    - `boolean`
     *    - `string`
     *    - `number`
     *    - `ipv4`
     *
     * Valid boolean comparisons are:
     *    - `=`
     *    - `is`
     *    - `isNull`
     *    - `isNotNull`
     *
     * Valid string comparisons are:
     *    - `=`
     *    - `is`
     *    - `isNull`
     *    - `isNotNull`
     *    - `contains`
     *    - `doesNotContain`
     *    - `startsWith`
     *    - `endsWith`
     *    - `regex`
     *
     * Valid number comparisons are:
     *    - `=`
     *    - `!=`
     *    - `<`
     *    - `>`
     *    - `<=`
     *    - `>=`
     *    - `is`
     *    - `isNull`
     *    - `isNotNull`
     *
     * Valid ipv4 comparisons are:
     *    - `is`
     *    - `isNull`
     *    - `isNotNull`
     *    - `contains`
     *    - `doesNotContain`
     *    - `startsWith`
     *
     * Valid binning values are:
     *    - `auto`
     *    - `year`
     *    - `month`
     *    - `day`
     *    - `hour`
     *    - `minute`
     *    - `second`
     *
     * Valid sort directions are:
     *    - `ASCENDING`
     *    - `DECENDING`
     *    - `DEFAULT`
     *
     * Valid stats functions are:
     *    - `list`
     *    - `values`
     *    - `first`
     *    - `last`
     *    - `count`
     *    - `dc`
     *    - `sum`
     *    - `average`
     *    - `max`
     *    - `min`
     *    - `stdev`
     *    - `duration`
     *    - `earliest`
     *    - `latest`
     *
     * @class splunkjs.Service.PivotSpecification
     */cov_1nf65u3g4c().s[873]++;root.PivotSpecification=Class.extend({_comparisons:{boolean:["=","is","isNull","isNotNull"],string:["=","is","isNull","isNotNull","contains","doesNotContain","startsWith","endsWith","regex"],number:["=","!=","<",">","<=",">=","is","isNull","isNotNull"],ipv4:["is","isNull","isNotNull","contains","doesNotContain","startsWith"]},_binning:["auto","year","month","day","hour","minute","second"],_sortDirection:["ASCENDING","DESCENDING","DEFAULT"],_statsFunctions:["list","values","first","last","count","dc","sum","average","max","min","stdev","duration","earliest","latest"],/**
         * Constructor for a pivot specification.
         *
         * @constructor
         * @param {splunkjs.Service.DataModel} parentDataModel The `DataModel` that owns this data model object.
         *
         * @method splunkjs.Service.PivotSpecification
         */init:function(dataModelObject){cov_1nf65u3g4c().f[279]++;cov_1nf65u3g4c().s[874]++;this.dataModelObject=dataModelObject;cov_1nf65u3g4c().s[875]++;this.columns=[];cov_1nf65u3g4c().s[876]++;this.rows=[];cov_1nf65u3g4c().s[877]++;this.filters=[];cov_1nf65u3g4c().s[878]++;this.cells=[];cov_1nf65u3g4c().s[879]++;this.accelerationNamespace=dataModelObject.dataModel.isAccelerated()?(cov_1nf65u3g4c().b[244][0]++,dataModelObject.dataModel.name):(cov_1nf65u3g4c().b[244][1]++,null);cov_1nf65u3g4c().s[880]++;this.run=utils.bind(this,this.run);cov_1nf65u3g4c().s[881]++;this.pivot=utils.bind(this,this.pivot);},/**
         * Set the acceleration cache for this pivot specification to a job,
         * usually generated by createLocalAccelerationJob on a DataModelObject
         * instance, as the acceleration cache for this pivot specification.
         *
         * @param {String|splunkjs.Service.Job} sid The sid of an acceleration job,
         *     or, a `splunkjs.Service.Job` instance.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */setAccelerationJob:function(sid){cov_1nf65u3g4c().f[280]++;cov_1nf65u3g4c().s[882]++;// If a search object is passed in, get its sid
if((cov_1nf65u3g4c().b[246][0]++,sid)&&(cov_1nf65u3g4c().b[246][1]++,sid instanceof Service.Job)){cov_1nf65u3g4c().b[245][0]++;cov_1nf65u3g4c().s[883]++;sid=sid.sid;}else{cov_1nf65u3g4c().b[245][1]++;}cov_1nf65u3g4c().s[884]++;if(!sid){cov_1nf65u3g4c().b[247][0]++;cov_1nf65u3g4c().s[885]++;throw new Error("Sid to use for acceleration must not be null.");}else{cov_1nf65u3g4c().b[247][1]++;}cov_1nf65u3g4c().s[886]++;this.accelerationNamespace="sid="+sid;cov_1nf65u3g4c().s[887]++;return this;},/**
         * Add a filter on a boolean valued field. The filter will be a constraint of the form
         * `field `comparison` compareTo`, for example: `is_remote = false`.
         *
         * @param {String} fieldName The name of field to filter on
         * @param {String} comparisonType The type of comparison, see class docs for valid types.
         * @param {String} comparisonOp The comparison, see class docs for valid comparisons, based on type.
         * @param {String} compareTo The value to compare the field to.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addFilter:function(fieldName,comparisonType,comparisonOp,compareTo){cov_1nf65u3g4c().f[281]++;cov_1nf65u3g4c().s[888]++;if(!this.dataModelObject.hasField(fieldName)){cov_1nf65u3g4c().b[248][0]++;cov_1nf65u3g4c().s[889]++;throw new Error("Cannot add filter on a nonexistent field.");}else{cov_1nf65u3g4c().b[248][1]++;}cov_1nf65u3g4c().s[890]++;if(comparisonType!==this.dataModelObject.fieldByName(fieldName).type){cov_1nf65u3g4c().b[249][0]++;cov_1nf65u3g4c().s[891]++;throw new Error("Cannot add "+comparisonType+" filter on "+fieldName+" because it is of type "+this.dataModelObject.fieldByName(fieldName).type);}else{cov_1nf65u3g4c().b[249][1]++;}cov_1nf65u3g4c().s[892]++;if(!utils.contains(this._comparisons[comparisonType],comparisonOp)){cov_1nf65u3g4c().b[250][0]++;cov_1nf65u3g4c().s[893]++;throw new Error("Cannot add "+comparisonType+" filter because "+comparisonOp+" is not a valid comparison operator");}else{cov_1nf65u3g4c().b[250][1]++;}var ret=(cov_1nf65u3g4c().s[894]++,{fieldName:fieldName,owner:this.dataModelObject.fieldByName(fieldName).lineage.join("."),type:comparisonType});// These fields are type dependent
cov_1nf65u3g4c().s[895]++;if(utils.contains(["boolean","string","ipv4","number"],ret.type)){cov_1nf65u3g4c().b[251][0]++;cov_1nf65u3g4c().s[896]++;ret.rule={comparator:comparisonOp,compareTo:compareTo};}else{cov_1nf65u3g4c().b[251][1]++;}cov_1nf65u3g4c().s[897]++;this.filters.push(ret);cov_1nf65u3g4c().s[898]++;return this;},/**
         * Add a limit on the events shown in a pivot by sorting them according to some field, then taking
         * the specified number from the beginning or end of the list.
         *
         * @param {String} fieldName The name of field to filter on.
         * @param {String} sortAttribute The name of the field to use for sorting.
         * @param {String} sortDirection The direction to sort events, see class docs for valid types.
         * @param {String} limit The number of values from the sorted list to allow through this filter.
         * @param {String} statsFunction The stats function to use for aggregation before sorting, see class docs for valid types.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addLimitFilter:function(fieldName,sortAttribute,sortDirection,limit,statsFunction){cov_1nf65u3g4c().f[282]++;cov_1nf65u3g4c().s[899]++;if(!this.dataModelObject.hasField(fieldName)){cov_1nf65u3g4c().b[252][0]++;cov_1nf65u3g4c().s[900]++;throw new Error("Cannot add limit filter on a nonexistent field.");}else{cov_1nf65u3g4c().b[252][1]++;}var f=(cov_1nf65u3g4c().s[901]++,this.dataModelObject.fieldByName(fieldName));cov_1nf65u3g4c().s[902]++;if(!utils.contains(["string","number","objectCount"],f.type)){cov_1nf65u3g4c().b[253][0]++;cov_1nf65u3g4c().s[903]++;throw new Error("Cannot add limit filter on "+fieldName+" because it is of type "+f.type);}else{cov_1nf65u3g4c().b[253][1]++;}cov_1nf65u3g4c().s[904]++;if((cov_1nf65u3g4c().b[255][0]++,"string"===f.type)&&(cov_1nf65u3g4c().b[255][1]++,!utils.contains(["count","dc"],statsFunction))){cov_1nf65u3g4c().b[254][0]++;cov_1nf65u3g4c().s[905]++;throw new Error("Stats function for fields of type string must be COUNT or DISTINCT_COUNT; found "+statsFunction);}else{cov_1nf65u3g4c().b[254][1]++;}cov_1nf65u3g4c().s[906]++;if((cov_1nf65u3g4c().b[257][0]++,"number"===f.type)&&(cov_1nf65u3g4c().b[257][1]++,!utils.contains(["count","dc","average","sum"],statsFunction))){cov_1nf65u3g4c().b[256][0]++;cov_1nf65u3g4c().s[907]++;throw new Error("Stats function for fields of type number must be one of COUNT, DISTINCT_COUNT, SUM, or AVERAGE; found "+statsFunction);}else{cov_1nf65u3g4c().b[256][1]++;}cov_1nf65u3g4c().s[908]++;if((cov_1nf65u3g4c().b[259][0]++,"objectCount"===f.type)&&(cov_1nf65u3g4c().b[259][1]++,!utils.contains(["count"],statsFunction))){cov_1nf65u3g4c().b[258][0]++;cov_1nf65u3g4c().s[909]++;throw new Error("Stats function for fields of type object count must be COUNT; found "+statsFunction);}else{cov_1nf65u3g4c().b[258][1]++;}var filter=(cov_1nf65u3g4c().s[910]++,{fieldName:fieldName,owner:f.lineage.join("."),type:f.type,attributeName:sortAttribute,attributeOwner:this.dataModelObject.fieldByName(sortAttribute).lineage.join("."),sortDirection:sortDirection,limitAmount:limit,statsFn:statsFunction});// Assumed "highest" is preferred for when sortDirection is "DEFAULT"
cov_1nf65u3g4c().s[911]++;filter.limitType="ASCENDING"===sortDirection?(cov_1nf65u3g4c().b[260][0]++,"lowest"):(cov_1nf65u3g4c().b[260][1]++,"highest");cov_1nf65u3g4c().s[912]++;this.filters.push(filter);cov_1nf65u3g4c().s[913]++;return this;},/**
         * Add a row split on a numeric or string valued field, splitting on each distinct value of the field.
         *
         * @param {String} fieldName The name of field to split on.
         * @param {String} label A human readable name for this set of rows.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addRowSplit:function(fieldName,label){cov_1nf65u3g4c().f[283]++;cov_1nf65u3g4c().s[914]++;if(!this.dataModelObject.hasField(fieldName)){cov_1nf65u3g4c().b[261][0]++;cov_1nf65u3g4c().s[915]++;throw new Error("Did not find field "+fieldName);}else{cov_1nf65u3g4c().b[261][1]++;}var f=(cov_1nf65u3g4c().s[916]++,this.dataModelObject.fieldByName(fieldName));cov_1nf65u3g4c().s[917]++;if(!utils.contains(["number","string"],f.type)){cov_1nf65u3g4c().b[262][0]++;cov_1nf65u3g4c().s[918]++;throw new Error("Field was of type "+f.type+", expected number or string.");}else{cov_1nf65u3g4c().b[262][1]++;}var row=(cov_1nf65u3g4c().s[919]++,{fieldName:fieldName,owner:f.owner,type:f.type,label:label});cov_1nf65u3g4c().s[920]++;if("number"===f.type){cov_1nf65u3g4c().b[263][0]++;cov_1nf65u3g4c().s[921]++;row.display="all";}else{cov_1nf65u3g4c().b[263][1]++;}cov_1nf65u3g4c().s[922]++;this.rows.push(row);cov_1nf65u3g4c().s[923]++;return this;},/**
         * Add a row split on a numeric field, splitting into numeric ranges.
         *
         * This split generates bins with edges equivalent to the
         * classic loop 'for i in <start> to <end> by <step>' but with a maximum
         * number of bins <limit>. This dispatches to the stats and xyseries search commands.
         * See their documentation for more details.
         *
         * @param {String} fieldName The field to split on.
         * @param {String} label A human readable name for this set of rows.
         * @param {Object} options An optional dictionary of collection filtering and pagination options:
         *    - `start` (_integer_): The value of the start of the first range, or null to take the lowest value in the events.
         *    - `end` (_integer_): The value for the end of the last range, or null to take the highest value in the events.
         *    - `step` (_integer_): The the width of each range, or null to have Splunk calculate it.
         *    - `limit` (_integer_): The maximum number of ranges to split into, or null for no limit.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addRangeRowSplit:function(field,label,ranges){cov_1nf65u3g4c().f[284]++;cov_1nf65u3g4c().s[924]++;if(!this.dataModelObject.hasField(field)){cov_1nf65u3g4c().b[264][0]++;cov_1nf65u3g4c().s[925]++;throw new Error("Did not find field "+field);}else{cov_1nf65u3g4c().b[264][1]++;}var f=(cov_1nf65u3g4c().s[926]++,this.dataModelObject.fieldByName(field));cov_1nf65u3g4c().s[927]++;if("number"!==f.type){cov_1nf65u3g4c().b[265][0]++;cov_1nf65u3g4c().s[928]++;throw new Error("Field was of type "+f.type+", expected number.");}else{cov_1nf65u3g4c().b[265][1]++;}var updateRanges=(cov_1nf65u3g4c().s[929]++,{});cov_1nf65u3g4c().s[930]++;if((cov_1nf65u3g4c().b[267][0]++,!utils.isUndefined(ranges.start))&&(cov_1nf65u3g4c().b[267][1]++,ranges.start!==null)){cov_1nf65u3g4c().b[266][0]++;cov_1nf65u3g4c().s[931]++;updateRanges.start=ranges.start;}else{cov_1nf65u3g4c().b[266][1]++;}cov_1nf65u3g4c().s[932]++;if((cov_1nf65u3g4c().b[269][0]++,!utils.isUndefined(ranges.end))&&(cov_1nf65u3g4c().b[269][1]++,ranges.end!==null)){cov_1nf65u3g4c().b[268][0]++;cov_1nf65u3g4c().s[933]++;updateRanges.end=ranges.end;}else{cov_1nf65u3g4c().b[268][1]++;}cov_1nf65u3g4c().s[934]++;if((cov_1nf65u3g4c().b[271][0]++,!utils.isUndefined(ranges.step))&&(cov_1nf65u3g4c().b[271][1]++,ranges.step!==null)){cov_1nf65u3g4c().b[270][0]++;cov_1nf65u3g4c().s[935]++;updateRanges.size=ranges.step;}else{cov_1nf65u3g4c().b[270][1]++;}cov_1nf65u3g4c().s[936]++;if((cov_1nf65u3g4c().b[273][0]++,!utils.isUndefined(ranges.limit))&&(cov_1nf65u3g4c().b[273][1]++,ranges.limit!==null)){cov_1nf65u3g4c().b[272][0]++;cov_1nf65u3g4c().s[937]++;updateRanges.maxNumberOf=ranges.limit;}else{cov_1nf65u3g4c().b[272][1]++;}cov_1nf65u3g4c().s[938]++;this.rows.push({fieldName:field,owner:f.owner,type:f.type,label:label,display:"ranges",ranges:updateRanges});cov_1nf65u3g4c().s[939]++;return this;},/**
         * Add a row split on a boolean valued field.
         *
         * @param {String} fieldName The name of field to split on.
         * @param {String} label A human readable name for this set of rows.
         * @param {String} trueDisplayValue A string to display in the true valued row label.
         * @param {String} falseDisplayValue A string to display in the false valued row label.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addBooleanRowSplit:function(field,label,trueDisplayValue,falseDisplayValue){cov_1nf65u3g4c().f[285]++;cov_1nf65u3g4c().s[940]++;if(!this.dataModelObject.fieldByName(field)){cov_1nf65u3g4c().b[274][0]++;cov_1nf65u3g4c().s[941]++;throw new Error("Did not find field "+field);}else{cov_1nf65u3g4c().b[274][1]++;}var f=(cov_1nf65u3g4c().s[942]++,this.dataModelObject.fieldByName(field));cov_1nf65u3g4c().s[943]++;if("boolean"!==f.type){cov_1nf65u3g4c().b[275][0]++;cov_1nf65u3g4c().s[944]++;throw new Error("Field was of type "+f.type+", expected boolean.");}else{cov_1nf65u3g4c().b[275][1]++;}cov_1nf65u3g4c().s[945]++;this.rows.push({fieldName:field,owner:f.owner,type:f.type,label:label,trueLabel:trueDisplayValue,falseLabel:falseDisplayValue});cov_1nf65u3g4c().s[946]++;return this;},/**
         * Add a row split on a timestamp valued field, binned by the specified bucket size.
         *
         * @param {String} fieldName The name of field to split on.
         * @param {String} label A human readable name for this set of rows.
         * @param {String} binning The size of bins to use, see class docs for valid types.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addTimestampRowSplit:function(field,label,binning){cov_1nf65u3g4c().f[286]++;cov_1nf65u3g4c().s[947]++;if(!this.dataModelObject.hasField(field)){cov_1nf65u3g4c().b[276][0]++;cov_1nf65u3g4c().s[948]++;throw new Error("Did not find field "+field);}else{cov_1nf65u3g4c().b[276][1]++;}var f=(cov_1nf65u3g4c().s[949]++,this.dataModelObject.fieldByName(field));cov_1nf65u3g4c().s[950]++;if("timestamp"!==f.type){cov_1nf65u3g4c().b[277][0]++;cov_1nf65u3g4c().s[951]++;throw new Error("Field was of type "+f.type+", expected timestamp.");}else{cov_1nf65u3g4c().b[277][1]++;}cov_1nf65u3g4c().s[952]++;if(!utils.contains(this._binning,binning)){cov_1nf65u3g4c().b[278][0]++;cov_1nf65u3g4c().s[953]++;throw new Error("Invalid binning "+binning+" found. Valid values are: "+this._binning.join(", "));}else{cov_1nf65u3g4c().b[278][1]++;}cov_1nf65u3g4c().s[954]++;this.rows.push({fieldName:field,owner:f.owner,type:f.type,label:label,period:binning});cov_1nf65u3g4c().s[955]++;return this;},/**
         * Add a column split on a string or number valued field, producing a column for
         * each distinct value of the field.
         *
         * @param {String} fieldName The name of field to split on.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addColumnSplit:function(fieldName){cov_1nf65u3g4c().f[287]++;cov_1nf65u3g4c().s[956]++;if(!this.dataModelObject.hasField(fieldName)){cov_1nf65u3g4c().b[279][0]++;cov_1nf65u3g4c().s[957]++;throw new Error("Did not find field "+fieldName);}else{cov_1nf65u3g4c().b[279][1]++;}var f=(cov_1nf65u3g4c().s[958]++,this.dataModelObject.fieldByName(fieldName));cov_1nf65u3g4c().s[959]++;if(!utils.contains(["number","string"],f.type)){cov_1nf65u3g4c().b[280][0]++;cov_1nf65u3g4c().s[960]++;throw new Error("Field was of type "+f.type+", expected number or string.");}else{cov_1nf65u3g4c().b[280][1]++;}var col=(cov_1nf65u3g4c().s[961]++,{fieldName:fieldName,owner:f.owner,type:f.type});cov_1nf65u3g4c().s[962]++;if("number"===f.type){cov_1nf65u3g4c().b[281][0]++;cov_1nf65u3g4c().s[963]++;col.display="all";}else{cov_1nf65u3g4c().b[281][1]++;}cov_1nf65u3g4c().s[964]++;this.columns.push(col);cov_1nf65u3g4c().s[965]++;return this;},/**
         * Add a column split on a numeric field, splitting the values into ranges.
         *
         * @param {String} fieldName The field to split on.
         * @param {Object} options An optional dictionary of collection filtering and pagination options:
         *    - `start` (_integer_): The value of the start of the first range, or null to take the lowest value in the events.
         *    - `end` (_integer_): The value for the end of the last range, or null to take the highest value in the events.
         *    - `step` (_integer_): The the width of each range, or null to have Splunk calculate it.
         *    - `limit` (_integer_): The maximum number of ranges to split into, or null for no limit.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addRangeColumnSplit:function(fieldName,ranges){cov_1nf65u3g4c().f[288]++;cov_1nf65u3g4c().s[966]++;if(!this.dataModelObject.hasField(fieldName)){cov_1nf65u3g4c().b[282][0]++;cov_1nf65u3g4c().s[967]++;throw new Error("Did not find field "+fieldName);}else{cov_1nf65u3g4c().b[282][1]++;}var f=(cov_1nf65u3g4c().s[968]++,this.dataModelObject.fieldByName(fieldName));cov_1nf65u3g4c().s[969]++;if("number"!==f.type){cov_1nf65u3g4c().b[283][0]++;cov_1nf65u3g4c().s[970]++;throw new Error("Field was of type "+f.type+", expected number.");}else{cov_1nf65u3g4c().b[283][1]++;}// In Splunk 6.0.1.1, data models incorrectly expect strings for these fields
// instead of numbers. In 6.1, this is fixed and both are accepted.
var updatedRanges=(cov_1nf65u3g4c().s[971]++,{});cov_1nf65u3g4c().s[972]++;if((cov_1nf65u3g4c().b[285][0]++,!utils.isUndefined(ranges.start))&&(cov_1nf65u3g4c().b[285][1]++,ranges.start!==null)){cov_1nf65u3g4c().b[284][0]++;cov_1nf65u3g4c().s[973]++;updatedRanges.start=ranges.start;}else{cov_1nf65u3g4c().b[284][1]++;}cov_1nf65u3g4c().s[974]++;if((cov_1nf65u3g4c().b[287][0]++,!utils.isUndefined(ranges.end))&&(cov_1nf65u3g4c().b[287][1]++,ranges.end!==null)){cov_1nf65u3g4c().b[286][0]++;cov_1nf65u3g4c().s[975]++;updatedRanges.end=ranges.end;}else{cov_1nf65u3g4c().b[286][1]++;}cov_1nf65u3g4c().s[976]++;if((cov_1nf65u3g4c().b[289][0]++,!utils.isUndefined(ranges.step))&&(cov_1nf65u3g4c().b[289][1]++,ranges.step!==null)){cov_1nf65u3g4c().b[288][0]++;cov_1nf65u3g4c().s[977]++;updatedRanges.size=ranges.step;}else{cov_1nf65u3g4c().b[288][1]++;}cov_1nf65u3g4c().s[978]++;if((cov_1nf65u3g4c().b[291][0]++,!utils.isUndefined(ranges.limit))&&(cov_1nf65u3g4c().b[291][1]++,ranges.limit!==null)){cov_1nf65u3g4c().b[290][0]++;cov_1nf65u3g4c().s[979]++;updatedRanges.maxNumberOf=ranges.limit;}else{cov_1nf65u3g4c().b[290][1]++;}cov_1nf65u3g4c().s[980]++;this.columns.push({fieldName:fieldName,owner:f.owner,type:f.type,display:"ranges",ranges:updatedRanges});cov_1nf65u3g4c().s[981]++;return this;},/**
         * Add a column split on a boolean valued field.
         *
         * @param {String} fieldName The name of field to split on.
         * @param {String} trueDisplayValue A string to display in the true valued column label.
         * @param {String} falseDisplayValue A string to display in the false valued column label.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addBooleanColumnSplit:function(fieldName,trueDisplayValue,falseDisplayValue){cov_1nf65u3g4c().f[289]++;cov_1nf65u3g4c().s[982]++;if(!this.dataModelObject.fieldByName(fieldName)){cov_1nf65u3g4c().b[292][0]++;cov_1nf65u3g4c().s[983]++;throw new Error("Did not find field "+fieldName);}else{cov_1nf65u3g4c().b[292][1]++;}var f=(cov_1nf65u3g4c().s[984]++,this.dataModelObject.fieldByName(fieldName));cov_1nf65u3g4c().s[985]++;if("boolean"!==f.type){cov_1nf65u3g4c().b[293][0]++;cov_1nf65u3g4c().s[986]++;throw new Error("Field was of type "+f.type+", expected boolean.");}else{cov_1nf65u3g4c().b[293][1]++;}cov_1nf65u3g4c().s[987]++;this.columns.push({fieldName:fieldName,owner:f.owner,type:f.type,trueLabel:trueDisplayValue,falseLabel:falseDisplayValue});cov_1nf65u3g4c().s[988]++;return this;},/**
         * Add a column split on a timestamp valued field, binned by the specified bucket size.
         *
         * @param {String} fieldName The name of field to split on.
         * @param {String} binning The size of bins to use, see class docs for valid types.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addTimestampColumnSplit:function(field,binning){cov_1nf65u3g4c().f[290]++;cov_1nf65u3g4c().s[989]++;if(!this.dataModelObject.hasField(field)){cov_1nf65u3g4c().b[294][0]++;cov_1nf65u3g4c().s[990]++;throw new Error("Did not find field "+field);}else{cov_1nf65u3g4c().b[294][1]++;}var f=(cov_1nf65u3g4c().s[991]++,this.dataModelObject.fieldByName(field));cov_1nf65u3g4c().s[992]++;if("timestamp"!==f.type){cov_1nf65u3g4c().b[295][0]++;cov_1nf65u3g4c().s[993]++;throw new Error("Field was of type "+f.type+", expected timestamp.");}else{cov_1nf65u3g4c().b[295][1]++;}cov_1nf65u3g4c().s[994]++;if(!utils.contains(this._binning,binning)){cov_1nf65u3g4c().b[296][0]++;cov_1nf65u3g4c().s[995]++;throw new Error("Invalid binning "+binning+" found. Valid values are: "+this._binning.join(", "));}else{cov_1nf65u3g4c().b[296][1]++;}cov_1nf65u3g4c().s[996]++;this.columns.push({fieldName:field,owner:f.owner,type:f.type,period:binning});cov_1nf65u3g4c().s[997]++;return this;},/**
         * Add an aggregate to each cell of the pivot.
         *
         * @param {String} fieldName The name of field to aggregate.
         * @param {String} label a human readable name for this aggregate.
         * @param {String} statsFunction The function to use for aggregation, see class docs for valid stats functions.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addCellValue:function(fieldName,label,statsFunction){cov_1nf65u3g4c().f[291]++;cov_1nf65u3g4c().s[998]++;if(!this.dataModelObject.hasField(fieldName)){cov_1nf65u3g4c().b[297][0]++;cov_1nf65u3g4c().s[999]++;throw new Error("Did not find field "+fieldName);}else{cov_1nf65u3g4c().b[297][1]++;}var f=(cov_1nf65u3g4c().s[1000]++,this.dataModelObject.fieldByName(fieldName));cov_1nf65u3g4c().s[1001]++;if((cov_1nf65u3g4c().b[299][0]++,utils.contains(["string","ipv4"],f.type))&&(cov_1nf65u3g4c().b[299][1]++,!utils.contains(["list","values","first","last","count","dc"],statsFunction))){cov_1nf65u3g4c().b[298][0]++;cov_1nf65u3g4c().s[1002]++;throw new Error("Stats function on string and IPv4 fields must be one of:"+" list, distinct_values, first, last, count, or distinct_count; found "+statsFunction);}else{cov_1nf65u3g4c().b[298][1]++;cov_1nf65u3g4c().s[1003]++;if((cov_1nf65u3g4c().b[301][0]++,"number"===f.type)&&(cov_1nf65u3g4c().b[301][1]++,!utils.contains(["sum","count","average","min","max","stdev","list","values"],statsFunction))){cov_1nf65u3g4c().b[300][0]++;cov_1nf65u3g4c().s[1004]++;throw new Error("Stats function on number field must be must be one of:"+" sum, count, average, max, min, stdev, list, or distinct_values; found "+statsFunction);}else{cov_1nf65u3g4c().b[300][1]++;cov_1nf65u3g4c().s[1005]++;if((cov_1nf65u3g4c().b[303][0]++,"timestamp"===f.type)&&(cov_1nf65u3g4c().b[303][1]++,!utils.contains(["duration","earliest","latest","list","values"],statsFunction))){cov_1nf65u3g4c().b[302][0]++;cov_1nf65u3g4c().s[1006]++;throw new Error("Stats function on timestamp field must be one of:"+" duration, earliest, latest, list, or distinct values; found "+statsFunction);}else{cov_1nf65u3g4c().b[302][1]++;cov_1nf65u3g4c().s[1007]++;if((cov_1nf65u3g4c().b[305][0]++,utils.contains(["objectCount","childCount"],f.type))&&(cov_1nf65u3g4c().b[305][1]++,"count"!==statsFunction)){cov_1nf65u3g4c().b[304][0]++;cov_1nf65u3g4c().s[1008]++;throw new Error("Stats function on childcount and objectcount fields must be count; "+"found "+statsFunction);}else{cov_1nf65u3g4c().b[304][1]++;cov_1nf65u3g4c().s[1009]++;if("boolean"===f.type){cov_1nf65u3g4c().b[306][0]++;cov_1nf65u3g4c().s[1010]++;throw new Error("Cannot use boolean valued fields as cell values.");}else{cov_1nf65u3g4c().b[306][1]++;}}}}}cov_1nf65u3g4c().s[1011]++;this.cells.push({fieldName:fieldName,owner:f.lineage.join("."),type:f.type,label:label,sparkline:false,// Not properly implemented in core yet.
value:statsFunction});cov_1nf65u3g4c().s[1012]++;return this;},/**
         * Returns a JSON ready object representation of this pivot specification.
         *
         * @return {Object} The JSON ready object representation of this pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */toJsonObject:function(){cov_1nf65u3g4c().f[292]++;cov_1nf65u3g4c().s[1013]++;return{dataModel:this.dataModelObject.dataModel.name,baseClass:this.dataModelObject.name,rows:this.rows,columns:this.columns,cells:this.cells,filters:this.filters};},/**
         * Query Splunk for SPL queries corresponding to a pivot report
         * for this data model, defined by this `PivotSpecification`.
         *
         * @example
         *
         *      service.dataModels().fetch(function(err, dataModels) {
         *          var searches = dataModels.item("internal_audit_logs").objectByName("searches");
         *          var pivotSpec = searches.createPivotSpecification();
         *          // Use of the fluent API
         *          pivotSpec.addRowSplit("user", "Executing user")
         *              .addRangeColumnSplit("exec_time", {start: 0, end: 12, step: 5, limit: 4})
         *              .addCellValue("search", "Search Query", "values")
         *              .pivot(function(pivotErr, pivot) {
         *                  console.log("Pivot search is:", pivot.search);
         *              });
         *      });
         *
         * @param {Function} callback A function to call when done getting the pivot: `(err, pivot)`.
         *
         * @method splunkjs.Service.PivotSpecification
         */pivot:function(callback){cov_1nf65u3g4c().f[293]++;var svc=(cov_1nf65u3g4c().s[1014]++,this.dataModelObject.dataModel.service);var args=(cov_1nf65u3g4c().s[1015]++,{pivot_json:JSON.stringify(this.toJsonObject())});cov_1nf65u3g4c().s[1016]++;if(!utils.isUndefined(this.accelerationNamespace)){cov_1nf65u3g4c().b[307][0]++;cov_1nf65u3g4c().s[1017]++;args.namespace=this.accelerationNamespace;}else{cov_1nf65u3g4c().b[307][1]++;}cov_1nf65u3g4c().s[1018]++;return svc.get(Paths.pivot+"/"+encodeURIComponent(this.dataModelObject.dataModel.name),args,function(err,response){cov_1nf65u3g4c().f[294]++;cov_1nf65u3g4c().s[1019]++;if(err){cov_1nf65u3g4c().b[308][0]++;cov_1nf65u3g4c().s[1020]++;callback(new Error(err.data.messages[0].text),response);cov_1nf65u3g4c().s[1021]++;return;}else{cov_1nf65u3g4c().b[308][1]++;}cov_1nf65u3g4c().s[1022]++;if((cov_1nf65u3g4c().b[310][0]++,response.data.entry)&&(cov_1nf65u3g4c().b[310][1]++,response.data.entry[0])){cov_1nf65u3g4c().b[309][0]++;cov_1nf65u3g4c().s[1023]++;callback(null,new root.Pivot(svc,response.data.entry[0].content));}else{cov_1nf65u3g4c().b[309][1]++;cov_1nf65u3g4c().s[1024]++;callback(new Error("Didn't get a Pivot report back from Splunk"),response);}});},/**
         * Convenience method to wrap up the `PivotSpecification.pivot()` and
         * `Pivot.run()` function calls.
         *
         * Query Splunk for SPL queries corresponding to a pivot report
         * for this data model, defined by this `PivotSpecification`; then,
         * starts a search job running this pivot, accelerated if possible.
         *
         *      service.dataModels().fetch(function(fetchErr, dataModels) {
         *          var searches = dataModels.item("internal_audit_logs").objectByName("searches");
         *          var pivotSpec = searches.createPivotSpecification();
         *          // Use of the fluent API
         *          pivotSpec.addRowSplit("user", "Executing user")
         *              .addRangeColumnSplit("exec_time", {start: 0, end: 12, step: 5, limit: 4})
         *              .addCellValue("search", "Search Query", "values")
         *              .run(function(err, job, pivot) {
         *                  console.log("Job SID is:", job.sid);
         *                  console.log("Pivot search is:", pivot.search);
         *              });
         *      });
         * @param {Object} args A dictionary of properties for the search job (optional). For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams" target="_blank">Search job parameters</a> on Splunk Developer Portal.
         *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.
         * @param {Function} callback A function to call when done getting the pivot: `(err, job, pivot)`.
         *
         * @method splunkjs.Service.PivotSpecification
         */run:function(args,callback){cov_1nf65u3g4c().f[295]++;cov_1nf65u3g4c().s[1025]++;if(!callback){cov_1nf65u3g4c().b[311][0]++;cov_1nf65u3g4c().s[1026]++;callback=args;cov_1nf65u3g4c().s[1027]++;args={};}else{cov_1nf65u3g4c().b[311][1]++;}cov_1nf65u3g4c().s[1028]++;args=(cov_1nf65u3g4c().b[312][0]++,args)||(cov_1nf65u3g4c().b[312][1]++,{});cov_1nf65u3g4c().s[1029]++;this.pivot(function(err,pivot){cov_1nf65u3g4c().f[296]++;cov_1nf65u3g4c().s[1030]++;if(err){cov_1nf65u3g4c().b[313][0]++;cov_1nf65u3g4c().s[1031]++;callback(err,null,null);}else{cov_1nf65u3g4c().b[313][1]++;cov_1nf65u3g4c().s[1032]++;pivot.run(args,Async.augment(callback,pivot));}});}});/**
     * Represents one of the structured views in a `DataModel`.
     *
     * Has these properties:
     *    - `dataModel` (_splunkjs.Service.DataModel_): The `DataModel` to which this `DataModelObject` belongs.
     *    - `name` (_string_): The name of this `DataModelObject`.
     *    - `displayName` (_string_): The human readable name of this `DataModelObject`.
     *    - `parentName` (_string_): The name of the parent `DataModelObject` to this one.
     *    - `lineage` (_array_): An array of strings of the lineage of the data model
     *          on which this field is defined.
     *    - `fields` (_object_): A dictionary of `DataModelField` objects, accessible by name.
     *    - `constraints` (_array_): An array of `DataModelConstraint` objects.
     *    - `calculations` (_object_): A dictionary of `DataModelCalculation` objects, accessible by ID.
     *
     * BaseSearch has an additional property:
     *    - `baseSearch` (_string_): The search query wrapped by this data model object.
     *
     * BaseTransaction has additional properties:
     *    - `groupByFields` (_string_): The fields that will be used to group events into transactions.
     *    - `objectsToGroup` (_array_): Names of the data model objects that should be unioned
     *        and split into transactions.
     *    - `maxSpan` (_string_): The maximum time span of a transaction.
     *    - `maxPause` (_string_): The maximum pause time of a transaction.
     *
     * @class splunkjs.Service.DataModelObject
     */cov_1nf65u3g4c().s[1033]++;root.DataModelObject=Class.extend({/**
         * Constructor for a data model object.
         * SDK users are not expected to invoke this constructor directly.
         *
         * @constructor
         * @param {Object} props A dictionary of properties to set:
         *     - `objectName` (_string_): The name for this data model object.
         *     - `displayName` (_string_): A human readable name for this data model object.
         *     - `parentName` (_string_): The name of the data model that owns this data model object.
         *     - `lineage` (_string_): The lineage of the data model that owns this data model object,
         *          items are delimited by a dot. This is converted into an array of
         *          strings upon construction.
         *     - `fields` (_array_): An array of data model fields.
         *     - `constraints` (_array_): An array of data model constraints.
         *     - `calculations` (_array_): An array of data model calculations.
         *     - `baseSearch` (_string_): The search query wrapped by this data model object; exclusive to BaseSearch (optional)
         *     - `groupByFields` (_array_): The fields that will be used to group events into transactions; exclusive to BaseTransaction (optional)
         *     - `objectsToGroup` (_array_): Names of the data model objects that should be unioned
         *         and split into transactions; exclusive to BaseTransaction (optional)
         *     - `maxSpan` (_string_): The maximum time span of a transaction; exclusive to BaseTransaction (optional)
         *     - `maxPause` (_string_): The maximum pause time of a transaction; exclusive to BaseTransaction (optional)
         *
         * @param {splunkjs.Service.DataModel} parentDataModel The `DataModel` that owns this data model object.
         *
         * @method splunkjs.Service.DataModelObject
         */init:function(props,parentDataModel){cov_1nf65u3g4c().f[297]++;cov_1nf65u3g4c().s[1034]++;props=(cov_1nf65u3g4c().b[314][0]++,props)||(cov_1nf65u3g4c().b[314][1]++,{});cov_1nf65u3g4c().s[1035]++;props.owner=(cov_1nf65u3g4c().b[315][0]++,props.owner)||(cov_1nf65u3g4c().b[315][1]++,"");cov_1nf65u3g4c().s[1036]++;this.dataModel=parentDataModel;cov_1nf65u3g4c().s[1037]++;this.name=props.objectName;cov_1nf65u3g4c().s[1038]++;this.displayName=props.displayName;cov_1nf65u3g4c().s[1039]++;this.parentName=props.parentName;cov_1nf65u3g4c().s[1040]++;this.lineage=props.lineage.split(".");// Properties exclusive to BaseTransaction
cov_1nf65u3g4c().s[1041]++;if(props.hasOwnProperty("groupByFields")){cov_1nf65u3g4c().b[316][0]++;cov_1nf65u3g4c().s[1042]++;this.groupByFields=props.groupByFields;}else{cov_1nf65u3g4c().b[316][1]++;}cov_1nf65u3g4c().s[1043]++;if(props.hasOwnProperty("objectsToGroup")){cov_1nf65u3g4c().b[317][0]++;cov_1nf65u3g4c().s[1044]++;this.objectsToGroup=props.objectsToGroup;}else{cov_1nf65u3g4c().b[317][1]++;}cov_1nf65u3g4c().s[1045]++;if(props.hasOwnProperty("transactionMaxTimeSpan")){cov_1nf65u3g4c().b[318][0]++;cov_1nf65u3g4c().s[1046]++;this.maxSpan=props.transactionMaxTimeSpan;}else{cov_1nf65u3g4c().b[318][1]++;}cov_1nf65u3g4c().s[1047]++;if(props.hasOwnProperty("transactionMaxPause")){cov_1nf65u3g4c().b[319][0]++;cov_1nf65u3g4c().s[1048]++;this.maxPause=props.transactionMaxPause;}else{cov_1nf65u3g4c().b[319][1]++;}// Property exclusive to BaseSearch
cov_1nf65u3g4c().s[1049]++;if(props.hasOwnProperty("baseSearch")){cov_1nf65u3g4c().b[320][0]++;cov_1nf65u3g4c().s[1050]++;this.baseSearch=props.baseSearch;}else{cov_1nf65u3g4c().b[320][1]++;}// Parse fields
cov_1nf65u3g4c().s[1051]++;this.fields={};cov_1nf65u3g4c().s[1052]++;for(var i=(cov_1nf65u3g4c().s[1053]++,0);i<props.fields.length;i++){cov_1nf65u3g4c().s[1054]++;this.fields[props.fields[i].fieldName]=new root.DataModelField(props.fields[i]);}// Parse constraints
cov_1nf65u3g4c().s[1055]++;this.constraints=[];cov_1nf65u3g4c().s[1056]++;for(var j=(cov_1nf65u3g4c().s[1057]++,0);j<props.constraints.length;j++){cov_1nf65u3g4c().s[1058]++;this.constraints.push(new root.DataModelConstraint(props.constraints[j]));}// Parse calculations
cov_1nf65u3g4c().s[1059]++;this.calculations=[];cov_1nf65u3g4c().s[1060]++;for(var k=(cov_1nf65u3g4c().s[1061]++,0);k<props.calculations.length;k++){cov_1nf65u3g4c().s[1062]++;this.calculations[props.calculations[k].calculationID]=new root.DataModelCalculation(props.calculations[k]);}},/**
         * Is this data model object a BaseSearch?
         *
         * @return {Boolean} Whether this data model object is the root type, BaseSearch.
         *
         * @method splunkjs.Service.DataModelObject
         */isBaseSearch:function(){cov_1nf65u3g4c().f[298]++;cov_1nf65u3g4c().s[1063]++;return!utils.isUndefined(this.baseSearch);},/**
         * Is this data model object is a BaseTransaction?
         *
         * @return {Boolean} Whether this data model object is the root type, BaseTransaction.
         *
         * @method splunkjs.Service.DataModelObject
         */isBaseTransaction:function(){cov_1nf65u3g4c().f[299]++;cov_1nf65u3g4c().s[1064]++;return!utils.isUndefined(this.maxSpan);},/**
         * Returns a string array of the names of this data model object's fields.
         *
         * @return {Array} An array of strings with the field names of this 
         * data model object.
         *
         * @method splunkjs.Service.DataModelObject
         */fieldNames:function(){cov_1nf65u3g4c().f[300]++;cov_1nf65u3g4c().s[1065]++;return Object.keys(this.fields);},/**
         * Returns a data model field instance, representing a field on this
         * data model object. 
         *
         * @return {splunkjs.Service.DataModelField|null} The data model field
         * from this data model object with the specified name, null if it the 
         * field by that name doesn't exist.
         *
         * @method splunkjs.Service.DataModelObject
         */fieldByName:function(name){cov_1nf65u3g4c().f[301]++;cov_1nf65u3g4c().s[1066]++;return(cov_1nf65u3g4c().b[321][0]++,this.calculatedFields()[name])||(cov_1nf65u3g4c().b[321][1]++,this.fields[name])||(cov_1nf65u3g4c().b[321][2]++,null);},/**
         * Returns an array of data model fields from this data model object's
         * calculations, and this data model object's fields.
         *
         * @return {Array} An array of `splunk.Service.DataModelField` objects
         * which includes this data model object's fields, and the fields from
         * this data model object's calculations.
         *
         * @method splunkjs.Service.DataModelObject
         */allFields:function(){cov_1nf65u3g4c().f[302]++;// merge fields and calculatedFields()
var combinedFields=(cov_1nf65u3g4c().s[1067]++,[]);cov_1nf65u3g4c().s[1068]++;for(var f in this.fields){cov_1nf65u3g4c().s[1069]++;if(this.fields.hasOwnProperty(f)){cov_1nf65u3g4c().b[322][0]++;cov_1nf65u3g4c().s[1070]++;combinedFields[f]=this.fields[f];}else{cov_1nf65u3g4c().b[322][1]++;}}var calculatedFields=(cov_1nf65u3g4c().s[1071]++,this.calculatedFields());cov_1nf65u3g4c().s[1072]++;for(var cf in calculatedFields){cov_1nf65u3g4c().s[1073]++;if(calculatedFields.hasOwnProperty(cf)){cov_1nf65u3g4c().b[323][0]++;cov_1nf65u3g4c().s[1074]++;combinedFields[cf]=calculatedFields[cf];}else{cov_1nf65u3g4c().b[323][1]++;}}cov_1nf65u3g4c().s[1075]++;return combinedFields;},/**
         * Returns a string array of the field names of this data model object's
         * calculations, and the names of this data model object's fields.
         *
         * @return {Array} An array of strings with the field names of this 
         * data model object's calculations, and the names of fields on 
         * this data model object.
         *
         * @method splunkjs.Service.DataModelObject
         */allFieldNames:function(){cov_1nf65u3g4c().f[303]++;cov_1nf65u3g4c().s[1076]++;return Object.keys(this.allFields());},/**
         * Returns an array of data model fields from this data model object's
         * calculations.
         *
         * @return {Array} An array of `splunk.Service.DataModelField` objects
         * of the fields from this data model object's calculations.
         *
         * @method splunkjs.Service.DataModelObject
         */calculatedFields:function(){cov_1nf65u3g4c().f[304]++;var fields=(cov_1nf65u3g4c().s[1077]++,{});// Iterate over the calculations, get their fields
var keys=(cov_1nf65u3g4c().s[1078]++,this.calculationIDs());var calculations=(cov_1nf65u3g4c().s[1079]++,this.calculations);cov_1nf65u3g4c().s[1080]++;for(var i=(cov_1nf65u3g4c().s[1081]++,0);i<keys.length;i++){var calculation=(cov_1nf65u3g4c().s[1082]++,calculations[keys[i]]);cov_1nf65u3g4c().s[1083]++;for(var f=(cov_1nf65u3g4c().s[1084]++,0);f<calculation.outputFieldNames().length;f++){cov_1nf65u3g4c().s[1085]++;fields[calculation.outputFieldNames()[f]]=calculation.outputFields[calculation.outputFieldNames()[f]];}}cov_1nf65u3g4c().s[1086]++;return fields;},/**
         * Returns a string array of the field names of this data model object's
         * calculations.
         *
         * @return {Array} An array of strings with the field names of this 
         * data model object's calculations.
         *
         * @method splunkjs.Service.DataModelObject
         */calculatedFieldNames:function(){cov_1nf65u3g4c().f[305]++;cov_1nf65u3g4c().s[1087]++;return Object.keys(this.calculatedFields());},/**
         * Returns whether this data model object contains the field with the
         * name passed in the `fieldName` parameter.
         *
         * @param {String} fieldName The name of the field to look for.
         * @return {Boolean} True if this data model contains the field by name.
         *
         * @method splunkjs.Service.DataModelObject
         */hasField:function(fieldName){cov_1nf65u3g4c().f[306]++;cov_1nf65u3g4c().s[1088]++;return utils.contains(this.allFieldNames(),fieldName);},/**
         * Returns a string array of the IDs of this data model object's
         * calculations.
         *
         * @return {Array} An array of strings with the IDs of this data model
         * object's calculations.
         *
         * @method splunkjs.Service.DataModelObject
         */calculationIDs:function(){cov_1nf65u3g4c().f[307]++;cov_1nf65u3g4c().s[1089]++;return Object.keys(this.calculations);},/**
         * Local acceleration is tsidx acceleration of a data model object that is handled
         * manually by a user. You create a job which generates an index, and then use that
         * index in your pivots on the data model object.
         *
         * The namespace created by the job is 'sid={sid}' where {sid} is the job's sid. You
         * would use it in another job by starting your search query with `| tstats ... from sid={sid} | ...`
         *
         * The tsidx index created by this job is deleted when the job is garbage collected by Splunk.
         *
         * It is the user's responsibility to manage this job, including cancelling it.
         *
         * @example
         *
         *      service.dataModels().fetch(function(err, dataModels) {
         *          var object = dataModels.item("some_data_model").objectByName("some_object");
         *          object.createLocalAccelerationJob("-1d", function(err, accelerationJob) {
         *              console.log("The job has name:", accelerationJob.name);
         *          });
         *      });
         *
         * @param {String} earliestTime A time modifier (e.g., "-2w") setting the earliest time to index.
         * @param {Function} callback A function to call with the search job: `(err, accelerationJob)`.
         *
         * @method splunkjs.Service.DataModelObject
         */createLocalAccelerationJob:function(earliestTime,callback){cov_1nf65u3g4c().f[308]++;cov_1nf65u3g4c().s[1090]++;// If earliestTime parameter is not specified, then set callback to its value
if((cov_1nf65u3g4c().b[325][0]++,!callback)&&(cov_1nf65u3g4c().b[325][1]++,utils.isFunction(earliestTime))){cov_1nf65u3g4c().b[324][0]++;cov_1nf65u3g4c().s[1091]++;callback=earliestTime;cov_1nf65u3g4c().s[1092]++;earliestTime=undefined;}else{cov_1nf65u3g4c().b[324][1]++;}var query=(cov_1nf65u3g4c().s[1093]++,"| datamodel \""+this.dataModel.name+"\" "+this.name+" search | tscollect");var args=(cov_1nf65u3g4c().s[1094]++,earliestTime?(cov_1nf65u3g4c().b[326][0]++,{earliest_time:earliestTime}):(cov_1nf65u3g4c().b[326][1]++,{}));cov_1nf65u3g4c().s[1095]++;this.dataModel.service.search(query,args,callback);},/**
         * Start a search job that applies querySuffix to all the events in this data model object.
         *
         * @example
         *
         *      service.dataModels().fetch(function(err, dataModels) {
         *          var object = dataModels.item("internal_audit_logs").objectByName("searches");
         *          object.startSearch({}, "| head 5", function(err, job) {
         *              console.log("The job has name:", job.name);
         *          });
         *      });
         *
         * @param {Object} params A dictionary of properties for the search job. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams" target="_blank">Search job parameters</a> on Splunk Developer Portal.
         *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.
         * @param {String} querySuffix A search query, starting with a '|' that will be appended to the command to fetch the contents of this data model object (e.g., "| head 3").
         * @param {Function} callback A function to call with the search job: `(err, job)`.
         *
         * @method splunkjs.Service.DataModelObject
         */startSearch:function(params,querySuffix,callback){cov_1nf65u3g4c().f[309]++;var query=(cov_1nf65u3g4c().s[1096]++,"| datamodel "+this.dataModel.name+" "+this.name+" search");// Prepend a space to the querySuffix, or set it to an empty string if null or undefined
cov_1nf65u3g4c().s[1097]++;querySuffix=querySuffix?(cov_1nf65u3g4c().b[327][0]++," "+querySuffix):(cov_1nf65u3g4c().b[327][1]++,"");cov_1nf65u3g4c().s[1098]++;this.dataModel.service.search(query+querySuffix,params,callback);},/**
         * Returns the data model object this one inherits from if it is a user defined,
         * otherwise return null.
         *
         * @return {splunkjs.Service.DataModelObject|null} This data model object's parent
         *     or null if this is not a user defined data model object.
         *
         * @method splunkjs.Service.DataModelObject
         */parent:function(){cov_1nf65u3g4c().f[310]++;cov_1nf65u3g4c().s[1099]++;return this.dataModel.objectByName(this.parentName);},/**
         * Returns a new Pivot Specification, accepts no parameters.
         *
         * @return {splunkjs.Service.PivotSpecification} A new pivot specification.
         *
         * @method splunkjs.Service.DataModelObject
         */createPivotSpecification:function(){cov_1nf65u3g4c().f[311]++;cov_1nf65u3g4c().s[1100]++;// Pass in this DataModelObject to create a PivotSpecification
return new root.PivotSpecification(this);}});/**
     * Represents a data model on the server. Data models
     * contain `DataModelObject` instances, which specify structured
     * views on Splunk data.
     *
     * @endpoint datamodel/model/{name}
     * @class splunkjs.Service.DataModel
     * @extends splunkjs.Service.Entity
     */cov_1nf65u3g4c().s[1101]++;root.DataModel=Service.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.DataModel
         */path:function(){cov_1nf65u3g4c().f[312]++;cov_1nf65u3g4c().s[1102]++;return Paths.dataModels+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.DataModel`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name for the new data model.
         * @param {Object} namespace (Optional) namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @param {Object} props Properties of this data model:
         *    - `acceleration` (_string_): A JSON object with an `enabled` key, representing if acceleration is enabled or not.
         *    - `concise` (_string_): Indicates whether to list a concise JSON description of the data model, should always be "0".
         *    - `description` (_string_): The JSON describing the data model.
         *    - `displayName` (_string_): The name displayed for the data model in Splunk Web.
         *
         * @method splunkjs.Service.DataModel
         */init:function(service,name,namespace,props){cov_1nf65u3g4c().f[313]++;cov_1nf65u3g4c().s[1103]++;// If not given a 4th arg, assume the namespace was omitted
if(!props){cov_1nf65u3g4c().b[328][0]++;cov_1nf65u3g4c().s[1104]++;props=namespace;cov_1nf65u3g4c().s[1105]++;namespace={};}else{cov_1nf65u3g4c().b[328][1]++;}cov_1nf65u3g4c().s[1106]++;this.name=name;cov_1nf65u3g4c().s[1107]++;this._super(service,this.path(),namespace);cov_1nf65u3g4c().s[1108]++;this.acceleration=(cov_1nf65u3g4c().b[329][0]++,JSON.parse(props.content.acceleration))||(cov_1nf65u3g4c().b[329][1]++,{});cov_1nf65u3g4c().s[1109]++;if(this.acceleration.hasOwnProperty("enabled")){cov_1nf65u3g4c().b[330][0]++;cov_1nf65u3g4c().s[1110]++;// convert the enabled property to a boolean
this.acceleration.enabled=!!this.acceleration.enabled;}else{cov_1nf65u3g4c().b[330][1]++;}// concise=0 (false) forces the server to return all details of the newly created data model.
// we do not want a summary of this data model
cov_1nf65u3g4c().s[1111]++;if((cov_1nf65u3g4c().b[332][0]++,!props.hasOwnProperty("concise"))||(cov_1nf65u3g4c().b[332][1]++,utils.isUndefined(props.concise))){cov_1nf65u3g4c().b[331][0]++;cov_1nf65u3g4c().s[1112]++;this.concise="0";}else{cov_1nf65u3g4c().b[331][1]++;}var dataModelDefinition=(cov_1nf65u3g4c().s[1113]++,JSON.parse(props.content.description));cov_1nf65u3g4c().s[1114]++;this.objectNames=dataModelDefinition.objectNameList;cov_1nf65u3g4c().s[1115]++;this.displayName=dataModelDefinition.displayName;cov_1nf65u3g4c().s[1116]++;this.description=dataModelDefinition.description;// Parse the objects for this data model           
var objs=(cov_1nf65u3g4c().s[1117]++,dataModelDefinition.objects);cov_1nf65u3g4c().s[1118]++;this.objects=[];cov_1nf65u3g4c().s[1119]++;for(var i=(cov_1nf65u3g4c().s[1120]++,0);i<objs.length;i++){cov_1nf65u3g4c().s[1121]++;this.objects.push(new root.DataModelObject(objs[i],this));}cov_1nf65u3g4c().s[1122]++;this.remove=utils.bind(this,this.remove);cov_1nf65u3g4c().s[1123]++;this.update=utils.bind(this,this.update);},/**
         * Returns a boolean indicating whether acceleration is enabled or not.
         *
         * @return {Boolean} true if acceleration is enabled, false otherwise.
         *
         * @method splunkjs.Service.DataModel
         */isAccelerated:function(){cov_1nf65u3g4c().f[314]++;cov_1nf65u3g4c().s[1124]++;return!!this.acceleration.enabled;},/**
         * Returns a data model object from this data model
         * with the specified name if it exists, null otherwise.
         *
         * @return {Object|null} a data model object.
         *
         * @method splunkjs.Service.DataModel
         */objectByName:function(name){cov_1nf65u3g4c().f[315]++;cov_1nf65u3g4c().s[1125]++;for(var i=(cov_1nf65u3g4c().s[1126]++,0);i<this.objects.length;i++){cov_1nf65u3g4c().s[1127]++;if(this.objects[i].name===name){cov_1nf65u3g4c().b[333][0]++;cov_1nf65u3g4c().s[1128]++;return this.objects[i];}else{cov_1nf65u3g4c().b[333][1]++;}}cov_1nf65u3g4c().s[1129]++;return null;},/**
         * Returns a boolean of whether this exists in this data model or not.
         *
         * @return {Boolean} Returns true if this data model has object with specified name, false otherwise.
         *
         * @method splunkjs.Service.DataModel
         */hasObject:function(name){cov_1nf65u3g4c().f[316]++;cov_1nf65u3g4c().s[1130]++;return utils.contains(this.objectNames,name);},/**
         * Updates the data model on the server, used to update acceleration settings.
         *
         * @param {Object} props A dictionary of properties to update the object with:
         *     - `acceleration` (_object_): The acceleration settings for the data model.
         *         Valid keys are: `enabled`, `earliestTime`, `cronSchedule`.
         *         Any keys not set will be pulled from the acceleration settings already
         *         set on this data model.
         * @param {Function} callback A function to call when the data model is updated: `(err, dataModel)`.
         *
         * @method splunkjs.Service.DataModel
         */update:function(props,callback){cov_1nf65u3g4c().f[317]++;cov_1nf65u3g4c().s[1131]++;if(utils.isUndefined(callback)){cov_1nf65u3g4c().b[334][0]++;cov_1nf65u3g4c().s[1132]++;callback=props;cov_1nf65u3g4c().s[1133]++;props={};}else{cov_1nf65u3g4c().b[334][1]++;}cov_1nf65u3g4c().s[1134]++;callback=(cov_1nf65u3g4c().b[335][0]++,callback)||(cov_1nf65u3g4c().b[335][1]++,function(){cov_1nf65u3g4c().f[318]++;});cov_1nf65u3g4c().s[1135]++;if(!props){cov_1nf65u3g4c().b[336][0]++;cov_1nf65u3g4c().s[1136]++;callback(new Error("Must specify a props argument to update a data model."));cov_1nf65u3g4c().s[1137]++;return;// Exit if props isn't set, to avoid calling the callback twice.
}else{cov_1nf65u3g4c().b[336][1]++;}cov_1nf65u3g4c().s[1138]++;if(props.hasOwnProperty("name")){cov_1nf65u3g4c().b[337][0]++;cov_1nf65u3g4c().s[1139]++;callback(new Error("Cannot set 'name' field in 'update'"),this);cov_1nf65u3g4c().s[1140]++;return;// Exit if the name is set, to avoid calling the callback twice.
}else{cov_1nf65u3g4c().b[337][1]++;}var updatedProps=(cov_1nf65u3g4c().s[1141]++,{acceleration:JSON.stringify({enabled:(cov_1nf65u3g4c().b[338][0]++,props.accceleration)&&(cov_1nf65u3g4c().b[338][1]++,props.acceleration.enabled)||(cov_1nf65u3g4c().b[338][2]++,this.acceleration.enabled),earliest_time:(cov_1nf65u3g4c().b[339][0]++,props.accceleration)&&(cov_1nf65u3g4c().b[339][1]++,props.acceleration.earliestTime)||(cov_1nf65u3g4c().b[339][2]++,this.acceleration.earliestTime),cron_schedule:(cov_1nf65u3g4c().b[340][0]++,props.accceleration)&&(cov_1nf65u3g4c().b[340][1]++,props.acceleration.cronSchedule)||(cov_1nf65u3g4c().b[340][2]++,this.acceleration.cronSchedule)})});var that=(cov_1nf65u3g4c().s[1142]++,this);cov_1nf65u3g4c().s[1143]++;return this.post("",updatedProps,function(err,response){cov_1nf65u3g4c().f[319]++;cov_1nf65u3g4c().s[1144]++;if(err){cov_1nf65u3g4c().b[341][0]++;cov_1nf65u3g4c().s[1145]++;callback(err,that);}else{cov_1nf65u3g4c().b[341][1]++;var dataModelNamespace=(cov_1nf65u3g4c().s[1146]++,utils.namespaceFromProperties(response.data.entry[0]));cov_1nf65u3g4c().s[1147]++;callback(null,new root.DataModel(that.service,response.data.entry[0].name,dataModelNamespace,response.data.entry[0]));}});}});/**
     * Represents a collection of data models. You can create and
     * list data models using this collection container, or
     * get a specific data model.
     *
     * @endpoint datamodel/model
     * @class splunkjs.Service.DataModels
     * @extends splunkjs.Service.Collection
     */cov_1nf65u3g4c().s[1148]++;root.DataModels=Service.Collection.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.DataModels
         */path:function(){cov_1nf65u3g4c().f[320]++;cov_1nf65u3g4c().s[1149]++;return Paths.dataModels;},/**
         * Constructor for `splunkjs.Service.DataModels`.
         * 
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace (Optional) namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * 
         * @method splunkjs.Service.DataModels
         */init:function(service,namespace){cov_1nf65u3g4c().f[321]++;cov_1nf65u3g4c().s[1150]++;namespace=(cov_1nf65u3g4c().b[342][0]++,namespace)||(cov_1nf65u3g4c().b[342][1]++,{});cov_1nf65u3g4c().s[1151]++;this._super(service,this.path(),namespace);cov_1nf65u3g4c().s[1152]++;this.create=utils.bind(this,this.create);},/**
         * Creates a new `DataModel` object with the given name and parameters.
         * It is preferred that you create data models through the Splunk
         * Enterprise with a browser.
         *
         * @param {String} name The name of the data model to create. If it contains spaces they will be replaced
         *     with underscores.
         * @param {Object} params A dictionary of properties.
         * @param {Function} callback A function to call with the new `DataModel` object: `(err, createdDataModel)`.
         *
         * @method splunkjs.Service.DataModels
         */create:function(name,params,callback){cov_1nf65u3g4c().f[322]++;cov_1nf65u3g4c().s[1153]++;// If we get (name, callback) instead of (name, params, callback)
// do the necessary variable swap
if((cov_1nf65u3g4c().b[344][0]++,utils.isFunction(params))&&(cov_1nf65u3g4c().b[344][1]++,!callback)){cov_1nf65u3g4c().b[343][0]++;cov_1nf65u3g4c().s[1154]++;callback=params;cov_1nf65u3g4c().s[1155]++;params={};}else{cov_1nf65u3g4c().b[343][1]++;}cov_1nf65u3g4c().s[1156]++;params=(cov_1nf65u3g4c().b[345][0]++,params)||(cov_1nf65u3g4c().b[345][1]++,{});cov_1nf65u3g4c().s[1157]++;callback=(cov_1nf65u3g4c().b[346][0]++,callback)||(cov_1nf65u3g4c().b[346][1]++,function(){cov_1nf65u3g4c().f[323]++;});cov_1nf65u3g4c().s[1158]++;name=name.replace(/ /g,"_");var that=(cov_1nf65u3g4c().s[1159]++,this);cov_1nf65u3g4c().s[1160]++;return this.post("",{name:name,description:JSON.stringify(params)},function(err,response){cov_1nf65u3g4c().f[324]++;cov_1nf65u3g4c().s[1161]++;if(err){cov_1nf65u3g4c().b[347][0]++;cov_1nf65u3g4c().s[1162]++;callback(err);}else{cov_1nf65u3g4c().b[347][1]++;var dataModel=(cov_1nf65u3g4c().s[1163]++,new root.DataModel(that.service,response.data.entry[0].name,that.namespace,response.data.entry[0]));cov_1nf65u3g4c().s[1164]++;callback(null,dataModel);}});},/**
         * Constructor for `splunkjs.Service.DataModel`.
         *
         * @constructor
         * @param {Object} props A dictionary of properties used to create a 
         * `DataModel` instance.
         * @return {splunkjs.Service.DataModel} A new `DataModel` instance.
         *
         * @method splunkjs.Service.DataModels
         */instantiateEntity:function(props){cov_1nf65u3g4c().f[325]++;var entityNamespace=(cov_1nf65u3g4c().s[1165]++,utils.namespaceFromProperties(props));cov_1nf65u3g4c().s[1166]++;return new root.DataModel(this.service,props.name,entityNamespace,props);}});/*!*/ // Iterates over an endpoint's results.
cov_1nf65u3g4c().s[1167]++;root.PaginatedEndpointIterator=Class.extend({init:function(endpoint,params){cov_1nf65u3g4c().f[326]++;cov_1nf65u3g4c().s[1168]++;params=(cov_1nf65u3g4c().b[348][0]++,params)||(cov_1nf65u3g4c().b[348][1]++,{});cov_1nf65u3g4c().s[1169]++;this._endpoint=endpoint;cov_1nf65u3g4c().s[1170]++;this._pagesize=(cov_1nf65u3g4c().b[349][0]++,params.pagesize)||(cov_1nf65u3g4c().b[349][1]++,0);cov_1nf65u3g4c().s[1171]++;this._offset=0;},// Fetches the next page from the endpoint.
next:function(callback){cov_1nf65u3g4c().f[327]++;cov_1nf65u3g4c().s[1172]++;callback=(cov_1nf65u3g4c().b[350][0]++,callback)||(cov_1nf65u3g4c().b[350][1]++,function(){cov_1nf65u3g4c().f[328]++;});var that=(cov_1nf65u3g4c().s[1173]++,this);var params=(cov_1nf65u3g4c().s[1174]++,{count:this._pagesize,offset:this._offset});cov_1nf65u3g4c().s[1175]++;return this._endpoint(params,function(err,results){cov_1nf65u3g4c().f[329]++;cov_1nf65u3g4c().s[1176]++;if(err){cov_1nf65u3g4c().b[351][0]++;cov_1nf65u3g4c().s[1177]++;callback(err);}else{cov_1nf65u3g4c().b[351][1]++;var numResults=(cov_1nf65u3g4c().s[1178]++,results.rows?(cov_1nf65u3g4c().b[352][0]++,results.rows.length):(cov_1nf65u3g4c().b[352][1]++,0));cov_1nf65u3g4c().s[1179]++;that._offset+=numResults;cov_1nf65u3g4c().s[1180]++;callback(null,results,numResults>0);}});}});})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,