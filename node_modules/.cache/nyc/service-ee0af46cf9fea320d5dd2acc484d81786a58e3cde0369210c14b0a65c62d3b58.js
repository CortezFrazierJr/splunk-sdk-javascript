function cov_1ks4ntaci2(){var path="/Users/vmalaviya/DVPL-7124/splunk-sdk-javascript/lib/service.js";var hash="1e13507780108878ff5a225bb0ab3d0d383df74e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/vmalaviya/DVPL-7124/splunk-sdk-javascript/lib/service.js",statementMap:{"0":{start:{line:16,column:0},end:{line:5803,column:5}},"1":{start:{line:19,column:22},end:{line:19,column:42}},"2":{start:{line:20,column:22},end:{line:20,column:39}},"3":{start:{line:21,column:22},end:{line:21,column:40}},"4":{start:{line:22,column:22},end:{line:22,column:46}},"5":{start:{line:23,column:22},end:{line:23,column:53}},"6":{start:{line:24,column:22},end:{line:24,column:40}},"7":{start:{line:26,column:15},end:{line:26,column:30}},"8":{start:{line:27,column:18},end:{line:27,column:22}},"9":{start:{line:37,column:22},end:{line:41,column:6}},"10":{start:{line:39,column:12},end:{line:39,column:47}},"11":{start:{line:51,column:4},end:{line:664,column:7}},"12":{start:{line:73,column:12},end:{line:73,column:47}},"13":{start:{line:77,column:12},end:{line:77,column:72}},"14":{start:{line:78,column:12},end:{line:78,column:66}},"15":{start:{line:79,column:12},end:{line:79,column:76}},"16":{start:{line:80,column:12},end:{line:80,column:69}},"17":{start:{line:81,column:12},end:{line:81,column:75}},"18":{start:{line:82,column:12},end:{line:82,column:66}},"19":{start:{line:83,column:12},end:{line:83,column:67}},"20":{start:{line:84,column:12},end:{line:84,column:73}},"21":{start:{line:85,column:12},end:{line:85,column:67}},"22":{start:{line:86,column:12},end:{line:86,column:78}},"23":{start:{line:87,column:12},end:{line:87,column:72}},"24":{start:{line:106,column:12},end:{line:116,column:15}},"25":{start:{line:136,column:12},end:{line:136,column:47}},"26":{start:{line:164,column:12},end:{line:164,column:60}},"27":{start:{line:192,column:12},end:{line:192,column:53}},"28":{start:{line:218,column:12},end:{line:218,column:59}},"29":{start:{line:244,column:12},end:{line:244,column:62}},"30":{start:{line:271,column:12},end:{line:271,column:71}},"31":{start:{line:300,column:12},end:{line:300,column:50}},"32":{start:{line:312,column:12},end:{line:312,column:56}},"33":{start:{line:337,column:12},end:{line:337,column:40}},"34":{start:{line:366,column:12},end:{line:366,column:51}},"35":{start:{line:397,column:12},end:{line:400,column:13}},"36":{start:{line:398,column:16},end:{line:398,column:37}},"37":{start:{line:399,column:16},end:{line:399,column:33}},"38":{start:{line:402,column:23},end:{line:402,column:53}},"39":{start:{line:403,column:12},end:{line:403,column:56}},"40":{start:{line:420,column:12},end:{line:423,column:13}},"41":{start:{line:421,column:16},end:{line:421,column:37}},"42":{start:{line:422,column:16},end:{line:422,column:33}},"43":{start:{line:424,column:22},end:{line:424,column:56}},"44":{start:{line:425,column:12},end:{line:425,column:43}},"45":{start:{line:453,column:12},end:{line:456,column:13}},"46":{start:{line:454,column:16},end:{line:454,column:37}},"47":{start:{line:455,column:16},end:{line:455,column:33}},"48":{start:{line:458,column:23},end:{line:458,column:53}},"49":{start:{line:459,column:12},end:{line:459,column:63}},"50":{start:{line:478,column:12},end:{line:478,column:49}},"51":{start:{line:480,column:23},end:{line:480,column:27}},"52":{start:{line:481,column:22},end:{line:497,column:14}},"53":{start:{line:482,column:16},end:{line:496,column:17}},"54":{start:{line:483,column:20},end:{line:483,column:34}},"55":{start:{line:486,column:35},end:{line:486,column:74}},"56":{start:{line:487,column:31},end:{line:487,column:60}},"57":{start:{line:488,column:20},end:{line:495,column:23}},"58":{start:{line:489,column:24},end:{line:494,column:25}},"59":{start:{line:490,column:28},end:{line:490,column:35}},"60":{start:{line:493,column:28},end:{line:493,column:60}},"61":{start:{line:499,column:12},end:{line:499,column:23}},"62":{start:{line:517,column:12},end:{line:517,column:49}},"63":{start:{line:519,column:29},end:{line:519,column:54}},"64":{start:{line:520,column:12},end:{line:520,column:46}},"65":{start:{line:544,column:12},end:{line:547,column:13}},"66":{start:{line:545,column:16},end:{line:545,column:34}},"67":{start:{line:546,column:16},end:{line:546,column:28}},"68":{start:{line:549,column:12},end:{line:549,column:49}},"69":{start:{line:550,column:12},end:{line:550,column:34}},"70":{start:{line:552,column:12},end:{line:552,column:29}},"71":{start:{line:554,column:12},end:{line:561,column:15}},"72":{start:{line:555,column:16},end:{line:560,column:17}},"73":{start:{line:556,column:20},end:{line:556,column:34}},"74":{start:{line:559,column:20},end:{line:559,column:50}},"75":{start:{line:581,column:12},end:{line:584,column:13}},"76":{start:{line:582,column:16},end:{line:582,column:33}},"77":{start:{line:583,column:16},end:{line:583,column:27}},"78":{start:{line:586,column:12},end:{line:586,column:49}},"79":{start:{line:587,column:25},end:{line:590,column:13}},"80":{start:{line:592,column:12},end:{line:600,column:15}},"81":{start:{line:593,column:16},end:{line:599,column:17}},"82":{start:{line:594,column:20},end:{line:594,column:34}},"83":{start:{line:597,column:34},end:{line:597,column:63}},"84":{start:{line:598,column:20},end:{line:598,column:50}},"85":{start:{line:625,column:12},end:{line:628,column:13}},"86":{start:{line:626,column:16},end:{line:626,column:34}},"87":{start:{line:627,column:16},end:{line:627,column:28}},"88":{start:{line:630,column:12},end:{line:630,column:49}},"89":{start:{line:631,column:12},end:{line:631,column:34}},"90":{start:{line:634,column:12},end:{line:636,column:13}},"91":{start:{line:635,column:16},end:{line:635,column:46}},"92":{start:{line:638,column:23},end:{line:638,column:45}},"93":{start:{line:639,column:25},end:{line:639,column:31}},"94":{start:{line:640,column:26},end:{line:640,column:56}},"95":{start:{line:641,column:23},end:{line:641,column:28}},"96":{start:{line:642,column:22},end:{line:642,column:28}},"97":{start:{line:643,column:23},end:{line:643,column:25}},"98":{start:{line:645,column:22},end:{line:660,column:13}},"99":{start:{line:653,column:20},end:{line:658,column:21}},"100":{start:{line:654,column:24},end:{line:654,column:38}},"101":{start:{line:657,column:24},end:{line:657,column:54}},"102":{start:{line:662,column:12},end:{line:662,column:23}},"103":{start:{line:674,column:4},end:{line:815,column:7}},"104":{start:{line:686,column:12},end:{line:688,column:13}},"105":{start:{line:687,column:16},end:{line:687,column:61}},"106":{start:{line:690,column:12},end:{line:692,column:13}},"107":{start:{line:691,column:16},end:{line:691,column:60}},"108":{start:{line:694,column:12},end:{line:694,column:35}},"109":{start:{line:695,column:12},end:{line:695,column:47}},"110":{start:{line:699,column:12},end:{line:699,column:53}},"111":{start:{line:700,column:12},end:{line:700,column:56}},"112":{start:{line:701,column:12},end:{line:701,column:54}},"113":{start:{line:702,column:12},end:{line:702,column:53}},"114":{start:{line:722,column:22},end:{line:722,column:40}},"115":{start:{line:726,column:12},end:{line:728,column:13}},"116":{start:{line:727,column:16},end:{line:727,column:42}},"117":{start:{line:730,column:12},end:{line:734,column:14}},"118":{start:{line:738,column:22},end:{line:738,column:40}},"119":{start:{line:742,column:12},end:{line:744,column:13}},"120":{start:{line:743,column:16},end:{line:743,column:42}},"121":{start:{line:746,column:12},end:{line:749,column:14}},"122":{start:{line:769,column:22},end:{line:769,column:40}},"123":{start:{line:773,column:12},end:{line:775,column:13}},"124":{start:{line:774,column:16},end:{line:774,column:42}},"125":{start:{line:777,column:12},end:{line:781,column:14}},"126":{start:{line:801,column:22},end:{line:801,column:40}},"127":{start:{line:805,column:12},end:{line:807,column:13}},"128":{start:{line:806,column:16},end:{line:806,column:42}},"129":{start:{line:809,column:12},end:{line:813,column:14}},"130":{start:{line:828,column:4},end:{line:916,column:7}},"131":{start:{line:844,column:27},end:{line:844,column:60}},"132":{start:{line:846,column:12},end:{line:846,column:43}},"133":{start:{line:847,column:12},end:{line:847,column:39}},"134":{start:{line:848,column:12},end:{line:848,column:34}},"135":{start:{line:849,column:12},end:{line:849,column:29}},"136":{start:{line:853,column:12},end:{line:853,column:60}},"137":{start:{line:854,column:12},end:{line:854,column:60}},"138":{start:{line:855,column:12},end:{line:855,column:65}},"139":{start:{line:856,column:12},end:{line:856,column:60}},"140":{start:{line:857,column:12},end:{line:857,column:59}},"141":{start:{line:866,column:12},end:{line:866,column:50}},"142":{start:{line:878,column:12},end:{line:878,column:48}},"143":{start:{line:879,column:12},end:{line:879,column:43}},"144":{start:{line:892,column:12},end:{line:892,column:50}},"145":{start:{line:903,column:12},end:{line:903,column:36}},"146":{start:{line:914,column:12},end:{line:914,column:31}},"147":{start:{line:929,column:4},end:{line:1238,column:7}},"148":{start:{line:954,column:12},end:{line:954,column:50}},"149":{start:{line:958,column:12},end:{line:958,column:58}},"150":{start:{line:959,column:12},end:{line:959,column:58}},"151":{start:{line:960,column:12},end:{line:960,column:59}},"152":{start:{line:961,column:12},end:{line:961,column:59}},"153":{start:{line:962,column:12},end:{line:962,column:59}},"154":{start:{line:963,column:12},end:{line:963,column:58}},"155":{start:{line:964,column:12},end:{line:964,column:56}},"156":{start:{line:965,column:12},end:{line:965,column:59}},"157":{start:{line:966,column:12},end:{line:966,column:60}},"158":{start:{line:967,column:12},end:{line:967,column:62}},"159":{start:{line:968,column:12},end:{line:968,column:59}},"160":{start:{line:969,column:12},end:{line:969,column:60}},"161":{start:{line:970,column:12},end:{line:970,column:59}},"162":{start:{line:973,column:12},end:{line:973,column:34}},"163":{start:{line:974,column:12},end:{line:974,column:34}},"164":{start:{line:975,column:12},end:{line:975,column:34}},"165":{start:{line:976,column:12},end:{line:976,column:34}},"166":{start:{line:988,column:12},end:{line:988,column:80}},"167":{start:{line:992,column:12},end:{line:997,column:14}},"168":{start:{line:999,column:12},end:{line:999,column:36}},"169":{start:{line:1002,column:12},end:{line:1002,column:58}},"170":{start:{line:1003,column:12},end:{line:1003,column:74}},"171":{start:{line:1004,column:12},end:{line:1004,column:58}},"172":{start:{line:1005,column:12},end:{line:1005,column:58}},"173":{start:{line:1006,column:12},end:{line:1006,column:60}},"174":{start:{line:1007,column:12},end:{line:1007,column:60}},"175":{start:{line:1008,column:12},end:{line:1008,column:60}},"176":{start:{line:1020,column:12},end:{line:1020,column:32}},"177":{start:{line:1032,column:12},end:{line:1032,column:29}},"178":{start:{line:1044,column:12},end:{line:1044,column:31}},"179":{start:{line:1055,column:12},end:{line:1055,column:32}},"180":{start:{line:1066,column:12},end:{line:1066,column:33}},"181":{start:{line:1077,column:12},end:{line:1077,column:35}},"182":{start:{line:1096,column:12},end:{line:1099,column:13}},"183":{start:{line:1097,column:16},end:{line:1097,column:35}},"184":{start:{line:1098,column:16},end:{line:1098,column:29}},"185":{start:{line:1100,column:12},end:{line:1100,column:49}},"186":{start:{line:1102,column:12},end:{line:1102,column:36}},"187":{start:{line:1104,column:23},end:{line:1104,column:27}},"188":{start:{line:1105,column:12},end:{line:1113,column:15}},"189":{start:{line:1106,column:16},end:{line:1112,column:17}},"190":{start:{line:1107,column:20},end:{line:1107,column:34}},"191":{start:{line:1110,column:20},end:{line:1110,column:75}},"192":{start:{line:1111,column:20},end:{line:1111,column:41}},"193":{start:{line:1125,column:12},end:{line:1125,column:49}},"194":{start:{line:1127,column:23},end:{line:1127,column:27}},"195":{start:{line:1128,column:12},end:{line:1130,column:15}},"196":{start:{line:1129,column:16},end:{line:1129,column:30}},"197":{start:{line:1143,column:12},end:{line:1143,column:49}},"198":{start:{line:1145,column:12},end:{line:1147,column:13}},"199":{start:{line:1146,column:16},end:{line:1146,column:71}},"200":{start:{line:1149,column:23},end:{line:1149,column:27}},"201":{start:{line:1150,column:22},end:{line:1168,column:14}},"202":{start:{line:1151,column:16},end:{line:1167,column:17}},"203":{start:{line:1152,column:20},end:{line:1152,column:52}},"204":{start:{line:1153,column:20},end:{line:1153,column:40}},"205":{start:{line:1155,column:21},end:{line:1167,column:17}},"206":{start:{line:1156,column:20},end:{line:1163,column:23}},"207":{start:{line:1157,column:24},end:{line:1162,column:25}},"208":{start:{line:1158,column:28},end:{line:1158,column:35}},"209":{start:{line:1161,column:28},end:{line:1161,column:60}},"210":{start:{line:1166,column:20},end:{line:1166,column:40}},"211":{start:{line:1170,column:12},end:{line:1170,column:23}},"212":{start:{line:1182,column:12},end:{line:1182,column:49}},"213":{start:{line:1184,column:23},end:{line:1184,column:27}},"214":{start:{line:1185,column:12},end:{line:1192,column:15}},"215":{start:{line:1186,column:16},end:{line:1191,column:17}},"216":{start:{line:1187,column:20},end:{line:1187,column:34}},"217":{start:{line:1190,column:20},end:{line:1190,column:41}},"218":{start:{line:1204,column:12},end:{line:1204,column:49}},"219":{start:{line:1206,column:23},end:{line:1206,column:27}},"220":{start:{line:1207,column:12},end:{line:1214,column:15}},"221":{start:{line:1208,column:16},end:{line:1213,column:17}},"222":{start:{line:1209,column:20},end:{line:1209,column:34}},"223":{start:{line:1212,column:20},end:{line:1212,column:41}},"224":{start:{line:1226,column:12},end:{line:1226,column:49}},"225":{start:{line:1228,column:23},end:{line:1228,column:27}},"226":{start:{line:1229,column:12},end:{line:1236,column:15}},"227":{start:{line:1230,column:16},end:{line:1235,column:17}},"228":{start:{line:1231,column:20},end:{line:1231,column:34}},"229":{start:{line:1234,column:20},end:{line:1234,column:41}},"230":{start:{line:1248,column:4},end:{line:1579,column:7}},"231":{start:{line:1273,column:12},end:{line:1273,column:50}},"232":{start:{line:1277,column:12},end:{line:1277,column:66}},"233":{start:{line:1278,column:12},end:{line:1278,column:66}},"234":{start:{line:1279,column:12},end:{line:1279,column:67}},"235":{start:{line:1280,column:12},end:{line:1280,column:65}},"236":{start:{line:1281,column:12},end:{line:1281,column:65}},"237":{start:{line:1282,column:12},end:{line:1282,column:78}},"238":{start:{line:1285,column:12},end:{line:1285,column:38}},"239":{start:{line:1286,column:12},end:{line:1286,column:38}},"240":{start:{line:1287,column:12},end:{line:1287,column:38}},"241":{start:{line:1288,column:12},end:{line:1288,column:38}},"242":{start:{line:1289,column:12},end:{line:1289,column:38}},"243":{start:{line:1301,column:12},end:{line:1301,column:50}},"244":{start:{line:1314,column:12},end:{line:1314,column:36}},"245":{start:{line:1316,column:27},end:{line:1316,column:29}},"246":{start:{line:1317,column:33},end:{line:1317,column:35}},"247":{start:{line:1318,column:37},end:{line:1318,column:59}},"248":{start:{line:1319,column:12},end:{line:1331,column:13}},"249":{start:{line:1319,column:24},end:{line:1319,column:25}},"250":{start:{line:1320,column:28},end:{line:1320,column:49}},"251":{start:{line:1321,column:29},end:{line:1321,column:58}},"252":{start:{line:1322,column:16},end:{line:1322,column:36}},"253":{start:{line:1323,column:16},end:{line:1323,column:38}},"254":{start:{line:1325,column:16},end:{line:1330,column:17}},"255":{start:{line:1326,column:20},end:{line:1326,column:61}},"256":{start:{line:1329,column:20},end:{line:1329,column:59}},"257":{start:{line:1332,column:12},end:{line:1332,column:44}},"258":{start:{line:1333,column:12},end:{line:1333,column:50}},"259":{start:{line:1334,column:12},end:{line:1334,column:62}},"260":{start:{line:1335,column:12},end:{line:1335,column:62}},"261":{start:{line:1336,column:12},end:{line:1336,column:64}},"262":{start:{line:1348,column:12},end:{line:1348,column:31}},"263":{start:{line:1359,column:12},end:{line:1359,column:32}},"264":{start:{line:1370,column:12},end:{line:1370,column:33}},"265":{start:{line:1389,column:12},end:{line:1392,column:13}},"266":{start:{line:1390,column:16},end:{line:1390,column:35}},"267":{start:{line:1391,column:16},end:{line:1391,column:29}},"268":{start:{line:1393,column:12},end:{line:1393,column:49}},"269":{start:{line:1395,column:12},end:{line:1395,column:36}},"270":{start:{line:1396,column:12},end:{line:1398,column:13}},"271":{start:{line:1397,column:16},end:{line:1397,column:34}},"272":{start:{line:1400,column:23},end:{line:1400,column:27}},"273":{start:{line:1401,column:22},end:{line:1409,column:14}},"274":{start:{line:1402,column:16},end:{line:1408,column:17}},"275":{start:{line:1403,column:20},end:{line:1403,column:34}},"276":{start:{line:1406,column:20},end:{line:1406,column:46}},"277":{start:{line:1407,column:20},end:{line:1407,column:41}},"278":{start:{line:1411,column:12},end:{line:1411,column:23}},"279":{start:{line:1415,column:12},end:{line:1415,column:36}},"280":{start:{line:1416,column:12},end:{line:1418,column:13}},"281":{start:{line:1417,column:16},end:{line:1417,column:34}},"282":{start:{line:1420,column:23},end:{line:1420,column:27}},"283":{start:{line:1421,column:27},end:{line:1421,column:57}},"284":{start:{line:1423,column:12},end:{line:1423,column:38}},"285":{start:{line:1424,column:12},end:{line:1424,column:24}},"286":{start:{line:1449,column:12},end:{line:1451,column:13}},"287":{start:{line:1450,column:16},end:{line:1450,column:33}},"288":{start:{line:1453,column:12},end:{line:1455,column:13}},"289":{start:{line:1454,column:16},end:{line:1454,column:64}},"290":{start:{line:1457,column:12},end:{line:1459,column:13}},"291":{start:{line:1458,column:16},end:{line:1458,column:136}},"292":{start:{line:1461,column:27},end:{line:1461,column:31}},"293":{start:{line:1462,column:12},end:{line:1504,column:13}},"294":{start:{line:1463,column:31},end:{line:1463,column:55}},"295":{start:{line:1465,column:16},end:{line:1500,column:17}},"296":{start:{line:1470,column:20},end:{line:1470,column:39}},"297":{start:{line:1472,column:21},end:{line:1500,column:17}},"298":{start:{line:1476,column:20},end:{line:1476,column:84}},"299":{start:{line:1477,column:20},end:{line:1482,column:21}},"300":{start:{line:1478,column:24},end:{line:1478,column:43}},"301":{start:{line:1481,column:24},end:{line:1481,column:36}},"302":{start:{line:1484,column:21},end:{line:1500,column:17}},"303":{start:{line:1488,column:20},end:{line:1488,column:77}},"304":{start:{line:1493,column:20},end:{line:1499,column:21}},"305":{start:{line:1493,column:32},end:{line:1493,column:33}},"306":{start:{line:1494,column:37},end:{line:1494,column:48}},"307":{start:{line:1495,column:24},end:{line:1495,column:88}},"308":{start:{line:1496,column:24},end:{line:1498,column:25}},"309":{start:{line:1497,column:28},end:{line:1497,column:42}},"310":{start:{line:1503,column:16},end:{line:1503,column:28}},"311":{start:{line:1525,column:12},end:{line:1525,column:49}},"312":{start:{line:1526,column:23},end:{line:1526,column:27}},"313":{start:{line:1527,column:22},end:{line:1554,column:14}},"314":{start:{line:1528,column:16},end:{line:1553,column:17}},"315":{start:{line:1529,column:20},end:{line:1529,column:34}},"316":{start:{line:1532,column:32},end:{line:1532,column:51}},"317":{start:{line:1533,column:20},end:{line:1535,column:21}},"318":{start:{line:1534,column:24},end:{line:1534,column:41}},"319":{start:{line:1537,column:33},end:{line:1537,column:62}},"320":{start:{line:1538,column:20},end:{line:1538,column:40}},"321":{start:{line:1540,column:20},end:{line:1552,column:21}},"322":{start:{line:1541,column:24},end:{line:1548,column:27}},"323":{start:{line:1542,column:28},end:{line:1547,column:29}},"324":{start:{line:1543,column:32},end:{line:1543,column:39}},"325":{start:{line:1546,column:32},end:{line:1546,column:64}},"326":{start:{line:1551,column:24},end:{line:1551,column:47}},"327":{start:{line:1556,column:12},end:{line:1556,column:23}},"328":{start:{line:1575,column:12},end:{line:1575,column:49}},"329":{start:{line:1577,column:12},end:{line:1577,column:47}},"330":{start:{line:1589,column:4},end:{line:1843,column:7}},"331":{start:{line:1596,column:12},end:{line:1596,column:77}},"332":{start:{line:1614,column:12},end:{line:1614,column:29}},"333":{start:{line:1615,column:12},end:{line:1615,column:57}},"334":{start:{line:1617,column:12},end:{line:1617,column:67}},"335":{start:{line:1618,column:12},end:{line:1618,column:64}},"336":{start:{line:1619,column:12},end:{line:1619,column:63}},"337":{start:{line:1620,column:12},end:{line:1620,column:68}},"338":{start:{line:1637,column:12},end:{line:1637,column:78}},"339":{start:{line:1657,column:12},end:{line:1657,column:49}},"340":{start:{line:1659,column:23},end:{line:1659,column:27}},"341":{start:{line:1660,column:22},end:{line:1662,column:14}},"342":{start:{line:1661,column:16},end:{line:1661,column:36}},"343":{start:{line:1664,column:12},end:{line:1664,column:23}},"344":{start:{line:1689,column:12},end:{line:1692,column:13}},"345":{start:{line:1690,column:16},end:{line:1690,column:35}},"346":{start:{line:1691,column:16},end:{line:1691,column:29}},"347":{start:{line:1694,column:12},end:{line:1694,column:49}},"348":{start:{line:1695,column:12},end:{line:1695,column:36}},"349":{start:{line:1697,column:23},end:{line:1697,column:27}},"350":{start:{line:1698,column:22},end:{line:1708,column:14}},"351":{start:{line:1699,column:16},end:{line:1702,column:17}},"352":{start:{line:1700,column:20},end:{line:1700,column:34}},"353":{start:{line:1701,column:20},end:{line:1701,column:27}},"354":{start:{line:1704,column:26},end:{line:1704,column:43}},"355":{start:{line:1705,column:26},end:{line:1705,column:73}},"356":{start:{line:1707,column:16},end:{line:1707,column:42}},"357":{start:{line:1710,column:12},end:{line:1710,column:23}},"358":{start:{line:1726,column:12},end:{line:1726,column:69}},"359":{start:{line:1749,column:12},end:{line:1752,column:13}},"360":{start:{line:1750,column:16},end:{line:1750,column:35}},"361":{start:{line:1751,column:16},end:{line:1751,column:29}},"362":{start:{line:1754,column:12},end:{line:1754,column:49}},"363":{start:{line:1755,column:12},end:{line:1755,column:36}},"364":{start:{line:1757,column:23},end:{line:1757,column:27}},"365":{start:{line:1758,column:12},end:{line:1776,column:15}},"366":{start:{line:1759,column:16},end:{line:1762,column:17}},"367":{start:{line:1760,column:20},end:{line:1760,column:34}},"368":{start:{line:1761,column:20},end:{line:1761,column:27}},"369":{start:{line:1764,column:27},end:{line:1764,column:29}},"370":{start:{line:1765,column:27},end:{line:1765,column:52}},"371":{start:{line:1766,column:16},end:{line:1773,column:17}},"372":{start:{line:1766,column:28},end:{line:1766,column:29}},"373":{start:{line:1767,column:34},end:{line:1767,column:56}},"374":{start:{line:1768,column:36},end:{line:1768,column:74}},"375":{start:{line:1769,column:30},end:{line:1769,column:81}},"376":{start:{line:1771,column:20},end:{line:1771,column:39}},"377":{start:{line:1772,column:20},end:{line:1772,column:35}},"378":{start:{line:1775,column:16},end:{line:1775,column:43}},"379":{start:{line:1795,column:12},end:{line:1795,column:49}},"380":{start:{line:1797,column:23},end:{line:1797,column:27}},"381":{start:{line:1798,column:12},end:{line:1800,column:15}},"382":{start:{line:1799,column:16},end:{line:1799,column:65}},"383":{start:{line:1816,column:12},end:{line:1816,column:34}},"384":{start:{line:1818,column:12},end:{line:1841,column:13}},"385":{start:{line:1819,column:29},end:{line:1819,column:40}},"386":{start:{line:1820,column:26},end:{line:1835,column:18}},"387":{start:{line:1821,column:20},end:{line:1834,column:21}},"388":{start:{line:1822,column:24},end:{line:1822,column:38}},"389":{start:{line:1825,column:24},end:{line:1825,column:67}},"390":{start:{line:1826,column:24},end:{line:1833,column:27}},"391":{start:{line:1827,column:28},end:{line:1832,column:29}},"392":{start:{line:1828,column:32},end:{line:1828,column:39}},"393":{start:{line:1831,column:32},end:{line:1831,column:64}},"394":{start:{line:1837,column:16},end:{line:1837,column:27}},"395":{start:{line:1840,column:16},end:{line:1840,column:53}},"396":{start:{line:1854,column:4},end:{line:1893,column:7}},"397":{start:{line:1861,column:12},end:{line:1861,column:39}},"398":{start:{line:1873,column:34},end:{line:1873,column:70}},"399":{start:{line:1874,column:12},end:{line:1874,column:83}},"400":{start:{line:1891,column:12},end:{line:1891,column:57}},"401":{start:{line:1903,column:4},end:{line:1931,column:7}},"402":{start:{line:1910,column:12},end:{line:1910,column:80}},"403":{start:{line:1928,column:12},end:{line:1928,column:29}},"404":{start:{line:1929,column:12},end:{line:1929,column:57}},"405":{start:{line:1941,column:4},end:{line:1991,column:7}},"406":{start:{line:1957,column:12},end:{line:1957,column:42}},"407":{start:{line:1971,column:34},end:{line:1971,column:70}},"408":{start:{line:1972,column:12},end:{line:1972,column:87}},"409":{start:{line:1989,column:12},end:{line:1989,column:57}},"410":{start:{line:2002,column:4},end:{line:2143,column:7}},"411":{start:{line:2009,column:12},end:{line:2009,column:75}},"412":{start:{line:2021,column:12},end:{line:2021,column:51}},"413":{start:{line:2031,column:12},end:{line:2031,column:56}},"414":{start:{line:2045,column:12},end:{line:2045,column:51}},"415":{start:{line:2057,column:12},end:{line:2057,column:70}},"416":{start:{line:2067,column:12},end:{line:2067,column:62}},"417":{start:{line:2078,column:12},end:{line:2078,column:66}},"418":{start:{line:2088,column:12},end:{line:2088,column:49}},"419":{start:{line:2098,column:12},end:{line:2098,column:58}},"420":{start:{line:2110,column:12},end:{line:2110,column:67}},"421":{start:{line:2122,column:12},end:{line:2122,column:74}},"422":{start:{line:2140,column:12},end:{line:2140,column:29}},"423":{start:{line:2141,column:12},end:{line:2141,column:57}},"424":{start:{line:2154,column:4},end:{line:2243,column:7}},"425":{start:{line:2161,column:12},end:{line:2161,column:75}},"426":{start:{line:2173,column:12},end:{line:2173,column:78}},"427":{start:{line:2194,column:12},end:{line:2197,column:13}},"428":{start:{line:2195,column:16},end:{line:2195,column:35}},"429":{start:{line:2196,column:16},end:{line:2196,column:29}},"430":{start:{line:2199,column:12},end:{line:2199,column:49}},"431":{start:{line:2200,column:12},end:{line:2200,column:36}},"432":{start:{line:2202,column:23},end:{line:2202,column:27}},"433":{start:{line:2203,column:12},end:{line:2220,column:15}},"434":{start:{line:2204,column:16},end:{line:2207,column:17}},"435":{start:{line:2205,column:20},end:{line:2205,column:34}},"436":{start:{line:2206,column:20},end:{line:2206,column:27}},"437":{start:{line:2209,column:34},end:{line:2209,column:36}},"438":{start:{line:2210,column:27},end:{line:2210,column:52}},"439":{start:{line:2211,column:16},end:{line:2217,column:17}},"440":{start:{line:2211,column:29},end:{line:2211,column:30}},"441":{start:{line:2212,column:41},end:{line:2212,column:63}},"442":{start:{line:2213,column:36},end:{line:2213,column:81}},"443":{start:{line:2214,column:37},end:{line:2214,column:102}},"444":{start:{line:2215,column:20},end:{line:2215,column:53}},"445":{start:{line:2216,column:20},end:{line:2216,column:49}},"446":{start:{line:2219,column:16},end:{line:2219,column:50}},"447":{start:{line:2238,column:12},end:{line:2238,column:29}},"448":{start:{line:2239,column:12},end:{line:2239,column:57}},"449":{start:{line:2241,column:12},end:{line:2241,column:52}},"450":{start:{line:2255,column:4},end:{line:2306,column:7}},"451":{start:{line:2262,column:12},end:{line:2262,column:37}},"452":{start:{line:2274,column:34},end:{line:2274,column:70}},"453":{start:{line:2275,column:12},end:{line:2275,column:87}},"454":{start:{line:2284,column:12},end:{line:2284,column:95}},"455":{start:{line:2301,column:12},end:{line:2301,column:57}},"456":{start:{line:2303,column:12},end:{line:2303,column:78}},"457":{start:{line:2304,column:12},end:{line:2304,column:56}},"458":{start:{line:2316,column:4},end:{line:2409,column:7}},"459":{start:{line:2331,column:12},end:{line:2331,column:68}},"460":{start:{line:2345,column:12},end:{line:2345,column:29}},"461":{start:{line:2346,column:12},end:{line:2346,column:50}},"462":{start:{line:2348,column:12},end:{line:2348,column:63}},"463":{start:{line:2349,column:12},end:{line:2349,column:64}},"464":{start:{line:2368,column:12},end:{line:2368,column:49}},"465":{start:{line:2370,column:23},end:{line:2370,column:27}},"466":{start:{line:2371,column:12},end:{line:2378,column:15}},"467":{start:{line:2372,column:16},end:{line:2377,column:17}},"468":{start:{line:2373,column:20},end:{line:2373,column:34}},"469":{start:{line:2376,column:20},end:{line:2376,column:70}},"470":{start:{line:2397,column:12},end:{line:2397,column:49}},"471":{start:{line:2399,column:23},end:{line:2399,column:27}},"472":{start:{line:2400,column:12},end:{line:2407,column:15}},"473":{start:{line:2401,column:16},end:{line:2406,column:17}},"474":{start:{line:2402,column:20},end:{line:2402,column:34}},"475":{start:{line:2405,column:20},end:{line:2405,column:70}},"476":{start:{line:2419,column:4},end:{line:2462,column:7}},"477":{start:{line:2435,column:12},end:{line:2435,column:30}},"478":{start:{line:2447,column:12},end:{line:2447,column:70}},"479":{start:{line:2460,column:12},end:{line:2460,column:50}},"480":{start:{line:2471,column:4},end:{line:2494,column:7}},"481":{start:{line:2478,column:12},end:{line:2478,column:30}},"482":{start:{line:2491,column:12},end:{line:2491,column:38}},"483":{start:{line:2492,column:12},end:{line:2492,column:50}},"484":{start:{line:2504,column:4},end:{line:2528,column:7}},"485":{start:{line:2511,column:12},end:{line:2511,column:69}},"486":{start:{line:2525,column:12},end:{line:2525,column:29}},"487":{start:{line:2526,column:12},end:{line:2526,column:50}},"488":{start:{line:2538,column:4},end:{line:2618,column:7}},"489":{start:{line:2554,column:12},end:{line:2554,column:31}},"490":{start:{line:2566,column:12},end:{line:2566,column:63}},"491":{start:{line:2579,column:12},end:{line:2579,column:50}},"492":{start:{line:2593,column:12},end:{line:2593,column:49}},"493":{start:{line:2595,column:23},end:{line:2595,column:27}},"494":{start:{line:2596,column:22},end:{line:2614,column:14}},"495":{start:{line:2597,column:16},end:{line:2613,column:17}},"496":{start:{line:2598,column:20},end:{line:2598,column:34}},"497":{start:{line:2602,column:32},end:{line:2602,column:51}},"498":{start:{line:2604,column:33},end:{line:2604,column:62}},"499":{start:{line:2605,column:20},end:{line:2612,column:23}},"500":{start:{line:2606,column:24},end:{line:2611,column:25}},"501":{start:{line:2607,column:28},end:{line:2607,column:35}},"502":{start:{line:2610,column:28},end:{line:2610,column:60}},"503":{start:{line:2616,column:12},end:{line:2616,column:23}},"504":{start:{line:2628,column:4},end:{line:2656,column:7}},"505":{start:{line:2635,column:12},end:{line:2635,column:69}},"506":{start:{line:2653,column:12},end:{line:2653,column:29}},"507":{start:{line:2654,column:12},end:{line:2654,column:57}},"508":{start:{line:2666,column:4},end:{line:2705,column:7}},"509":{start:{line:2673,column:12},end:{line:2673,column:31}},"510":{start:{line:2685,column:34},end:{line:2685,column:70}},"511":{start:{line:2686,column:12},end:{line:2686,column:76}},"512":{start:{line:2703,column:12},end:{line:2703,column:57}},"513":{start:{line:2714,column:4},end:{line:2792,column:7}},"514":{start:{line:2721,column:12},end:{line:2721,column:71}},"515":{start:{line:2739,column:12},end:{line:2739,column:29}},"516":{start:{line:2740,column:12},end:{line:2740,column:57}},"517":{start:{line:2742,column:12},end:{line:2742,column:66}},"518":{start:{line:2767,column:12},end:{line:2770,column:13}},"519":{start:{line:2768,column:16},end:{line:2768,column:34}},"520":{start:{line:2769,column:16},end:{line:2769,column:28}},"521":{start:{line:2772,column:12},end:{line:2772,column:49}},"522":{start:{line:2773,column:12},end:{line:2773,column:34}},"523":{start:{line:2776,column:12},end:{line:2776,column:40}},"524":{start:{line:2778,column:23},end:{line:2778,column:27}},"525":{start:{line:2779,column:12},end:{line:2781,column:15}},"526":{start:{line:2780,column:16},end:{line:2780,column:44}},"527":{start:{line:2785,column:12},end:{line:2790,column:13}},"528":{start:{line:2786,column:16},end:{line:2786,column:75}},"529":{start:{line:2789,column:16},end:{line:2789,column:45}},"530":{start:{line:2802,column:4},end:{line:2873,column:7}},"531":{start:{line:2809,column:12},end:{line:2809,column:33}},"532":{start:{line:2821,column:34},end:{line:2821,column:70}},"533":{start:{line:2822,column:12},end:{line:2822,column:77}},"534":{start:{line:2839,column:12},end:{line:2839,column:57}},"535":{start:{line:2862,column:12},end:{line:2866,column:13}},"536":{start:{line:2863,column:16},end:{line:2863,column:34}},"537":{start:{line:2864,column:16},end:{line:2864,column:30}},"538":{start:{line:2865,column:16},end:{line:2865,column:35}},"539":{start:{line:2868,column:12},end:{line:2868,column:34}},"540":{start:{line:2869,column:12},end:{line:2869,column:34}},"541":{start:{line:2871,column:12},end:{line:2871,column:49}},"542":{start:{line:2883,column:4},end:{line:2914,column:7}},"543":{start:{line:2890,column:23},end:{line:2890,column:67}},"544":{start:{line:2891,column:12},end:{line:2891,column:116}},"545":{start:{line:2910,column:12},end:{line:2910,column:29}},"546":{start:{line:2911,column:12},end:{line:2911,column:29}},"547":{start:{line:2912,column:12},end:{line:2912,column:57}},"548":{start:{line:2925,column:4},end:{line:3017,column:7}},"549":{start:{line:2932,column:12},end:{line:2932,column:83}},"550":{start:{line:2946,column:12},end:{line:2946,column:100}},"551":{start:{line:2958,column:34},end:{line:2958,column:70}},"552":{start:{line:2959,column:12},end:{line:2959,column:102}},"553":{start:{line:2977,column:12},end:{line:2977,column:29}},"554":{start:{line:2978,column:12},end:{line:2978,column:57}},"555":{start:{line:3001,column:12},end:{line:3005,column:13}},"556":{start:{line:3002,column:16},end:{line:3002,column:34}},"557":{start:{line:3003,column:16},end:{line:3003,column:36}},"558":{start:{line:3004,column:16},end:{line:3004,column:41}},"559":{start:{line:3007,column:12},end:{line:3010,column:13}},"560":{start:{line:3008,column:16},end:{line:3008,column:34}},"561":{start:{line:3009,column:16},end:{line:3009,column:28}},"562":{start:{line:3012,column:12},end:{line:3012,column:34}},"563":{start:{line:3013,column:12},end:{line:3013,column:40}},"564":{start:{line:3015,column:12},end:{line:3015,column:49}},"565":{start:{line:3027,column:4},end:{line:3213,column:7}},"566":{start:{line:3043,column:12},end:{line:3043,column:36}},"567":{start:{line:3055,column:12},end:{line:3055,column:88}},"568":{start:{line:3072,column:12},end:{line:3074,column:13}},"569":{start:{line:3073,column:16},end:{line:3073,column:84}},"570":{start:{line:3076,column:12},end:{line:3076,column:57}},"571":{start:{line:3098,column:12},end:{line:3100,column:13}},"572":{start:{line:3099,column:16},end:{line:3099,column:46}},"573":{start:{line:3102,column:12},end:{line:3102,column:49}},"574":{start:{line:3104,column:23},end:{line:3104,column:27}},"575":{start:{line:3105,column:22},end:{line:3120,column:14}},"576":{start:{line:3106,column:16},end:{line:3119,column:17}},"577":{start:{line:3107,column:20},end:{line:3107,column:34}},"578":{start:{line:3110,column:33},end:{line:3110,column:83}},"579":{start:{line:3111,column:20},end:{line:3118,column:23}},"580":{start:{line:3112,column:24},end:{line:3117,column:25}},"581":{start:{line:3113,column:28},end:{line:3113,column:35}},"582":{start:{line:3116,column:28},end:{line:3116,column:60}},"583":{start:{line:3122,column:12},end:{line:3122,column:23}},"584":{start:{line:3126,column:12},end:{line:3150,column:13}},"585":{start:{line:3127,column:27},end:{line:3127,column:31}},"586":{start:{line:3130,column:31},end:{line:3130,column:73}},"587":{start:{line:3133,column:28},end:{line:3133,column:83}},"588":{start:{line:3133,column:63},end:{line:3133,column:82}},"589":{start:{line:3136,column:16},end:{line:3138,column:17}},"590":{start:{line:3137,column:20},end:{line:3137,column:113}},"591":{start:{line:3141,column:40},end:{line:3141,column:90}},"592":{start:{line:3144,column:34},end:{line:3144,column:68}},"593":{start:{line:3146,column:16},end:{line:3146,column:43}},"594":{start:{line:3149,column:16},end:{line:3149,column:72}},"595":{start:{line:3154,column:12},end:{line:3168,column:13}},"596":{start:{line:3157,column:36},end:{line:3157,column:53}},"597":{start:{line:3159,column:16},end:{line:3164,column:17}},"598":{start:{line:3160,column:20},end:{line:3160,column:115}},"599":{start:{line:3163,column:20},end:{line:3163,column:51}},"600":{start:{line:3167,column:16},end:{line:3167,column:72}},"601":{start:{line:3172,column:12},end:{line:3172,column:49}},"602":{start:{line:3173,column:23},end:{line:3173,column:27}},"603":{start:{line:3176,column:40},end:{line:3176,column:74}},"604":{start:{line:3177,column:29},end:{line:3177,column:55}},"605":{start:{line:3180,column:12},end:{line:3189,column:13}},"606":{start:{line:3181,column:16},end:{line:3181,column:51}},"607":{start:{line:3182,column:16},end:{line:3182,column:68}},"608":{start:{line:3184,column:16},end:{line:3185,column:95}},"609":{start:{line:3185,column:38},end:{line:3185,column:92}},"610":{start:{line:3187,column:16},end:{line:3187,column:82}},"611":{start:{line:3188,column:16},end:{line:3188,column:57}},"612":{start:{line:3192,column:42},end:{line:3192,column:88}},"613":{start:{line:3193,column:31},end:{line:3193,column:61}},"614":{start:{line:3196,column:12},end:{line:3211,column:13}},"615":{start:{line:3197,column:16},end:{line:3197,column:53}},"616":{start:{line:3198,column:16},end:{line:3198,column:70}},"617":{start:{line:3200,column:16},end:{line:3203,column:19}},"618":{start:{line:3201,column:20},end:{line:3201,column:75}},"619":{start:{line:3202,column:20},end:{line:3202,column:31}},"620":{start:{line:3207,column:16},end:{line:3210,column:19}},"621":{start:{line:3208,column:20},end:{line:3208,column:75}},"622":{start:{line:3209,column:20},end:{line:3209,column:31}},"623":{start:{line:3223,column:4},end:{line:3814,column:7}},"624":{start:{line:3230,column:12},end:{line:3230,column:68}},"625":{start:{line:3248,column:12},end:{line:3248,column:28}},"626":{start:{line:3249,column:12},end:{line:3249,column:57}},"627":{start:{line:3250,column:12},end:{line:3250,column:27}},"628":{start:{line:3254,column:12},end:{line:3254,column:64}},"629":{start:{line:3255,column:12},end:{line:3255,column:72}},"630":{start:{line:3256,column:12},end:{line:3256,column:71}},"631":{start:{line:3257,column:12},end:{line:3257,column:64}},"632":{start:{line:3258,column:12},end:{line:3258,column:66}},"633":{start:{line:3259,column:12},end:{line:3259,column:63}},"634":{start:{line:3260,column:12},end:{line:3260,column:65}},"635":{start:{line:3261,column:12},end:{line:3261,column:65}},"636":{start:{line:3262,column:12},end:{line:3262,column:67}},"637":{start:{line:3263,column:12},end:{line:3263,column:69}},"638":{start:{line:3264,column:12},end:{line:3264,column:64}},"639":{start:{line:3265,column:12},end:{line:3265,column:65}},"640":{start:{line:3266,column:12},end:{line:3266,column:66}},"641":{start:{line:3267,column:12},end:{line:3267,column:63}},"642":{start:{line:3268,column:12},end:{line:3268,column:65}},"643":{start:{line:3287,column:22},end:{line:3287,column:72}},"644":{start:{line:3289,column:12},end:{line:3289,column:23}},"645":{start:{line:3308,column:12},end:{line:3308,column:49}},"646":{start:{line:3310,column:23},end:{line:3310,column:27}},"647":{start:{line:3311,column:22},end:{line:3313,column:14}},"648":{start:{line:3312,column:16},end:{line:3312,column:36}},"649":{start:{line:3315,column:12},end:{line:3315,column:23}},"650":{start:{line:3334,column:12},end:{line:3334,column:49}},"651":{start:{line:3336,column:23},end:{line:3336,column:27}},"652":{start:{line:3337,column:22},end:{line:3339,column:14}},"653":{start:{line:3338,column:16},end:{line:3338,column:36}},"654":{start:{line:3341,column:12},end:{line:3341,column:23}},"655":{start:{line:3361,column:12},end:{line:3361,column:49}},"656":{start:{line:3362,column:12},end:{line:3362,column:34}},"657":{start:{line:3363,column:12},end:{line:3363,column:67}},"658":{start:{line:3365,column:23},end:{line:3365,column:27}},"659":{start:{line:3366,column:12},end:{line:3373,column:15}},"660":{start:{line:3367,column:16},end:{line:3372,column:17}},"661":{start:{line:3368,column:20},end:{line:3368,column:34}},"662":{start:{line:3371,column:20},end:{line:3371,column:56}},"663":{start:{line:3392,column:12},end:{line:3392,column:49}},"664":{start:{line:3394,column:23},end:{line:3394,column:27}},"665":{start:{line:3395,column:22},end:{line:3397,column:14}},"666":{start:{line:3396,column:16},end:{line:3396,column:36}},"667":{start:{line:3399,column:12},end:{line:3399,column:23}},"668":{start:{line:3414,column:12},end:{line:3414,column:74}},"669":{start:{line:3433,column:12},end:{line:3433,column:49}},"670":{start:{line:3435,column:23},end:{line:3435,column:27}},"671":{start:{line:3436,column:22},end:{line:3438,column:14}},"672":{start:{line:3437,column:16},end:{line:3437,column:36}},"673":{start:{line:3440,column:12},end:{line:3440,column:23}},"674":{start:{line:3460,column:12},end:{line:3460,column:49}},"675":{start:{line:3461,column:12},end:{line:3461,column:34}},"676":{start:{line:3462,column:12},end:{line:3462,column:67}},"677":{start:{line:3464,column:23},end:{line:3464,column:27}},"678":{start:{line:3465,column:12},end:{line:3472,column:15}},"679":{start:{line:3466,column:16},end:{line:3471,column:17}},"680":{start:{line:3467,column:20},end:{line:3467,column:34}},"681":{start:{line:3470,column:20},end:{line:3470,column:56}},"682":{start:{line:3497,column:12},end:{line:3497,column:49}},"683":{start:{line:3498,column:12},end:{line:3498,column:34}},"684":{start:{line:3499,column:12},end:{line:3499,column:67}},"685":{start:{line:3501,column:23},end:{line:3501,column:27}},"686":{start:{line:3502,column:12},end:{line:3509,column:15}},"687":{start:{line:3503,column:16},end:{line:3508,column:17}},"688":{start:{line:3504,column:20},end:{line:3504,column:34}},"689":{start:{line:3507,column:20},end:{line:3507,column:56}},"690":{start:{line:3528,column:12},end:{line:3528,column:49}},"691":{start:{line:3530,column:23},end:{line:3530,column:27}},"692":{start:{line:3531,column:12},end:{line:3538,column:15}},"693":{start:{line:3532,column:16},end:{line:3537,column:17}},"694":{start:{line:3533,column:20},end:{line:3533,column:34}},"695":{start:{line:3536,column:20},end:{line:3536,column:56}},"696":{start:{line:3558,column:12},end:{line:3558,column:49}},"697":{start:{line:3560,column:23},end:{line:3560,column:27}},"698":{start:{line:3561,column:22},end:{line:3563,column:14}},"699":{start:{line:3562,column:16},end:{line:3562,column:36}},"700":{start:{line:3565,column:12},end:{line:3565,column:23}},"701":{start:{line:3586,column:12},end:{line:3586,column:49}},"702":{start:{line:3588,column:23},end:{line:3588,column:27}},"703":{start:{line:3589,column:22},end:{line:3591,column:14}},"704":{start:{line:3590,column:16},end:{line:3590,column:36}},"705":{start:{line:3593,column:12},end:{line:3593,column:23}},"706":{start:{line:3613,column:12},end:{line:3613,column:49}},"707":{start:{line:3615,column:23},end:{line:3615,column:27}},"708":{start:{line:3616,column:12},end:{line:3623,column:15}},"709":{start:{line:3617,column:16},end:{line:3622,column:17}},"710":{start:{line:3618,column:20},end:{line:3618,column:34}},"711":{start:{line:3621,column:20},end:{line:3621,column:56}},"712":{start:{line:3643,column:12},end:{line:3643,column:49}},"713":{start:{line:3645,column:23},end:{line:3645,column:27}},"714":{start:{line:3646,column:12},end:{line:3653,column:15}},"715":{start:{line:3647,column:16},end:{line:3652,column:17}},"716":{start:{line:3648,column:20},end:{line:3648,column:34}},"717":{start:{line:3651,column:20},end:{line:3651,column:56}},"718":{start:{line:3673,column:12},end:{line:3673,column:49}},"719":{start:{line:3675,column:23},end:{line:3675,column:27}},"720":{start:{line:3676,column:22},end:{line:3678,column:14}},"721":{start:{line:3677,column:16},end:{line:3677,column:36}},"722":{start:{line:3680,column:12},end:{line:3680,column:23}},"723":{start:{line:3700,column:25},end:{line:3700,column:46}},"724":{start:{line:3702,column:12},end:{line:3706,column:13}},"725":{start:{line:3703,column:16},end:{line:3705,column:18}},"726":{start:{line:3709,column:16},end:{line:3712,column:32}},"727":{start:{line:3715,column:12},end:{line:3715,column:63}},"728":{start:{line:3716,column:12},end:{line:3716,column:69}},"729":{start:{line:3717,column:12},end:{line:3717,column:61}},"730":{start:{line:3718,column:12},end:{line:3718,column:65}},"731":{start:{line:3719,column:12},end:{line:3719,column:63}},"732":{start:{line:3722,column:12},end:{line:3722,column:71}},"733":{start:{line:3723,column:12},end:{line:3723,column:89}},"734":{start:{line:3725,column:23},end:{line:3725,column:27}},"735":{start:{line:3726,column:31},end:{line:3726,column:36}},"736":{start:{line:3727,column:30},end:{line:3727,column:35}},"737":{start:{line:3728,column:12},end:{line:3786,column:14}},"738":{start:{line:3729,column:29},end:{line:3729,column:49}},"739":{start:{line:3731,column:20},end:{line:3779,column:23}},"740":{start:{line:3732,column:24},end:{line:3735,column:25}},"741":{start:{line:3733,column:28},end:{line:3733,column:47}},"742":{start:{line:3734,column:28},end:{line:3734,column:35}},"743":{start:{line:3737,column:44},end:{line:3737,column:74}},"744":{start:{line:3738,column:39},end:{line:3738,column:96}},"745":{start:{line:3739,column:24},end:{line:3776,column:25}},"746":{start:{line:3740,column:28},end:{line:3740,column:53}},"747":{start:{line:3743,column:28},end:{line:3756,column:29}},"748":{start:{line:3744,column:32},end:{line:3744,column:53}},"749":{start:{line:3745,column:32},end:{line:3745,column:52}},"750":{start:{line:3749,column:32},end:{line:3755,column:33}},"751":{start:{line:3750,column:36},end:{line:3750,column:70}},"752":{start:{line:3752,column:36},end:{line:3752,column:55}},"753":{start:{line:3753,column:36},end:{line:3753,column:52}},"754":{start:{line:3754,column:36},end:{line:3754,column:43}},"755":{start:{line:3758,column:28},end:{line:3758,column:52}},"756":{start:{line:3760,column:40},end:{line:3760,column:56}},"757":{start:{line:3762,column:28},end:{line:3775,column:29}},"758":{start:{line:3763,column:32},end:{line:3763,column:52}},"759":{start:{line:3765,column:32},end:{line:3765,column:51}},"760":{start:{line:3766,column:32},end:{line:3766,column:48}},"761":{start:{line:3767,column:32},end:{line:3767,column:39}},"762":{start:{line:3769,column:33},end:{line:3775,column:29}},"763":{start:{line:3770,column:32},end:{line:3770,column:54}},"764":{start:{line:3772,column:32},end:{line:3772,column:51}},"765":{start:{line:3773,column:32},end:{line:3773,column:48}},"766":{start:{line:3774,column:32},end:{line:3774,column:39}},"767":{start:{line:3778,column:24},end:{line:3778,column:59}},"768":{start:{line:3782,column:20},end:{line:3784,column:21}},"769":{start:{line:3783,column:24},end:{line:3783,column:45}},"770":{start:{line:3805,column:12},end:{line:3805,column:49}},"771":{start:{line:3807,column:23},end:{line:3807,column:27}},"772":{start:{line:3808,column:22},end:{line:3810,column:14}},"773":{start:{line:3809,column:16},end:{line:3809,column:36}},"774":{start:{line:3812,column:12},end:{line:3812,column:23}},"775":{start:{line:3824,column:4},end:{line:4015,column:7}},"776":{start:{line:3831,column:12},end:{line:3831,column:30}},"777":{start:{line:3843,column:22},end:{line:3843,column:39}},"778":{start:{line:3844,column:34},end:{line:3844,column:70}},"779":{start:{line:3845,column:12},end:{line:3845,column:68}},"780":{start:{line:3862,column:12},end:{line:3862,column:57}},"781":{start:{line:3866,column:12},end:{line:3866,column:60}},"782":{start:{line:3889,column:12},end:{line:3893,column:13}},"783":{start:{line:3890,column:16},end:{line:3890,column:34}},"784":{start:{line:3891,column:16},end:{line:3891,column:31}},"785":{start:{line:3892,column:16},end:{line:3892,column:38}},"786":{start:{line:3895,column:12},end:{line:3895,column:49}},"787":{start:{line:3896,column:12},end:{line:3896,column:34}},"788":{start:{line:3897,column:12},end:{line:3897,column:34}},"789":{start:{line:3899,column:12},end:{line:3901,column:13}},"790":{start:{line:3900,column:16},end:{line:3900,column:104}},"791":{start:{line:3903,column:12},end:{line:3906,column:13}},"792":{start:{line:3904,column:16},end:{line:3904,column:72}},"793":{start:{line:3905,column:16},end:{line:3905,column:23}},"794":{start:{line:3907,column:23},end:{line:3907,column:27}},"795":{start:{line:3908,column:12},end:{line:3916,column:15}},"796":{start:{line:3909,column:16},end:{line:3915,column:17}},"797":{start:{line:3910,column:20},end:{line:3910,column:34}},"798":{start:{line:3913,column:30},end:{line:3913,column:91}},"799":{start:{line:3914,column:20},end:{line:3914,column:40}},"800":{start:{line:3945,column:12},end:{line:3945,column:56}},"801":{start:{line:3972,column:12},end:{line:3976,column:13}},"802":{start:{line:3973,column:16},end:{line:3973,column:34}},"803":{start:{line:3974,column:16},end:{line:3974,column:31}},"804":{start:{line:3975,column:16},end:{line:3975,column:38}},"805":{start:{line:3978,column:12},end:{line:3978,column:49}},"806":{start:{line:3979,column:12},end:{line:3979,column:34}},"807":{start:{line:3980,column:12},end:{line:3980,column:34}},"808":{start:{line:3981,column:12},end:{line:3981,column:41}},"809":{start:{line:3983,column:12},end:{line:3985,column:13}},"810":{start:{line:3984,column:16},end:{line:3984,column:72}},"811":{start:{line:3987,column:29},end:{line:3987,column:62}},"812":{start:{line:3989,column:23},end:{line:3989,column:41}},"813":{start:{line:3990,column:25},end:{line:3990,column:31}},"814":{start:{line:3991,column:26},end:{line:3991,column:28}},"815":{start:{line:3992,column:23},end:{line:3992,column:29}},"816":{start:{line:3993,column:22},end:{line:3993,column:47}},"817":{start:{line:3994,column:23},end:{line:3994,column:27}},"818":{start:{line:3996,column:22},end:{line:4011,column:13}},"819":{start:{line:4004,column:20},end:{line:4009,column:21}},"820":{start:{line:4005,column:24},end:{line:4005,column:38}},"821":{start:{line:4008,column:24},end:{line:4008,column:54}},"822":{start:{line:4013,column:12},end:{line:4013,column:23}},"823":{start:{line:4047,column:4},end:{line:4164,column:7}},"824":{start:{line:4072,column:12},end:{line:4072,column:32}},"825":{start:{line:4073,column:12},end:{line:4073,column:44}},"826":{start:{line:4075,column:12},end:{line:4075,column:50}},"827":{start:{line:4076,column:12},end:{line:4076,column:52}},"828":{start:{line:4077,column:12},end:{line:4077,column:45}},"829":{start:{line:4078,column:12},end:{line:4078,column:51}},"830":{start:{line:4079,column:12},end:{line:4079,column:49}},"831":{start:{line:4080,column:12},end:{line:4080,column:47}},"832":{start:{line:4081,column:12},end:{line:4081,column:49}},"833":{start:{line:4082,column:12},end:{line:4082,column:56}},"834":{start:{line:4083,column:12},end:{line:4083,column:52}},"835":{start:{line:4084,column:12},end:{line:4084,column:57}},"836":{start:{line:4085,column:12},end:{line:4085,column:72}},"837":{start:{line:4096,column:12},end:{line:4096,column:42}},"838":{start:{line:4107,column:12},end:{line:4107,column:42}},"839":{start:{line:4118,column:12},end:{line:4118,column:45}},"840":{start:{line:4129,column:12},end:{line:4129,column:47}},"841":{start:{line:4140,column:12},end:{line:4140,column:46}},"842":{start:{line:4151,column:12},end:{line:4151,column:40}},"843":{start:{line:4162,column:12},end:{line:4162,column:43}},"844":{start:{line:4177,column:4},end:{line:4199,column:7}},"845":{start:{line:4192,column:12},end:{line:4192,column:32}},"846":{start:{line:4193,column:12},end:{line:4193,column:44}},"847":{start:{line:4195,column:12},end:{line:4195,column:40}},"848":{start:{line:4196,column:12},end:{line:4196,column:50}},"849":{start:{line:4197,column:12},end:{line:4197,column:65}},"850":{start:{line:4232,column:4},end:{line:4350,column:7}},"851":{start:{line:4258,column:12},end:{line:4258,column:32}},"852":{start:{line:4259,column:12},end:{line:4259,column:44}},"853":{start:{line:4261,column:12},end:{line:4261,column:54}},"854":{start:{line:4262,column:12},end:{line:4262,column:56}},"855":{start:{line:4263,column:12},end:{line:4263,column:56}},"856":{start:{line:4264,column:12},end:{line:4264,column:49}},"857":{start:{line:4265,column:12},end:{line:4265,column:57}},"858":{start:{line:4266,column:12},end:{line:4266,column:72}},"859":{start:{line:4268,column:12},end:{line:4268,column:35}},"860":{start:{line:4269,column:12},end:{line:4271,column:13}},"861":{start:{line:4269,column:25},end:{line:4269,column:26}},"862":{start:{line:4270,column:16},end:{line:4270,column:116}},"863":{start:{line:4273,column:12},end:{line:4275,column:13}},"864":{start:{line:4274,column:16},end:{line:4274,column:51}},"865":{start:{line:4276,column:12},end:{line:4278,column:13}},"866":{start:{line:4277,column:16},end:{line:4277,column:51}},"867":{start:{line:4279,column:12},end:{line:4282,column:13}},"868":{start:{line:4280,column:16},end:{line:4280,column:51}},"869":{start:{line:4281,column:16},end:{line:4281,column:64}},"870":{start:{line:4293,column:12},end:{line:4293,column:50}},"871":{start:{line:4304,column:12},end:{line:4304,column:35}},"872":{start:{line:4315,column:12},end:{line:4315,column:42}},"873":{start:{line:4326,column:12},end:{line:4326,column:40}},"874":{start:{line:4337,column:12},end:{line:4337,column:39}},"875":{start:{line:4348,column:12},end:{line:4348,column:41}},"876":{start:{line:4366,column:4},end:{line:4413,column:7}},"877":{start:{line:4383,column:12},end:{line:4383,column:35}},"878":{start:{line:4384,column:12},end:{line:4384,column:39}},"879":{start:{line:4385,column:12},end:{line:4385,column:58}},"880":{start:{line:4386,column:12},end:{line:4386,column:72}},"881":{start:{line:4387,column:12},end:{line:4387,column:50}},"882":{start:{line:4388,column:12},end:{line:4388,column:60}},"883":{start:{line:4390,column:12},end:{line:4390,column:50}},"884":{start:{line:4402,column:12},end:{line:4405,column:13}},"885":{start:{line:4403,column:16},end:{line:4403,column:32}},"886":{start:{line:4404,column:16},end:{line:4404,column:26}},"887":{start:{line:4406,column:12},end:{line:4408,column:13}},"888":{start:{line:4407,column:16},end:{line:4407,column:26}},"889":{start:{line:4411,column:12},end:{line:4411,column:87}},"890":{start:{line:4524,column:4},end:{line:5169,column:7}},"891":{start:{line:4544,column:12},end:{line:4544,column:51}},"892":{start:{line:4545,column:12},end:{line:4545,column:30}},"893":{start:{line:4546,column:12},end:{line:4546,column:27}},"894":{start:{line:4547,column:12},end:{line:4547,column:30}},"895":{start:{line:4548,column:12},end:{line:4548,column:28}},"896":{start:{line:4550,column:12},end:{line:4551,column:54}},"897":{start:{line:4553,column:12},end:{line:4553,column:52}},"898":{start:{line:4554,column:12},end:{line:4554,column:54}},"899":{start:{line:4570,column:12},end:{line:4572,column:13}},"900":{start:{line:4571,column:16},end:{line:4571,column:30}},"901":{start:{line:4574,column:12},end:{line:4576,column:13}},"902":{start:{line:4575,column:16},end:{line:4575,column:81}},"903":{start:{line:4578,column:12},end:{line:4578,column:54}},"904":{start:{line:4579,column:12},end:{line:4579,column:24}},"905":{start:{line:4595,column:12},end:{line:4597,column:13}},"906":{start:{line:4596,column:16},end:{line:4596,column:77}},"907":{start:{line:4598,column:12},end:{line:4604,column:13}},"908":{start:{line:4599,column:16},end:{line:4603,column:70}},"909":{start:{line:4605,column:12},end:{line:4610,column:13}},"910":{start:{line:4606,column:16},end:{line:4609,column:59}},"911":{start:{line:4612,column:22},end:{line:4616,column:13}},"912":{start:{line:4618,column:12},end:{line:4623,column:13}},"913":{start:{line:4619,column:16},end:{line:4622,column:18}},"914":{start:{line:4624,column:12},end:{line:4624,column:35}},"915":{start:{line:4626,column:12},end:{line:4626,column:24}},"916":{start:{line:4643,column:12},end:{line:4645,column:13}},"917":{start:{line:4644,column:16},end:{line:4644,column:83}},"918":{start:{line:4647,column:20},end:{line:4647,column:63}},"919":{start:{line:4649,column:12},end:{line:4651,column:13}},"920":{start:{line:4650,column:16},end:{line:4650,column:112}},"921":{start:{line:4653,column:12},end:{line:4656,column:13}},"922":{start:{line:4654,column:16},end:{line:4655,column:35}},"923":{start:{line:4658,column:12},end:{line:4661,column:13}},"924":{start:{line:4659,column:16},end:{line:4660,column:35}},"925":{start:{line:4663,column:12},end:{line:4665,column:13}},"926":{start:{line:4664,column:16},end:{line:4664,column:120}},"927":{start:{line:4667,column:25},end:{line:4676,column:13}},"928":{start:{line:4678,column:12},end:{line:4678,column:84}},"929":{start:{line:4679,column:12},end:{line:4679,column:38}},"930":{start:{line:4681,column:12},end:{line:4681,column:24}},"931":{start:{line:4694,column:12},end:{line:4696,column:13}},"932":{start:{line:4695,column:16},end:{line:4695,column:67}},"933":{start:{line:4697,column:20},end:{line:4697,column:63}},"934":{start:{line:4698,column:12},end:{line:4700,column:13}},"935":{start:{line:4699,column:16},end:{line:4699,column:96}},"936":{start:{line:4702,column:22},end:{line:4707,column:13}},"937":{start:{line:4709,column:12},end:{line:4711,column:13}},"938":{start:{line:4710,column:16},end:{line:4710,column:36}},"939":{start:{line:4713,column:12},end:{line:4713,column:32}},"940":{start:{line:4715,column:12},end:{line:4715,column:24}},"941":{start:{line:4738,column:12},end:{line:4740,column:13}},"942":{start:{line:4739,column:16},end:{line:4739,column:63}},"943":{start:{line:4741,column:20},end:{line:4741,column:59}},"944":{start:{line:4742,column:12},end:{line:4744,column:13}},"945":{start:{line:4743,column:16},end:{line:4743,column:86}},"946":{start:{line:4745,column:31},end:{line:4745,column:33}},"947":{start:{line:4746,column:12},end:{line:4748,column:13}},"948":{start:{line:4747,column:16},end:{line:4747,column:50}},"949":{start:{line:4749,column:12},end:{line:4751,column:13}},"950":{start:{line:4750,column:16},end:{line:4750,column:46}},"951":{start:{line:4752,column:12},end:{line:4754,column:13}},"952":{start:{line:4753,column:16},end:{line:4753,column:48}},"953":{start:{line:4755,column:12},end:{line:4757,column:13}},"954":{start:{line:4756,column:16},end:{line:4756,column:56}},"955":{start:{line:4759,column:12},end:{line:4766,column:15}},"956":{start:{line:4768,column:12},end:{line:4768,column:24}},"957":{start:{line:4783,column:12},end:{line:4785,column:13}},"958":{start:{line:4784,column:16},end:{line:4784,column:63}},"959":{start:{line:4786,column:20},end:{line:4786,column:59}},"960":{start:{line:4787,column:12},end:{line:4789,column:13}},"961":{start:{line:4788,column:16},end:{line:4788,column:87}},"962":{start:{line:4791,column:12},end:{line:4798,column:15}},"963":{start:{line:4800,column:12},end:{line:4800,column:24}},"964":{start:{line:4814,column:12},end:{line:4816,column:13}},"965":{start:{line:4815,column:16},end:{line:4815,column:63}},"966":{start:{line:4817,column:20},end:{line:4817,column:59}},"967":{start:{line:4818,column:12},end:{line:4820,column:13}},"968":{start:{line:4819,column:16},end:{line:4819,column:89}},"969":{start:{line:4821,column:12},end:{line:4823,column:13}},"970":{start:{line:4822,column:16},end:{line:4822,column:120}},"971":{start:{line:4825,column:12},end:{line:4831,column:15}},"972":{start:{line:4833,column:12},end:{line:4833,column:24}},"973":{start:{line:4846,column:12},end:{line:4848,column:13}},"974":{start:{line:4847,column:16},end:{line:4847,column:67}},"975":{start:{line:4849,column:20},end:{line:4849,column:63}},"976":{start:{line:4850,column:12},end:{line:4852,column:13}},"977":{start:{line:4851,column:16},end:{line:4851,column:96}},"978":{start:{line:4854,column:22},end:{line:4858,column:13}},"979":{start:{line:4860,column:12},end:{line:4862,column:13}},"980":{start:{line:4861,column:16},end:{line:4861,column:36}},"981":{start:{line:4864,column:12},end:{line:4864,column:35}},"982":{start:{line:4866,column:12},end:{line:4866,column:24}},"983":{start:{line:4883,column:12},end:{line:4885,column:13}},"984":{start:{line:4884,column:16},end:{line:4884,column:67}},"985":{start:{line:4886,column:20},end:{line:4886,column:63}},"986":{start:{line:4887,column:12},end:{line:4889,column:13}},"987":{start:{line:4888,column:16},end:{line:4888,column:86}},"988":{start:{line:4893,column:32},end:{line:4893,column:34}},"989":{start:{line:4894,column:12},end:{line:4896,column:13}},"990":{start:{line:4895,column:16},end:{line:4895,column:51}},"991":{start:{line:4897,column:12},end:{line:4899,column:13}},"992":{start:{line:4898,column:16},end:{line:4898,column:47}},"993":{start:{line:4900,column:12},end:{line:4902,column:13}},"994":{start:{line:4901,column:16},end:{line:4901,column:49}},"995":{start:{line:4903,column:12},end:{line:4905,column:13}},"996":{start:{line:4904,column:16},end:{line:4904,column:57}},"997":{start:{line:4907,column:12},end:{line:4913,column:15}},"998":{start:{line:4915,column:12},end:{line:4915,column:24}},"999":{start:{line:4929,column:12},end:{line:4931,column:13}},"1000":{start:{line:4930,column:16},end:{line:4930,column:67}},"1001":{start:{line:4932,column:20},end:{line:4932,column:63}},"1002":{start:{line:4933,column:12},end:{line:4935,column:13}},"1003":{start:{line:4934,column:16},end:{line:4934,column:87}},"1004":{start:{line:4937,column:12},end:{line:4943,column:15}},"1005":{start:{line:4945,column:12},end:{line:4945,column:24}},"1006":{start:{line:4958,column:12},end:{line:4960,column:13}},"1007":{start:{line:4959,column:16},end:{line:4959,column:63}},"1008":{start:{line:4961,column:20},end:{line:4961,column:59}},"1009":{start:{line:4962,column:12},end:{line:4964,column:13}},"1010":{start:{line:4963,column:16},end:{line:4963,column:89}},"1011":{start:{line:4965,column:12},end:{line:4967,column:13}},"1012":{start:{line:4966,column:16},end:{line:4966,column:120}},"1013":{start:{line:4969,column:12},end:{line:4974,column:15}},"1014":{start:{line:4976,column:12},end:{line:4976,column:24}},"1015":{start:{line:4990,column:12},end:{line:4992,column:13}},"1016":{start:{line:4991,column:16},end:{line:4991,column:67}},"1017":{start:{line:4994,column:20},end:{line:4994,column:63}},"1018":{start:{line:4995,column:12},end:{line:5047,column:13}},"1019":{start:{line:5004,column:16},end:{line:5006,column:35}},"1020":{start:{line:5008,column:17},end:{line:5047,column:13}},"1021":{start:{line:5020,column:16},end:{line:5023,column:22}},"1022":{start:{line:5025,column:17},end:{line:5047,column:13}},"1023":{start:{line:5034,column:16},end:{line:5037,column:22}},"1024":{start:{line:5039,column:17},end:{line:5047,column:13}},"1025":{start:{line:5042,column:16},end:{line:5043,column:46}},"1026":{start:{line:5045,column:17},end:{line:5047,column:13}},"1027":{start:{line:5046,column:16},end:{line:5046,column:84}},"1028":{start:{line:5049,column:12},end:{line:5056,column:15}},"1029":{start:{line:5058,column:12},end:{line:5058,column:24}},"1030":{start:{line:5069,column:12},end:{line:5076,column:14}},"1031":{start:{line:5102,column:22},end:{line:5102,column:60}},"1032":{start:{line:5104,column:23},end:{line:5106,column:13}},"1033":{start:{line:5108,column:12},end:{line:5110,column:13}},"1034":{start:{line:5109,column:16},end:{line:5109,column:60}},"1035":{start:{line:5112,column:12},end:{line:5124,column:15}},"1036":{start:{line:5113,column:16},end:{line:5116,column:17}},"1037":{start:{line:5114,column:20},end:{line:5114,column:77}},"1038":{start:{line:5115,column:20},end:{line:5115,column:27}},"1039":{start:{line:5118,column:16},end:{line:5123,column:17}},"1040":{start:{line:5119,column:20},end:{line:5119,column:88}},"1041":{start:{line:5122,column:20},end:{line:5122,column:96}},"1042":{start:{line:5154,column:12},end:{line:5157,column:13}},"1043":{start:{line:5155,column:16},end:{line:5155,column:32}},"1044":{start:{line:5156,column:16},end:{line:5156,column:26}},"1045":{start:{line:5158,column:12},end:{line:5158,column:30}},"1046":{start:{line:5160,column:12},end:{line:5167,column:15}},"1047":{start:{line:5161,column:16},end:{line:5166,column:17}},"1048":{start:{line:5162,column:20},end:{line:5162,column:46}},"1049":{start:{line:5165,column:20},end:{line:5165,column:68}},"1050":{start:{line:5197,column:4},end:{line:5515,column:7}},"1051":{start:{line:5225,column:12},end:{line:5225,column:32}},"1052":{start:{line:5226,column:12},end:{line:5226,column:44}},"1053":{start:{line:5228,column:12},end:{line:5228,column:58}},"1054":{start:{line:5229,column:12},end:{line:5229,column:59}},"1055":{start:{line:5230,column:12},end:{line:5230,column:60}},"1056":{start:{line:5231,column:12},end:{line:5231,column:59}},"1057":{start:{line:5232,column:12},end:{line:5232,column:67}},"1058":{start:{line:5235,column:12},end:{line:5237,column:13}},"1059":{start:{line:5236,column:16},end:{line:5236,column:57}},"1060":{start:{line:5238,column:12},end:{line:5240,column:13}},"1061":{start:{line:5239,column:16},end:{line:5239,column:59}},"1062":{start:{line:5241,column:12},end:{line:5243,column:13}},"1063":{start:{line:5242,column:16},end:{line:5242,column:60}},"1064":{start:{line:5244,column:12},end:{line:5246,column:13}},"1065":{start:{line:5245,column:16},end:{line:5245,column:58}},"1066":{start:{line:5249,column:12},end:{line:5251,column:13}},"1067":{start:{line:5250,column:16},end:{line:5250,column:51}},"1068":{start:{line:5254,column:12},end:{line:5254,column:29}},"1069":{start:{line:5255,column:12},end:{line:5257,column:13}},"1070":{start:{line:5255,column:25},end:{line:5255,column:26}},"1071":{start:{line:5256,column:16},end:{line:5256,column:98}},"1072":{start:{line:5260,column:12},end:{line:5260,column:34}},"1073":{start:{line:5261,column:12},end:{line:5263,column:13}},"1074":{start:{line:5261,column:25},end:{line:5261,column:26}},"1075":{start:{line:5262,column:16},end:{line:5262,column:90}},"1076":{start:{line:5266,column:12},end:{line:5266,column:35}},"1077":{start:{line:5267,column:12},end:{line:5269,column:13}},"1078":{start:{line:5267,column:25},end:{line:5267,column:26}},"1079":{start:{line:5268,column:16},end:{line:5268,column:126}},"1080":{start:{line:5280,column:12},end:{line:5280,column:55}},"1081":{start:{line:5291,column:12},end:{line:5291,column:52}},"1082":{start:{line:5303,column:12},end:{line:5303,column:44}},"1083":{start:{line:5317,column:12},end:{line:5317,column:78}},"1084":{start:{line:5332,column:33},end:{line:5332,column:35}},"1085":{start:{line:5334,column:12},end:{line:5338,column:13}},"1086":{start:{line:5335,column:16},end:{line:5337,column:17}},"1087":{start:{line:5336,column:20},end:{line:5336,column:55}},"1088":{start:{line:5340,column:35},end:{line:5340,column:58}},"1089":{start:{line:5341,column:12},end:{line:5345,column:13}},"1090":{start:{line:5342,column:16},end:{line:5344,column:17}},"1091":{start:{line:5343,column:20},end:{line:5343,column:62}},"1092":{start:{line:5347,column:12},end:{line:5347,column:34}},"1093":{start:{line:5361,column:12},end:{line:5361,column:49}},"1094":{start:{line:5374,column:25},end:{line:5374,column:27}},"1095":{start:{line:5376,column:23},end:{line:5376,column:44}},"1096":{start:{line:5377,column:31},end:{line:5377,column:48}},"1097":{start:{line:5378,column:12},end:{line:5383,column:13}},"1098":{start:{line:5378,column:25},end:{line:5378,column:26}},"1099":{start:{line:5379,column:34},end:{line:5379,column:55}},"1100":{start:{line:5380,column:16},end:{line:5382,column:17}},"1101":{start:{line:5380,column:29},end:{line:5380,column:30}},"1102":{start:{line:5381,column:20},end:{line:5381,column:124}},"1103":{start:{line:5384,column:12},end:{line:5384,column:26}},"1104":{start:{line:5397,column:12},end:{line:5397,column:56}},"1105":{start:{line:5410,column:12},end:{line:5410,column:67}},"1106":{start:{line:5423,column:12},end:{line:5423,column:50}},"1107":{start:{line:5454,column:12},end:{line:5457,column:13}},"1108":{start:{line:5455,column:16},end:{line:5455,column:40}},"1109":{start:{line:5456,column:16},end:{line:5456,column:41}},"1110":{start:{line:5459,column:24},end:{line:5459,column:106}},"1111":{start:{line:5460,column:23},end:{line:5460,column:72}},"1112":{start:{line:5462,column:12},end:{line:5462,column:65}},"1113":{start:{line:5485,column:24},end:{line:5485,column:90}},"1114":{start:{line:5487,column:12},end:{line:5487,column:69}},"1115":{start:{line:5488,column:12},end:{line:5488,column:81}},"1116":{start:{line:5501,column:12},end:{line:5501,column:64}},"1117":{start:{line:5513,column:12},end:{line:5513,column:53}},"1118":{start:{line:5526,column:4},end:{line:5679,column:7}},"1119":{start:{line:5533,column:12},end:{line:5533,column:74}},"1120":{start:{line:5556,column:12},end:{line:5559,column:13}},"1121":{start:{line:5557,column:16},end:{line:5557,column:34}},"1122":{start:{line:5558,column:16},end:{line:5558,column:31}},"1123":{start:{line:5561,column:12},end:{line:5561,column:29}},"1124":{start:{line:5562,column:12},end:{line:5562,column:57}},"1125":{start:{line:5564,column:12},end:{line:5564,column:77}},"1126":{start:{line:5565,column:12},end:{line:5568,column:13}},"1127":{start:{line:5567,column:16},end:{line:5567,column:72}},"1128":{start:{line:5572,column:12},end:{line:5574,column:13}},"1129":{start:{line:5573,column:16},end:{line:5573,column:35}},"1130":{start:{line:5576,column:38},end:{line:5576,column:75}},"1131":{start:{line:5578,column:12},end:{line:5578,column:66}},"1132":{start:{line:5579,column:12},end:{line:5579,column:63}},"1133":{start:{line:5580,column:12},end:{line:5580,column:63}},"1134":{start:{line:5583,column:23},end:{line:5583,column:50}},"1135":{start:{line:5584,column:12},end:{line:5584,column:30}},"1136":{start:{line:5585,column:12},end:{line:5587,column:13}},"1137":{start:{line:5585,column:25},end:{line:5585,column:26}},"1138":{start:{line:5586,column:16},end:{line:5586,column:75}},"1139":{start:{line:5589,column:12},end:{line:5589,column:56}},"1140":{start:{line:5590,column:12},end:{line:5590,column:56}},"1141":{start:{line:5601,column:12},end:{line:5601,column:47}},"1142":{start:{line:5613,column:12},end:{line:5617,column:13}},"1143":{start:{line:5613,column:25},end:{line:5613,column:26}},"1144":{start:{line:5614,column:16},end:{line:5616,column:17}},"1145":{start:{line:5615,column:20},end:{line:5615,column:43}},"1146":{start:{line:5618,column:12},end:{line:5618,column:24}},"1147":{start:{line:5629,column:12},end:{line:5629,column:58}},"1148":{start:{line:5645,column:12},end:{line:5648,column:13}},"1149":{start:{line:5646,column:16},end:{line:5646,column:33}},"1150":{start:{line:5647,column:16},end:{line:5647,column:27}},"1151":{start:{line:5649,column:12},end:{line:5649,column:49}},"1152":{start:{line:5651,column:12},end:{line:5654,column:13}},"1153":{start:{line:5652,column:16},end:{line:5652,column:93}},"1154":{start:{line:5653,column:16},end:{line:5653,column:23}},"1155":{start:{line:5655,column:12},end:{line:5658,column:13}},"1156":{start:{line:5656,column:16},end:{line:5656,column:81}},"1157":{start:{line:5657,column:16},end:{line:5657,column:23}},"1158":{start:{line:5660,column:31},end:{line:5666,column:13}},"1159":{start:{line:5668,column:23},end:{line:5668,column:27}},"1160":{start:{line:5669,column:12},end:{line:5677,column:15}},"1161":{start:{line:5670,column:16},end:{line:5676,column:17}},"1162":{start:{line:5671,column:20},end:{line:5671,column:40}},"1163":{start:{line:5674,column:45},end:{line:5674,column:98}},"1164":{start:{line:5675,column:20},end:{line:5675,column:142}},"1165":{start:{line:5690,column:4},end:{line:5768,column:7}},"1166":{start:{line:5697,column:12},end:{line:5697,column:36}},"1167":{start:{line:5713,column:12},end:{line:5713,column:40}},"1168":{start:{line:5714,column:12},end:{line:5714,column:57}},"1169":{start:{line:5715,column:12},end:{line:5715,column:56}},"1170":{start:{line:5733,column:12},end:{line:5736,column:13}},"1171":{start:{line:5734,column:16},end:{line:5734,column:34}},"1172":{start:{line:5735,column:16},end:{line:5735,column:28}},"1173":{start:{line:5738,column:12},end:{line:5738,column:34}},"1174":{start:{line:5739,column:12},end:{line:5739,column:48}},"1175":{start:{line:5740,column:12},end:{line:5740,column:43}},"1176":{start:{line:5742,column:23},end:{line:5742,column:27}},"1177":{start:{line:5743,column:12},end:{line:5751,column:15}},"1178":{start:{line:5744,column:16},end:{line:5750,column:17}},"1179":{start:{line:5745,column:20},end:{line:5745,column:34}},"1180":{start:{line:5748,column:36},end:{line:5748,column:137}},"1181":{start:{line:5749,column:20},end:{line:5749,column:46}},"1182":{start:{line:5765,column:34},end:{line:5765,column:70}},"1183":{start:{line:5766,column:12},end:{line:5766,column:88}},"1184":{start:{line:5772,column:4},end:{line:5802,column:7}},"1185":{start:{line:5774,column:12},end:{line:5774,column:34}},"1186":{start:{line:5776,column:12},end:{line:5776,column:38}},"1187":{start:{line:5777,column:12},end:{line:5777,column:50}},"1188":{start:{line:5778,column:12},end:{line:5778,column:29}},"1189":{start:{line:5783,column:12},end:{line:5783,column:49}},"1190":{start:{line:5785,column:23},end:{line:5785,column:27}},"1191":{start:{line:5786,column:25},end:{line:5789,column:13}},"1192":{start:{line:5790,column:12},end:{line:5800,column:15}},"1193":{start:{line:5791,column:16},end:{line:5799,column:17}},"1194":{start:{line:5792,column:20},end:{line:5792,column:34}},"1195":{start:{line:5795,column:38},end:{line:5795,column:76}},"1196":{start:{line:5796,column:20},end:{line:5796,column:47}},"1197":{start:{line:5798,column:20},end:{line:5798,column:60}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:12},end:{line:5803,column:1}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:38,column:14},end:{line:38,column:15}},loc:{start:{line:38,column:25},end:{line:40,column:9}},line:38},"2":{name:"(anonymous_2)",decl:{start:{line:72,column:14},end:{line:72,column:15}},loc:{start:{line:72,column:25},end:{line:88,column:9}},line:72},"3":{name:"(anonymous_3)",decl:{start:{line:105,column:20},end:{line:105,column:21}},loc:{start:{line:105,column:41},end:{line:117,column:9}},line:105},"4":{name:"(anonymous_4)",decl:{start:{line:135,column:14},end:{line:135,column:15}},loc:{start:{line:135,column:25},end:{line:137,column:9}},line:135},"5":{name:"(anonymous_5)",decl:{start:{line:163,column:24},end:{line:163,column:25}},loc:{start:{line:163,column:44},end:{line:165,column:9}},line:163},"6":{name:"(anonymous_6)",decl:{start:{line:191,column:17},end:{line:191,column:18}},loc:{start:{line:191,column:37},end:{line:193,column:9}},line:191},"7":{name:"(anonymous_7)",decl:{start:{line:217,column:23},end:{line:217,column:24}},loc:{start:{line:217,column:43},end:{line:219,column:9}},line:217},"8":{name:"(anonymous_8)",decl:{start:{line:243,column:26},end:{line:243,column:27}},loc:{start:{line:243,column:46},end:{line:245,column:9}},line:243},"9":{name:"(anonymous_9)",decl:{start:{line:270,column:26},end:{line:270,column:27}},loc:{start:{line:270,column:46},end:{line:272,column:9}},line:270},"10":{name:"(anonymous_10)",decl:{start:{line:299,column:14},end:{line:299,column:15}},loc:{start:{line:299,column:34},end:{line:301,column:9}},line:299},"11":{name:"(anonymous_11)",decl:{start:{line:311,column:20},end:{line:311,column:21}},loc:{start:{line:311,column:40},end:{line:313,column:9}},line:311},"12":{name:"(anonymous_12)",decl:{start:{line:336,column:15},end:{line:336,column:16}},loc:{start:{line:336,column:26},end:{line:338,column:9}},line:336},"13":{name:"(anonymous_13)",decl:{start:{line:365,column:15},end:{line:365,column:16}},loc:{start:{line:365,column:35},end:{line:367,column:9}},line:365},"14":{name:"(anonymous_14)",decl:{start:{line:396,column:16},end:{line:396,column:17}},loc:{start:{line:396,column:61},end:{line:404,column:9}},line:396},"15":{name:"(anonymous_15)",decl:{start:{line:419,column:16},end:{line:419,column:17}},loc:{start:{line:419,column:51},end:{line:426,column:9}},line:419},"16":{name:"(anonymous_16)",decl:{start:{line:452,column:23},end:{line:452,column:24}},loc:{start:{line:452,column:68},end:{line:460,column:9}},line:452},"17":{name:"(anonymous_17)",decl:{start:{line:477,column:21},end:{line:477,column:22}},loc:{start:{line:477,column:40},end:{line:500,column:9}},line:477},"18":{name:"(anonymous_18)",decl:{start:{line:478,column:35},end:{line:478,column:36}},loc:{start:{line:478,column:46},end:{line:478,column:48}},line:478},"19":{name:"(anonymous_19)",decl:{start:{line:481,column:54},end:{line:481,column:55}},loc:{start:{line:481,column:78},end:{line:497,column:13}},line:481},"20":{name:"(anonymous_20)",decl:{start:{line:488,column:31},end:{line:488,column:32}},loc:{start:{line:488,column:42},end:{line:495,column:21}},line:488},"21":{name:"(anonymous_21)",decl:{start:{line:516,column:20},end:{line:516,column:21}},loc:{start:{line:516,column:39},end:{line:521,column:9}},line:516},"22":{name:"(anonymous_22)",decl:{start:{line:517,column:35},end:{line:517,column:36}},loc:{start:{line:517,column:46},end:{line:517,column:48}},line:517},"23":{name:"(anonymous_23)",decl:{start:{line:543,column:15},end:{line:543,column:16}},loc:{start:{line:543,column:49},end:{line:562,column:9}},line:543},"24":{name:"(anonymous_24)",decl:{start:{line:549,column:35},end:{line:549,column:36}},loc:{start:{line:549,column:46},end:{line:549,column:48}},line:549},"25":{name:"(anonymous_25)",decl:{start:{line:554,column:50},end:{line:554,column:51}},loc:{start:{line:554,column:74},end:{line:561,column:13}},line:554},"26":{name:"(anonymous_26)",decl:{start:{line:580,column:19},end:{line:580,column:20}},loc:{start:{line:580,column:53},end:{line:601,column:9}},line:580},"27":{name:"(anonymous_27)",decl:{start:{line:586,column:35},end:{line:586,column:36}},loc:{start:{line:586,column:46},end:{line:586,column:48}},line:586},"28":{name:"(anonymous_28)",decl:{start:{line:592,column:53},end:{line:592,column:54}},loc:{start:{line:592,column:77},end:{line:600,column:13}},line:592},"29":{name:"(anonymous_29)",decl:{start:{line:624,column:13},end:{line:624,column:14}},loc:{start:{line:624,column:47},end:{line:663,column:9}},line:624},"30":{name:"(anonymous_30)",decl:{start:{line:630,column:35},end:{line:630,column:36}},loc:{start:{line:630,column:46},end:{line:630,column:48}},line:630},"31":{name:"(anonymous_31)",decl:{start:{line:652,column:16},end:{line:652,column:17}},loc:{start:{line:652,column:40},end:{line:659,column:17}},line:652},"32":{name:"(anonymous_32)",decl:{start:{line:685,column:14},end:{line:685,column:15}},loc:{start:{line:685,column:47},end:{line:703,column:9}},line:685},"33":{name:"(anonymous_33)",decl:{start:{line:721,column:13},end:{line:721,column:14}},loc:{start:{line:721,column:49},end:{line:735,column:9}},line:721},"34":{name:"(anonymous_34)",decl:{start:{line:737,column:16},end:{line:737,column:17}},loc:{start:{line:737,column:42},end:{line:750,column:9}},line:737},"35":{name:"(anonymous_35)",decl:{start:{line:768,column:14},end:{line:768,column:15}},loc:{start:{line:768,column:50},end:{line:782,column:9}},line:768},"36":{name:"(anonymous_36)",decl:{start:{line:800,column:13},end:{line:800,column:14}},loc:{start:{line:800,column:49},end:{line:814,column:9}},line:800},"37":{name:"(anonymous_37)",decl:{start:{line:843,column:14},end:{line:843,column:15}},loc:{start:{line:843,column:49},end:{line:858,column:9}},line:843},"38":{name:"(anonymous_38)",decl:{start:{line:865,column:14},end:{line:865,column:15}},loc:{start:{line:865,column:25},end:{line:867,column:9}},line:865},"39":{name:"(anonymous_39)",decl:{start:{line:877,column:15},end:{line:877,column:16}},loc:{start:{line:877,column:36},end:{line:880,column:9}},line:877},"40":{name:"(anonymous_40)",decl:{start:{line:891,column:15},end:{line:891,column:16}},loc:{start:{line:891,column:34},end:{line:893,column:9}},line:891},"41":{name:"(anonymous_41)",decl:{start:{line:902,column:20},end:{line:902,column:21}},loc:{start:{line:902,column:31},end:{line:904,column:9}},line:902},"42":{name:"(anonymous_42)",decl:{start:{line:913,column:15},end:{line:913,column:16}},loc:{start:{line:913,column:26},end:{line:915,column:9}},line:913},"43":{name:"(anonymous_43)",decl:{start:{line:953,column:14},end:{line:953,column:15}},loc:{start:{line:953,column:49},end:{line:977,column:9}},line:953},"44":{name:"(anonymous_44)",decl:{start:{line:987,column:15},end:{line:987,column:16}},loc:{start:{line:987,column:36},end:{line:1009,column:9}},line:987},"45":{name:"(anonymous_45)",decl:{start:{line:1019,column:16},end:{line:1019,column:17}},loc:{start:{line:1019,column:27},end:{line:1021,column:9}},line:1019},"46":{name:"(anonymous_46)",decl:{start:{line:1031,column:13},end:{line:1031,column:14}},loc:{start:{line:1031,column:24},end:{line:1033,column:9}},line:1031},"47":{name:"(anonymous_47)",decl:{start:{line:1043,column:15},end:{line:1043,column:16}},loc:{start:{line:1043,column:26},end:{line:1045,column:9}},line:1043},"48":{name:"(anonymous_48)",decl:{start:{line:1054,column:16},end:{line:1054,column:17}},loc:{start:{line:1054,column:27},end:{line:1056,column:9}},line:1054},"49":{name:"(anonymous_49)",decl:{start:{line:1065,column:17},end:{line:1065,column:18}},loc:{start:{line:1065,column:28},end:{line:1067,column:9}},line:1065},"50":{name:"(anonymous_50)",decl:{start:{line:1076,column:19},end:{line:1076,column:20}},loc:{start:{line:1076,column:30},end:{line:1078,column:9}},line:1076},"51":{name:"(anonymous_51)",decl:{start:{line:1095,column:15},end:{line:1095,column:16}},loc:{start:{line:1095,column:43},end:{line:1114,column:9}},line:1095},"52":{name:"(anonymous_52)",decl:{start:{line:1100,column:35},end:{line:1100,column:36}},loc:{start:{line:1100,column:46},end:{line:1100,column:48}},line:1100},"53":{name:"(anonymous_53)",decl:{start:{line:1105,column:41},end:{line:1105,column:42}},loc:{start:{line:1105,column:65},end:{line:1113,column:13}},line:1105},"54":{name:"(anonymous_54)",decl:{start:{line:1124,column:16},end:{line:1124,column:17}},loc:{start:{line:1124,column:35},end:{line:1131,column:9}},line:1124},"55":{name:"(anonymous_55)",decl:{start:{line:1125,column:35},end:{line:1125,column:36}},loc:{start:{line:1125,column:46},end:{line:1125,column:48}},line:1125},"56":{name:"(anonymous_56)",decl:{start:{line:1128,column:36},end:{line:1128,column:37}},loc:{start:{line:1128,column:50},end:{line:1130,column:13}},line:1128},"57":{name:"(anonymous_57)",decl:{start:{line:1142,column:16},end:{line:1142,column:17}},loc:{start:{line:1142,column:42},end:{line:1171,column:9}},line:1142},"58":{name:"(anonymous_58)",decl:{start:{line:1143,column:35},end:{line:1143,column:36}},loc:{start:{line:1143,column:46},end:{line:1143,column:48}},line:1143},"59":{name:"(anonymous_59)",decl:{start:{line:1150,column:43},end:{line:1150,column:44}},loc:{start:{line:1150,column:67},end:{line:1168,column:13}},line:1150},"60":{name:"(anonymous_60)",decl:{start:{line:1156,column:31},end:{line:1156,column:32}},loc:{start:{line:1156,column:42},end:{line:1163,column:21}},line:1156},"61":{name:"(anonymous_61)",decl:{start:{line:1181,column:17},end:{line:1181,column:18}},loc:{start:{line:1181,column:36},end:{line:1193,column:9}},line:1181},"62":{name:"(anonymous_62)",decl:{start:{line:1182,column:35},end:{line:1182,column:36}},loc:{start:{line:1182,column:46},end:{line:1182,column:48}},line:1182},"63":{name:"(anonymous_63)",decl:{start:{line:1185,column:37},end:{line:1185,column:38}},loc:{start:{line:1185,column:61},end:{line:1192,column:13}},line:1185},"64":{name:"(anonymous_64)",decl:{start:{line:1203,column:16},end:{line:1203,column:17}},loc:{start:{line:1203,column:35},end:{line:1215,column:9}},line:1203},"65":{name:"(anonymous_65)",decl:{start:{line:1204,column:35},end:{line:1204,column:36}},loc:{start:{line:1204,column:46},end:{line:1204,column:48}},line:1204},"66":{name:"(anonymous_66)",decl:{start:{line:1207,column:36},end:{line:1207,column:37}},loc:{start:{line:1207,column:60},end:{line:1214,column:13}},line:1207},"67":{name:"(anonymous_67)",decl:{start:{line:1225,column:16},end:{line:1225,column:17}},loc:{start:{line:1225,column:35},end:{line:1237,column:9}},line:1225},"68":{name:"(anonymous_68)",decl:{start:{line:1226,column:35},end:{line:1226,column:36}},loc:{start:{line:1226,column:46},end:{line:1226,column:48}},line:1226},"69":{name:"(anonymous_69)",decl:{start:{line:1229,column:37},end:{line:1229,column:38}},loc:{start:{line:1229,column:61},end:{line:1236,column:13}},line:1229},"70":{name:"(anonymous_70)",decl:{start:{line:1272,column:14},end:{line:1272,column:15}},loc:{start:{line:1272,column:49},end:{line:1290,column:9}},line:1272},"71":{name:"(anonymous_71)",decl:{start:{line:1300,column:27},end:{line:1300,column:28}},loc:{start:{line:1300,column:43},end:{line:1302,column:9}},line:1300},"72":{name:"(anonymous_72)",decl:{start:{line:1313,column:15},end:{line:1313,column:16}},loc:{start:{line:1313,column:36},end:{line:1337,column:9}},line:1313},"73":{name:"(anonymous_73)",decl:{start:{line:1347,column:15},end:{line:1347,column:16}},loc:{start:{line:1347,column:26},end:{line:1349,column:9}},line:1347},"74":{name:"(anonymous_74)",decl:{start:{line:1358,column:16},end:{line:1358,column:17}},loc:{start:{line:1358,column:27},end:{line:1360,column:9}},line:1358},"75":{name:"(anonymous_75)",decl:{start:{line:1369,column:17},end:{line:1369,column:18}},loc:{start:{line:1369,column:28},end:{line:1371,column:9}},line:1369},"76":{name:"(anonymous_76)",decl:{start:{line:1388,column:15},end:{line:1388,column:16}},loc:{start:{line:1388,column:43},end:{line:1412,column:9}},line:1388},"77":{name:"(anonymous_77)",decl:{start:{line:1393,column:35},end:{line:1393,column:36}},loc:{start:{line:1393,column:46},end:{line:1393,column:48}},line:1393},"78":{name:"(anonymous_78)",decl:{start:{line:1401,column:44},end:{line:1401,column:45}},loc:{start:{line:1401,column:68},end:{line:1409,column:13}},line:1401},"79":{name:"(anonymous_79)",decl:{start:{line:1414,column:18},end:{line:1414,column:19}},loc:{start:{line:1414,column:42},end:{line:1425,column:9}},line:1414},"80":{name:"(anonymous_80)",decl:{start:{line:1448,column:14},end:{line:1448,column:15}},loc:{start:{line:1448,column:38},end:{line:1505,column:9}},line:1448},"81":{name:"(anonymous_81)",decl:{start:{line:1524,column:16},end:{line:1524,column:17}},loc:{start:{line:1524,column:43},end:{line:1557,column:9}},line:1524},"82":{name:"(anonymous_82)",decl:{start:{line:1525,column:35},end:{line:1525,column:36}},loc:{start:{line:1525,column:46},end:{line:1525,column:48}},line:1525},"83":{name:"(anonymous_83)",decl:{start:{line:1527,column:44},end:{line:1527,column:45}},loc:{start:{line:1527,column:68},end:{line:1554,column:13}},line:1527},"84":{name:"(anonymous_84)",decl:{start:{line:1541,column:37},end:{line:1541,column:38}},loc:{start:{line:1541,column:48},end:{line:1548,column:25}},line:1541},"85":{name:"(anonymous_85)",decl:{start:{line:1574,column:14},end:{line:1574,column:15}},loc:{start:{line:1574,column:33},end:{line:1578,column:9}},line:1574},"86":{name:"(anonymous_86)",decl:{start:{line:1575,column:35},end:{line:1575,column:36}},loc:{start:{line:1575,column:46},end:{line:1575,column:48}},line:1575},"87":{name:"(anonymous_87)",decl:{start:{line:1595,column:14},end:{line:1595,column:15}},loc:{start:{line:1595,column:25},end:{line:1597,column:9}},line:1595},"88":{name:"(anonymous_88)",decl:{start:{line:1613,column:14},end:{line:1613,column:15}},loc:{start:{line:1613,column:49},end:{line:1621,column:9}},line:1613},"89":{name:"(anonymous_89)",decl:{start:{line:1636,column:20},end:{line:1636,column:21}},loc:{start:{line:1636,column:31},end:{line:1638,column:9}},line:1636},"90":{name:"(anonymous_90)",decl:{start:{line:1656,column:21},end:{line:1656,column:22}},loc:{start:{line:1656,column:40},end:{line:1665,column:9}},line:1656},"91":{name:"(anonymous_91)",decl:{start:{line:1657,column:35},end:{line:1657,column:36}},loc:{start:{line:1657,column:46},end:{line:1657,column:48}},line:1657},"92":{name:"(anonymous_92)",decl:{start:{line:1660,column:51},end:{line:1660,column:52}},loc:{start:{line:1660,column:65},end:{line:1662,column:13}},line:1660},"93":{name:"(anonymous_93)",decl:{start:{line:1688,column:18},end:{line:1688,column:19}},loc:{start:{line:1688,column:46},end:{line:1711,column:9}},line:1688},"94":{name:"(anonymous_94)",decl:{start:{line:1694,column:35},end:{line:1694,column:36}},loc:{start:{line:1694,column:46},end:{line:1694,column:48}},line:1694},"95":{name:"(anonymous_95)",decl:{start:{line:1698,column:53},end:{line:1698,column:54}},loc:{start:{line:1698,column:77},end:{line:1708,column:13}},line:1698},"96":{name:"(anonymous_96)",decl:{start:{line:1725,column:25},end:{line:1725,column:26}},loc:{start:{line:1725,column:36},end:{line:1727,column:9}},line:1725},"97":{name:"(anonymous_97)",decl:{start:{line:1748,column:17},end:{line:1748,column:18}},loc:{start:{line:1748,column:45},end:{line:1777,column:9}},line:1748},"98":{name:"(anonymous_98)",decl:{start:{line:1754,column:35},end:{line:1754,column:36}},loc:{start:{line:1754,column:46},end:{line:1754,column:48}},line:1754},"99":{name:"(anonymous_99)",decl:{start:{line:1758,column:48},end:{line:1758,column:49}},loc:{start:{line:1758,column:72},end:{line:1776,column:13}},line:1758},"100":{name:"(anonymous_100)",decl:{start:{line:1794,column:22},end:{line:1794,column:23}},loc:{start:{line:1794,column:41},end:{line:1801,column:9}},line:1794},"101":{name:"(anonymous_101)",decl:{start:{line:1795,column:35},end:{line:1795,column:36}},loc:{start:{line:1795,column:46},end:{line:1795,column:48}},line:1795},"102":{name:"(anonymous_102)",decl:{start:{line:1798,column:44},end:{line:1798,column:45}},loc:{start:{line:1798,column:68},end:{line:1800,column:13}},line:1798},"103":{name:"(anonymous_103)",decl:{start:{line:1815,column:16},end:{line:1815,column:17}},loc:{start:{line:1815,column:43},end:{line:1842,column:9}},line:1815},"104":{name:"(anonymous_104)",decl:{start:{line:1820,column:37},end:{line:1820,column:38}},loc:{start:{line:1820,column:59},end:{line:1835,column:17}},line:1820},"105":{name:"(anonymous_105)",decl:{start:{line:1826,column:52},end:{line:1826,column:53}},loc:{start:{line:1826,column:63},end:{line:1833,column:25}},line:1826},"106":{name:"(anonymous_106)",decl:{start:{line:1860,column:14},end:{line:1860,column:15}},loc:{start:{line:1860,column:25},end:{line:1862,column:9}},line:1860},"107":{name:"(anonymous_107)",decl:{start:{line:1872,column:27},end:{line:1872,column:28}},loc:{start:{line:1872,column:43},end:{line:1875,column:9}},line:1872},"108":{name:"(anonymous_108)",decl:{start:{line:1890,column:14},end:{line:1890,column:15}},loc:{start:{line:1890,column:43},end:{line:1892,column:9}},line:1890},"109":{name:"(anonymous_109)",decl:{start:{line:1909,column:14},end:{line:1909,column:15}},loc:{start:{line:1909,column:26},end:{line:1911,column:9}},line:1909},"110":{name:"(anonymous_110)",decl:{start:{line:1927,column:14},end:{line:1927,column:15}},loc:{start:{line:1927,column:50},end:{line:1930,column:9}},line:1927},"111":{name:"(anonymous_111)",decl:{start:{line:1956,column:14},end:{line:1956,column:15}},loc:{start:{line:1956,column:25},end:{line:1958,column:9}},line:1956},"112":{name:"(anonymous_112)",decl:{start:{line:1970,column:27},end:{line:1970,column:28}},loc:{start:{line:1970,column:43},end:{line:1973,column:9}},line:1970},"113":{name:"(anonymous_113)",decl:{start:{line:1988,column:14},end:{line:1988,column:15}},loc:{start:{line:1988,column:43},end:{line:1990,column:9}},line:1988},"114":{name:"(anonymous_114)",decl:{start:{line:2008,column:14},end:{line:2008,column:15}},loc:{start:{line:2008,column:25},end:{line:2010,column:9}},line:2008},"115":{name:"(anonymous_115)",decl:{start:{line:2020,column:17},end:{line:2020,column:18}},loc:{start:{line:2020,column:28},end:{line:2022,column:9}},line:2020},"116":{name:"(anonymous_116)",decl:{start:{line:2030,column:19},end:{line:2030,column:20}},loc:{start:{line:2030,column:30},end:{line:2032,column:9}},line:2030},"117":{name:"(anonymous_117)",decl:{start:{line:2043,column:22},end:{line:2043,column:23}},loc:{start:{line:2043,column:33},end:{line:2046,column:9}},line:2043},"118":{name:"(anonymous_118)",decl:{start:{line:2056,column:24},end:{line:2056,column:25}},loc:{start:{line:2056,column:35},end:{line:2058,column:9}},line:2056},"119":{name:"(anonymous_119)",decl:{start:{line:2066,column:25},end:{line:2066,column:26}},loc:{start:{line:2066,column:36},end:{line:2068,column:9}},line:2066},"120":{name:"(anonymous_120)",decl:{start:{line:2077,column:18},end:{line:2077,column:19}},loc:{start:{line:2077,column:29},end:{line:2079,column:9}},line:2077},"121":{name:"(anonymous_121)",decl:{start:{line:2087,column:13},end:{line:2087,column:14}},loc:{start:{line:2087,column:24},end:{line:2089,column:9}},line:2087},"122":{name:"(anonymous_122)",decl:{start:{line:2097,column:21},end:{line:2097,column:22}},loc:{start:{line:2097,column:32},end:{line:2099,column:9}},line:2097},"123":{name:"(anonymous_123)",decl:{start:{line:2109,column:29},end:{line:2109,column:30}},loc:{start:{line:2109,column:40},end:{line:2111,column:9}},line:2109},"124":{name:"(anonymous_124)",decl:{start:{line:2121,column:29},end:{line:2121,column:30}},loc:{start:{line:2121,column:40},end:{line:2123,column:9}},line:2121},"125":{name:"(anonymous_125)",decl:{start:{line:2139,column:14},end:{line:2139,column:15}},loc:{start:{line:2139,column:49},end:{line:2142,column:9}},line:2139},"126":{name:"(anonymous_126)",decl:{start:{line:2160,column:14},end:{line:2160,column:15}},loc:{start:{line:2160,column:25},end:{line:2162,column:9}},line:2160},"127":{name:"(anonymous_127)",decl:{start:{line:2172,column:15},end:{line:2172,column:16}},loc:{start:{line:2172,column:26},end:{line:2174,column:9}},line:2172},"128":{name:"(anonymous_128)",decl:{start:{line:2193,column:14},end:{line:2193,column:15}},loc:{start:{line:2193,column:42},end:{line:2221,column:9}},line:2193},"129":{name:"(anonymous_129)",decl:{start:{line:2199,column:35},end:{line:2199,column:36}},loc:{start:{line:2199,column:46},end:{line:2199,column:48}},line:2199},"130":{name:"(anonymous_130)",decl:{start:{line:2203,column:41},end:{line:2203,column:42}},loc:{start:{line:2203,column:65},end:{line:2220,column:13}},line:2203},"131":{name:"(anonymous_131)",decl:{start:{line:2237,column:14},end:{line:2237,column:15}},loc:{start:{line:2237,column:49},end:{line:2242,column:9}},line:2237},"132":{name:"(anonymous_132)",decl:{start:{line:2261,column:14},end:{line:2261,column:15}},loc:{start:{line:2261,column:25},end:{line:2263,column:9}},line:2261},"133":{name:"(anonymous_133)",decl:{start:{line:2273,column:27},end:{line:2273,column:28}},loc:{start:{line:2273,column:43},end:{line:2276,column:9}},line:2273},"134":{name:"(anonymous_134)",decl:{start:{line:2283,column:16},end:{line:2283,column:17}},loc:{start:{line:2283,column:27},end:{line:2285,column:9}},line:2283},"135":{name:"(anonymous_135)",decl:{start:{line:2300,column:14},end:{line:2300,column:15}},loc:{start:{line:2300,column:43},end:{line:2305,column:9}},line:2300},"136":{name:"(anonymous_136)",decl:{start:{line:2330,column:14},end:{line:2330,column:15}},loc:{start:{line:2330,column:25},end:{line:2332,column:9}},line:2330},"137":{name:"(anonymous_137)",decl:{start:{line:2344,column:14},end:{line:2344,column:15}},loc:{start:{line:2344,column:38},end:{line:2350,column:9}},line:2344},"138":{name:"(anonymous_138)",decl:{start:{line:2367,column:19},end:{line:2367,column:20}},loc:{start:{line:2367,column:38},end:{line:2379,column:9}},line:2367},"139":{name:"(anonymous_139)",decl:{start:{line:2368,column:35},end:{line:2368,column:36}},loc:{start:{line:2368,column:46},end:{line:2368,column:48}},line:2368},"140":{name:"(anonymous_140)",decl:{start:{line:2371,column:41},end:{line:2371,column:42}},loc:{start:{line:2371,column:65},end:{line:2378,column:13}},line:2371},"141":{name:"(anonymous_141)",decl:{start:{line:2396,column:20},end:{line:2396,column:21}},loc:{start:{line:2396,column:39},end:{line:2408,column:9}},line:2396},"142":{name:"(anonymous_142)",decl:{start:{line:2397,column:35},end:{line:2397,column:36}},loc:{start:{line:2397,column:46},end:{line:2397,column:48}},line:2397},"143":{name:"(anonymous_143)",decl:{start:{line:2400,column:42},end:{line:2400,column:43}},loc:{start:{line:2400,column:66},end:{line:2407,column:13}},line:2400},"144":{name:"(anonymous_144)",decl:{start:{line:2434,column:14},end:{line:2434,column:15}},loc:{start:{line:2434,column:25},end:{line:2436,column:9}},line:2434},"145":{name:"(anonymous_145)",decl:{start:{line:2446,column:27},end:{line:2446,column:28}},loc:{start:{line:2446,column:43},end:{line:2448,column:9}},line:2446},"146":{name:"(anonymous_146)",decl:{start:{line:2459,column:14},end:{line:2459,column:15}},loc:{start:{line:2459,column:32},end:{line:2461,column:9}},line:2459},"147":{name:"(anonymous_147)",decl:{start:{line:2477,column:14},end:{line:2477,column:15}},loc:{start:{line:2477,column:25},end:{line:2479,column:9}},line:2477},"148":{name:"(anonymous_148)",decl:{start:{line:2490,column:14},end:{line:2490,column:15}},loc:{start:{line:2490,column:32},end:{line:2493,column:9}},line:2490},"149":{name:"(anonymous_149)",decl:{start:{line:2510,column:14},end:{line:2510,column:15}},loc:{start:{line:2510,column:25},end:{line:2512,column:9}},line:2510},"150":{name:"(anonymous_150)",decl:{start:{line:2524,column:14},end:{line:2524,column:15}},loc:{start:{line:2524,column:38},end:{line:2527,column:9}},line:2524},"151":{name:"(anonymous_151)",decl:{start:{line:2553,column:14},end:{line:2553,column:15}},loc:{start:{line:2553,column:25},end:{line:2555,column:9}},line:2553},"152":{name:"(anonymous_152)",decl:{start:{line:2565,column:27},end:{line:2565,column:28}},loc:{start:{line:2565,column:43},end:{line:2567,column:9}},line:2565},"153":{name:"(anonymous_153)",decl:{start:{line:2578,column:14},end:{line:2578,column:15}},loc:{start:{line:2578,column:32},end:{line:2580,column:9}},line:2578},"154":{name:"(anonymous_154)",decl:{start:{line:2592,column:16},end:{line:2592,column:17}},loc:{start:{line:2592,column:43},end:{line:2617,column:9}},line:2592},"155":{name:"(anonymous_155)",decl:{start:{line:2593,column:35},end:{line:2593,column:36}},loc:{start:{line:2593,column:46},end:{line:2593,column:48}},line:2593},"156":{name:"(anonymous_156)",decl:{start:{line:2596,column:44},end:{line:2596,column:45}},loc:{start:{line:2596,column:68},end:{line:2614,column:13}},line:2596},"157":{name:"(anonymous_157)",decl:{start:{line:2605,column:33},end:{line:2605,column:34}},loc:{start:{line:2605,column:44},end:{line:2612,column:21}},line:2605},"158":{name:"(anonymous_158)",decl:{start:{line:2634,column:14},end:{line:2634,column:15}},loc:{start:{line:2634,column:25},end:{line:2636,column:9}},line:2634},"159":{name:"(anonymous_159)",decl:{start:{line:2652,column:14},end:{line:2652,column:15}},loc:{start:{line:2652,column:49},end:{line:2655,column:9}},line:2652},"160":{name:"(anonymous_160)",decl:{start:{line:2672,column:14},end:{line:2672,column:15}},loc:{start:{line:2672,column:25},end:{line:2674,column:9}},line:2672},"161":{name:"(anonymous_161)",decl:{start:{line:2684,column:27},end:{line:2684,column:28}},loc:{start:{line:2684,column:43},end:{line:2687,column:9}},line:2684},"162":{name:"(anonymous_162)",decl:{start:{line:2702,column:14},end:{line:2702,column:15}},loc:{start:{line:2702,column:43},end:{line:2704,column:9}},line:2702},"163":{name:"(anonymous_163)",decl:{start:{line:2720,column:14},end:{line:2720,column:15}},loc:{start:{line:2720,column:25},end:{line:2722,column:9}},line:2720},"164":{name:"(anonymous_164)",decl:{start:{line:2738,column:14},end:{line:2738,column:15}},loc:{start:{line:2738,column:49},end:{line:2743,column:9}},line:2738},"165":{name:"(anonymous_165)",decl:{start:{line:2766,column:21},end:{line:2766,column:22}},loc:{start:{line:2766,column:55},end:{line:2782,column:9}},line:2766},"166":{name:"(anonymous_166)",decl:{start:{line:2772,column:35},end:{line:2772,column:36}},loc:{start:{line:2772,column:46},end:{line:2772,column:48}},line:2772},"167":{name:"(anonymous_167)",decl:{start:{line:2779,column:51},end:{line:2779,column:52}},loc:{start:{line:2779,column:73},end:{line:2781,column:13}},line:2779},"168":{name:"(anonymous_168)",decl:{start:{line:2784,column:16},end:{line:2784,column:17}},loc:{start:{line:2784,column:35},end:{line:2791,column:9}},line:2784},"169":{name:"(anonymous_169)",decl:{start:{line:2808,column:14},end:{line:2808,column:15}},loc:{start:{line:2808,column:25},end:{line:2810,column:9}},line:2808},"170":{name:"(anonymous_170)",decl:{start:{line:2820,column:27},end:{line:2820,column:28}},loc:{start:{line:2820,column:43},end:{line:2823,column:9}},line:2820},"171":{name:"(anonymous_171)",decl:{start:{line:2838,column:14},end:{line:2838,column:15}},loc:{start:{line:2838,column:43},end:{line:2840,column:9}},line:2838},"172":{name:"(anonymous_172)",decl:{start:{line:2859,column:16},end:{line:2859,column:17}},loc:{start:{line:2859,column:49},end:{line:2872,column:9}},line:2859},"173":{name:"(anonymous_173)",decl:{start:{line:2889,column:14},end:{line:2889,column:15}},loc:{start:{line:2889,column:25},end:{line:2892,column:9}},line:2889},"174":{name:"(anonymous_174)",decl:{start:{line:2909,column:14},end:{line:2909,column:15}},loc:{start:{line:2909,column:55},end:{line:2913,column:9}},line:2909},"175":{name:"(anonymous_175)",decl:{start:{line:2931,column:14},end:{line:2931,column:15}},loc:{start:{line:2931,column:25},end:{line:2933,column:9}},line:2931},"176":{name:"(anonymous_176)",decl:{start:{line:2945,column:26},end:{line:2945,column:27}},loc:{start:{line:2945,column:37},end:{line:2947,column:9}},line:2945},"177":{name:"(anonymous_177)",decl:{start:{line:2957,column:27},end:{line:2957,column:28}},loc:{start:{line:2957,column:43},end:{line:2960,column:9}},line:2957},"178":{name:"(anonymous_178)",decl:{start:{line:2976,column:14},end:{line:2976,column:15}},loc:{start:{line:2976,column:49},end:{line:2979,column:9}},line:2976},"179":{name:"(anonymous_179)",decl:{start:{line:2998,column:16},end:{line:2998,column:17}},loc:{start:{line:2998,column:55},end:{line:3016,column:9}},line:2998},"180":{name:"(anonymous_180)",decl:{start:{line:3042,column:14},end:{line:3042,column:15}},loc:{start:{line:3042,column:25},end:{line:3044,column:9}},line:3042},"181":{name:"(anonymous_181)",decl:{start:{line:3054,column:27},end:{line:3054,column:28}},loc:{start:{line:3054,column:43},end:{line:3056,column:9}},line:3054},"182":{name:"(anonymous_182)",decl:{start:{line:3071,column:14},end:{line:3071,column:15}},loc:{start:{line:3071,column:43},end:{line:3077,column:9}},line:3071},"183":{name:"(anonymous_183)",decl:{start:{line:3095,column:16},end:{line:3095,column:17}},loc:{start:{line:3095,column:45},end:{line:3123,column:9}},line:3095},"184":{name:"(anonymous_184)",decl:{start:{line:3102,column:35},end:{line:3102,column:36}},loc:{start:{line:3102,column:46},end:{line:3102,column:48}},line:3102},"185":{name:"(anonymous_185)",decl:{start:{line:3105,column:56},end:{line:3105,column:57}},loc:{start:{line:3105,column:80},end:{line:3120,column:13}},line:3105},"186":{name:"(anonymous_186)",decl:{start:{line:3111,column:33},end:{line:3111,column:34}},loc:{start:{line:3111,column:44},end:{line:3118,column:21}},line:3111},"187":{name:"(anonymous_187)",decl:{start:{line:3125,column:23},end:{line:3125,column:24}},loc:{start:{line:3125,column:48},end:{line:3151,column:9}},line:3125},"188":{name:"(anonymous_188)",decl:{start:{line:3133,column:58},end:{line:3133,column:59}},loc:{start:{line:3133,column:63},end:{line:3133,column:82}},line:3133},"189":{name:"(anonymous_189)",decl:{start:{line:3153,column:25},end:{line:3153,column:26}},loc:{start:{line:3153,column:54},end:{line:3169,column:9}},line:3153},"190":{name:"(anonymous_190)",decl:{start:{line:3171,column:19},end:{line:3171,column:20}},loc:{start:{line:3171,column:90},end:{line:3212,column:9}},line:3171},"191":{name:"(anonymous_191)",decl:{start:{line:3172,column:35},end:{line:3172,column:36}},loc:{start:{line:3172,column:46},end:{line:3172,column:48}},line:3172},"192":{name:"(anonymous_192)",decl:{start:{line:3185,column:20},end:{line:3185,column:21}},loc:{start:{line:3185,column:38},end:{line:3185,column:92}},line:3185},"193":{name:"(anonymous_193)",decl:{start:{line:3200,column:55},end:{line:3200,column:56}},loc:{start:{line:3200,column:81},end:{line:3203,column:17}},line:3200},"194":{name:"(anonymous_194)",decl:{start:{line:3207,column:49},end:{line:3207,column:50}},loc:{start:{line:3207,column:73},end:{line:3210,column:17}},line:3207},"195":{name:"(anonymous_195)",decl:{start:{line:3229,column:14},end:{line:3229,column:15}},loc:{start:{line:3229,column:25},end:{line:3231,column:9}},line:3229},"196":{name:"(anonymous_196)",decl:{start:{line:3247,column:14},end:{line:3247,column:15}},loc:{start:{line:3247,column:48},end:{line:3269,column:9}},line:3247},"197":{name:"(anonymous_197)",decl:{start:{line:3286,column:16},end:{line:3286,column:17}},loc:{start:{line:3286,column:35},end:{line:3290,column:9}},line:3286},"198":{name:"(anonymous_198)",decl:{start:{line:3307,column:24},end:{line:3307,column:25}},loc:{start:{line:3307,column:43},end:{line:3316,column:9}},line:3307},"199":{name:"(anonymous_199)",decl:{start:{line:3308,column:35},end:{line:3308,column:36}},loc:{start:{line:3308,column:46},end:{line:3308,column:48}},line:3308},"200":{name:"(anonymous_200)",decl:{start:{line:3311,column:71},end:{line:3311,column:72}},loc:{start:{line:3311,column:85},end:{line:3313,column:13}},line:3311},"201":{name:"(anonymous_201)",decl:{start:{line:3333,column:23},end:{line:3333,column:24}},loc:{start:{line:3333,column:42},end:{line:3342,column:9}},line:3333},"202":{name:"(anonymous_202)",decl:{start:{line:3334,column:35},end:{line:3334,column:36}},loc:{start:{line:3334,column:46},end:{line:3334,column:48}},line:3334},"203":{name:"(anonymous_203)",decl:{start:{line:3337,column:70},end:{line:3337,column:71}},loc:{start:{line:3337,column:84},end:{line:3339,column:13}},line:3337},"204":{name:"(anonymous_204)",decl:{start:{line:3360,column:16},end:{line:3360,column:17}},loc:{start:{line:3360,column:43},end:{line:3374,column:9}},line:3360},"205":{name:"(anonymous_205)",decl:{start:{line:3361,column:35},end:{line:3361,column:36}},loc:{start:{line:3361,column:46},end:{line:3361,column:48}},line:3361},"206":{name:"(anonymous_206)",decl:{start:{line:3366,column:46},end:{line:3366,column:47}},loc:{start:{line:3366,column:70},end:{line:3373,column:13}},line:3366},"207":{name:"(anonymous_207)",decl:{start:{line:3391,column:18},end:{line:3391,column:19}},loc:{start:{line:3391,column:37},end:{line:3400,column:9}},line:3391},"208":{name:"(anonymous_208)",decl:{start:{line:3392,column:35},end:{line:3392,column:36}},loc:{start:{line:3392,column:46},end:{line:3392,column:48}},line:3392},"209":{name:"(anonymous_209)",decl:{start:{line:3395,column:65},end:{line:3395,column:66}},loc:{start:{line:3395,column:79},end:{line:3397,column:13}},line:3395},"210":{name:"(anonymous_210)",decl:{start:{line:3413,column:18},end:{line:3413,column:19}},loc:{start:{line:3413,column:41},end:{line:3415,column:9}},line:3413},"211":{name:"(anonymous_211)",decl:{start:{line:3432,column:15},end:{line:3432,column:16}},loc:{start:{line:3432,column:34},end:{line:3441,column:9}},line:3432},"212":{name:"(anonymous_212)",decl:{start:{line:3433,column:35},end:{line:3433,column:36}},loc:{start:{line:3433,column:46},end:{line:3433,column:48}},line:3433},"213":{name:"(anonymous_213)",decl:{start:{line:3436,column:62},end:{line:3436,column:63}},loc:{start:{line:3436,column:76},end:{line:3438,column:13}},line:3436},"214":{name:"(anonymous_214)",decl:{start:{line:3459,column:17},end:{line:3459,column:18}},loc:{start:{line:3459,column:44},end:{line:3473,column:9}},line:3459},"215":{name:"(anonymous_215)",decl:{start:{line:3460,column:35},end:{line:3460,column:36}},loc:{start:{line:3460,column:46},end:{line:3460,column:48}},line:3460},"216":{name:"(anonymous_216)",decl:{start:{line:3465,column:55},end:{line:3465,column:56}},loc:{start:{line:3465,column:79},end:{line:3472,column:13}},line:3465},"217":{name:"(anonymous_217)",decl:{start:{line:3496,column:17},end:{line:3496,column:18}},loc:{start:{line:3496,column:44},end:{line:3510,column:9}},line:3496},"218":{name:"(anonymous_218)",decl:{start:{line:3497,column:35},end:{line:3497,column:36}},loc:{start:{line:3497,column:46},end:{line:3497,column:48}},line:3497},"219":{name:"(anonymous_219)",decl:{start:{line:3502,column:47},end:{line:3502,column:48}},loc:{start:{line:3502,column:71},end:{line:3509,column:13}},line:3502},"220":{name:"(anonymous_220)",decl:{start:{line:3527,column:19},end:{line:3527,column:20}},loc:{start:{line:3527,column:38},end:{line:3539,column:9}},line:3527},"221":{name:"(anonymous_221)",decl:{start:{line:3528,column:35},end:{line:3528,column:36}},loc:{start:{line:3528,column:46},end:{line:3528,column:48}},line:3528},"222":{name:"(anonymous_222)",decl:{start:{line:3531,column:46},end:{line:3531,column:47}},loc:{start:{line:3531,column:70},end:{line:3538,column:13}},line:3531},"223":{name:"(anonymous_223)",decl:{start:{line:3557,column:21},end:{line:3557,column:22}},loc:{start:{line:3557,column:47},end:{line:3566,column:9}},line:3557},"224":{name:"(anonymous_224)",decl:{start:{line:3558,column:35},end:{line:3558,column:36}},loc:{start:{line:3558,column:46},end:{line:3558,column:48}},line:3558},"225":{name:"(anonymous_225)",decl:{start:{line:3561,column:85},end:{line:3561,column:86}},loc:{start:{line:3561,column:99},end:{line:3563,column:13}},line:3561},"226":{name:"(anonymous_226)",decl:{start:{line:3585,column:16},end:{line:3585,column:17}},loc:{start:{line:3585,column:42},end:{line:3594,column:9}},line:3585},"227":{name:"(anonymous_227)",decl:{start:{line:3586,column:35},end:{line:3586,column:36}},loc:{start:{line:3586,column:46},end:{line:3586,column:48}},line:3586},"228":{name:"(anonymous_228)",decl:{start:{line:3589,column:75},end:{line:3589,column:76}},loc:{start:{line:3589,column:89},end:{line:3591,column:13}},line:3589},"229":{name:"(anonymous_229)",decl:{start:{line:3612,column:17},end:{line:3612,column:18}},loc:{start:{line:3612,column:44},end:{line:3624,column:9}},line:3612},"230":{name:"(anonymous_230)",decl:{start:{line:3613,column:35},end:{line:3613,column:36}},loc:{start:{line:3613,column:46},end:{line:3613,column:48}},line:3613},"231":{name:"(anonymous_231)",decl:{start:{line:3616,column:47},end:{line:3616,column:48}},loc:{start:{line:3616,column:71},end:{line:3623,column:13}},line:3616},"232":{name:"(anonymous_232)",decl:{start:{line:3642,column:18},end:{line:3642,column:19}},loc:{start:{line:3642,column:45},end:{line:3654,column:9}},line:3642},"233":{name:"(anonymous_233)",decl:{start:{line:3643,column:35},end:{line:3643,column:36}},loc:{start:{line:3643,column:46},end:{line:3643,column:48}},line:3643},"234":{name:"(anonymous_234)",decl:{start:{line:3646,column:48},end:{line:3646,column:49}},loc:{start:{line:3646,column:72},end:{line:3653,column:13}},line:3646},"235":{name:"(anonymous_235)",decl:{start:{line:3672,column:15},end:{line:3672,column:16}},loc:{start:{line:3672,column:34},end:{line:3681,column:9}},line:3672},"236":{name:"(anonymous_236)",decl:{start:{line:3673,column:35},end:{line:3673,column:36}},loc:{start:{line:3673,column:46},end:{line:3673,column:48}},line:3673},"237":{name:"(anonymous_237)",decl:{start:{line:3676,column:62},end:{line:3676,column:63}},loc:{start:{line:3676,column:76},end:{line:3678,column:13}},line:3676},"238":{name:"(anonymous_238)",decl:{start:{line:3699,column:15},end:{line:3699,column:16}},loc:{start:{line:3699,column:44},end:{line:3787,column:9}},line:3699},"239":{name:"(anonymous_239)",decl:{start:{line:3715,column:49},end:{line:3715,column:50}},loc:{start:{line:3715,column:60},end:{line:3715,column:62}},line:3715},"240":{name:"(anonymous_240)",decl:{start:{line:3716,column:55},end:{line:3716,column:56}},loc:{start:{line:3716,column:66},end:{line:3716,column:68}},line:3716},"241":{name:"(anonymous_241)",decl:{start:{line:3717,column:47},end:{line:3717,column:48}},loc:{start:{line:3717,column:58},end:{line:3717,column:60}},line:3717},"242":{name:"(anonymous_242)",decl:{start:{line:3718,column:51},end:{line:3718,column:52}},loc:{start:{line:3718,column:62},end:{line:3718,column:64}},line:3718},"243":{name:"(anonymous_243)",decl:{start:{line:3719,column:49},end:{line:3719,column:50}},loc:{start:{line:3719,column:60},end:{line:3719,column:62}},line:3719},"244":{name:"(anonymous_244)",decl:{start:{line:3722,column:57},end:{line:3722,column:58}},loc:{start:{line:3722,column:68},end:{line:3722,column:70}},line:3722},"245":{name:"(anonymous_245)",decl:{start:{line:3723,column:75},end:{line:3723,column:76}},loc:{start:{line:3723,column:86},end:{line:3723,column:88}},line:3723},"246":{name:"(anonymous_246)",decl:{start:{line:3729,column:16},end:{line:3729,column:17}},loc:{start:{line:3729,column:27},end:{line:3729,column:51}},line:3729},"247":{name:"(anonymous_247)",decl:{start:{line:3730,column:16},end:{line:3730,column:17}},loc:{start:{line:3730,column:40},end:{line:3780,column:17}},line:3730},"248":{name:"(anonymous_248)",decl:{start:{line:3731,column:31},end:{line:3731,column:32}},loc:{start:{line:3731,column:50},end:{line:3779,column:21}},line:3731},"249":{name:"(anonymous_249)",decl:{start:{line:3781,column:16},end:{line:3781,column:17}},loc:{start:{line:3781,column:30},end:{line:3785,column:17}},line:3781},"250":{name:"(anonymous_250)",decl:{start:{line:3804,column:17},end:{line:3804,column:18}},loc:{start:{line:3804,column:36},end:{line:3813,column:9}},line:3804},"251":{name:"(anonymous_251)",decl:{start:{line:3805,column:35},end:{line:3805,column:36}},loc:{start:{line:3805,column:46},end:{line:3805,column:48}},line:3805},"252":{name:"(anonymous_252)",decl:{start:{line:3808,column:64},end:{line:3808,column:65}},loc:{start:{line:3808,column:78},end:{line:3810,column:13}},line:3808},"253":{name:"(anonymous_253)",decl:{start:{line:3830,column:14},end:{line:3830,column:15}},loc:{start:{line:3830,column:25},end:{line:3832,column:9}},line:3830},"254":{name:"(anonymous_254)",decl:{start:{line:3842,column:27},end:{line:3842,column:28}},loc:{start:{line:3842,column:43},end:{line:3846,column:9}},line:3842},"255":{name:"(anonymous_255)",decl:{start:{line:3861,column:14},end:{line:3861,column:15}},loc:{start:{line:3861,column:43},end:{line:3867,column:9}},line:3861},"256":{name:"(anonymous_256)",decl:{start:{line:3886,column:16},end:{line:3886,column:17}},loc:{start:{line:3886,column:50},end:{line:3917,column:9}},line:3886},"257":{name:"(anonymous_257)",decl:{start:{line:3895,column:35},end:{line:3895,column:36}},loc:{start:{line:3895,column:46},end:{line:3895,column:48}},line:3895},"258":{name:"(anonymous_258)",decl:{start:{line:3908,column:41},end:{line:3908,column:42}},loc:{start:{line:3908,column:65},end:{line:3916,column:13}},line:3908},"259":{name:"(anonymous_259)",decl:{start:{line:3944,column:16},end:{line:3944,column:17}},loc:{start:{line:3944,column:50},end:{line:3946,column:9}},line:3944},"260":{name:"(anonymous_260)",decl:{start:{line:3969,column:23},end:{line:3969,column:24}},loc:{start:{line:3969,column:57},end:{line:4014,column:9}},line:3969},"261":{name:"(anonymous_261)",decl:{start:{line:3978,column:35},end:{line:3978,column:36}},loc:{start:{line:3978,column:46},end:{line:3978,column:48}},line:3978},"262":{name:"(anonymous_262)",decl:{start:{line:4003,column:16},end:{line:4003,column:17}},loc:{start:{line:4003,column:40},end:{line:4010,column:17}},line:4003},"263":{name:"(anonymous_263)",decl:{start:{line:4071,column:14},end:{line:4071,column:15}},loc:{start:{line:4071,column:30},end:{line:4086,column:9}},line:4071},"264":{name:"(anonymous_264)",decl:{start:{line:4095,column:18},end:{line:4095,column:19}},loc:{start:{line:4095,column:29},end:{line:4097,column:9}},line:4095},"265":{name:"(anonymous_265)",decl:{start:{line:4106,column:18},end:{line:4106,column:19}},loc:{start:{line:4106,column:29},end:{line:4108,column:9}},line:4106},"266":{name:"(anonymous_266)",decl:{start:{line:4117,column:21},end:{line:4117,column:22}},loc:{start:{line:4117,column:32},end:{line:4119,column:9}},line:4117},"267":{name:"(anonymous_267)",decl:{start:{line:4128,column:23},end:{line:4128,column:24}},loc:{start:{line:4128,column:34},end:{line:4130,column:9}},line:4128},"268":{name:"(anonymous_268)",decl:{start:{line:4139,column:22},end:{line:4139,column:23}},loc:{start:{line:4139,column:33},end:{line:4141,column:9}},line:4139},"269":{name:"(anonymous_269)",decl:{start:{line:4150,column:16},end:{line:4150,column:17}},loc:{start:{line:4150,column:27},end:{line:4152,column:9}},line:4150},"270":{name:"(anonymous_270)",decl:{start:{line:4161,column:19},end:{line:4161,column:20}},loc:{start:{line:4161,column:30},end:{line:4163,column:9}},line:4161},"271":{name:"(anonymous_271)",decl:{start:{line:4191,column:14},end:{line:4191,column:15}},loc:{start:{line:4191,column:30},end:{line:4198,column:9}},line:4191},"272":{name:"(anonymous_272)",decl:{start:{line:4257,column:14},end:{line:4257,column:15}},loc:{start:{line:4257,column:30},end:{line:4283,column:9}},line:4257},"273":{name:"(anonymous_273)",decl:{start:{line:4292,column:26},end:{line:4292,column:27}},loc:{start:{line:4292,column:37},end:{line:4294,column:9}},line:4292},"274":{name:"(anonymous_274)",decl:{start:{line:4303,column:20},end:{line:4303,column:21}},loc:{start:{line:4303,column:31},end:{line:4305,column:9}},line:4303},"275":{name:"(anonymous_275)",decl:{start:{line:4314,column:18},end:{line:4314,column:19}},loc:{start:{line:4314,column:29},end:{line:4316,column:9}},line:4314},"276":{name:"(anonymous_276)",decl:{start:{line:4325,column:16},end:{line:4325,column:17}},loc:{start:{line:4325,column:27},end:{line:4327,column:9}},line:4325},"277":{name:"(anonymous_277)",decl:{start:{line:4336,column:15},end:{line:4336,column:16}},loc:{start:{line:4336,column:26},end:{line:4338,column:9}},line:4336},"278":{name:"(anonymous_278)",decl:{start:{line:4347,column:17},end:{line:4347,column:18}},loc:{start:{line:4347,column:28},end:{line:4349,column:9}},line:4347},"279":{name:"(anonymous_279)",decl:{start:{line:4382,column:14},end:{line:4382,column:15}},loc:{start:{line:4382,column:39},end:{line:4391,column:9}},line:4382},"280":{name:"(anonymous_280)",decl:{start:{line:4401,column:13},end:{line:4401,column:14}},loc:{start:{line:4401,column:38},end:{line:4412,column:9}},line:4401},"281":{name:"(anonymous_281)",decl:{start:{line:4543,column:14},end:{line:4543,column:15}},loc:{start:{line:4543,column:40},end:{line:4555,column:9}},line:4543},"282":{name:"(anonymous_282)",decl:{start:{line:4568,column:28},end:{line:4568,column:29}},loc:{start:{line:4568,column:42},end:{line:4580,column:9}},line:4568},"283":{name:"(anonymous_283)",decl:{start:{line:4594,column:19},end:{line:4594,column:20}},loc:{start:{line:4594,column:80},end:{line:4627,column:9}},line:4594},"284":{name:"(anonymous_284)",decl:{start:{line:4642,column:24},end:{line:4642,column:25}},loc:{start:{line:4642,column:96},end:{line:4682,column:9}},line:4642},"285":{name:"(anonymous_285)",decl:{start:{line:4693,column:21},end:{line:4693,column:22}},loc:{start:{line:4693,column:48},end:{line:4716,column:9}},line:4693},"286":{name:"(anonymous_286)",decl:{start:{line:4737,column:26},end:{line:4737,column:27}},loc:{start:{line:4737,column:57},end:{line:4769,column:9}},line:4737},"287":{name:"(anonymous_287)",decl:{start:{line:4782,column:28},end:{line:4782,column:29}},loc:{start:{line:4782,column:88},end:{line:4801,column:9}},line:4782},"288":{name:"(anonymous_288)",decl:{start:{line:4813,column:30},end:{line:4813,column:31}},loc:{start:{line:4813,column:62},end:{line:4834,column:9}},line:4813},"289":{name:"(anonymous_289)",decl:{start:{line:4845,column:24},end:{line:4845,column:25}},loc:{start:{line:4845,column:44},end:{line:4867,column:9}},line:4845},"290":{name:"(anonymous_290)",decl:{start:{line:4882,column:29},end:{line:4882,column:30}},loc:{start:{line:4882,column:57},end:{line:4916,column:9}},line:4882},"291":{name:"(anonymous_291)",decl:{start:{line:4928,column:31},end:{line:4928,column:32}},loc:{start:{line:4928,column:88},end:{line:4946,column:9}},line:4928},"292":{name:"(anonymous_292)",decl:{start:{line:4957,column:33},end:{line:4957,column:34}},loc:{start:{line:4957,column:58},end:{line:4977,column:9}},line:4957},"293":{name:"(anonymous_293)",decl:{start:{line:4989,column:22},end:{line:4989,column:23}},loc:{start:{line:4989,column:64},end:{line:5059,column:9}},line:4989},"294":{name:"(anonymous_294)",decl:{start:{line:5068,column:22},end:{line:5068,column:23}},loc:{start:{line:5068,column:33},end:{line:5077,column:9}},line:5068},"295":{name:"(anonymous_295)",decl:{start:{line:5101,column:15},end:{line:5101,column:16}},loc:{start:{line:5101,column:34},end:{line:5125,column:9}},line:5101},"296":{name:"(anonymous_296)",decl:{start:{line:5112,column:110},end:{line:5112,column:111}},loc:{start:{line:5112,column:134},end:{line:5124,column:13}},line:5112},"297":{name:"(anonymous_297)",decl:{start:{line:5153,column:13},end:{line:5153,column:14}},loc:{start:{line:5153,column:38},end:{line:5168,column:9}},line:5153},"298":{name:"(anonymous_298)",decl:{start:{line:5160,column:23},end:{line:5160,column:24}},loc:{start:{line:5160,column:44},end:{line:5167,column:13}},line:5160},"299":{name:"(anonymous_299)",decl:{start:{line:5224,column:14},end:{line:5224,column:15}},loc:{start:{line:5224,column:47},end:{line:5270,column:9}},line:5224},"300":{name:"(anonymous_300)",decl:{start:{line:5279,column:22},end:{line:5279,column:23}},loc:{start:{line:5279,column:33},end:{line:5281,column:9}},line:5279},"301":{name:"(anonymous_301)",decl:{start:{line:5290,column:27},end:{line:5290,column:28}},loc:{start:{line:5290,column:38},end:{line:5292,column:9}},line:5290},"302":{name:"(anonymous_302)",decl:{start:{line:5302,column:20},end:{line:5302,column:21}},loc:{start:{line:5302,column:31},end:{line:5304,column:9}},line:5302},"303":{name:"(anonymous_303)",decl:{start:{line:5316,column:21},end:{line:5316,column:22}},loc:{start:{line:5316,column:36},end:{line:5318,column:9}},line:5316},"304":{name:"(anonymous_304)",decl:{start:{line:5330,column:19},end:{line:5330,column:20}},loc:{start:{line:5330,column:30},end:{line:5348,column:9}},line:5330},"305":{name:"(anonymous_305)",decl:{start:{line:5360,column:23},end:{line:5360,column:24}},loc:{start:{line:5360,column:34},end:{line:5362,column:9}},line:5360},"306":{name:"(anonymous_306)",decl:{start:{line:5373,column:26},end:{line:5373,column:27}},loc:{start:{line:5373,column:36},end:{line:5385,column:9}},line:5373},"307":{name:"(anonymous_307)",decl:{start:{line:5396,column:30},end:{line:5396,column:31}},loc:{start:{line:5396,column:41},end:{line:5398,column:9}},line:5396},"308":{name:"(anonymous_308)",decl:{start:{line:5409,column:18},end:{line:5409,column:19}},loc:{start:{line:5409,column:38},end:{line:5411,column:9}},line:5409},"309":{name:"(anonymous_309)",decl:{start:{line:5422,column:24},end:{line:5422,column:25}},loc:{start:{line:5422,column:35},end:{line:5424,column:9}},line:5422},"310":{name:"(anonymous_310)",decl:{start:{line:5452,column:36},end:{line:5452,column:37}},loc:{start:{line:5452,column:69},end:{line:5463,column:9}},line:5452},"311":{name:"(anonymous_311)",decl:{start:{line:5484,column:21},end:{line:5484,column:22}},loc:{start:{line:5484,column:61},end:{line:5489,column:9}},line:5484},"312":{name:"(anonymous_312)",decl:{start:{line:5500,column:16},end:{line:5500,column:17}},loc:{start:{line:5500,column:27},end:{line:5502,column:9}},line:5500},"313":{name:"(anonymous_313)",decl:{start:{line:5511,column:34},end:{line:5511,column:35}},loc:{start:{line:5511,column:45},end:{line:5514,column:9}},line:5511},"314":{name:"(anonymous_314)",decl:{start:{line:5532,column:14},end:{line:5532,column:15}},loc:{start:{line:5532,column:25},end:{line:5534,column:9}},line:5532},"315":{name:"(anonymous_315)",decl:{start:{line:5554,column:14},end:{line:5554,column:15}},loc:{start:{line:5554,column:56},end:{line:5591,column:9}},line:5554},"316":{name:"(anonymous_316)",decl:{start:{line:5600,column:23},end:{line:5600,column:24}},loc:{start:{line:5600,column:34},end:{line:5602,column:9}},line:5600},"317":{name:"(anonymous_317)",decl:{start:{line:5612,column:22},end:{line:5612,column:23}},loc:{start:{line:5612,column:37},end:{line:5619,column:9}},line:5612},"318":{name:"(anonymous_318)",decl:{start:{line:5628,column:19},end:{line:5628,column:20}},loc:{start:{line:5628,column:34},end:{line:5630,column:9}},line:5628},"319":{name:"(anonymous_319)",decl:{start:{line:5644,column:16},end:{line:5644,column:17}},loc:{start:{line:5644,column:42},end:{line:5678,column:9}},line:5644},"320":{name:"(anonymous_320)",decl:{start:{line:5649,column:35},end:{line:5649,column:36}},loc:{start:{line:5649,column:46},end:{line:5649,column:48}},line:5649},"321":{name:"(anonymous_321)",decl:{start:{line:5669,column:47},end:{line:5669,column:48}},loc:{start:{line:5669,column:71},end:{line:5677,column:13}},line:5669},"322":{name:"(anonymous_322)",decl:{start:{line:5696,column:14},end:{line:5696,column:15}},loc:{start:{line:5696,column:25},end:{line:5698,column:9}},line:5696},"323":{name:"(anonymous_323)",decl:{start:{line:5712,column:14},end:{line:5712,column:15}},loc:{start:{line:5712,column:43},end:{line:5716,column:9}},line:5712},"324":{name:"(anonymous_324)",decl:{start:{line:5730,column:16},end:{line:5730,column:17}},loc:{start:{line:5730,column:49},end:{line:5752,column:9}},line:5730},"325":{name:"(anonymous_325)",decl:{start:{line:5739,column:35},end:{line:5739,column:36}},loc:{start:{line:5739,column:45},end:{line:5739,column:47}},line:5739},"326":{name:"(anonymous_326)",decl:{start:{line:5743,column:84},end:{line:5743,column:85}},loc:{start:{line:5743,column:108},end:{line:5751,column:13}},line:5743},"327":{name:"(anonymous_327)",decl:{start:{line:5764,column:27},end:{line:5764,column:28}},loc:{start:{line:5764,column:43},end:{line:5767,column:9}},line:5764},"328":{name:"(anonymous_328)",decl:{start:{line:5773,column:14},end:{line:5773,column:15}},loc:{start:{line:5773,column:41},end:{line:5779,column:9}},line:5773},"329":{name:"(anonymous_329)",decl:{start:{line:5782,column:14},end:{line:5782,column:15}},loc:{start:{line:5782,column:33},end:{line:5801,column:9}},line:5782},"330":{name:"(anonymous_330)",decl:{start:{line:5783,column:35},end:{line:5783,column:36}},loc:{start:{line:5783,column:46},end:{line:5783,column:48}},line:5783},"331":{name:"(anonymous_331)",decl:{start:{line:5790,column:42},end:{line:5790,column:43}},loc:{start:{line:5790,column:65},end:{line:5800,column:13}},line:5790}},branchMap:{"0":{loc:{start:{line:26,column:15},end:{line:26,column:30}},type:"binary-expr",locations:[{start:{line:26,column:15},end:{line:26,column:22}},{start:{line:26,column:26},end:{line:26,column:30}}],line:26},"1":{loc:{start:{line:397,column:12},end:{line:400,column:13}},type:"if",locations:[{start:{line:397,column:12},end:{line:400,column:13}},{start:{line:397,column:12},end:{line:400,column:13}}],line:397},"2":{loc:{start:{line:397,column:16},end:{line:397,column:56}},type:"binary-expr",locations:[{start:{line:397,column:16},end:{line:397,column:25}},{start:{line:397,column:29},end:{line:397,column:56}}],line:397},"3":{loc:{start:{line:420,column:12},end:{line:423,column:13}},type:"if",locations:[{start:{line:420,column:12},end:{line:423,column:13}},{start:{line:420,column:12},end:{line:423,column:13}}],line:420},"4":{loc:{start:{line:420,column:16},end:{line:420,column:56}},type:"binary-expr",locations:[{start:{line:420,column:16},end:{line:420,column:25}},{start:{line:420,column:29},end:{line:420,column:56}}],line:420},"5":{loc:{start:{line:453,column:12},end:{line:456,column:13}},type:"if",locations:[{start:{line:453,column:12},end:{line:456,column:13}},{start:{line:453,column:12},end:{line:456,column:13}}],line:453},"6":{loc:{start:{line:453,column:16},end:{line:453,column:56}},type:"binary-expr",locations:[{start:{line:453,column:16},end:{line:453,column:25}},{start:{line:453,column:29},end:{line:453,column:56}}],line:453},"7":{loc:{start:{line:478,column:23},end:{line:478,column:48}},type:"binary-expr",locations:[{start:{line:478,column:23},end:{line:478,column:31}},{start:{line:478,column:35},end:{line:478,column:48}}],line:478},"8":{loc:{start:{line:482,column:16},end:{line:496,column:17}},type:"if",locations:[{start:{line:482,column:16},end:{line:496,column:17}},{start:{line:482,column:16},end:{line:496,column:17}}],line:482},"9":{loc:{start:{line:489,column:24},end:{line:494,column:25}},type:"if",locations:[{start:{line:489,column:24},end:{line:494,column:25}},{start:{line:489,column:24},end:{line:494,column:25}}],line:489},"10":{loc:{start:{line:517,column:23},end:{line:517,column:48}},type:"binary-expr",locations:[{start:{line:517,column:23},end:{line:517,column:31}},{start:{line:517,column:35},end:{line:517,column:48}}],line:517},"11":{loc:{start:{line:544,column:12},end:{line:547,column:13}},type:"if",locations:[{start:{line:544,column:12},end:{line:547,column:13}},{start:{line:544,column:12},end:{line:547,column:13}}],line:544},"12":{loc:{start:{line:544,column:16},end:{line:544,column:53}},type:"binary-expr",locations:[{start:{line:544,column:16},end:{line:544,column:25}},{start:{line:544,column:29},end:{line:544,column:53}}],line:544},"13":{loc:{start:{line:549,column:23},end:{line:549,column:48}},type:"binary-expr",locations:[{start:{line:549,column:23},end:{line:549,column:31}},{start:{line:549,column:35},end:{line:549,column:48}}],line:549},"14":{loc:{start:{line:550,column:21},end:{line:550,column:33}},type:"binary-expr",locations:[{start:{line:550,column:21},end:{line:550,column:27}},{start:{line:550,column:31},end:{line:550,column:33}}],line:550},"15":{loc:{start:{line:555,column:16},end:{line:560,column:17}},type:"if",locations:[{start:{line:555,column:16},end:{line:560,column:17}},{start:{line:555,column:16},end:{line:560,column:17}}],line:555},"16":{loc:{start:{line:581,column:12},end:{line:584,column:13}},type:"if",locations:[{start:{line:581,column:12},end:{line:584,column:13}},{start:{line:581,column:12},end:{line:584,column:13}}],line:581},"17":{loc:{start:{line:581,column:16},end:{line:581,column:52}},type:"binary-expr",locations:[{start:{line:581,column:16},end:{line:581,column:25}},{start:{line:581,column:29},end:{line:581,column:52}}],line:581},"18":{loc:{start:{line:586,column:23},end:{line:586,column:48}},type:"binary-expr",locations:[{start:{line:586,column:23},end:{line:586,column:31}},{start:{line:586,column:35},end:{line:586,column:48}}],line:586},"19":{loc:{start:{line:588,column:23},end:{line:588,column:34}},type:"binary-expr",locations:[{start:{line:588,column:23},end:{line:588,column:28}},{start:{line:588,column:32},end:{line:588,column:34}}],line:588},"20":{loc:{start:{line:593,column:16},end:{line:599,column:17}},type:"if",locations:[{start:{line:593,column:16},end:{line:599,column:17}},{start:{line:593,column:16},end:{line:599,column:17}}],line:593},"21":{loc:{start:{line:597,column:35},end:{line:597,column:54}},type:"binary-expr",locations:[{start:{line:597,column:35},end:{line:597,column:48}},{start:{line:597,column:52},end:{line:597,column:54}}],line:597},"22":{loc:{start:{line:598,column:35},end:{line:598,column:48}},type:"binary-expr",locations:[{start:{line:598,column:35},end:{line:598,column:42}},{start:{line:598,column:46},end:{line:598,column:48}}],line:598},"23":{loc:{start:{line:625,column:12},end:{line:628,column:13}},type:"if",locations:[{start:{line:625,column:12},end:{line:628,column:13}},{start:{line:625,column:12},end:{line:628,column:13}}],line:625},"24":{loc:{start:{line:625,column:16},end:{line:625,column:53}},type:"binary-expr",locations:[{start:{line:625,column:16},end:{line:625,column:25}},{start:{line:625,column:29},end:{line:625,column:53}}],line:625},"25":{loc:{start:{line:630,column:23},end:{line:630,column:48}},type:"binary-expr",locations:[{start:{line:630,column:23},end:{line:630,column:31}},{start:{line:630,column:35},end:{line:630,column:48}}],line:630},"26":{loc:{start:{line:631,column:21},end:{line:631,column:33}},type:"binary-expr",locations:[{start:{line:631,column:21},end:{line:631,column:27}},{start:{line:631,column:31},end:{line:631,column:33}}],line:631},"27":{loc:{start:{line:634,column:12},end:{line:636,column:13}},type:"if",locations:[{start:{line:634,column:12},end:{line:636,column:13}},{start:{line:634,column:12},end:{line:636,column:13}}],line:634},"28":{loc:{start:{line:653,column:20},end:{line:658,column:21}},type:"if",locations:[{start:{line:653,column:20},end:{line:658,column:21}},{start:{line:653,column:20},end:{line:658,column:21}}],line:653},"29":{loc:{start:{line:686,column:12},end:{line:688,column:13}},type:"if",locations:[{start:{line:686,column:12},end:{line:688,column:13}},{start:{line:686,column:12},end:{line:688,column:13}}],line:686},"30":{loc:{start:{line:690,column:12},end:{line:692,column:13}},type:"if",locations:[{start:{line:690,column:12},end:{line:692,column:13}},{start:{line:690,column:12},end:{line:692,column:13}}],line:690},"31":{loc:{start:{line:726,column:12},end:{line:728,column:13}},type:"if",locations:[{start:{line:726,column:12},end:{line:728,column:13}},{start:{line:726,column:12},end:{line:728,column:13}}],line:726},"32":{loc:{start:{line:742,column:12},end:{line:744,column:13}},type:"if",locations:[{start:{line:742,column:12},end:{line:744,column:13}},{start:{line:742,column:12},end:{line:744,column:13}}],line:742},"33":{loc:{start:{line:773,column:12},end:{line:775,column:13}},type:"if",locations:[{start:{line:773,column:12},end:{line:775,column:13}},{start:{line:773,column:12},end:{line:775,column:13}}],line:773},"34":{loc:{start:{line:805,column:12},end:{line:807,column:13}},type:"if",locations:[{start:{line:805,column:12},end:{line:807,column:13}},{start:{line:805,column:12},end:{line:807,column:13}}],line:805},"35":{loc:{start:{line:878,column:31},end:{line:878,column:47}},type:"binary-expr",locations:[{start:{line:878,column:31},end:{line:878,column:41}},{start:{line:878,column:45},end:{line:878,column:47}}],line:878},"36":{loc:{start:{line:879,column:26},end:{line:879,column:42}},type:"binary-expr",locations:[{start:{line:879,column:26},end:{line:879,column:36}},{start:{line:879,column:40},end:{line:879,column:42}}],line:879},"37":{loc:{start:{line:988,column:25},end:{line:988,column:79}},type:"cond-expr",locations:[{start:{line:988,column:53},end:{line:988,column:66}},{start:{line:988,column:69},end:{line:988,column:79}}],line:988},"38":{loc:{start:{line:992,column:25},end:{line:997,column:13}},type:"binary-expr",locations:[{start:{line:992,column:25},end:{line:992,column:35}},{start:{line:992,column:39},end:{line:997,column:13}}],line:992},"39":{loc:{start:{line:1002,column:31},end:{line:1002,column:57}},type:"binary-expr",locations:[{start:{line:1002,column:31},end:{line:1002,column:49}},{start:{line:1002,column:55},end:{line:1002,column:57}}],line:1002},"40":{loc:{start:{line:1003,column:31},end:{line:1003,column:73}},type:"binary-expr",locations:[{start:{line:1003,column:31},end:{line:1003,column:48}},{start:{line:1003,column:55},end:{line:1003,column:67}},{start:{line:1003,column:71},end:{line:1003,column:73}}],line:1003},"41":{loc:{start:{line:1004,column:31},end:{line:1004,column:57}},type:"binary-expr",locations:[{start:{line:1004,column:31},end:{line:1004,column:45}},{start:{line:1004,column:55},end:{line:1004,column:57}}],line:1004},"42":{loc:{start:{line:1005,column:31},end:{line:1005,column:57}},type:"binary-expr",locations:[{start:{line:1005,column:31},end:{line:1005,column:47}},{start:{line:1005,column:55},end:{line:1005,column:57}}],line:1005},"43":{loc:{start:{line:1006,column:31},end:{line:1006,column:59}},type:"binary-expr",locations:[{start:{line:1006,column:31},end:{line:1006,column:48}},{start:{line:1006,column:55},end:{line:1006,column:59}}],line:1006},"44":{loc:{start:{line:1007,column:31},end:{line:1007,column:59}},type:"binary-expr",locations:[{start:{line:1007,column:31},end:{line:1007,column:49}},{start:{line:1007,column:55},end:{line:1007,column:59}}],line:1007},"45":{loc:{start:{line:1008,column:31},end:{line:1008,column:59}},type:"binary-expr",locations:[{start:{line:1008,column:31},end:{line:1008,column:51}},{start:{line:1008,column:55},end:{line:1008,column:59}}],line:1008},"46":{loc:{start:{line:1096,column:12},end:{line:1099,column:13}},type:"if",locations:[{start:{line:1096,column:12},end:{line:1099,column:13}},{start:{line:1096,column:12},end:{line:1099,column:13}}],line:1096},"47":{loc:{start:{line:1096,column:16},end:{line:1096,column:54}},type:"binary-expr",locations:[{start:{line:1096,column:16},end:{line:1096,column:25}},{start:{line:1096,column:29},end:{line:1096,column:54}}],line:1096},"48":{loc:{start:{line:1100,column:23},end:{line:1100,column:48}},type:"binary-expr",locations:[{start:{line:1100,column:23},end:{line:1100,column:31}},{start:{line:1100,column:35},end:{line:1100,column:48}}],line:1100},"49":{loc:{start:{line:1102,column:22},end:{line:1102,column:35}},type:"binary-expr",locations:[{start:{line:1102,column:22},end:{line:1102,column:29}},{start:{line:1102,column:33},end:{line:1102,column:35}}],line:1102},"50":{loc:{start:{line:1106,column:16},end:{line:1112,column:17}},type:"if",locations:[{start:{line:1106,column:16},end:{line:1112,column:17}},{start:{line:1106,column:16},end:{line:1112,column:17}}],line:1106},"51":{loc:{start:{line:1110,column:31},end:{line:1110,column:73}},type:"cond-expr",locations:[{start:{line:1110,column:47},end:{line:1110,column:66}},{start:{line:1110,column:69},end:{line:1110,column:73}}],line:1110},"52":{loc:{start:{line:1125,column:23},end:{line:1125,column:48}},type:"binary-expr",locations:[{start:{line:1125,column:23},end:{line:1125,column:31}},{start:{line:1125,column:35},end:{line:1125,column:48}}],line:1125},"53":{loc:{start:{line:1143,column:23},end:{line:1143,column:48}},type:"binary-expr",locations:[{start:{line:1143,column:23},end:{line:1143,column:31}},{start:{line:1143,column:35},end:{line:1143,column:48}}],line:1143},"54":{loc:{start:{line:1145,column:12},end:{line:1147,column:13}},type:"if",locations:[{start:{line:1145,column:12},end:{line:1147,column:13}},{start:{line:1145,column:12},end:{line:1147,column:13}}],line:1145},"55":{loc:{start:{line:1151,column:16},end:{line:1167,column:17}},type:"if",locations:[{start:{line:1151,column:16},end:{line:1167,column:17}},{start:{line:1151,column:16},end:{line:1167,column:17}}],line:1151},"56":{loc:{start:{line:1151,column:20},end:{line:1151,column:47}},type:"binary-expr",locations:[{start:{line:1151,column:20},end:{line:1151,column:24}},{start:{line:1151,column:28},end:{line:1151,column:47}}],line:1151},"57":{loc:{start:{line:1155,column:21},end:{line:1167,column:17}},type:"if",locations:[{start:{line:1155,column:21},end:{line:1167,column:17}},{start:{line:1155,column:21},end:{line:1167,column:17}}],line:1155},"58":{loc:{start:{line:1155,column:25},end:{line:1155,column:51}},type:"binary-expr",locations:[{start:{line:1155,column:25},end:{line:1155,column:29}},{start:{line:1155,column:33},end:{line:1155,column:51}}],line:1155},"59":{loc:{start:{line:1157,column:24},end:{line:1162,column:25}},type:"if",locations:[{start:{line:1157,column:24},end:{line:1162,column:25}},{start:{line:1157,column:24},end:{line:1162,column:25}}],line:1157},"60":{loc:{start:{line:1182,column:23},end:{line:1182,column:48}},type:"binary-expr",locations:[{start:{line:1182,column:23},end:{line:1182,column:31}},{start:{line:1182,column:35},end:{line:1182,column:48}}],line:1182},"61":{loc:{start:{line:1186,column:16},end:{line:1191,column:17}},type:"if",locations:[{start:{line:1186,column:16},end:{line:1191,column:17}},{start:{line:1186,column:16},end:{line:1191,column:17}}],line:1186},"62":{loc:{start:{line:1204,column:23},end:{line:1204,column:48}},type:"binary-expr",locations:[{start:{line:1204,column:23},end:{line:1204,column:31}},{start:{line:1204,column:35},end:{line:1204,column:48}}],line:1204},"63":{loc:{start:{line:1208,column:16},end:{line:1213,column:17}},type:"if",locations:[{start:{line:1208,column:16},end:{line:1213,column:17}},{start:{line:1208,column:16},end:{line:1213,column:17}}],line:1208},"64":{loc:{start:{line:1226,column:23},end:{line:1226,column:48}},type:"binary-expr",locations:[{start:{line:1226,column:23},end:{line:1226,column:31}},{start:{line:1226,column:35},end:{line:1226,column:48}}],line:1226},"65":{loc:{start:{line:1230,column:16},end:{line:1235,column:17}},type:"if",locations:[{start:{line:1230,column:16},end:{line:1235,column:17}},{start:{line:1230,column:16},end:{line:1235,column:17}}],line:1230},"66":{loc:{start:{line:1318,column:37},end:{line:1318,column:59}},type:"binary-expr",locations:[{start:{line:1318,column:37},end:{line:1318,column:53}},{start:{line:1318,column:57},end:{line:1318,column:59}}],line:1318},"67":{loc:{start:{line:1325,column:16},end:{line:1330,column:17}},type:"if",locations:[{start:{line:1325,column:16},end:{line:1330,column:17}},{start:{line:1325,column:16},end:{line:1330,column:17}}],line:1325},"68":{loc:{start:{line:1334,column:35},end:{line:1334,column:61}},type:"binary-expr",locations:[{start:{line:1334,column:35},end:{line:1334,column:52}},{start:{line:1334,column:59},end:{line:1334,column:61}}],line:1334},"69":{loc:{start:{line:1335,column:35},end:{line:1335,column:61}},type:"binary-expr",locations:[{start:{line:1335,column:35},end:{line:1335,column:51}},{start:{line:1335,column:59},end:{line:1335,column:61}}],line:1335},"70":{loc:{start:{line:1336,column:35},end:{line:1336,column:63}},type:"binary-expr",locations:[{start:{line:1336,column:35},end:{line:1336,column:53}},{start:{line:1336,column:59},end:{line:1336,column:63}}],line:1336},"71":{loc:{start:{line:1389,column:12},end:{line:1392,column:13}},type:"if",locations:[{start:{line:1389,column:12},end:{line:1392,column:13}},{start:{line:1389,column:12},end:{line:1392,column:13}}],line:1389},"72":{loc:{start:{line:1389,column:16},end:{line:1389,column:54}},type:"binary-expr",locations:[{start:{line:1389,column:16},end:{line:1389,column:25}},{start:{line:1389,column:29},end:{line:1389,column:54}}],line:1389},"73":{loc:{start:{line:1393,column:23},end:{line:1393,column:48}},type:"binary-expr",locations:[{start:{line:1393,column:23},end:{line:1393,column:31}},{start:{line:1393,column:35},end:{line:1393,column:48}}],line:1393},"74":{loc:{start:{line:1395,column:22},end:{line:1395,column:35}},type:"binary-expr",locations:[{start:{line:1395,column:22},end:{line:1395,column:29}},{start:{line:1395,column:33},end:{line:1395,column:35}}],line:1395},"75":{loc:{start:{line:1396,column:12},end:{line:1398,column:13}},type:"if",locations:[{start:{line:1396,column:12},end:{line:1398,column:13}},{start:{line:1396,column:12},end:{line:1398,column:13}}],line:1396},"76":{loc:{start:{line:1402,column:16},end:{line:1408,column:17}},type:"if",locations:[{start:{line:1402,column:16},end:{line:1408,column:17}},{start:{line:1402,column:16},end:{line:1408,column:17}}],line:1402},"77":{loc:{start:{line:1415,column:22},end:{line:1415,column:35}},type:"binary-expr",locations:[{start:{line:1415,column:22},end:{line:1415,column:29}},{start:{line:1415,column:33},end:{line:1415,column:35}}],line:1415},"78":{loc:{start:{line:1416,column:12},end:{line:1418,column:13}},type:"if",locations:[{start:{line:1416,column:12},end:{line:1418,column:13}},{start:{line:1416,column:12},end:{line:1418,column:13}}],line:1416},"79":{loc:{start:{line:1449,column:12},end:{line:1451,column:13}},type:"if",locations:[{start:{line:1449,column:12},end:{line:1451,column:13}},{start:{line:1449,column:12},end:{line:1451,column:13}}],line:1449},"80":{loc:{start:{line:1453,column:12},end:{line:1455,column:13}},type:"if",locations:[{start:{line:1453,column:12},end:{line:1455,column:13}},{start:{line:1453,column:12},end:{line:1455,column:13}}],line:1453},"81":{loc:{start:{line:1457,column:12},end:{line:1459,column:13}},type:"if",locations:[{start:{line:1457,column:12},end:{line:1459,column:13}},{start:{line:1457,column:12},end:{line:1459,column:13}}],line:1457},"82":{loc:{start:{line:1457,column:16},end:{line:1457,column:79}},type:"binary-expr",locations:[{start:{line:1457,column:16},end:{line:1457,column:25}},{start:{line:1457,column:30},end:{line:1457,column:51}},{start:{line:1457,column:55},end:{line:1457,column:78}}],line:1457},"83":{loc:{start:{line:1462,column:12},end:{line:1504,column:13}},type:"if",locations:[{start:{line:1462,column:12},end:{line:1504,column:13}},{start:{line:1462,column:12},end:{line:1504,column:13}}],line:1462},"84":{loc:{start:{line:1465,column:16},end:{line:1500,column:17}},type:"if",locations:[{start:{line:1465,column:16},end:{line:1500,column:17}},{start:{line:1465,column:16},end:{line:1500,column:17}}],line:1465},"85":{loc:{start:{line:1465,column:20},end:{line:1465,column:55}},type:"binary-expr",locations:[{start:{line:1465,column:20},end:{line:1465,column:41}},{start:{line:1465,column:45},end:{line:1465,column:55}}],line:1465},"86":{loc:{start:{line:1472,column:21},end:{line:1500,column:17}},type:"if",locations:[{start:{line:1472,column:21},end:{line:1500,column:17}},{start:{line:1472,column:21},end:{line:1500,column:17}}],line:1472},"87":{loc:{start:{line:1472,column:25},end:{line:1472,column:59}},type:"binary-expr",locations:[{start:{line:1472,column:25},end:{line:1472,column:46}},{start:{line:1472,column:50},end:{line:1472,column:59}}],line:1472},"88":{loc:{start:{line:1477,column:20},end:{line:1482,column:21}},type:"if",locations:[{start:{line:1477,column:20},end:{line:1482,column:21}},{start:{line:1477,column:20},end:{line:1482,column:21}}],line:1477},"89":{loc:{start:{line:1484,column:21},end:{line:1500,column:17}},type:"if",locations:[{start:{line:1484,column:21},end:{line:1500,column:17}},{start:{line:1484,column:21},end:{line:1500,column:17}}],line:1484},"90":{loc:{start:{line:1484,column:25},end:{line:1484,column:58}},type:"binary-expr",locations:[{start:{line:1484,column:25},end:{line:1484,column:44}},{start:{line:1484,column:48},end:{line:1484,column:58}}],line:1484},"91":{loc:{start:{line:1496,column:24},end:{line:1498,column:25}},type:"if",locations:[{start:{line:1496,column:24},end:{line:1498,column:25}},{start:{line:1496,column:24},end:{line:1498,column:25}}],line:1496},"92":{loc:{start:{line:1525,column:23},end:{line:1525,column:48}},type:"binary-expr",locations:[{start:{line:1525,column:23},end:{line:1525,column:31}},{start:{line:1525,column:35},end:{line:1525,column:48}}],line:1525},"93":{loc:{start:{line:1528,column:16},end:{line:1553,column:17}},type:"if",locations:[{start:{line:1528,column:16},end:{line:1553,column:17}},{start:{line:1528,column:16},end:{line:1553,column:17}}],line:1528},"94":{loc:{start:{line:1533,column:20},end:{line:1535,column:21}},type:"if",locations:[{start:{line:1533,column:20},end:{line:1535,column:21}},{start:{line:1533,column:20},end:{line:1535,column:21}}],line:1533},"95":{loc:{start:{line:1540,column:20},end:{line:1552,column:21}},type:"if",locations:[{start:{line:1540,column:20},end:{line:1552,column:21}},{start:{line:1540,column:20},end:{line:1552,column:21}}],line:1540},"96":{loc:{start:{line:1542,column:28},end:{line:1547,column:29}},type:"if",locations:[{start:{line:1542,column:28},end:{line:1547,column:29}},{start:{line:1542,column:28},end:{line:1547,column:29}}],line:1542},"97":{loc:{start:{line:1575,column:23},end:{line:1575,column:48}},type:"binary-expr",locations:[{start:{line:1575,column:23},end:{line:1575,column:31}},{start:{line:1575,column:35},end:{line:1575,column:48}}],line:1575},"98":{loc:{start:{line:1637,column:19},end:{line:1637,column:77}},type:"binary-expr",locations:[{start:{line:1637,column:19},end:{line:1637,column:72}},{start:{line:1637,column:76},end:{line:1637,column:77}}],line:1637},"99":{loc:{start:{line:1657,column:23},end:{line:1657,column:48}},type:"binary-expr",locations:[{start:{line:1657,column:23},end:{line:1657,column:31}},{start:{line:1657,column:35},end:{line:1657,column:48}}],line:1657},"100":{loc:{start:{line:1689,column:12},end:{line:1692,column:13}},type:"if",locations:[{start:{line:1689,column:12},end:{line:1692,column:13}},{start:{line:1689,column:12},end:{line:1692,column:13}}],line:1689},"101":{loc:{start:{line:1689,column:16},end:{line:1689,column:54}},type:"binary-expr",locations:[{start:{line:1689,column:16},end:{line:1689,column:25}},{start:{line:1689,column:29},end:{line:1689,column:54}}],line:1689},"102":{loc:{start:{line:1694,column:23},end:{line:1694,column:48}},type:"binary-expr",locations:[{start:{line:1694,column:23},end:{line:1694,column:31}},{start:{line:1694,column:35},end:{line:1694,column:48}}],line:1694},"103":{loc:{start:{line:1695,column:22},end:{line:1695,column:35}},type:"binary-expr",locations:[{start:{line:1695,column:22},end:{line:1695,column:29}},{start:{line:1695,column:33},end:{line:1695,column:35}}],line:1695},"104":{loc:{start:{line:1699,column:16},end:{line:1702,column:17}},type:"if",locations:[{start:{line:1699,column:16},end:{line:1702,column:17}},{start:{line:1699,column:16},end:{line:1702,column:17}}],line:1699},"105":{loc:{start:{line:1749,column:12},end:{line:1752,column:13}},type:"if",locations:[{start:{line:1749,column:12},end:{line:1752,column:13}},{start:{line:1749,column:12},end:{line:1752,column:13}}],line:1749},"106":{loc:{start:{line:1749,column:16},end:{line:1749,column:54}},type:"binary-expr",locations:[{start:{line:1749,column:16},end:{line:1749,column:25}},{start:{line:1749,column:29},end:{line:1749,column:54}}],line:1749},"107":{loc:{start:{line:1754,column:23},end:{line:1754,column:48}},type:"binary-expr",locations:[{start:{line:1754,column:23},end:{line:1754,column:31}},{start:{line:1754,column:35},end:{line:1754,column:48}}],line:1754},"108":{loc:{start:{line:1755,column:22},end:{line:1755,column:35}},type:"binary-expr",locations:[{start:{line:1755,column:22},end:{line:1755,column:29}},{start:{line:1755,column:33},end:{line:1755,column:35}}],line:1755},"109":{loc:{start:{line:1759,column:16},end:{line:1762,column:17}},type:"if",locations:[{start:{line:1759,column:16},end:{line:1762,column:17}},{start:{line:1759,column:16},end:{line:1762,column:17}}],line:1759},"110":{loc:{start:{line:1765,column:27},end:{line:1765,column:52}},type:"binary-expr",locations:[{start:{line:1765,column:27},end:{line:1765,column:46}},{start:{line:1765,column:50},end:{line:1765,column:52}}],line:1765},"111":{loc:{start:{line:1795,column:23},end:{line:1795,column:48}},type:"binary-expr",locations:[{start:{line:1795,column:23},end:{line:1795,column:31}},{start:{line:1795,column:35},end:{line:1795,column:48}}],line:1795},"112":{loc:{start:{line:1816,column:21},end:{line:1816,column:33}},type:"binary-expr",locations:[{start:{line:1816,column:21},end:{line:1816,column:27}},{start:{line:1816,column:31},end:{line:1816,column:33}}],line:1816},"113":{loc:{start:{line:1818,column:12},end:{line:1841,column:13}},type:"if",locations:[{start:{line:1818,column:12},end:{line:1841,column:13}},{start:{line:1818,column:12},end:{line:1841,column:13}}],line:1818},"114":{loc:{start:{line:1821,column:20},end:{line:1834,column:21}},type:"if",locations:[{start:{line:1821,column:20},end:{line:1834,column:21}},{start:{line:1821,column:20},end:{line:1834,column:21}}],line:1821},"115":{loc:{start:{line:1827,column:28},end:{line:1832,column:29}},type:"if",locations:[{start:{line:1827,column:28},end:{line:1832,column:29}},{start:{line:1827,column:28},end:{line:1832,column:29}}],line:1827},"116":{loc:{start:{line:2021,column:19},end:{line:2021,column:50}},type:"binary-expr",locations:[{start:{line:2021,column:19},end:{line:2021,column:44}},{start:{line:2021,column:48},end:{line:2021,column:50}}],line:2021},"117":{loc:{start:{line:2031,column:19},end:{line:2031,column:55}},type:"binary-expr",locations:[{start:{line:2031,column:19},end:{line:2031,column:47}},{start:{line:2031,column:51},end:{line:2031,column:55}}],line:2031},"118":{loc:{start:{line:2057,column:19},end:{line:2057,column:69}},type:"binary-expr",locations:[{start:{line:2057,column:19},end:{line:2057,column:61}},{start:{line:2057,column:65},end:{line:2057,column:69}}],line:2057},"119":{loc:{start:{line:2067,column:19},end:{line:2067,column:61}},type:"binary-expr",locations:[{start:{line:2067,column:19},end:{line:2067,column:53}},{start:{line:2067,column:57},end:{line:2067,column:61}}],line:2067},"120":{loc:{start:{line:2078,column:19},end:{line:2078,column:65}},type:"binary-expr",locations:[{start:{line:2078,column:19},end:{line:2078,column:59}},{start:{line:2078,column:63},end:{line:2078,column:65}}],line:2078},"121":{loc:{start:{line:2088,column:19},end:{line:2088,column:48}},type:"binary-expr",locations:[{start:{line:2088,column:19},end:{line:2088,column:40}},{start:{line:2088,column:44},end:{line:2088,column:48}}],line:2088},"122":{loc:{start:{line:2098,column:19},end:{line:2098,column:57}},type:"binary-expr",locations:[{start:{line:2098,column:19},end:{line:2098,column:49}},{start:{line:2098,column:53},end:{line:2098,column:57}}],line:2098},"123":{loc:{start:{line:2110,column:19},end:{line:2110,column:66}},type:"binary-expr",locations:[{start:{line:2110,column:19},end:{line:2110,column:58}},{start:{line:2110,column:62},end:{line:2110,column:66}}],line:2110},"124":{loc:{start:{line:2122,column:19},end:{line:2122,column:73}},type:"binary-expr",locations:[{start:{line:2122,column:19},end:{line:2122,column:67}},{start:{line:2122,column:71},end:{line:2122,column:73}}],line:2122},"125":{loc:{start:{line:2173,column:19},end:{line:2173,column:77}},type:"binary-expr",locations:[{start:{line:2173,column:19},end:{line:2173,column:72}},{start:{line:2173,column:76},end:{line:2173,column:77}}],line:2173},"126":{loc:{start:{line:2194,column:12},end:{line:2197,column:13}},type:"if",locations:[{start:{line:2194,column:12},end:{line:2197,column:13}},{start:{line:2194,column:12},end:{line:2197,column:13}}],line:2194},"127":{loc:{start:{line:2194,column:16},end:{line:2194,column:54}},type:"binary-expr",locations:[{start:{line:2194,column:16},end:{line:2194,column:25}},{start:{line:2194,column:29},end:{line:2194,column:54}}],line:2194},"128":{loc:{start:{line:2199,column:23},end:{line:2199,column:48}},type:"binary-expr",locations:[{start:{line:2199,column:23},end:{line:2199,column:31}},{start:{line:2199,column:35},end:{line:2199,column:48}}],line:2199},"129":{loc:{start:{line:2200,column:22},end:{line:2200,column:35}},type:"binary-expr",locations:[{start:{line:2200,column:22},end:{line:2200,column:29}},{start:{line:2200,column:33},end:{line:2200,column:35}}],line:2200},"130":{loc:{start:{line:2204,column:16},end:{line:2207,column:17}},type:"if",locations:[{start:{line:2204,column:16},end:{line:2207,column:17}},{start:{line:2204,column:16},end:{line:2207,column:17}}],line:2204},"131":{loc:{start:{line:2210,column:27},end:{line:2210,column:52}},type:"binary-expr",locations:[{start:{line:2210,column:27},end:{line:2210,column:46}},{start:{line:2210,column:50},end:{line:2210,column:52}}],line:2210},"132":{loc:{start:{line:2368,column:23},end:{line:2368,column:48}},type:"binary-expr",locations:[{start:{line:2368,column:23},end:{line:2368,column:31}},{start:{line:2368,column:35},end:{line:2368,column:48}}],line:2368},"133":{loc:{start:{line:2372,column:16},end:{line:2377,column:17}},type:"if",locations:[{start:{line:2372,column:16},end:{line:2377,column:17}},{start:{line:2372,column:16},end:{line:2377,column:17}}],line:2372},"134":{loc:{start:{line:2397,column:23},end:{line:2397,column:48}},type:"binary-expr",locations:[{start:{line:2397,column:23},end:{line:2397,column:31}},{start:{line:2397,column:35},end:{line:2397,column:48}}],line:2397},"135":{loc:{start:{line:2401,column:16},end:{line:2406,column:17}},type:"if",locations:[{start:{line:2401,column:16},end:{line:2406,column:17}},{start:{line:2401,column:16},end:{line:2406,column:17}}],line:2401},"136":{loc:{start:{line:2593,column:23},end:{line:2593,column:48}},type:"binary-expr",locations:[{start:{line:2593,column:23},end:{line:2593,column:31}},{start:{line:2593,column:35},end:{line:2593,column:48}}],line:2593},"137":{loc:{start:{line:2597,column:16},end:{line:2613,column:17}},type:"if",locations:[{start:{line:2597,column:16},end:{line:2613,column:17}},{start:{line:2597,column:16},end:{line:2613,column:17}}],line:2597},"138":{loc:{start:{line:2606,column:24},end:{line:2611,column:25}},type:"if",locations:[{start:{line:2606,column:24},end:{line:2611,column:25}},{start:{line:2606,column:24},end:{line:2611,column:25}}],line:2606},"139":{loc:{start:{line:2767,column:12},end:{line:2770,column:13}},type:"if",locations:[{start:{line:2767,column:12},end:{line:2770,column:13}},{start:{line:2767,column:12},end:{line:2770,column:13}}],line:2767},"140":{loc:{start:{line:2767,column:16},end:{line:2767,column:53}},type:"binary-expr",locations:[{start:{line:2767,column:16},end:{line:2767,column:25}},{start:{line:2767,column:29},end:{line:2767,column:53}}],line:2767},"141":{loc:{start:{line:2772,column:23},end:{line:2772,column:48}},type:"binary-expr",locations:[{start:{line:2772,column:23},end:{line:2772,column:31}},{start:{line:2772,column:35},end:{line:2772,column:48}}],line:2772},"142":{loc:{start:{line:2773,column:21},end:{line:2773,column:33}},type:"binary-expr",locations:[{start:{line:2773,column:21},end:{line:2773,column:27}},{start:{line:2773,column:31},end:{line:2773,column:33}}],line:2773},"143":{loc:{start:{line:2785,column:12},end:{line:2790,column:13}},type:"if",locations:[{start:{line:2785,column:12},end:{line:2790,column:13}},{start:{line:2785,column:12},end:{line:2790,column:13}}],line:2785},"144":{loc:{start:{line:2862,column:12},end:{line:2866,column:13}},type:"if",locations:[{start:{line:2862,column:12},end:{line:2866,column:13}},{start:{line:2862,column:12},end:{line:2866,column:13}}],line:2862},"145":{loc:{start:{line:2862,column:16},end:{line:2862,column:77}},type:"binary-expr",locations:[{start:{line:2862,column:16},end:{line:2862,column:36}},{start:{line:2862,column:40},end:{line:2862,column:64}},{start:{line:2862,column:68},end:{line:2862,column:77}}],line:2862},"146":{loc:{start:{line:2868,column:21},end:{line:2868,column:33}},type:"binary-expr",locations:[{start:{line:2868,column:21},end:{line:2868,column:27}},{start:{line:2868,column:31},end:{line:2868,column:33}}],line:2868},"147":{loc:{start:{line:2890,column:23},end:{line:2890,column:67}},type:"cond-expr",locations:[{start:{line:2890,column:49},end:{line:2890,column:55}},{start:{line:2890,column:58},end:{line:2890,column:67}}],line:2890},"148":{loc:{start:{line:3001,column:12},end:{line:3005,column:13}},type:"if",locations:[{start:{line:3001,column:12},end:{line:3005,column:13}},{start:{line:3001,column:12},end:{line:3005,column:13}}],line:3001},"149":{loc:{start:{line:3001,column:16},end:{line:3001,column:83}},type:"binary-expr",locations:[{start:{line:3001,column:16},end:{line:3001,column:42}},{start:{line:3001,column:46},end:{line:3001,column:70}},{start:{line:3001,column:74},end:{line:3001,column:83}}],line:3001},"150":{loc:{start:{line:3007,column:12},end:{line:3010,column:13}},type:"if",locations:[{start:{line:3007,column:12},end:{line:3010,column:13}},{start:{line:3007,column:12},end:{line:3010,column:13}}],line:3007},"151":{loc:{start:{line:3007,column:16},end:{line:3007,column:53}},type:"binary-expr",locations:[{start:{line:3007,column:16},end:{line:3007,column:40}},{start:{line:3007,column:44},end:{line:3007,column:53}}],line:3007},"152":{loc:{start:{line:3012,column:21},end:{line:3012,column:33}},type:"binary-expr",locations:[{start:{line:3012,column:21},end:{line:3012,column:27}},{start:{line:3012,column:31},end:{line:3012,column:33}}],line:3012},"153":{loc:{start:{line:3072,column:12},end:{line:3074,column:13}},type:"if",locations:[{start:{line:3072,column:12},end:{line:3074,column:13}},{start:{line:3072,column:12},end:{line:3074,column:13}}],line:3072},"154":{loc:{start:{line:3072,column:16},end:{line:3072,column:78}},type:"binary-expr",locations:[{start:{line:3072,column:16},end:{line:3072,column:26}},{start:{line:3072,column:30},end:{line:3072,column:53}},{start:{line:3072,column:57},end:{line:3072,column:78}}],line:3072},"155":{loc:{start:{line:3098,column:12},end:{line:3100,column:13}},type:"if",locations:[{start:{line:3098,column:12},end:{line:3100,column:13}},{start:{line:3098,column:12},end:{line:3100,column:13}}],line:3098},"156":{loc:{start:{line:3102,column:23},end:{line:3102,column:48}},type:"binary-expr",locations:[{start:{line:3102,column:23},end:{line:3102,column:31}},{start:{line:3102,column:35},end:{line:3102,column:48}}],line:3102},"157":{loc:{start:{line:3106,column:16},end:{line:3119,column:17}},type:"if",locations:[{start:{line:3106,column:16},end:{line:3119,column:17}},{start:{line:3106,column:16},end:{line:3119,column:17}}],line:3106},"158":{loc:{start:{line:3112,column:24},end:{line:3117,column:25}},type:"if",locations:[{start:{line:3112,column:24},end:{line:3117,column:25}},{start:{line:3112,column:24},end:{line:3117,column:25}}],line:3112},"159":{loc:{start:{line:3136,column:16},end:{line:3138,column:17}},type:"if",locations:[{start:{line:3136,column:16},end:{line:3138,column:17}},{start:{line:3136,column:16},end:{line:3138,column:17}}],line:3136},"160":{loc:{start:{line:3136,column:19},end:{line:3136,column:45}},type:"binary-expr",locations:[{start:{line:3136,column:19},end:{line:3136,column:24}},{start:{line:3136,column:28},end:{line:3136,column:45}}],line:3136},"161":{loc:{start:{line:3159,column:16},end:{line:3164,column:17}},type:"if",locations:[{start:{line:3159,column:16},end:{line:3164,column:17}},{start:{line:3159,column:16},end:{line:3164,column:17}}],line:3159},"162":{loc:{start:{line:3172,column:23},end:{line:3172,column:48}},type:"binary-expr",locations:[{start:{line:3172,column:23},end:{line:3172,column:31}},{start:{line:3172,column:35},end:{line:3172,column:48}}],line:3172},"163":{loc:{start:{line:3180,column:12},end:{line:3189,column:13}},type:"if",locations:[{start:{line:3180,column:12},end:{line:3189,column:13}},{start:{line:3180,column:12},end:{line:3189,column:13}}],line:3180},"164":{loc:{start:{line:3196,column:12},end:{line:3211,column:13}},type:"if",locations:[{start:{line:3196,column:12},end:{line:3211,column:13}},{start:{line:3196,column:12},end:{line:3211,column:13}}],line:3196},"165":{loc:{start:{line:3308,column:23},end:{line:3308,column:48}},type:"binary-expr",locations:[{start:{line:3308,column:23},end:{line:3308,column:31}},{start:{line:3308,column:35},end:{line:3308,column:48}}],line:3308},"166":{loc:{start:{line:3334,column:23},end:{line:3334,column:48}},type:"binary-expr",locations:[{start:{line:3334,column:23},end:{line:3334,column:31}},{start:{line:3334,column:35},end:{line:3334,column:48}}],line:3334},"167":{loc:{start:{line:3361,column:23},end:{line:3361,column:48}},type:"binary-expr",locations:[{start:{line:3361,column:23},end:{line:3361,column:31}},{start:{line:3361,column:35},end:{line:3361,column:48}}],line:3361},"168":{loc:{start:{line:3362,column:21},end:{line:3362,column:33}},type:"binary-expr",locations:[{start:{line:3362,column:21},end:{line:3362,column:27}},{start:{line:3362,column:31},end:{line:3362,column:33}}],line:3362},"169":{loc:{start:{line:3363,column:33},end:{line:3363,column:66}},type:"binary-expr",locations:[{start:{line:3363,column:33},end:{line:3363,column:51}},{start:{line:3363,column:55},end:{line:3363,column:66}}],line:3363},"170":{loc:{start:{line:3367,column:16},end:{line:3372,column:17}},type:"if",locations:[{start:{line:3367,column:16},end:{line:3372,column:17}},{start:{line:3367,column:16},end:{line:3372,column:17}}],line:3367},"171":{loc:{start:{line:3392,column:23},end:{line:3392,column:48}},type:"binary-expr",locations:[{start:{line:3392,column:23},end:{line:3392,column:31}},{start:{line:3392,column:35},end:{line:3392,column:48}}],line:3392},"172":{loc:{start:{line:3433,column:23},end:{line:3433,column:48}},type:"binary-expr",locations:[{start:{line:3433,column:23},end:{line:3433,column:31}},{start:{line:3433,column:35},end:{line:3433,column:48}}],line:3433},"173":{loc:{start:{line:3460,column:23},end:{line:3460,column:48}},type:"binary-expr",locations:[{start:{line:3460,column:23},end:{line:3460,column:31}},{start:{line:3460,column:35},end:{line:3460,column:48}}],line:3460},"174":{loc:{start:{line:3461,column:21},end:{line:3461,column:33}},type:"binary-expr",locations:[{start:{line:3461,column:21},end:{line:3461,column:27}},{start:{line:3461,column:31},end:{line:3461,column:33}}],line:3461},"175":{loc:{start:{line:3462,column:33},end:{line:3462,column:66}},type:"binary-expr",locations:[{start:{line:3462,column:33},end:{line:3462,column:51}},{start:{line:3462,column:55},end:{line:3462,column:66}}],line:3462},"176":{loc:{start:{line:3466,column:16},end:{line:3471,column:17}},type:"if",locations:[{start:{line:3466,column:16},end:{line:3471,column:17}},{start:{line:3466,column:16},end:{line:3471,column:17}}],line:3466},"177":{loc:{start:{line:3497,column:23},end:{line:3497,column:48}},type:"binary-expr",locations:[{start:{line:3497,column:23},end:{line:3497,column:31}},{start:{line:3497,column:35},end:{line:3497,column:48}}],line:3497},"178":{loc:{start:{line:3498,column:21},end:{line:3498,column:33}},type:"binary-expr",locations:[{start:{line:3498,column:21},end:{line:3498,column:27}},{start:{line:3498,column:31},end:{line:3498,column:33}}],line:3498},"179":{loc:{start:{line:3499,column:33},end:{line:3499,column:66}},type:"binary-expr",locations:[{start:{line:3499,column:33},end:{line:3499,column:51}},{start:{line:3499,column:55},end:{line:3499,column:66}}],line:3499},"180":{loc:{start:{line:3503,column:16},end:{line:3508,column:17}},type:"if",locations:[{start:{line:3503,column:16},end:{line:3508,column:17}},{start:{line:3503,column:16},end:{line:3508,column:17}}],line:3503},"181":{loc:{start:{line:3528,column:23},end:{line:3528,column:48}},type:"binary-expr",locations:[{start:{line:3528,column:23},end:{line:3528,column:31}},{start:{line:3528,column:35},end:{line:3528,column:48}}],line:3528},"182":{loc:{start:{line:3532,column:16},end:{line:3537,column:17}},type:"if",locations:[{start:{line:3532,column:16},end:{line:3537,column:17}},{start:{line:3532,column:16},end:{line:3537,column:17}}],line:3532},"183":{loc:{start:{line:3558,column:23},end:{line:3558,column:48}},type:"binary-expr",locations:[{start:{line:3558,column:23},end:{line:3558,column:31}},{start:{line:3558,column:35},end:{line:3558,column:48}}],line:3558},"184":{loc:{start:{line:3586,column:23},end:{line:3586,column:48}},type:"binary-expr",locations:[{start:{line:3586,column:23},end:{line:3586,column:31}},{start:{line:3586,column:35},end:{line:3586,column:48}}],line:3586},"185":{loc:{start:{line:3613,column:23},end:{line:3613,column:48}},type:"binary-expr",locations:[{start:{line:3613,column:23},end:{line:3613,column:31}},{start:{line:3613,column:35},end:{line:3613,column:48}}],line:3613},"186":{loc:{start:{line:3617,column:16},end:{line:3622,column:17}},type:"if",locations:[{start:{line:3617,column:16},end:{line:3622,column:17}},{start:{line:3617,column:16},end:{line:3622,column:17}}],line:3617},"187":{loc:{start:{line:3643,column:23},end:{line:3643,column:48}},type:"binary-expr",locations:[{start:{line:3643,column:23},end:{line:3643,column:31}},{start:{line:3643,column:35},end:{line:3643,column:48}}],line:3643},"188":{loc:{start:{line:3647,column:16},end:{line:3652,column:17}},type:"if",locations:[{start:{line:3647,column:16},end:{line:3652,column:17}},{start:{line:3647,column:16},end:{line:3652,column:17}}],line:3647},"189":{loc:{start:{line:3673,column:23},end:{line:3673,column:48}},type:"binary-expr",locations:[{start:{line:3673,column:23},end:{line:3673,column:31}},{start:{line:3673,column:35},end:{line:3673,column:48}}],line:3673},"190":{loc:{start:{line:3700,column:25},end:{line:3700,column:46}},type:"binary-expr",locations:[{start:{line:3700,column:25},end:{line:3700,column:39}},{start:{line:3700,column:43},end:{line:3700,column:46}}],line:3700},"191":{loc:{start:{line:3702,column:12},end:{line:3706,column:13}},type:"if",locations:[{start:{line:3702,column:12},end:{line:3706,column:13}},{start:{line:3702,column:12},end:{line:3706,column:13}}],line:3702},"192":{loc:{start:{line:3709,column:16},end:{line:3712,column:32}},type:"binary-expr",locations:[{start:{line:3709,column:16},end:{line:3709,column:35}},{start:{line:3710,column:16},end:{line:3710,column:31}},{start:{line:3711,column:16},end:{line:3711,column:33}},{start:{line:3712,column:16},end:{line:3712,column:32}}],line:3709},"193":{loc:{start:{line:3715,column:30},end:{line:3715,column:62}},type:"binary-expr",locations:[{start:{line:3715,column:30},end:{line:3715,column:45}},{start:{line:3715,column:49},end:{line:3715,column:62}}],line:3715},"194":{loc:{start:{line:3716,column:33},end:{line:3716,column:68}},type:"binary-expr",locations:[{start:{line:3716,column:33},end:{line:3716,column:51}},{start:{line:3716,column:55},end:{line:3716,column:68}}],line:3716},"195":{loc:{start:{line:3717,column:29},end:{line:3717,column:60}},type:"binary-expr",locations:[{start:{line:3717,column:29},end:{line:3717,column:43}},{start:{line:3717,column:47},end:{line:3717,column:60}}],line:3717},"196":{loc:{start:{line:3718,column:31},end:{line:3718,column:64}},type:"binary-expr",locations:[{start:{line:3718,column:31},end:{line:3718,column:47}},{start:{line:3718,column:51},end:{line:3718,column:64}}],line:3718},"197":{loc:{start:{line:3719,column:30},end:{line:3719,column:62}},type:"binary-expr",locations:[{start:{line:3719,column:30},end:{line:3719,column:45}},{start:{line:3719,column:49},end:{line:3719,column:62}}],line:3719},"198":{loc:{start:{line:3722,column:34},end:{line:3722,column:70}},type:"binary-expr",locations:[{start:{line:3722,column:34},end:{line:3722,column:53}},{start:{line:3722,column:57},end:{line:3722,column:70}}],line:3722},"199":{loc:{start:{line:3723,column:43},end:{line:3723,column:88}},type:"binary-expr",locations:[{start:{line:3723,column:43},end:{line:3723,column:71}},{start:{line:3723,column:75},end:{line:3723,column:88}}],line:3723},"200":{loc:{start:{line:3732,column:24},end:{line:3735,column:25}},type:"if",locations:[{start:{line:3732,column:24},end:{line:3735,column:25}},{start:{line:3732,column:24},end:{line:3735,column:25}}],line:3732},"201":{loc:{start:{line:3738,column:39},end:{line:3738,column:96}},type:"binary-expr",locations:[{start:{line:3738,column:39},end:{line:3738,column:65}},{start:{line:3738,column:69},end:{line:3738,column:96}}],line:3738},"202":{loc:{start:{line:3739,column:24},end:{line:3776,column:25}},type:"if",locations:[{start:{line:3739,column:24},end:{line:3776,column:25}},{start:{line:3739,column:24},end:{line:3776,column:25}}],line:3739},"203":{loc:{start:{line:3743,column:28},end:{line:3756,column:29}},type:"if",locations:[{start:{line:3743,column:28},end:{line:3756,column:29}},{start:{line:3743,column:28},end:{line:3756,column:29}}],line:3743},"204":{loc:{start:{line:3749,column:32},end:{line:3755,column:33}},type:"if",locations:[{start:{line:3749,column:32},end:{line:3755,column:33}},{start:{line:3749,column:32},end:{line:3755,column:33}}],line:3749},"205":{loc:{start:{line:3762,column:28},end:{line:3775,column:29}},type:"if",locations:[{start:{line:3762,column:28},end:{line:3775,column:29}},{start:{line:3762,column:28},end:{line:3775,column:29}}],line:3762},"206":{loc:{start:{line:3762,column:32},end:{line:3762,column:72}},type:"binary-expr",locations:[{start:{line:3762,column:32},end:{line:3762,column:56}},{start:{line:3762,column:60},end:{line:3762,column:72}}],line:3762},"207":{loc:{start:{line:3769,column:33},end:{line:3775,column:29}},type:"if",locations:[{start:{line:3769,column:33},end:{line:3775,column:29}},{start:{line:3769,column:33},end:{line:3775,column:29}}],line:3769},"208":{loc:{start:{line:3769,column:37},end:{line:3769,column:81}},type:"binary-expr",locations:[{start:{line:3769,column:37},end:{line:3769,column:63}},{start:{line:3769,column:67},end:{line:3769,column:81}}],line:3769},"209":{loc:{start:{line:3782,column:20},end:{line:3784,column:21}},type:"if",locations:[{start:{line:3782,column:20},end:{line:3784,column:21}},{start:{line:3782,column:20},end:{line:3784,column:21}}],line:3782},"210":{loc:{start:{line:3805,column:23},end:{line:3805,column:48}},type:"binary-expr",locations:[{start:{line:3805,column:23},end:{line:3805,column:31}},{start:{line:3805,column:35},end:{line:3805,column:48}}],line:3805},"211":{loc:{start:{line:3889,column:12},end:{line:3893,column:13}},type:"if",locations:[{start:{line:3889,column:12},end:{line:3893,column:13}},{start:{line:3889,column:12},end:{line:3893,column:13}}],line:3889},"212":{loc:{start:{line:3889,column:16},end:{line:3889,column:78}},type:"binary-expr",locations:[{start:{line:3889,column:16},end:{line:3889,column:37}},{start:{line:3889,column:41},end:{line:3889,column:65}},{start:{line:3889,column:69},end:{line:3889,column:78}}],line:3889},"213":{loc:{start:{line:3895,column:23},end:{line:3895,column:48}},type:"binary-expr",locations:[{start:{line:3895,column:23},end:{line:3895,column:31}},{start:{line:3895,column:35},end:{line:3895,column:48}}],line:3895},"214":{loc:{start:{line:3896,column:21},end:{line:3896,column:33}},type:"binary-expr",locations:[{start:{line:3896,column:21},end:{line:3896,column:27}},{start:{line:3896,column:31},end:{line:3896,column:33}}],line:3896},"215":{loc:{start:{line:3899,column:12},end:{line:3901,column:13}},type:"if",locations:[{start:{line:3899,column:12},end:{line:3901,column:13}},{start:{line:3899,column:12},end:{line:3901,column:13}}],line:3899},"216":{loc:{start:{line:3899,column:17},end:{line:3899,column:39}},type:"binary-expr",locations:[{start:{line:3899,column:17},end:{line:3899,column:33}},{start:{line:3899,column:37},end:{line:3899,column:39}}],line:3899},"217":{loc:{start:{line:3903,column:12},end:{line:3906,column:13}},type:"if",locations:[{start:{line:3903,column:12},end:{line:3906,column:13}},{start:{line:3903,column:12},end:{line:3906,column:13}}],line:3903},"218":{loc:{start:{line:3909,column:16},end:{line:3915,column:17}},type:"if",locations:[{start:{line:3909,column:16},end:{line:3915,column:17}},{start:{line:3909,column:16},end:{line:3915,column:17}}],line:3909},"219":{loc:{start:{line:3972,column:12},end:{line:3976,column:13}},type:"if",locations:[{start:{line:3972,column:12},end:{line:3976,column:13}},{start:{line:3972,column:12},end:{line:3976,column:13}}],line:3972},"220":{loc:{start:{line:3972,column:16},end:{line:3972,column:78}},type:"binary-expr",locations:[{start:{line:3972,column:16},end:{line:3972,column:37}},{start:{line:3972,column:41},end:{line:3972,column:65}},{start:{line:3972,column:69},end:{line:3972,column:78}}],line:3972},"221":{loc:{start:{line:3978,column:23},end:{line:3978,column:48}},type:"binary-expr",locations:[{start:{line:3978,column:23},end:{line:3978,column:31}},{start:{line:3978,column:35},end:{line:3978,column:48}}],line:3978},"222":{loc:{start:{line:3979,column:21},end:{line:3979,column:33}},type:"binary-expr",locations:[{start:{line:3979,column:21},end:{line:3979,column:27}},{start:{line:3979,column:31},end:{line:3979,column:33}}],line:3979},"223":{loc:{start:{line:3983,column:12},end:{line:3985,column:13}},type:"if",locations:[{start:{line:3983,column:12},end:{line:3985,column:13}},{start:{line:3983,column:12},end:{line:3985,column:13}}],line:3983},"224":{loc:{start:{line:3987,column:29},end:{line:3987,column:62}},type:"binary-expr",locations:[{start:{line:3987,column:29},end:{line:3987,column:47}},{start:{line:3987,column:51},end:{line:3987,column:62}}],line:3987},"225":{loc:{start:{line:4004,column:20},end:{line:4009,column:21}},type:"if",locations:[{start:{line:4004,column:20},end:{line:4009,column:21}},{start:{line:4004,column:20},end:{line:4009,column:21}}],line:4004},"226":{loc:{start:{line:4072,column:20},end:{line:4072,column:31}},type:"binary-expr",locations:[{start:{line:4072,column:20},end:{line:4072,column:25}},{start:{line:4072,column:29},end:{line:4072,column:31}}],line:4072},"227":{loc:{start:{line:4073,column:26},end:{line:4073,column:43}},type:"binary-expr",locations:[{start:{line:4073,column:26},end:{line:4073,column:37}},{start:{line:4073,column:41},end:{line:4073,column:43}}],line:4073},"228":{loc:{start:{line:4082,column:34},end:{line:4082,column:55}},type:"binary-expr",locations:[{start:{line:4082,column:34},end:{line:4082,column:47}},{start:{line:4082,column:51},end:{line:4082,column:55}}],line:4082},"229":{loc:{start:{line:4192,column:20},end:{line:4192,column:31}},type:"binary-expr",locations:[{start:{line:4192,column:20},end:{line:4192,column:25}},{start:{line:4192,column:29},end:{line:4192,column:31}}],line:4192},"230":{loc:{start:{line:4193,column:26},end:{line:4193,column:43}},type:"binary-expr",locations:[{start:{line:4193,column:26},end:{line:4193,column:37}},{start:{line:4193,column:41},end:{line:4193,column:43}}],line:4193},"231":{loc:{start:{line:4258,column:20},end:{line:4258,column:31}},type:"binary-expr",locations:[{start:{line:4258,column:20},end:{line:4258,column:25}},{start:{line:4258,column:29},end:{line:4258,column:31}}],line:4258},"232":{loc:{start:{line:4259,column:26},end:{line:4259,column:43}},type:"binary-expr",locations:[{start:{line:4259,column:26},end:{line:4259,column:37}},{start:{line:4259,column:41},end:{line:4259,column:43}}],line:4259},"233":{loc:{start:{line:4263,column:34},end:{line:4263,column:55}},type:"binary-expr",locations:[{start:{line:4263,column:34},end:{line:4263,column:47}},{start:{line:4263,column:51},end:{line:4263,column:55}}],line:4263},"234":{loc:{start:{line:4273,column:12},end:{line:4275,column:13}},type:"if",locations:[{start:{line:4273,column:12},end:{line:4275,column:13}},{start:{line:4273,column:12},end:{line:4275,column:13}}],line:4273},"235":{loc:{start:{line:4273,column:16},end:{line:4273,column:59}},type:"binary-expr",locations:[{start:{line:4273,column:16},end:{line:4273,column:36}},{start:{line:4273,column:40},end:{line:4273,column:59}}],line:4273},"236":{loc:{start:{line:4276,column:12},end:{line:4278,column:13}},type:"if",locations:[{start:{line:4276,column:12},end:{line:4278,column:13}},{start:{line:4276,column:12},end:{line:4278,column:13}}],line:4276},"237":{loc:{start:{line:4276,column:16},end:{line:4276,column:60}},type:"binary-expr",locations:[{start:{line:4276,column:16},end:{line:4276,column:37}},{start:{line:4276,column:41},end:{line:4276,column:60}}],line:4276},"238":{loc:{start:{line:4279,column:12},end:{line:4282,column:13}},type:"if",locations:[{start:{line:4279,column:12},end:{line:4282,column:13}},{start:{line:4279,column:12},end:{line:4282,column:13}}],line:4279},"239":{loc:{start:{line:4388,column:32},end:{line:4388,column:59}},type:"binary-expr",locations:[{start:{line:4388,column:32},end:{line:4388,column:51}},{start:{line:4388,column:55},end:{line:4388,column:59}}],line:4388},"240":{loc:{start:{line:4402,column:12},end:{line:4405,column:13}},type:"if",locations:[{start:{line:4402,column:12},end:{line:4405,column:13}},{start:{line:4402,column:12},end:{line:4405,column:13}}],line:4402},"241":{loc:{start:{line:4406,column:12},end:{line:4408,column:13}},type:"if",locations:[{start:{line:4406,column:12},end:{line:4408,column:13}},{start:{line:4406,column:12},end:{line:4408,column:13}}],line:4406},"242":{loc:{start:{line:4406,column:16},end:{line:4406,column:55}},type:"binary-expr",locations:[{start:{line:4406,column:16},end:{line:4406,column:21}},{start:{line:4406,column:25},end:{line:4406,column:55}}],line:4406},"243":{loc:{start:{line:4411,column:32},end:{line:4411,column:69}},type:"binary-expr",locations:[{start:{line:4411,column:32},end:{line:4411,column:49}},{start:{line:4411,column:53},end:{line:4411,column:69}}],line:4411},"244":{loc:{start:{line:4550,column:41},end:{line:4551,column:53}},type:"cond-expr",locations:[{start:{line:4551,column:16},end:{line:4551,column:46}},{start:{line:4551,column:49},end:{line:4551,column:53}}],line:4550},"245":{loc:{start:{line:4570,column:12},end:{line:4572,column:13}},type:"if",locations:[{start:{line:4570,column:12},end:{line:4572,column:13}},{start:{line:4570,column:12},end:{line:4572,column:13}}],line:4570},"246":{loc:{start:{line:4570,column:16},end:{line:4570,column:49}},type:"binary-expr",locations:[{start:{line:4570,column:16},end:{line:4570,column:19}},{start:{line:4570,column:23},end:{line:4570,column:49}}],line:4570},"247":{loc:{start:{line:4574,column:12},end:{line:4576,column:13}},type:"if",locations:[{start:{line:4574,column:12},end:{line:4576,column:13}},{start:{line:4574,column:12},end:{line:4576,column:13}}],line:4574},"248":{loc:{start:{line:4595,column:12},end:{line:4597,column:13}},type:"if",locations:[{start:{line:4595,column:12},end:{line:4597,column:13}},{start:{line:4595,column:12},end:{line:4597,column:13}}],line:4595},"249":{loc:{start:{line:4598,column:12},end:{line:4604,column:13}},type:"if",locations:[{start:{line:4598,column:12},end:{line:4604,column:13}},{start:{line:4598,column:12},end:{line:4604,column:13}}],line:4598},"250":{loc:{start:{line:4605,column:12},end:{line:4610,column:13}},type:"if",locations:[{start:{line:4605,column:12},end:{line:4610,column:13}},{start:{line:4605,column:12},end:{line:4610,column:13}}],line:4605},"251":{loc:{start:{line:4618,column:12},end:{line:4623,column:13}},type:"if",locations:[{start:{line:4618,column:12},end:{line:4623,column:13}},{start:{line:4618,column:12},end:{line:4623,column:13}}],line:4618},"252":{loc:{start:{line:4643,column:12},end:{line:4645,column:13}},type:"if",locations:[{start:{line:4643,column:12},end:{line:4645,column:13}},{start:{line:4643,column:12},end:{line:4645,column:13}}],line:4643},"253":{loc:{start:{line:4649,column:12},end:{line:4651,column:13}},type:"if",locations:[{start:{line:4649,column:12},end:{line:4651,column:13}},{start:{line:4649,column:12},end:{line:4651,column:13}}],line:4649},"254":{loc:{start:{line:4653,column:12},end:{line:4656,column:13}},type:"if",locations:[{start:{line:4653,column:12},end:{line:4656,column:13}},{start:{line:4653,column:12},end:{line:4656,column:13}}],line:4653},"255":{loc:{start:{line:4653,column:16},end:{line:4653,column:86}},type:"binary-expr",locations:[{start:{line:4653,column:16},end:{line:4653,column:35}},{start:{line:4653,column:39},end:{line:4653,column:86}}],line:4653},"256":{loc:{start:{line:4658,column:12},end:{line:4661,column:13}},type:"if",locations:[{start:{line:4658,column:12},end:{line:4661,column:13}},{start:{line:4658,column:12},end:{line:4661,column:13}}],line:4658},"257":{loc:{start:{line:4658,column:16},end:{line:4658,column:104}},type:"binary-expr",locations:[{start:{line:4658,column:16},end:{line:4658,column:35}},{start:{line:4658,column:39},end:{line:4658,column:104}}],line:4658},"258":{loc:{start:{line:4663,column:12},end:{line:4665,column:13}},type:"if",locations:[{start:{line:4663,column:12},end:{line:4665,column:13}},{start:{line:4663,column:12},end:{line:4665,column:13}}],line:4663},"259":{loc:{start:{line:4663,column:16},end:{line:4663,column:85}},type:"binary-expr",locations:[{start:{line:4663,column:16},end:{line:4663,column:40}},{start:{line:4663,column:44},end:{line:4663,column:85}}],line:4663},"260":{loc:{start:{line:4678,column:31},end:{line:4678,column:83}},type:"cond-expr",locations:[{start:{line:4678,column:63},end:{line:4678,column:71}},{start:{line:4678,column:74},end:{line:4678,column:83}}],line:4678},"261":{loc:{start:{line:4694,column:12},end:{line:4696,column:13}},type:"if",locations:[{start:{line:4694,column:12},end:{line:4696,column:13}},{start:{line:4694,column:12},end:{line:4696,column:13}}],line:4694},"262":{loc:{start:{line:4698,column:12},end:{line:4700,column:13}},type:"if",locations:[{start:{line:4698,column:12},end:{line:4700,column:13}},{start:{line:4698,column:12},end:{line:4700,column:13}}],line:4698},"263":{loc:{start:{line:4709,column:12},end:{line:4711,column:13}},type:"if",locations:[{start:{line:4709,column:12},end:{line:4711,column:13}},{start:{line:4709,column:12},end:{line:4711,column:13}}],line:4709},"264":{loc:{start:{line:4738,column:12},end:{line:4740,column:13}},type:"if",locations:[{start:{line:4738,column:12},end:{line:4740,column:13}},{start:{line:4738,column:12},end:{line:4740,column:13}}],line:4738},"265":{loc:{start:{line:4742,column:12},end:{line:4744,column:13}},type:"if",locations:[{start:{line:4742,column:12},end:{line:4744,column:13}},{start:{line:4742,column:12},end:{line:4744,column:13}}],line:4742},"266":{loc:{start:{line:4746,column:12},end:{line:4748,column:13}},type:"if",locations:[{start:{line:4746,column:12},end:{line:4748,column:13}},{start:{line:4746,column:12},end:{line:4748,column:13}}],line:4746},"267":{loc:{start:{line:4746,column:16},end:{line:4746,column:73}},type:"binary-expr",locations:[{start:{line:4746,column:16},end:{line:4746,column:48}},{start:{line:4746,column:52},end:{line:4746,column:73}}],line:4746},"268":{loc:{start:{line:4749,column:12},end:{line:4751,column:13}},type:"if",locations:[{start:{line:4749,column:12},end:{line:4751,column:13}},{start:{line:4749,column:12},end:{line:4751,column:13}}],line:4749},"269":{loc:{start:{line:4749,column:16},end:{line:4749,column:69}},type:"binary-expr",locations:[{start:{line:4749,column:16},end:{line:4749,column:46}},{start:{line:4749,column:50},end:{line:4749,column:69}}],line:4749},"270":{loc:{start:{line:4752,column:12},end:{line:4754,column:13}},type:"if",locations:[{start:{line:4752,column:12},end:{line:4754,column:13}},{start:{line:4752,column:12},end:{line:4754,column:13}}],line:4752},"271":{loc:{start:{line:4752,column:16},end:{line:4752,column:71}},type:"binary-expr",locations:[{start:{line:4752,column:16},end:{line:4752,column:47}},{start:{line:4752,column:51},end:{line:4752,column:71}}],line:4752},"272":{loc:{start:{line:4755,column:12},end:{line:4757,column:13}},type:"if",locations:[{start:{line:4755,column:12},end:{line:4757,column:13}},{start:{line:4755,column:12},end:{line:4757,column:13}}],line:4755},"273":{loc:{start:{line:4755,column:16},end:{line:4755,column:73}},type:"binary-expr",locations:[{start:{line:4755,column:16},end:{line:4755,column:48}},{start:{line:4755,column:52},end:{line:4755,column:73}}],line:4755},"274":{loc:{start:{line:4783,column:12},end:{line:4785,column:13}},type:"if",locations:[{start:{line:4783,column:12},end:{line:4785,column:13}},{start:{line:4783,column:12},end:{line:4785,column:13}}],line:4783},"275":{loc:{start:{line:4787,column:12},end:{line:4789,column:13}},type:"if",locations:[{start:{line:4787,column:12},end:{line:4789,column:13}},{start:{line:4787,column:12},end:{line:4789,column:13}}],line:4787},"276":{loc:{start:{line:4814,column:12},end:{line:4816,column:13}},type:"if",locations:[{start:{line:4814,column:12},end:{line:4816,column:13}},{start:{line:4814,column:12},end:{line:4816,column:13}}],line:4814},"277":{loc:{start:{line:4818,column:12},end:{line:4820,column:13}},type:"if",locations:[{start:{line:4818,column:12},end:{line:4820,column:13}},{start:{line:4818,column:12},end:{line:4820,column:13}}],line:4818},"278":{loc:{start:{line:4821,column:12},end:{line:4823,column:13}},type:"if",locations:[{start:{line:4821,column:12},end:{line:4823,column:13}},{start:{line:4821,column:12},end:{line:4823,column:13}}],line:4821},"279":{loc:{start:{line:4846,column:12},end:{line:4848,column:13}},type:"if",locations:[{start:{line:4846,column:12},end:{line:4848,column:13}},{start:{line:4846,column:12},end:{line:4848,column:13}}],line:4846},"280":{loc:{start:{line:4850,column:12},end:{line:4852,column:13}},type:"if",locations:[{start:{line:4850,column:12},end:{line:4852,column:13}},{start:{line:4850,column:12},end:{line:4852,column:13}}],line:4850},"281":{loc:{start:{line:4860,column:12},end:{line:4862,column:13}},type:"if",locations:[{start:{line:4860,column:12},end:{line:4862,column:13}},{start:{line:4860,column:12},end:{line:4862,column:13}}],line:4860},"282":{loc:{start:{line:4883,column:12},end:{line:4885,column:13}},type:"if",locations:[{start:{line:4883,column:12},end:{line:4885,column:13}},{start:{line:4883,column:12},end:{line:4885,column:13}}],line:4883},"283":{loc:{start:{line:4887,column:12},end:{line:4889,column:13}},type:"if",locations:[{start:{line:4887,column:12},end:{line:4889,column:13}},{start:{line:4887,column:12},end:{line:4889,column:13}}],line:4887},"284":{loc:{start:{line:4894,column:12},end:{line:4896,column:13}},type:"if",locations:[{start:{line:4894,column:12},end:{line:4896,column:13}},{start:{line:4894,column:12},end:{line:4896,column:13}}],line:4894},"285":{loc:{start:{line:4894,column:16},end:{line:4894,column:73}},type:"binary-expr",locations:[{start:{line:4894,column:16},end:{line:4894,column:48}},{start:{line:4894,column:52},end:{line:4894,column:73}}],line:4894},"286":{loc:{start:{line:4897,column:12},end:{line:4899,column:13}},type:"if",locations:[{start:{line:4897,column:12},end:{line:4899,column:13}},{start:{line:4897,column:12},end:{line:4899,column:13}}],line:4897},"287":{loc:{start:{line:4897,column:16},end:{line:4897,column:69}},type:"binary-expr",locations:[{start:{line:4897,column:16},end:{line:4897,column:46}},{start:{line:4897,column:50},end:{line:4897,column:69}}],line:4897},"288":{loc:{start:{line:4900,column:12},end:{line:4902,column:13}},type:"if",locations:[{start:{line:4900,column:12},end:{line:4902,column:13}},{start:{line:4900,column:12},end:{line:4902,column:13}}],line:4900},"289":{loc:{start:{line:4900,column:16},end:{line:4900,column:71}},type:"binary-expr",locations:[{start:{line:4900,column:16},end:{line:4900,column:47}},{start:{line:4900,column:51},end:{line:4900,column:71}}],line:4900},"290":{loc:{start:{line:4903,column:12},end:{line:4905,column:13}},type:"if",locations:[{start:{line:4903,column:12},end:{line:4905,column:13}},{start:{line:4903,column:12},end:{line:4905,column:13}}],line:4903},"291":{loc:{start:{line:4903,column:16},end:{line:4903,column:73}},type:"binary-expr",locations:[{start:{line:4903,column:16},end:{line:4903,column:48}},{start:{line:4903,column:52},end:{line:4903,column:73}}],line:4903},"292":{loc:{start:{line:4929,column:12},end:{line:4931,column:13}},type:"if",locations:[{start:{line:4929,column:12},end:{line:4931,column:13}},{start:{line:4929,column:12},end:{line:4931,column:13}}],line:4929},"293":{loc:{start:{line:4933,column:12},end:{line:4935,column:13}},type:"if",locations:[{start:{line:4933,column:12},end:{line:4935,column:13}},{start:{line:4933,column:12},end:{line:4935,column:13}}],line:4933},"294":{loc:{start:{line:4958,column:12},end:{line:4960,column:13}},type:"if",locations:[{start:{line:4958,column:12},end:{line:4960,column:13}},{start:{line:4958,column:12},end:{line:4960,column:13}}],line:4958},"295":{loc:{start:{line:4962,column:12},end:{line:4964,column:13}},type:"if",locations:[{start:{line:4962,column:12},end:{line:4964,column:13}},{start:{line:4962,column:12},end:{line:4964,column:13}}],line:4962},"296":{loc:{start:{line:4965,column:12},end:{line:4967,column:13}},type:"if",locations:[{start:{line:4965,column:12},end:{line:4967,column:13}},{start:{line:4965,column:12},end:{line:4967,column:13}}],line:4965},"297":{loc:{start:{line:4990,column:12},end:{line:4992,column:13}},type:"if",locations:[{start:{line:4990,column:12},end:{line:4992,column:13}},{start:{line:4990,column:12},end:{line:4992,column:13}}],line:4990},"298":{loc:{start:{line:4995,column:12},end:{line:5047,column:13}},type:"if",locations:[{start:{line:4995,column:12},end:{line:5047,column:13}},{start:{line:4995,column:12},end:{line:5047,column:13}}],line:4995},"299":{loc:{start:{line:4995,column:16},end:{line:5002,column:41}},type:"binary-expr",locations:[{start:{line:4995,column:16},end:{line:4995,column:58}},{start:{line:4996,column:16},end:{line:5002,column:41}}],line:4995},"300":{loc:{start:{line:5008,column:17},end:{line:5047,column:13}},type:"if",locations:[{start:{line:5008,column:17},end:{line:5047,column:13}},{start:{line:5008,column:17},end:{line:5047,column:13}}],line:5008},"301":{loc:{start:{line:5008,column:21},end:{line:5018,column:37}},type:"binary-expr",locations:[{start:{line:5008,column:21},end:{line:5008,column:40}},{start:{line:5009,column:16},end:{line:5018,column:37}}],line:5008},"302":{loc:{start:{line:5025,column:17},end:{line:5047,column:13}},type:"if",locations:[{start:{line:5025,column:17},end:{line:5047,column:13}},{start:{line:5025,column:17},end:{line:5047,column:13}}],line:5025},"303":{loc:{start:{line:5025,column:21},end:{line:5032,column:37}},type:"binary-expr",locations:[{start:{line:5025,column:21},end:{line:5025,column:43}},{start:{line:5026,column:16},end:{line:5032,column:37}}],line:5025},"304":{loc:{start:{line:5039,column:17},end:{line:5047,column:13}},type:"if",locations:[{start:{line:5039,column:17},end:{line:5047,column:13}},{start:{line:5039,column:17},end:{line:5047,column:13}}],line:5039},"305":{loc:{start:{line:5039,column:21},end:{line:5040,column:41}},type:"binary-expr",locations:[{start:{line:5039,column:21},end:{line:5039,column:74}},{start:{line:5040,column:16},end:{line:5040,column:41}}],line:5039},"306":{loc:{start:{line:5045,column:17},end:{line:5047,column:13}},type:"if",locations:[{start:{line:5045,column:17},end:{line:5047,column:13}},{start:{line:5045,column:17},end:{line:5047,column:13}}],line:5045},"307":{loc:{start:{line:5108,column:12},end:{line:5110,column:13}},type:"if",locations:[{start:{line:5108,column:12},end:{line:5110,column:13}},{start:{line:5108,column:12},end:{line:5110,column:13}}],line:5108},"308":{loc:{start:{line:5113,column:16},end:{line:5116,column:17}},type:"if",locations:[{start:{line:5113,column:16},end:{line:5116,column:17}},{start:{line:5113,column:16},end:{line:5116,column:17}}],line:5113},"309":{loc:{start:{line:5118,column:16},end:{line:5123,column:17}},type:"if",locations:[{start:{line:5118,column:16},end:{line:5123,column:17}},{start:{line:5118,column:16},end:{line:5123,column:17}}],line:5118},"310":{loc:{start:{line:5118,column:20},end:{line:5118,column:65}},type:"binary-expr",locations:[{start:{line:5118,column:20},end:{line:5118,column:39}},{start:{line:5118,column:43},end:{line:5118,column:65}}],line:5118},"311":{loc:{start:{line:5154,column:12},end:{line:5157,column:13}},type:"if",locations:[{start:{line:5154,column:12},end:{line:5157,column:13}},{start:{line:5154,column:12},end:{line:5157,column:13}}],line:5154},"312":{loc:{start:{line:5158,column:19},end:{line:5158,column:29}},type:"binary-expr",locations:[{start:{line:5158,column:19},end:{line:5158,column:23}},{start:{line:5158,column:27},end:{line:5158,column:29}}],line:5158},"313":{loc:{start:{line:5161,column:16},end:{line:5166,column:17}},type:"if",locations:[{start:{line:5161,column:16},end:{line:5166,column:17}},{start:{line:5161,column:16},end:{line:5166,column:17}}],line:5161},"314":{loc:{start:{line:5225,column:20},end:{line:5225,column:31}},type:"binary-expr",locations:[{start:{line:5225,column:20},end:{line:5225,column:25}},{start:{line:5225,column:29},end:{line:5225,column:31}}],line:5225},"315":{loc:{start:{line:5226,column:26},end:{line:5226,column:43}},type:"binary-expr",locations:[{start:{line:5226,column:26},end:{line:5226,column:37}},{start:{line:5226,column:41},end:{line:5226,column:43}}],line:5226},"316":{loc:{start:{line:5235,column:12},end:{line:5237,column:13}},type:"if",locations:[{start:{line:5235,column:12},end:{line:5237,column:13}},{start:{line:5235,column:12},end:{line:5237,column:13}}],line:5235},"317":{loc:{start:{line:5238,column:12},end:{line:5240,column:13}},type:"if",locations:[{start:{line:5238,column:12},end:{line:5240,column:13}},{start:{line:5238,column:12},end:{line:5240,column:13}}],line:5238},"318":{loc:{start:{line:5241,column:12},end:{line:5243,column:13}},type:"if",locations:[{start:{line:5241,column:12},end:{line:5243,column:13}},{start:{line:5241,column:12},end:{line:5243,column:13}}],line:5241},"319":{loc:{start:{line:5244,column:12},end:{line:5246,column:13}},type:"if",locations:[{start:{line:5244,column:12},end:{line:5246,column:13}},{start:{line:5244,column:12},end:{line:5246,column:13}}],line:5244},"320":{loc:{start:{line:5249,column:12},end:{line:5251,column:13}},type:"if",locations:[{start:{line:5249,column:12},end:{line:5251,column:13}},{start:{line:5249,column:12},end:{line:5251,column:13}}],line:5249},"321":{loc:{start:{line:5317,column:19},end:{line:5317,column:77}},type:"binary-expr",locations:[{start:{line:5317,column:19},end:{line:5317,column:48}},{start:{line:5317,column:52},end:{line:5317,column:69}},{start:{line:5317,column:73},end:{line:5317,column:77}}],line:5317},"322":{loc:{start:{line:5335,column:16},end:{line:5337,column:17}},type:"if",locations:[{start:{line:5335,column:16},end:{line:5337,column:17}},{start:{line:5335,column:16},end:{line:5337,column:17}}],line:5335},"323":{loc:{start:{line:5342,column:16},end:{line:5344,column:17}},type:"if",locations:[{start:{line:5342,column:16},end:{line:5344,column:17}},{start:{line:5342,column:16},end:{line:5344,column:17}}],line:5342},"324":{loc:{start:{line:5454,column:12},end:{line:5457,column:13}},type:"if",locations:[{start:{line:5454,column:12},end:{line:5457,column:13}},{start:{line:5454,column:12},end:{line:5457,column:13}}],line:5454},"325":{loc:{start:{line:5454,column:16},end:{line:5454,column:59}},type:"binary-expr",locations:[{start:{line:5454,column:16},end:{line:5454,column:25}},{start:{line:5454,column:29},end:{line:5454,column:59}}],line:5454},"326":{loc:{start:{line:5460,column:23},end:{line:5460,column:72}},type:"cond-expr",locations:[{start:{line:5460,column:38},end:{line:5460,column:67}},{start:{line:5460,column:70},end:{line:5460,column:72}}],line:5460},"327":{loc:{start:{line:5487,column:26},end:{line:5487,column:68}},type:"cond-expr",locations:[{start:{line:5487,column:43},end:{line:5487,column:60}},{start:{line:5487,column:65},end:{line:5487,column:67}}],line:5487},"328":{loc:{start:{line:5556,column:12},end:{line:5559,column:13}},type:"if",locations:[{start:{line:5556,column:12},end:{line:5559,column:13}},{start:{line:5556,column:12},end:{line:5559,column:13}}],line:5556},"329":{loc:{start:{line:5564,column:32},end:{line:5564,column:76}},type:"binary-expr",locations:[{start:{line:5564,column:32},end:{line:5564,column:70}},{start:{line:5564,column:74},end:{line:5564,column:76}}],line:5564},"330":{loc:{start:{line:5565,column:12},end:{line:5568,column:13}},type:"if",locations:[{start:{line:5565,column:12},end:{line:5568,column:13}},{start:{line:5565,column:12},end:{line:5568,column:13}}],line:5565},"331":{loc:{start:{line:5572,column:12},end:{line:5574,column:13}},type:"if",locations:[{start:{line:5572,column:12},end:{line:5574,column:13}},{start:{line:5572,column:12},end:{line:5574,column:13}}],line:5572},"332":{loc:{start:{line:5572,column:16},end:{line:5572,column:84}},type:"binary-expr",locations:[{start:{line:5572,column:16},end:{line:5572,column:48}},{start:{line:5572,column:52},end:{line:5572,column:84}}],line:5572},"333":{loc:{start:{line:5614,column:16},end:{line:5616,column:17}},type:"if",locations:[{start:{line:5614,column:16},end:{line:5616,column:17}},{start:{line:5614,column:16},end:{line:5616,column:17}}],line:5614},"334":{loc:{start:{line:5645,column:12},end:{line:5648,column:13}},type:"if",locations:[{start:{line:5645,column:12},end:{line:5648,column:13}},{start:{line:5645,column:12},end:{line:5648,column:13}}],line:5645},"335":{loc:{start:{line:5649,column:23},end:{line:5649,column:48}},type:"binary-expr",locations:[{start:{line:5649,column:23},end:{line:5649,column:31}},{start:{line:5649,column:35},end:{line:5649,column:48}}],line:5649},"336":{loc:{start:{line:5651,column:12},end:{line:5654,column:13}},type:"if",locations:[{start:{line:5651,column:12},end:{line:5654,column:13}},{start:{line:5651,column:12},end:{line:5654,column:13}}],line:5651},"337":{loc:{start:{line:5655,column:12},end:{line:5658,column:13}},type:"if",locations:[{start:{line:5655,column:12},end:{line:5658,column:13}},{start:{line:5655,column:12},end:{line:5658,column:13}}],line:5655},"338":{loc:{start:{line:5662,column:29},end:{line:5662,column:107}},type:"binary-expr",locations:[{start:{line:5662,column:29},end:{line:5662,column:48}},{start:{line:5662,column:52},end:{line:5662,column:78}},{start:{line:5662,column:82},end:{line:5662,column:107}}],line:5662},"339":{loc:{start:{line:5663,column:35},end:{line:5663,column:123}},type:"binary-expr",locations:[{start:{line:5663,column:35},end:{line:5663,column:54}},{start:{line:5663,column:58},end:{line:5663,column:89}},{start:{line:5663,column:93},end:{line:5663,column:123}}],line:5663},"340":{loc:{start:{line:5664,column:35},end:{line:5664,column:123}},type:"binary-expr",locations:[{start:{line:5664,column:35},end:{line:5664,column:54}},{start:{line:5664,column:58},end:{line:5664,column:89}},{start:{line:5664,column:93},end:{line:5664,column:123}}],line:5664},"341":{loc:{start:{line:5670,column:16},end:{line:5676,column:17}},type:"if",locations:[{start:{line:5670,column:16},end:{line:5676,column:17}},{start:{line:5670,column:16},end:{line:5676,column:17}}],line:5670},"342":{loc:{start:{line:5713,column:24},end:{line:5713,column:39}},type:"binary-expr",locations:[{start:{line:5713,column:24},end:{line:5713,column:33}},{start:{line:5713,column:37},end:{line:5713,column:39}}],line:5713},"343":{loc:{start:{line:5733,column:12},end:{line:5736,column:13}},type:"if",locations:[{start:{line:5733,column:12},end:{line:5736,column:13}},{start:{line:5733,column:12},end:{line:5736,column:13}}],line:5733},"344":{loc:{start:{line:5733,column:16},end:{line:5733,column:53}},type:"binary-expr",locations:[{start:{line:5733,column:16},end:{line:5733,column:40}},{start:{line:5733,column:44},end:{line:5733,column:53}}],line:5733},"345":{loc:{start:{line:5738,column:21},end:{line:5738,column:33}},type:"binary-expr",locations:[{start:{line:5738,column:21},end:{line:5738,column:27}},{start:{line:5738,column:31},end:{line:5738,column:33}}],line:5738},"346":{loc:{start:{line:5739,column:23},end:{line:5739,column:47}},type:"binary-expr",locations:[{start:{line:5739,column:23},end:{line:5739,column:31}},{start:{line:5739,column:35},end:{line:5739,column:47}}],line:5739},"347":{loc:{start:{line:5744,column:16},end:{line:5750,column:17}},type:"if",locations:[{start:{line:5744,column:16},end:{line:5750,column:17}},{start:{line:5744,column:16},end:{line:5750,column:17}}],line:5744},"348":{loc:{start:{line:5774,column:21},end:{line:5774,column:33}},type:"binary-expr",locations:[{start:{line:5774,column:21},end:{line:5774,column:27}},{start:{line:5774,column:31},end:{line:5774,column:33}}],line:5774},"349":{loc:{start:{line:5777,column:29},end:{line:5777,column:49}},type:"binary-expr",locations:[{start:{line:5777,column:29},end:{line:5777,column:44}},{start:{line:5777,column:48},end:{line:5777,column:49}}],line:5777},"350":{loc:{start:{line:5783,column:23},end:{line:5783,column:48}},type:"binary-expr",locations:[{start:{line:5783,column:23},end:{line:5783,column:31}},{start:{line:5783,column:35},end:{line:5783,column:48}}],line:5783},"351":{loc:{start:{line:5791,column:16},end:{line:5799,column:17}},type:"if",locations:[{start:{line:5791,column:16},end:{line:5799,column:17}},{start:{line:5791,column:16},end:{line:5799,column:17}}],line:5791},"352":{loc:{start:{line:5795,column:38},end:{line:5795,column:76}},type:"cond-expr",locations:[{start:{line:5795,column:53},end:{line:5795,column:72}},{start:{line:5795,column:75},end:{line:5795,column:76}}],line:5795}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":0,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0,"516":0,"517":0,"518":0,"519":0,"520":0,"521":0,"522":0,"523":0,"524":0,"525":0,"526":0,"527":0,"528":0,"529":0,"530":0,"531":0,"532":0,"533":0,"534":0,"535":0,"536":0,"537":0,"538":0,"539":0,"540":0,"541":0,"542":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"549":0,"550":0,"551":0,"552":0,"553":0,"554":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"562":0,"563":0,"564":0,"565":0,"566":0,"567":0,"568":0,"569":0,"570":0,"571":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":0,"578":0,"579":0,"580":0,"581":0,"582":0,"583":0,"584":0,"585":0,"586":0,"587":0,"588":0,"589":0,"590":0,"591":0,"592":0,"593":0,"594":0,"595":0,"596":0,"597":0,"598":0,"599":0,"600":0,"601":0,"602":0,"603":0,"604":0,"605":0,"606":0,"607":0,"608":0,"609":0,"610":0,"611":0,"612":0,"613":0,"614":0,"615":0,"616":0,"617":0,"618":0,"619":0,"620":0,"621":0,"622":0,"623":0,"624":0,"625":0,"626":0,"627":0,"628":0,"629":0,"630":0,"631":0,"632":0,"633":0,"634":0,"635":0,"636":0,"637":0,"638":0,"639":0,"640":0,"641":0,"642":0,"643":0,"644":0,"645":0,"646":0,"647":0,"648":0,"649":0,"650":0,"651":0,"652":0,"653":0,"654":0,"655":0,"656":0,"657":0,"658":0,"659":0,"660":0,"661":0,"662":0,"663":0,"664":0,"665":0,"666":0,"667":0,"668":0,"669":0,"670":0,"671":0,"672":0,"673":0,"674":0,"675":0,"676":0,"677":0,"678":0,"679":0,"680":0,"681":0,"682":0,"683":0,"684":0,"685":0,"686":0,"687":0,"688":0,"689":0,"690":0,"691":0,"692":0,"693":0,"694":0,"695":0,"696":0,"697":0,"698":0,"699":0,"700":0,"701":0,"702":0,"703":0,"704":0,"705":0,"706":0,"707":0,"708":0,"709":0,"710":0,"711":0,"712":0,"713":0,"714":0,"715":0,"716":0,"717":0,"718":0,"719":0,"720":0,"721":0,"722":0,"723":0,"724":0,"725":0,"726":0,"727":0,"728":0,"729":0,"730":0,"731":0,"732":0,"733":0,"734":0,"735":0,"736":0,"737":0,"738":0,"739":0,"740":0,"741":0,"742":0,"743":0,"744":0,"745":0,"746":0,"747":0,"748":0,"749":0,"750":0,"751":0,"752":0,"753":0,"754":0,"755":0,"756":0,"757":0,"758":0,"759":0,"760":0,"761":0,"762":0,"763":0,"764":0,"765":0,"766":0,"767":0,"768":0,"769":0,"770":0,"771":0,"772":0,"773":0,"774":0,"775":0,"776":0,"777":0,"778":0,"779":0,"780":0,"781":0,"782":0,"783":0,"784":0,"785":0,"786":0,"787":0,"788":0,"789":0,"790":0,"791":0,"792":0,"793":0,"794":0,"795":0,"796":0,"797":0,"798":0,"799":0,"800":0,"801":0,"802":0,"803":0,"804":0,"805":0,"806":0,"807":0,"808":0,"809":0,"810":0,"811":0,"812":0,"813":0,"814":0,"815":0,"816":0,"817":0,"818":0,"819":0,"820":0,"821":0,"822":0,"823":0,"824":0,"825":0,"826":0,"827":0,"828":0,"829":0,"830":0,"831":0,"832":0,"833":0,"834":0,"835":0,"836":0,"837":0,"838":0,"839":0,"840":0,"841":0,"842":0,"843":0,"844":0,"845":0,"846":0,"847":0,"848":0,"849":0,"850":0,"851":0,"852":0,"853":0,"854":0,"855":0,"856":0,"857":0,"858":0,"859":0,"860":0,"861":0,"862":0,"863":0,"864":0,"865":0,"866":0,"867":0,"868":0,"869":0,"870":0,"871":0,"872":0,"873":0,"874":0,"875":0,"876":0,"877":0,"878":0,"879":0,"880":0,"881":0,"882":0,"883":0,"884":0,"885":0,"886":0,"887":0,"888":0,"889":0,"890":0,"891":0,"892":0,"893":0,"894":0,"895":0,"896":0,"897":0,"898":0,"899":0,"900":0,"901":0,"902":0,"903":0,"904":0,"905":0,"906":0,"907":0,"908":0,"909":0,"910":0,"911":0,"912":0,"913":0,"914":0,"915":0,"916":0,"917":0,"918":0,"919":0,"920":0,"921":0,"922":0,"923":0,"924":0,"925":0,"926":0,"927":0,"928":0,"929":0,"930":0,"931":0,"932":0,"933":0,"934":0,"935":0,"936":0,"937":0,"938":0,"939":0,"940":0,"941":0,"942":0,"943":0,"944":0,"945":0,"946":0,"947":0,"948":0,"949":0,"950":0,"951":0,"952":0,"953":0,"954":0,"955":0,"956":0,"957":0,"958":0,"959":0,"960":0,"961":0,"962":0,"963":0,"964":0,"965":0,"966":0,"967":0,"968":0,"969":0,"970":0,"971":0,"972":0,"973":0,"974":0,"975":0,"976":0,"977":0,"978":0,"979":0,"980":0,"981":0,"982":0,"983":0,"984":0,"985":0,"986":0,"987":0,"988":0,"989":0,"990":0,"991":0,"992":0,"993":0,"994":0,"995":0,"996":0,"997":0,"998":0,"999":0,"1000":0,"1001":0,"1002":0,"1003":0,"1004":0,"1005":0,"1006":0,"1007":0,"1008":0,"1009":0,"1010":0,"1011":0,"1012":0,"1013":0,"1014":0,"1015":0,"1016":0,"1017":0,"1018":0,"1019":0,"1020":0,"1021":0,"1022":0,"1023":0,"1024":0,"1025":0,"1026":0,"1027":0,"1028":0,"1029":0,"1030":0,"1031":0,"1032":0,"1033":0,"1034":0,"1035":0,"1036":0,"1037":0,"1038":0,"1039":0,"1040":0,"1041":0,"1042":0,"1043":0,"1044":0,"1045":0,"1046":0,"1047":0,"1048":0,"1049":0,"1050":0,"1051":0,"1052":0,"1053":0,"1054":0,"1055":0,"1056":0,"1057":0,"1058":0,"1059":0,"1060":0,"1061":0,"1062":0,"1063":0,"1064":0,"1065":0,"1066":0,"1067":0,"1068":0,"1069":0,"1070":0,"1071":0,"1072":0,"1073":0,"1074":0,"1075":0,"1076":0,"1077":0,"1078":0,"1079":0,"1080":0,"1081":0,"1082":0,"1083":0,"1084":0,"1085":0,"1086":0,"1087":0,"1088":0,"1089":0,"1090":0,"1091":0,"1092":0,"1093":0,"1094":0,"1095":0,"1096":0,"1097":0,"1098":0,"1099":0,"1100":0,"1101":0,"1102":0,"1103":0,"1104":0,"1105":0,"1106":0,"1107":0,"1108":0,"1109":0,"1110":0,"1111":0,"1112":0,"1113":0,"1114":0,"1115":0,"1116":0,"1117":0,"1118":0,"1119":0,"1120":0,"1121":0,"1122":0,"1123":0,"1124":0,"1125":0,"1126":0,"1127":0,"1128":0,"1129":0,"1130":0,"1131":0,"1132":0,"1133":0,"1134":0,"1135":0,"1136":0,"1137":0,"1138":0,"1139":0,"1140":0,"1141":0,"1142":0,"1143":0,"1144":0,"1145":0,"1146":0,"1147":0,"1148":0,"1149":0,"1150":0,"1151":0,"1152":0,"1153":0,"1154":0,"1155":0,"1156":0,"1157":0,"1158":0,"1159":0,"1160":0,"1161":0,"1162":0,"1163":0,"1164":0,"1165":0,"1166":0,"1167":0,"1168":0,"1169":0,"1170":0,"1171":0,"1172":0,"1173":0,"1174":0,"1175":0,"1176":0,"1177":0,"1178":0,"1179":0,"1180":0,"1181":0,"1182":0,"1183":0,"1184":0,"1185":0,"1186":0,"1187":0,"1188":0,"1189":0,"1190":0,"1191":0,"1192":0,"1193":0,"1194":0,"1195":0,"1196":0,"1197":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0],"125":[0,0],"126":[0,0],"127":[0,0],"128":[0,0],"129":[0,0],"130":[0,0],"131":[0,0],"132":[0,0],"133":[0,0],"134":[0,0],"135":[0,0],"136":[0,0],"137":[0,0],"138":[0,0],"139":[0,0],"140":[0,0],"141":[0,0],"142":[0,0],"143":[0,0],"144":[0,0],"145":[0,0,0],"146":[0,0],"147":[0,0],"148":[0,0],"149":[0,0,0],"150":[0,0],"151":[0,0],"152":[0,0],"153":[0,0],"154":[0,0,0],"155":[0,0],"156":[0,0],"157":[0,0],"158":[0,0],"159":[0,0],"160":[0,0],"161":[0,0],"162":[0,0],"163":[0,0],"164":[0,0],"165":[0,0],"166":[0,0],"167":[0,0],"168":[0,0],"169":[0,0],"170":[0,0],"171":[0,0],"172":[0,0],"173":[0,0],"174":[0,0],"175":[0,0],"176":[0,0],"177":[0,0],"178":[0,0],"179":[0,0],"180":[0,0],"181":[0,0],"182":[0,0],"183":[0,0],"184":[0,0],"185":[0,0],"186":[0,0],"187":[0,0],"188":[0,0],"189":[0,0],"190":[0,0],"191":[0,0],"192":[0,0,0,0],"193":[0,0],"194":[0,0],"195":[0,0],"196":[0,0],"197":[0,0],"198":[0,0],"199":[0,0],"200":[0,0],"201":[0,0],"202":[0,0],"203":[0,0],"204":[0,0],"205":[0,0],"206":[0,0],"207":[0,0],"208":[0,0],"209":[0,0],"210":[0,0],"211":[0,0],"212":[0,0,0],"213":[0,0],"214":[0,0],"215":[0,0],"216":[0,0],"217":[0,0],"218":[0,0],"219":[0,0],"220":[0,0,0],"221":[0,0],"222":[0,0],"223":[0,0],"224":[0,0],"225":[0,0],"226":[0,0],"227":[0,0],"228":[0,0],"229":[0,0],"230":[0,0],"231":[0,0],"232":[0,0],"233":[0,0],"234":[0,0],"235":[0,0],"236":[0,0],"237":[0,0],"238":[0,0],"239":[0,0],"240":[0,0],"241":[0,0],"242":[0,0],"243":[0,0],"244":[0,0],"245":[0,0],"246":[0,0],"247":[0,0],"248":[0,0],"249":[0,0],"250":[0,0],"251":[0,0],"252":[0,0],"253":[0,0],"254":[0,0],"255":[0,0],"256":[0,0],"257":[0,0],"258":[0,0],"259":[0,0],"260":[0,0],"261":[0,0],"262":[0,0],"263":[0,0],"264":[0,0],"265":[0,0],"266":[0,0],"267":[0,0],"268":[0,0],"269":[0,0],"270":[0,0],"271":[0,0],"272":[0,0],"273":[0,0],"274":[0,0],"275":[0,0],"276":[0,0],"277":[0,0],"278":[0,0],"279":[0,0],"280":[0,0],"281":[0,0],"282":[0,0],"283":[0,0],"284":[0,0],"285":[0,0],"286":[0,0],"287":[0,0],"288":[0,0],"289":[0,0],"290":[0,0],"291":[0,0],"292":[0,0],"293":[0,0],"294":[0,0],"295":[0,0],"296":[0,0],"297":[0,0],"298":[0,0],"299":[0,0],"300":[0,0],"301":[0,0],"302":[0,0],"303":[0,0],"304":[0,0],"305":[0,0],"306":[0,0],"307":[0,0],"308":[0,0],"309":[0,0],"310":[0,0],"311":[0,0],"312":[0,0],"313":[0,0],"314":[0,0],"315":[0,0],"316":[0,0],"317":[0,0],"318":[0,0],"319":[0,0],"320":[0,0],"321":[0,0,0],"322":[0,0],"323":[0,0],"324":[0,0],"325":[0,0],"326":[0,0],"327":[0,0],"328":[0,0],"329":[0,0],"330":[0,0],"331":[0,0],"332":[0,0],"333":[0,0],"334":[0,0],"335":[0,0],"336":[0,0],"337":[0,0],"338":[0,0,0],"339":[0,0,0],"340":[0,0,0],"341":[0,0],"342":[0,0],"343":[0,0],"344":[0,0],"345":[0,0],"346":[0,0],"347":[0,0],"348":[0,0],"349":[0,0],"350":[0,0],"351":[0,0],"352":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"1e13507780108878ff5a225bb0ab3d0d383df74e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1ks4ntaci2=function(){return actualCoverage;};}return actualCoverage;}cov_1ks4ntaci2();cov_1ks4ntaci2().s[0]++;/*!*/ // Copyright 2014 Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
(function(){"use strict";cov_1ks4ntaci2().f[0]++;var Context=(cov_1ks4ntaci2().s[1]++,require('./context'));var Http=(cov_1ks4ntaci2().s[2]++,require('./http'));var Async=(cov_1ks4ntaci2().s[3]++,require('./async'));var Paths=(cov_1ks4ntaci2().s[4]++,require('./paths').Paths);var Class=(cov_1ks4ntaci2().s[5]++,require('./jquery.class').Class);var utils=(cov_1ks4ntaci2().s[6]++,require('./utils'));var root=(cov_1ks4ntaci2().s[7]++,(cov_1ks4ntaci2().b[0][0]++,exports)||(cov_1ks4ntaci2().b[0][1]++,this));var Service=(cov_1ks4ntaci2().s[8]++,null);/**
     * Contains functionality common to Splunk Enterprise and Splunk Storm.
     * 
     * This class is an implementation detail and is therefore SDK-private.
     * 
     * @class splunkjs.private.BaseService
     * @extends splunkjs.Context
     */var BaseService=(cov_1ks4ntaci2().s[9]++,Context.extend({init:function(){cov_1ks4ntaci2().f[1]++;cov_1ks4ntaci2().s[10]++;this._super.apply(this,arguments);}}));/**
     * Provides a root access point to Splunk functionality with typed access to 
     * Splunk resources such as searches, indexes, inputs, and more. Provides
     * methods to authenticate and create specialized instances of the service.
     *
     * @class splunkjs.Service
     * @extends splunkjs.private.BaseService
     */cov_1ks4ntaci2().s[11]++;module.exports=root=Service=BaseService.extend({/**
         * Constructor for `splunkjs.Service`.
         *
         * @constructor
         * @param {splunkjs.Http} http An instance of a `splunkjs.Http` class.
         * @param {Object} params A dictionary of optional parameters: 
         *    - `scheme` (_string_): The scheme ("http" or "https") for accessing Splunk.
         *    - `host` (_string_): The host name (the default is "localhost").
         *    - `port` (_integer_): The port number (the default is 8089).
         *    - `username` (_string_): The Splunk account username, which is used to authenticate the Splunk instance.
         *    - `password` (_string_): The password, which is used to authenticate the Splunk instance.
         *    - `owner` (_string_): The owner (username) component of the namespace.
         *    - `app` (_string_): The app component of the namespace.
         *    - `sessionKey` (_string_): The current session token.
         *    - `autologin` (_boolean_): `true` to automatically try to log in again if the session terminates, `false` if not (`true` by default).
         *    - `version` (_string_): The version string for Splunk, for example "4.3.2" (the default is "5.0").
         * @return {splunkjs.Service} A new `splunkjs.Service` instance.
         *
         * @method splunkjs.Service
         */init:function(){cov_1ks4ntaci2().f[2]++;cov_1ks4ntaci2().s[12]++;this._super.apply(this,arguments);// We perform the bindings so that every function works 
// properly when it is passed as a callback.
cov_1ks4ntaci2().s[13]++;this.specialize=utils.bind(this,this.specialize);cov_1ks4ntaci2().s[14]++;this.apps=utils.bind(this,this.apps);cov_1ks4ntaci2().s[15]++;this.configurations=utils.bind(this,this.configurations);cov_1ks4ntaci2().s[16]++;this.indexes=utils.bind(this,this.indexes);cov_1ks4ntaci2().s[17]++;this.savedSearches=utils.bind(this,this.savedSearches);cov_1ks4ntaci2().s[18]++;this.jobs=utils.bind(this,this.jobs);cov_1ks4ntaci2().s[19]++;this.users=utils.bind(this,this.users);cov_1ks4ntaci2().s[20]++;this.currentUser=utils.bind(this,this.currentUser);cov_1ks4ntaci2().s[21]++;this.views=utils.bind(this,this.views);cov_1ks4ntaci2().s[22]++;this.firedAlertGroups=utils.bind(this,this.firedAlertGroups);cov_1ks4ntaci2().s[23]++;this.dataModels=utils.bind(this,this.dataModels);},/**
         * Creates a specialized version of the current `Service` instance for
         * a specific namespace context. 
         *
         * @example
         *
         *      var svc = ...;
         *      var newService = svc.specialize("myuser", "unix");
         *
         * @param {String} owner The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         * @param {String} app The app context for this resource (such as "search"). The "-" wildcard means all apps.
         * @return {splunkjs.Service} The specialized `Service` instance.
         *
         * @method splunkjs.Service
         */specialize:function(owner,app){cov_1ks4ntaci2().f[3]++;cov_1ks4ntaci2().s[24]++;return new Service(this.http,{scheme:this.scheme,host:this.host,port:this.port,username:this.username,password:this.password,owner:owner,app:app,sessionKey:this.sessionKey,version:this.version});},/**
         * Gets the `Applications` collection, which allows you to 
         * list installed apps and retrieve information about them.
         *
         * @example
         *
         *      // List installed apps
         *      var apps = svc.apps();
         *      apps.fetch(function(err) { console.log(apps.list()); });
         *
         * @return {splunkjs.Service.Collection} The `Applications` collection.
         *
         * @endpoint apps/local
         * @method splunkjs.Service
         * @see splunkjs.Service.Applications
         */apps:function(){cov_1ks4ntaci2().f[4]++;cov_1ks4ntaci2().s[25]++;return new root.Applications(this);},/**
         * Gets the `Configurations` collection, which lets you 
         * create, list, and retrieve configuration (.conf) files.
         *
         * @example
         *
         *      // List all properties in the 'props.conf' file
         *      var files = svc.configurations();
         *      files.item("props", function(err, propsFile) {
         *          propsFile.fetch(function(err, props) {
         *              console.log(props.properties()); 
         *          });
         *      });
         *
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Configurations} The `Configurations` collection.
         *
         * @endpoint configs
         * @method splunkjs.Service
         * @see splunkjs.Service.Configurations
         */configurations:function(namespace){cov_1ks4ntaci2().f[5]++;cov_1ks4ntaci2().s[26]++;return new root.Configurations(this,namespace);},/**
         * Gets the `Indexes` collection, which lets you create, 
         * list, and update indexes. 
         *
         * @example
         *
         *      // Check if we have an _internal index
         *      var indexes = svc.indexes();
         *      indexes.fetch(function(err, indexes) {
         *          var index = indexes.item("_internal");
         *          console.log("Was index found: " + !!index);
         *          // `index` is an Index object.
         *      });
         *
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Indexes} The `Indexes` collection.
         *
         * @endpoint data/indexes
         * @method splunkjs.Service
         * @see splunkjs.Service.Indexes
         */indexes:function(namespace){cov_1ks4ntaci2().f[6]++;cov_1ks4ntaci2().s[27]++;return new root.Indexes(this,namespace);},/**
         * Gets the `SavedSearches` collection, which lets you
         * create, list, and update saved searches. 
         *
         * @example
         *
         *      // List all # of saved searches
         *      var savedSearches = svc.savedSearches();
         *      savedSearches.fetch(function(err, savedSearches) {
         *          console.log("# Of Saved Searches: " + savedSearches.list().length);
         *      });
         *
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.SavedSearches} The `SavedSearches` collection.
         *
         * @endpoint saved/searches
         * @method splunkjs.Service
         * @see splunkjs.Service.SavedSearches
         */savedSearches:function(namespace){cov_1ks4ntaci2().f[7]++;cov_1ks4ntaci2().s[28]++;return new root.SavedSearches(this,namespace);},/**
         * Gets the `StoragePasswords` collection, which lets you
         * create, list, and update storage passwords. 
         *
         * @example
         *
         *      // List all # of storage passwords
         *      var storagePasswords = svc.storagePasswords();
         *      storagePasswords.fetch(function(err, storagePasswords) {
         *          console.log("# of Storage Passwords: " + storagePasswords.list().length);
         *      });
         *
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.StoragePasswords} The `StoragePasswords` collection.
         *
         * @endpoint storage/passwords
         * @method splunkjs.Service
         * @see splunkjs.Service.StoragePasswords
         */storagePasswords:function(namespace){cov_1ks4ntaci2().f[8]++;cov_1ks4ntaci2().s[29]++;return new root.StoragePasswords(this,namespace);},/**
         * Gets the `FiredAlertGroupCollection` collection, which lets you
         * list alert groups.
         * 
         * @example
         *      
         *      // List all # of fired alert groups
         *      var firedAlertGroups = svc.firedAlertGroups();
         *      firedAlertGroups.fetch(function(err, firedAlertGroups) {
         *          console.log("# of alert groups: " + firedAlertGroups.list().length);
         *      });
         *
         *
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.FiredAlertGroupCollection} The `FiredAlertGroupCollection` collection.
         *
         * @endpoint saved/searches
         * @method splunkjs.Service
         * @see splunkjs.Service.FiredAlertGroupCollection
         */firedAlertGroups:function(namespace){cov_1ks4ntaci2().f[9]++;cov_1ks4ntaci2().s[30]++;return new root.FiredAlertGroupCollection(this,namespace);},/**
         * Gets the `Jobs` collection, which lets you create, list,
         * and retrieve search jobs. 
         *
         * @example
         *
         *      // List all job IDs
         *      var jobs = svc.jobs();
         *      jobs.fetch(function(err, jobs) {
         *          var list = jobs.list();
         *          for(var i = 0; i < list.length; i++) {
         *              console.log("Job " + (i+1) + ": " + list[i].sid);
         *          }
         *      });
         *
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Jobs} The `Jobs` collection.
         *
         * @endpoint search/jobs
         * @method splunkjs.Service
         * @see splunkjs.Service.Jobs
         */jobs:function(namespace){cov_1ks4ntaci2().f[10]++;cov_1ks4ntaci2().s[31]++;return new root.Jobs(this,namespace);},/**
         * Gets the `DataModels` collection, which lets you create, list,
         * and retrieve data models.
         *
         * @endpoint datamodel/model
         * @method splunkjs.Service
         * @see splunkjs.Service.DataModels
         */dataModels:function(namespace){cov_1ks4ntaci2().f[11]++;cov_1ks4ntaci2().s[32]++;return new root.DataModels(this,namespace);},/**
         * Gets the `Users` collection, which lets you create, 
         * list, and retrieve users. 
         *
         * @example
         *
         *      // List all usernames
         *      var users = svc.users();
         *      users.fetch(function(err, users) {
         *          var list = users.list();
         *          for(var i = 0; i < list.length; i++) {
         *              console.log("User " + (i+1) + ": " + list[i].properties().name);
         *          }
         *      });
         *
         * @return {splunkjs.Service.Users} The `Users` collection.
         *
         * @endpoint authorization/users
         * @method splunkjs.Service
         * @see splunkjs.Service.Users
         */users:function(){cov_1ks4ntaci2().f[12]++;cov_1ks4ntaci2().s[33]++;return new root.Users(this);},/**
         * Gets the `Views` collection, which lets you create,
         * list, and retrieve views (custom UIs built in Splunk's app framework). 
         *
         * @example
         *
         *      // List all views
         *      var views = svc.views();
         *      views.fetch(function(err, views) {
         *          var list = views.list();
         *          for(var i = 0; i < list.length; i++) {
         *              console.log("View " + (i+1) + ": " + list[i].properties().name);
         *          }
         *      });
         *
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Views} The `Views` collection.
         *
         * @endpoint data/ui/views
         * @method splunkjs.Service
         * @see splunkjs.Service.Views
         */views:function(namespace){cov_1ks4ntaci2().f[13]++;cov_1ks4ntaci2().s[34]++;return new root.Views(this,namespace);},/**
         * Creates a search job with a given search query and optional parameters, including `exec_mode` to specify the type of search:
         *
         *    - Use `exec_mode=normal` to return a search job ID immediately (default).
         *      Poll for completion to find out when you can retrieve search results. 
         *
         *    - Use `exec_mode=blocking` to return the search job ID when the search has finished.
         * 
         * To run a oneshot search, which does not create a job but rather returns the search results, use `Service.oneshotSearch`.
         *
         * @example
         *
         *      service.search("search ERROR", {id: "myjob_123"}, function(err, newJob) {
         *          console.log("CREATED": newJob.sid);
         *      });
         *
         * @param {String} query The search query.
         * @param {Object} params A dictionary of properties for the job. For a list of available parameters, see <a href=" http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams" target="_blank">Search job parameters</a> on Splunk Developer Portal.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @param {Function} callback A function to call with the created job: `(err, createdJob)`.
         *
         * @endpoint search/jobs
         * @method splunkjs.Service
         */search:function(query,params,namespace,callback){cov_1ks4ntaci2().f[14]++;cov_1ks4ntaci2().s[35]++;if((cov_1ks4ntaci2().b[2][0]++,!callback)&&(cov_1ks4ntaci2().b[2][1]++,utils.isFunction(namespace))){cov_1ks4ntaci2().b[1][0]++;cov_1ks4ntaci2().s[36]++;callback=namespace;cov_1ks4ntaci2().s[37]++;namespace=null;}else{cov_1ks4ntaci2().b[1][1]++;}var jobs=(cov_1ks4ntaci2().s[38]++,new root.Jobs(this,namespace));cov_1ks4ntaci2().s[39]++;return jobs.search(query,params,callback);},/**
         * A convenience method to get a `Job` by its sid.
         *
         * @param {String} sid The search ID for a search job.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @param {Function} callback A function to call with the created job: `(err, job)`.
         *
         * @endpoint search/jobs
         * @method splunkjs.Service
         */getJob:function(sid,namespace,callback){cov_1ks4ntaci2().f[15]++;cov_1ks4ntaci2().s[40]++;if((cov_1ks4ntaci2().b[4][0]++,!callback)&&(cov_1ks4ntaci2().b[4][1]++,utils.isFunction(namespace))){cov_1ks4ntaci2().b[3][0]++;cov_1ks4ntaci2().s[41]++;callback=namespace;cov_1ks4ntaci2().s[42]++;namespace=null;}else{cov_1ks4ntaci2().b[3][1]++;}var job=(cov_1ks4ntaci2().s[43]++,new root.Job(this,sid,namespace));cov_1ks4ntaci2().s[44]++;return job.fetch({},callback);},/**
         * Creates a oneshot search from a given search query and optional parameters.
         *
         * @example
         *
         *      service.oneshotSearch("search ERROR", {id: "myjob_123"}, function(err, results) {
         *          console.log("RESULT FIELDS": results.fields);
         *      });
         *
         * @param {String} query The search query.
         * @param {Object} params A dictionary of properties for the search:
         *    - `output_mode` (_string_): Specifies the output format of the results (XML, JSON, or CSV).
         *    - `earliest_time` (_string_): Specifies the earliest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.
         *    - `latest_time` (_string_): Specifies the latest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.
         *    - `rf` (_string_): Specifies one or more fields to add to the search.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @param {Function} callback A function to call with the results of the search: `(err, results)`.
         *
         * @endpoint search/jobs
         * @method splunkjs.Service
         */oneshotSearch:function(query,params,namespace,callback){cov_1ks4ntaci2().f[16]++;cov_1ks4ntaci2().s[45]++;if((cov_1ks4ntaci2().b[6][0]++,!callback)&&(cov_1ks4ntaci2().b[6][1]++,utils.isFunction(namespace))){cov_1ks4ntaci2().b[5][0]++;cov_1ks4ntaci2().s[46]++;callback=namespace;cov_1ks4ntaci2().s[47]++;namespace=null;}else{cov_1ks4ntaci2().b[5][1]++;}var jobs=(cov_1ks4ntaci2().s[48]++,new root.Jobs(this,namespace));cov_1ks4ntaci2().s[49]++;return jobs.oneshotSearch(query,params,callback);},/**
         * Gets the user that is currently logged in.
         *
         * @example
         *
         *      service.currentUser(function(err, user) {
         *          console.log("Real name: ", user.properties().realname);
         *      });
         *
         * @param {Function} callback A function to call with the user instance: `(err, user)`.
         * @return {splunkjs.Service.currentUser} The `User`.
         *
         * @endpoint authorization/current-context
         * @method splunkjs.Service
         */currentUser:function(callback){cov_1ks4ntaci2().f[17]++;cov_1ks4ntaci2().s[50]++;callback=(cov_1ks4ntaci2().b[7][0]++,callback)||(cov_1ks4ntaci2().b[7][1]++,function(){cov_1ks4ntaci2().f[18]++;});var that=(cov_1ks4ntaci2().s[51]++,this);var req=(cov_1ks4ntaci2().s[52]++,this.get(Paths.currentUser,{},function(err,response){cov_1ks4ntaci2().f[19]++;cov_1ks4ntaci2().s[53]++;if(err){cov_1ks4ntaci2().b[8][0]++;cov_1ks4ntaci2().s[54]++;callback(err);}else{cov_1ks4ntaci2().b[8][1]++;var username=(cov_1ks4ntaci2().s[55]++,response.data.entry[0].content.username);var user=(cov_1ks4ntaci2().s[56]++,new root.User(that,username));cov_1ks4ntaci2().s[57]++;user.fetch(function(){cov_1ks4ntaci2().f[20]++;cov_1ks4ntaci2().s[58]++;if(req.wasAborted){cov_1ks4ntaci2().b[9][0]++;cov_1ks4ntaci2().s[59]++;return;// aborted, so ignore
}else{cov_1ks4ntaci2().b[9][1]++;cov_1ks4ntaci2().s[60]++;callback.apply(null,arguments);}});}}));cov_1ks4ntaci2().s[61]++;return req;},/**
         * Gets configuration information about the server.
         *
         * @example
         *
         *      service.serverInfo(function(err, info) {
         *          console.log("Splunk Version: ", info.properties().version);
         *      });
         *
         * @param {Function} callback A function to call with the server info: `(err, info)`.
         *
         * @endpoint server/info
         * @method splunkjs.Service
         */serverInfo:function(callback){cov_1ks4ntaci2().f[21]++;cov_1ks4ntaci2().s[62]++;callback=(cov_1ks4ntaci2().b[10][0]++,callback)||(cov_1ks4ntaci2().b[10][1]++,function(){cov_1ks4ntaci2().f[22]++;});var serverInfo=(cov_1ks4ntaci2().s[63]++,new root.ServerInfo(this));cov_1ks4ntaci2().s[64]++;return serverInfo.fetch(callback);},/**
         * Parses a search query.
         *
         * @example
         *
         *      service.parse("search index=_internal | head 1", function(err, parse) {
         *          console.log("Commands: ", parse.commands);
         *      });
         *
         * @param {String} query The search query to parse.
         * @param {Object} params An object of options for the parser:
         *    - `enable_lookups` (_boolean_): If `true`, performs reverse lookups to expand the search expression.
         *    - `output_mode` (_string_): The output format (XML or JSON).
         *    - `parse_only` (_boolean_): If `true`, disables the expansion of search due to evaluation of subsearches, time term expansion, lookups, tags, eventtypes, and sourcetype alias.
         *    - `reload_macros` (_boolean_): If `true`, reloads macro definitions from macros.conf.
         * @param {Function} callback A function to call with the parse info: `(err, parse)`.
         *
         * @endpoint search/parser
         * @method splunkjs.Service
         */parse:function(query,params,callback){cov_1ks4ntaci2().f[23]++;cov_1ks4ntaci2().s[65]++;if((cov_1ks4ntaci2().b[12][0]++,!callback)&&(cov_1ks4ntaci2().b[12][1]++,utils.isFunction(params))){cov_1ks4ntaci2().b[11][0]++;cov_1ks4ntaci2().s[66]++;callback=params;cov_1ks4ntaci2().s[67]++;params={};}else{cov_1ks4ntaci2().b[11][1]++;}cov_1ks4ntaci2().s[68]++;callback=(cov_1ks4ntaci2().b[13][0]++,callback)||(cov_1ks4ntaci2().b[13][1]++,function(){cov_1ks4ntaci2().f[24]++;});cov_1ks4ntaci2().s[69]++;params=(cov_1ks4ntaci2().b[14][0]++,params)||(cov_1ks4ntaci2().b[14][1]++,{});cov_1ks4ntaci2().s[70]++;params.q=query;cov_1ks4ntaci2().s[71]++;return this.get(Paths.parser,params,function(err,response){cov_1ks4ntaci2().f[25]++;cov_1ks4ntaci2().s[72]++;if(err){cov_1ks4ntaci2().b[15][0]++;cov_1ks4ntaci2().s[73]++;callback(err);}else{cov_1ks4ntaci2().b[15][1]++;cov_1ks4ntaci2().s[74]++;callback(null,response.data);}});},/**
         * Provides auto-complete suggestions for search queries.
         *
         * @example
         *
         *      service.typeahead("index=", 10, function(err, options) {
         *          console.log("Autocompletion options: ", options);
         *      });
         *
         * @param {String} prefix The query fragment to autocomplete.
         * @param {Number} count The number of options to return (optional).
         * @param {Function} callback A function to call with the autocompletion info: `(err, options)`.
         *
         * @endpoint search/typeahead
         * @method splunkjs.Service
         */typeahead:function(prefix,count,callback){cov_1ks4ntaci2().f[26]++;cov_1ks4ntaci2().s[75]++;if((cov_1ks4ntaci2().b[17][0]++,!callback)&&(cov_1ks4ntaci2().b[17][1]++,utils.isFunction(count))){cov_1ks4ntaci2().b[16][0]++;cov_1ks4ntaci2().s[76]++;callback=count;cov_1ks4ntaci2().s[77]++;count=10;}else{cov_1ks4ntaci2().b[16][1]++;}cov_1ks4ntaci2().s[78]++;callback=(cov_1ks4ntaci2().b[18][0]++,callback)||(cov_1ks4ntaci2().b[18][1]++,function(){cov_1ks4ntaci2().f[27]++;});var params=(cov_1ks4ntaci2().s[79]++,{count:(cov_1ks4ntaci2().b[19][0]++,count)||(cov_1ks4ntaci2().b[19][1]++,10),prefix:prefix});cov_1ks4ntaci2().s[80]++;return this.get(Paths.typeahead,params,function(err,response){cov_1ks4ntaci2().f[28]++;cov_1ks4ntaci2().s[81]++;if(err){cov_1ks4ntaci2().b[20][0]++;cov_1ks4ntaci2().s[82]++;callback(err);}else{cov_1ks4ntaci2().b[20][1]++;var results=(cov_1ks4ntaci2().s[83]++,((cov_1ks4ntaci2().b[21][0]++,response.data)||(cov_1ks4ntaci2().b[21][1]++,{})).results);cov_1ks4ntaci2().s[84]++;callback(null,(cov_1ks4ntaci2().b[22][0]++,results)||(cov_1ks4ntaci2().b[22][1]++,[]));}});},/**
         * Logs an event to Splunk.
         *
         * @example
         *
         *      service.log("A new event", {index: "_internal", sourcetype: "mysourcetype"}, function(err, result) {
         *          console.log("Submitted event: ", result);
         *      });
         *
         * @param {String|Object} event The text for this event, or a JSON object.
         * @param {Object} params A dictionary of parameters for indexing: 
         *    - `index` (_string_): The index to send events from this input to.
         *    - `host` (_string_): The value to populate in the Host field for events from this data input. 
         *    - `host_regex` (_string_): A regular expression used to extract the host value from each event. 
         *    - `source` (_string_): The value to populate in the Source field for events from this data input.
         *    - `sourcetype` (_string_): The value to populate in the Sourcetype field for events from this data input.
         * @param {Function} callback A function to call when the event is submitted: `(err, result)`.
         *
         * @endpoint receivers/simple
         * @method splunkjs.Service
         */log:function(event,params,callback){cov_1ks4ntaci2().f[29]++;cov_1ks4ntaci2().s[85]++;if((cov_1ks4ntaci2().b[24][0]++,!callback)&&(cov_1ks4ntaci2().b[24][1]++,utils.isFunction(params))){cov_1ks4ntaci2().b[23][0]++;cov_1ks4ntaci2().s[86]++;callback=params;cov_1ks4ntaci2().s[87]++;params={};}else{cov_1ks4ntaci2().b[23][1]++;}cov_1ks4ntaci2().s[88]++;callback=(cov_1ks4ntaci2().b[25][0]++,callback)||(cov_1ks4ntaci2().b[25][1]++,function(){cov_1ks4ntaci2().f[30]++;});cov_1ks4ntaci2().s[89]++;params=(cov_1ks4ntaci2().b[26][0]++,params)||(cov_1ks4ntaci2().b[26][1]++,{});// If the event is a JSON object, convert it to a string.
cov_1ks4ntaci2().s[90]++;if(utils.isObject(event)){cov_1ks4ntaci2().b[27][0]++;cov_1ks4ntaci2().s[91]++;event=JSON.stringify(event);}else{cov_1ks4ntaci2().b[27][1]++;}var path=(cov_1ks4ntaci2().s[92]++,this.paths.submitEvent);var method=(cov_1ks4ntaci2().s[93]++,"POST");var headers=(cov_1ks4ntaci2().s[94]++,{"Content-Type":"text/plain"});var body=(cov_1ks4ntaci2().s[95]++,event);var get=(cov_1ks4ntaci2().s[96]++,params);var post=(cov_1ks4ntaci2().s[97]++,{});var req=(cov_1ks4ntaci2().s[98]++,this.request(path,method,get,post,body,headers,function(err,response){cov_1ks4ntaci2().f[31]++;cov_1ks4ntaci2().s[99]++;if(err){cov_1ks4ntaci2().b[28][0]++;cov_1ks4ntaci2().s[100]++;callback(err);}else{cov_1ks4ntaci2().b[28][1]++;cov_1ks4ntaci2().s[101]++;callback(null,response.data);}}));cov_1ks4ntaci2().s[102]++;return req;}});/**
     * Provides a base definition for a Splunk endpoint, which is a combination of
     * a specific service and path. Provides convenience methods for GET, POST, and
     * DELETE operations used in splunkjs, automatically preparing the path correctly
     * and allowing for relative calls.
     *
     * @class splunkjs.Service.Endpoint
     */cov_1ks4ntaci2().s[103]++;root.Endpoint=Class.extend({/**
         * Constructor for `splunkjs.Service.Endpoint`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} qualifiedPath A fully-qualified relative endpoint path (for example, "/services/search/jobs").
         * @return {splunkjs.Service.Endpoint} A new `splunkjs.Service.Endpoint` instance.
         *
         * @method splunkjs.Service.Endpoint
         */init:function(service,qualifiedPath){cov_1ks4ntaci2().f[32]++;cov_1ks4ntaci2().s[104]++;if(!service){cov_1ks4ntaci2().b[29][0]++;cov_1ks4ntaci2().s[105]++;throw new Error("Passed in a null Service.");}else{cov_1ks4ntaci2().b[29][1]++;}cov_1ks4ntaci2().s[106]++;if(!qualifiedPath){cov_1ks4ntaci2().b[30][0]++;cov_1ks4ntaci2().s[107]++;throw new Error("Passed in an empty path.");}else{cov_1ks4ntaci2().b[30][1]++;}cov_1ks4ntaci2().s[108]++;this.service=service;cov_1ks4ntaci2().s[109]++;this.qualifiedPath=qualifiedPath;// We perform the bindings so that every function works 
// properly when it is passed as a callback.
cov_1ks4ntaci2().s[110]++;this.get=utils.bind(this,this.get);cov_1ks4ntaci2().s[111]++;this.get_v2=utils.bind(this,this.get_v2);cov_1ks4ntaci2().s[112]++;this.post=utils.bind(this,this.post);cov_1ks4ntaci2().s[113]++;this.del=utils.bind(this,this.del);},/**
         * Performs a relative GET request on an endpoint's path,
         * combined with the parameters and a relative path if specified.
         *
         * @example
         *
         *      // Will make a request to {service.prefix}/search/jobs/123456/results?offset=1
         *      var endpoint = new splunkjs.Service.Endpoint(service, "search/jobs/12345");
         *      endpoint.get("results", {offset: 1}, function() { console.log("DONE"))});
         *
         * @param {String} relpath A relative path to append to the endpoint path.
         * @param {Object} params A dictionary of entity-specific parameters to add to the query string.
         * @param {Function} callback A function to call when the request is complete: `(err, response)`.
         *
         * @method splunkjs.Service.Endpoint
         */get:function(relpath,params,callback){cov_1ks4ntaci2().f[33]++;var url=(cov_1ks4ntaci2().s[114]++,this.qualifiedPath);// If we have a relative path, we will append it with a preceding
// slash.
cov_1ks4ntaci2().s[115]++;if(relpath){cov_1ks4ntaci2().b[31][0]++;cov_1ks4ntaci2().s[116]++;url=url+"/"+relpath;}else{cov_1ks4ntaci2().b[31][1]++;}cov_1ks4ntaci2().s[117]++;return this.service.get(url,params,callback);},get_v2:function(relpath,params){cov_1ks4ntaci2().f[34]++;var url=(cov_1ks4ntaci2().s[118]++,this.qualifiedPath);// If we have a relative path, we will append it with a preceding
// slash.
cov_1ks4ntaci2().s[119]++;if(relpath){cov_1ks4ntaci2().b[32][0]++;cov_1ks4ntaci2().s[120]++;url=url+"/"+relpath;}else{cov_1ks4ntaci2().b[32][1]++;}cov_1ks4ntaci2().s[121]++;return this.service.get_v2(url,params);},/**
         * Performs a relative POST request on an endpoint's path,
         * combined with the parameters and a relative path if specified.
         *
         * @example
         *
         *      // Will make a request to {service.prefix}/search/jobs/123456/control
         *      var endpoint = new splunkjs.Service.Endpoint(service, "search/jobs/12345");
         *      endpoint.post("control", {action: "cancel"}, function() { console.log("CANCELLED"))});
         *
         * @param {String} relpath A relative path to append to the endpoint path.
         * @param {Object} params A dictionary of entity-specific parameters to add to the body.
         * @param {Function} callback A function to call when the request is complete: `(err, response)`.
         *
         * @method splunkjs.Service.Endpoint
         */post:function(relpath,params,callback){cov_1ks4ntaci2().f[35]++;var url=(cov_1ks4ntaci2().s[122]++,this.qualifiedPath);// If we have a relative path, we will append it with a preceding
// slash.
cov_1ks4ntaci2().s[123]++;if(relpath){cov_1ks4ntaci2().b[33][0]++;cov_1ks4ntaci2().s[124]++;url=url+"/"+relpath;}else{cov_1ks4ntaci2().b[33][1]++;}cov_1ks4ntaci2().s[125]++;return this.service.post(url,params,callback);},/**
         * Performs a relative DELETE request on an endpoint's path,
         * combined with the parameters and a relative path if specified.
         *
         * @example
         *
         *      // Will make a request to {service.prefix}/search/jobs/123456
         *      var endpoint = new splunkjs.Service.Endpoint(service, "search/jobs/12345");
         *      endpoint.delete("", {}, function() { console.log("DELETED"))});
         *
         * @param {String} relpath A relative path to append to the endpoint path.
         * @param {Object} params A dictionary of entity-specific parameters to add to the query string.
         * @param {Function} callback A function to call when the request is complete: `(err, response)`.
         *
         * @method splunkjs.Service.Endpoint
         */del:function(relpath,params,callback){cov_1ks4ntaci2().f[36]++;var url=(cov_1ks4ntaci2().s[126]++,this.qualifiedPath);// If we have a relative path, we will append it with a preceding
// slash.
cov_1ks4ntaci2().s[127]++;if(relpath){cov_1ks4ntaci2().b[34][0]++;cov_1ks4ntaci2().s[128]++;url=url+"/"+relpath;}else{cov_1ks4ntaci2().b[34][1]++;}cov_1ks4ntaci2().s[129]++;return this.service.del(url,params,callback);}});/**
     * Provides a base definition for a Splunk resource (for example, an entity 
     * such as an index or search job, or a collection of entities). Provides 
     * basic methods for handling Splunk resources, such as validation and 
     * accessing properties. 
     *
     * This class should not be used directly because most methods are meant to be overridden.
     *
     * @class splunkjs.Service.Resource
     * @extends splunkjs.Service.Endpoint
     */cov_1ks4ntaci2().s[130]++;root.Resource=root.Endpoint.extend({/**
         * Constructor for `splunkjs.Service.Resource`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} path A relative endpoint path (for example, "search/jobs").
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Resource} A new `splunkjs.Service.Resource` instance.
         *
         * @method splunkjs.Service.Resource
         */init:function(service,path,namespace){cov_1ks4ntaci2().f[37]++;var fullpath=(cov_1ks4ntaci2().s[131]++,service.fullpath(path,namespace));cov_1ks4ntaci2().s[132]++;this._super(service,fullpath);cov_1ks4ntaci2().s[133]++;this.namespace=namespace;cov_1ks4ntaci2().s[134]++;this._properties={};cov_1ks4ntaci2().s[135]++;this._state={};// We perform the bindings so that every function works 
// properly when it is passed as a callback.
cov_1ks4ntaci2().s[136]++;this._load=utils.bind(this,this._load);cov_1ks4ntaci2().s[137]++;this.fetch=utils.bind(this,this.fetch);cov_1ks4ntaci2().s[138]++;this.properties=utils.bind(this,this.properties);cov_1ks4ntaci2().s[139]++;this.state=utils.bind(this,this.state);cov_1ks4ntaci2().s[140]++;this.path=utils.bind(this,this.path);},/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Resource
         */path:function(){cov_1ks4ntaci2().f[38]++;cov_1ks4ntaci2().s[141]++;throw new Error("MUST BE OVERRIDDEN");},/**
         * Loads the resource and stores the properties.
         *
         * @param {Object} properties The properties for this resource.
         *
         * @method splunkjs.Service.Resource
         * @protected
         */_load:function(properties){cov_1ks4ntaci2().f[39]++;cov_1ks4ntaci2().s[142]++;this._properties=(cov_1ks4ntaci2().b[35][0]++,properties)||(cov_1ks4ntaci2().b[35][1]++,{});cov_1ks4ntaci2().s[143]++;this._state=(cov_1ks4ntaci2().b[36][0]++,properties)||(cov_1ks4ntaci2().b[36][1]++,{});},/**
         * Refreshes the resource by fetching the object from the server
         * and loading it.
         *
         * @param {Function} callback A function to call when the object is retrieved: `(err, resource)`.
         *
         * @method splunkjs.Service.Resource
         * @protected
         */fetch:function(callback){cov_1ks4ntaci2().f[40]++;cov_1ks4ntaci2().s[144]++;throw new Error("MUST BE OVERRIDDEN");},/**
         * Retrieves the current properties for this resource.
         *
         * @return {Object} The properties.
         *
         * @method splunkjs.Service.Resource
         */properties:function(){cov_1ks4ntaci2().f[41]++;cov_1ks4ntaci2().s[145]++;return this._properties;},/**
         * Retrieves the current full state (properties and metadata) of this resource.
         *
         * @return {Object} The current full state of this resource.
         *
         * @method splunkjs.Service.Resource
         */state:function(){cov_1ks4ntaci2().f[42]++;cov_1ks4ntaci2().s[146]++;return this._state;}});/**
     * Defines a base class for a Splunk entity, which is a well-defined construct
     * with certain operations (such as "properties", "update", and "delete"). 
     * Entities include search jobs, indexes, inputs, apps, and more. 
     *
     * Provides basic methods for working with Splunk entities, such as fetching and
     * updating them.
     *
     * @class splunkjs.Service.Entity
     * @extends splunkjs.Service.Resource
     */cov_1ks4ntaci2().s[147]++;root.Entity=root.Resource.extend({/**
         * A static property that indicates whether to call `fetch` after an 
         * update to get the updated entity. By default, the entity is not 
         * fetched because the endpoint returns (echoes) the updated entity.
         *
         * @method splunkjs.Service.Entity
         */fetchOnUpdate:false,/**
         * Constructor for `splunkjs.Service.Entity`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} path A relative endpoint path (for example, "search/jobs").
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Entity} A new `splunkjs.Service.Entity` instance.
         *
         * @method splunkjs.Service.Entity
         */init:function(service,path,namespace){cov_1ks4ntaci2().f[43]++;cov_1ks4ntaci2().s[148]++;this._super(service,path,namespace);// We perform the bindings so that every function works 
// properly when it is passed as a callback.
cov_1ks4ntaci2().s[149]++;this._load=utils.bind(this,this._load);cov_1ks4ntaci2().s[150]++;this.fetch=utils.bind(this,this.fetch);cov_1ks4ntaci2().s[151]++;this.remove=utils.bind(this,this.remove);cov_1ks4ntaci2().s[152]++;this.update=utils.bind(this,this.update);cov_1ks4ntaci2().s[153]++;this.fields=utils.bind(this,this.fields);cov_1ks4ntaci2().s[154]++;this.links=utils.bind(this,this.links);cov_1ks4ntaci2().s[155]++;this.acl=utils.bind(this,this.acl);cov_1ks4ntaci2().s[156]++;this.author=utils.bind(this,this.author);cov_1ks4ntaci2().s[157]++;this.updated=utils.bind(this,this.updated);cov_1ks4ntaci2().s[158]++;this.published=utils.bind(this,this.published);cov_1ks4ntaci2().s[159]++;this.enable=utils.bind(this,this.enable);cov_1ks4ntaci2().s[160]++;this.disable=utils.bind(this,this.disable);cov_1ks4ntaci2().s[161]++;this.reload=utils.bind(this,this.reload);// Initial values
cov_1ks4ntaci2().s[162]++;this._properties={};cov_1ks4ntaci2().s[163]++;this._fields={};cov_1ks4ntaci2().s[164]++;this._acl={};cov_1ks4ntaci2().s[165]++;this._links={};},/**
         * Loads the entity and stores the properties.
         *
         * @param {Object} properties The properties for this entity.
         *
         * @method splunkjs.Service.Entity
         * @protected
         */_load:function(properties){cov_1ks4ntaci2().f[44]++;cov_1ks4ntaci2().s[166]++;properties=utils.isArray(properties)?(cov_1ks4ntaci2().b[37][0]++,properties[0]):(cov_1ks4ntaci2().b[37][1]++,properties);// Initialize the properties to
// empty values
cov_1ks4ntaci2().s[167]++;properties=(cov_1ks4ntaci2().b[38][0]++,properties)||(cov_1ks4ntaci2().b[38][1]++,{content:{},fields:{},acl:{},links:{}});cov_1ks4ntaci2().s[168]++;this._super(properties);// Take out the entity-specific content
cov_1ks4ntaci2().s[169]++;this._properties=(cov_1ks4ntaci2().b[39][0]++,properties.content)||(cov_1ks4ntaci2().b[39][1]++,{});cov_1ks4ntaci2().s[170]++;this._fields=(cov_1ks4ntaci2().b[40][0]++,properties.fields)||(cov_1ks4ntaci2().b[40][1]++,this._fields)||(cov_1ks4ntaci2().b[40][2]++,{});cov_1ks4ntaci2().s[171]++;this._acl=(cov_1ks4ntaci2().b[41][0]++,properties.acl)||(cov_1ks4ntaci2().b[41][1]++,{});cov_1ks4ntaci2().s[172]++;this._links=(cov_1ks4ntaci2().b[42][0]++,properties.links)||(cov_1ks4ntaci2().b[42][1]++,{});cov_1ks4ntaci2().s[173]++;this._author=(cov_1ks4ntaci2().b[43][0]++,properties.author)||(cov_1ks4ntaci2().b[43][1]++,null);cov_1ks4ntaci2().s[174]++;this._updated=(cov_1ks4ntaci2().b[44][0]++,properties.updated)||(cov_1ks4ntaci2().b[44][1]++,null);cov_1ks4ntaci2().s[175]++;this._published=(cov_1ks4ntaci2().b[45][0]++,properties.published)||(cov_1ks4ntaci2().b[45][1]++,null);},/**
         * Retrieves the fields information for this entity, indicating which 
         * fields are wildcards, required, and optional.
         *
         * @return {Object} The fields information.
         *
         * @method splunkjs.Service.Entity
         */fields:function(){cov_1ks4ntaci2().f[45]++;cov_1ks4ntaci2().s[176]++;return this._fields;},/**
         * Retrieves the access control list (ACL) information for this entity,
         * which contains the permissions for accessing the entity.
         *
         * @return {Object} The ACL.
         *
         * @method splunkjs.Service.Entity
         */acl:function(){cov_1ks4ntaci2().f[46]++;cov_1ks4ntaci2().s[177]++;return this._acl;},/**
         * Retrieves the links information for this entity, which is the URI of
         * the entity relative to the management port of a Splunk instance.
         *
         * @return {Object} The links information.
         *
         * @method splunkjs.Service.Entity
         */links:function(){cov_1ks4ntaci2().f[47]++;cov_1ks4ntaci2().s[178]++;return this._links;},/**
         * Retrieves the author information for this entity.
         *
         * @return {String} The author.
         *
         * @method splunkjs.Service.Entity
         */author:function(){cov_1ks4ntaci2().f[48]++;cov_1ks4ntaci2().s[179]++;return this._author;},/**
         * Retrieves the updated time for this entity.
         *
         * @return {String} The updated time.
         *
         * @method splunkjs.Service.Entity
         */updated:function(){cov_1ks4ntaci2().f[49]++;cov_1ks4ntaci2().s[180]++;return this._updated;},/**
         * Retrieves the published time for this entity.
         *
         * @return {String} The published time.
         *
         * @method splunkjs.Service.Entity
         */published:function(){cov_1ks4ntaci2().f[50]++;cov_1ks4ntaci2().s[181]++;return this._published;},/**
         * Refreshes the entity by fetching the object from the server and 
         * loading it.
         *
         * @param {Object} options An optional dictionary of collection filtering and pagination options:
         *    - `count` (_integer_): The maximum number of items to return.
         *    - `offset` (_integer_): The offset of the first item to return.
         *    - `search` (_string_): The search query to filter responses.
         *    - `sort_dir` (_string_): The direction to sort returned items: “asc” or “desc”.
         *    - `sort_key` (_string_): The field to use for sorting (optional).
         *    - `sort_mode` (_string_): The collating sequence for sorting returned items: “auto”, “alpha”, “alpha_case”, or “num”.
         * @param {Function} callback A function to call when the object is retrieved: `(err, resource)`.
         *
         * @method splunkjs.Service.Entity
         */fetch:function(options,callback){cov_1ks4ntaci2().f[51]++;cov_1ks4ntaci2().s[182]++;if((cov_1ks4ntaci2().b[47][0]++,!callback)&&(cov_1ks4ntaci2().b[47][1]++,utils.isFunction(options))){cov_1ks4ntaci2().b[46][0]++;cov_1ks4ntaci2().s[183]++;callback=options;cov_1ks4ntaci2().s[184]++;options={};}else{cov_1ks4ntaci2().b[46][1]++;}cov_1ks4ntaci2().s[185]++;callback=(cov_1ks4ntaci2().b[48][0]++,callback)||(cov_1ks4ntaci2().b[48][1]++,function(){cov_1ks4ntaci2().f[52]++;});cov_1ks4ntaci2().s[186]++;options=(cov_1ks4ntaci2().b[49][0]++,options)||(cov_1ks4ntaci2().b[49][1]++,{});var that=(cov_1ks4ntaci2().s[187]++,this);cov_1ks4ntaci2().s[188]++;return this.get("",options,function(err,response){cov_1ks4ntaci2().f[53]++;cov_1ks4ntaci2().s[189]++;if(err){cov_1ks4ntaci2().b[50][0]++;cov_1ks4ntaci2().s[190]++;callback(err);}else{cov_1ks4ntaci2().b[50][1]++;cov_1ks4ntaci2().s[191]++;that._load(response.data?(cov_1ks4ntaci2().b[51][0]++,response.data.entry):(cov_1ks4ntaci2().b[51][1]++,null));cov_1ks4ntaci2().s[192]++;callback(null,that);}});},/**
         * Deletes the entity from the server.
         *
         * @param {Function} callback A function to call when the object is deleted: `(err)`.
         *
         * @method splunkjs.Service.Entity
         * @protected
         */remove:function(callback){cov_1ks4ntaci2().f[54]++;cov_1ks4ntaci2().s[193]++;callback=(cov_1ks4ntaci2().b[52][0]++,callback)||(cov_1ks4ntaci2().b[52][1]++,function(){cov_1ks4ntaci2().f[55]++;});var that=(cov_1ks4ntaci2().s[194]++,this);cov_1ks4ntaci2().s[195]++;return this.del("",{},function(err){cov_1ks4ntaci2().f[56]++;cov_1ks4ntaci2().s[196]++;callback(err);});},/**
         * Updates the entity on the server.
         *
         * @param {Object} props The properties to update the object with.
         * @param {Function} callback A function to call when the object is updated: `(err, entity)`.
         *
         * @method splunkjs.Service.Entity
         * @protected
         */update:function(props,callback){cov_1ks4ntaci2().f[57]++;cov_1ks4ntaci2().s[197]++;callback=(cov_1ks4ntaci2().b[53][0]++,callback)||(cov_1ks4ntaci2().b[53][1]++,function(){cov_1ks4ntaci2().f[58]++;});cov_1ks4ntaci2().s[198]++;if(props.hasOwnProperty("name")){cov_1ks4ntaci2().b[54][0]++;cov_1ks4ntaci2().s[199]++;throw new Error("Cannot set 'name' field in 'update'");}else{cov_1ks4ntaci2().b[54][1]++;}var that=(cov_1ks4ntaci2().s[200]++,this);var req=(cov_1ks4ntaci2().s[201]++,this.post("",props,function(err,response){cov_1ks4ntaci2().f[59]++;cov_1ks4ntaci2().s[202]++;if((cov_1ks4ntaci2().b[56][0]++,!err)&&(cov_1ks4ntaci2().b[56][1]++,!that.fetchOnUpdate)){cov_1ks4ntaci2().b[55][0]++;cov_1ks4ntaci2().s[203]++;that._load(response.data.entry);cov_1ks4ntaci2().s[204]++;callback(err,that);}else{cov_1ks4ntaci2().b[55][1]++;cov_1ks4ntaci2().s[205]++;if((cov_1ks4ntaci2().b[58][0]++,!err)&&(cov_1ks4ntaci2().b[58][1]++,that.fetchOnUpdate)){cov_1ks4ntaci2().b[57][0]++;cov_1ks4ntaci2().s[206]++;that.fetch(function(){cov_1ks4ntaci2().f[60]++;cov_1ks4ntaci2().s[207]++;if(req.wasAborted){cov_1ks4ntaci2().b[59][0]++;cov_1ks4ntaci2().s[208]++;return;// aborted, so ignore
}else{cov_1ks4ntaci2().b[59][1]++;cov_1ks4ntaci2().s[209]++;callback.apply(null,arguments);}});}else{cov_1ks4ntaci2().b[57][1]++;cov_1ks4ntaci2().s[210]++;callback(err,that);}}}));cov_1ks4ntaci2().s[211]++;return req;},/**
         * Disables the entity on the server.
         *
         * @param {Function} callback A function to call when the object is disabled: `(err, entity)`.
         *
         * @method splunkjs.Service.Entity
         * @protected
         */disable:function(callback){cov_1ks4ntaci2().f[61]++;cov_1ks4ntaci2().s[212]++;callback=(cov_1ks4ntaci2().b[60][0]++,callback)||(cov_1ks4ntaci2().b[60][1]++,function(){cov_1ks4ntaci2().f[62]++;});var that=(cov_1ks4ntaci2().s[213]++,this);cov_1ks4ntaci2().s[214]++;this.post("disable",{},function(err,response){cov_1ks4ntaci2().f[63]++;cov_1ks4ntaci2().s[215]++;if(err){cov_1ks4ntaci2().b[61][0]++;cov_1ks4ntaci2().s[216]++;callback(err);}else{cov_1ks4ntaci2().b[61][1]++;cov_1ks4ntaci2().s[217]++;callback(null,that);}});},/**
         * Enables the entity on the server.
         *
         * @param {Function} callback A function to call when the object is enabled: `(err, entity)`.
         *
         * @method splunkjs.Service.Entity
         * @protected
         */enable:function(callback){cov_1ks4ntaci2().f[64]++;cov_1ks4ntaci2().s[218]++;callback=(cov_1ks4ntaci2().b[62][0]++,callback)||(cov_1ks4ntaci2().b[62][1]++,function(){cov_1ks4ntaci2().f[65]++;});var that=(cov_1ks4ntaci2().s[219]++,this);cov_1ks4ntaci2().s[220]++;this.post("enable",{},function(err,response){cov_1ks4ntaci2().f[66]++;cov_1ks4ntaci2().s[221]++;if(err){cov_1ks4ntaci2().b[63][0]++;cov_1ks4ntaci2().s[222]++;callback(err);}else{cov_1ks4ntaci2().b[63][1]++;cov_1ks4ntaci2().s[223]++;callback(null,that);}});},/**
         * Reloads the entity on the server.
         *
         * @param {Function} callback A function to call when the object is reloaded: `(err, entity)`.
         *
         * @method splunkjs.Service.Entity
         * @protected
         */reload:function(callback){cov_1ks4ntaci2().f[67]++;cov_1ks4ntaci2().s[224]++;callback=(cov_1ks4ntaci2().b[64][0]++,callback)||(cov_1ks4ntaci2().b[64][1]++,function(){cov_1ks4ntaci2().f[68]++;});var that=(cov_1ks4ntaci2().s[225]++,this);cov_1ks4ntaci2().s[226]++;this.post("_reload",{},function(err,response){cov_1ks4ntaci2().f[69]++;cov_1ks4ntaci2().s[227]++;if(err){cov_1ks4ntaci2().b[65][0]++;cov_1ks4ntaci2().s[228]++;callback(err);}else{cov_1ks4ntaci2().b[65][1]++;cov_1ks4ntaci2().s[229]++;callback(null,that);}});}});/**
     * Defines a base class for a Splunk collection, which is a well-defined construct
     * that provides basic methods for working with collections of entities, such as 
     * creating and listing entities.
     *
     * @class splunkjs.Service.Collection
     * @extends splunkjs.Service.Resource
     */cov_1ks4ntaci2().s[230]++;root.Collection=root.Resource.extend({/**
         * A static property that indicates whether to call `fetch` after an 
         * entity has been created. By default, the entity is not fetched 
         * because the endpoint returns (echoes) the new entity.

         * @method splunkjs.Service.Collection
         */fetchOnEntityCreation:false,/**
         * Constructor for `splunkjs.Service.Collection`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} path A relative endpoint path (for example, "search/jobs").
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Collection} A new `splunkjs.Service.Collection` instance.
         *
         * @method splunkjs.Service.Collection
         */init:function(service,path,namespace){cov_1ks4ntaci2().f[70]++;cov_1ks4ntaci2().s[231]++;this._super(service,path,namespace);// We perform the bindings so that every function works 
// properly when it is passed as a callback.
cov_1ks4ntaci2().s[232]++;this._load=utils.bind(this,this._load);cov_1ks4ntaci2().s[233]++;this.fetch=utils.bind(this,this.fetch);cov_1ks4ntaci2().s[234]++;this.create=utils.bind(this,this.create);cov_1ks4ntaci2().s[235]++;this.list=utils.bind(this,this.list);cov_1ks4ntaci2().s[236]++;this.item=utils.bind(this,this.item);cov_1ks4ntaci2().s[237]++;this.instantiateEntity=utils.bind(this,this.instantiateEntity);// Initial values
cov_1ks4ntaci2().s[238]++;this._entities=[];cov_1ks4ntaci2().s[239]++;this._entitiesByName={};cov_1ks4ntaci2().s[240]++;this._properties={};cov_1ks4ntaci2().s[241]++;this._paging={};cov_1ks4ntaci2().s[242]++;this._links={};},/**
         * Creates a local instance of an entity. 
         *
         * @param {Object} props The properties for this entity.
         * @return {splunkjs.Service.Entity} A new `splunkjs.Service.Entity` instance.
         *
         * @method splunkjs.Service.Collection
         */instantiateEntity:function(props){cov_1ks4ntaci2().f[71]++;cov_1ks4ntaci2().s[243]++;throw new Error("MUST BE OVERRIDDEN");},/**
         * Loads the collection and properties, and creates a map of entity
         * names to entity IDs (for retrieval purposes).
         *
         * @param {Object} properties The properties for this collection.
         *
         * @method splunkjs.Service.Collection
         * @private
         */_load:function(properties){cov_1ks4ntaci2().f[72]++;cov_1ks4ntaci2().s[244]++;this._super(properties);var entities=(cov_1ks4ntaci2().s[245]++,[]);var entitiesByName=(cov_1ks4ntaci2().s[246]++,{});var entityPropertyList=(cov_1ks4ntaci2().s[247]++,(cov_1ks4ntaci2().b[66][0]++,properties.entry)||(cov_1ks4ntaci2().b[66][1]++,[]));cov_1ks4ntaci2().s[248]++;for(var i=(cov_1ks4ntaci2().s[249]++,0);i<entityPropertyList.length;i++){var props=(cov_1ks4ntaci2().s[250]++,entityPropertyList[i]);var entity=(cov_1ks4ntaci2().s[251]++,this.instantiateEntity(props));cov_1ks4ntaci2().s[252]++;entity._load(props);cov_1ks4ntaci2().s[253]++;entities.push(entity);cov_1ks4ntaci2().s[254]++;if(entitiesByName.hasOwnProperty(entity.name)){cov_1ks4ntaci2().b[67][0]++;cov_1ks4ntaci2().s[255]++;entitiesByName[entity.name].push(entity);}else{cov_1ks4ntaci2().b[67][1]++;cov_1ks4ntaci2().s[256]++;entitiesByName[entity.name]=[entity];}}cov_1ks4ntaci2().s[257]++;this._entities=entities;cov_1ks4ntaci2().s[258]++;this._entitiesByName=entitiesByName;cov_1ks4ntaci2().s[259]++;this._paging=(cov_1ks4ntaci2().b[68][0]++,properties.paging)||(cov_1ks4ntaci2().b[68][1]++,{});cov_1ks4ntaci2().s[260]++;this._links=(cov_1ks4ntaci2().b[69][0]++,properties.links)||(cov_1ks4ntaci2().b[69][1]++,{});cov_1ks4ntaci2().s[261]++;this._updated=(cov_1ks4ntaci2().b[70][0]++,properties.updated)||(cov_1ks4ntaci2().b[70][1]++,null);},/**
         * Retrieves the links information for this collection, which is the URI of
         * the resource relative to the management port of a Splunk instance.
         *
         * @return {Object} The links information.
         *
         * @method splunkjs.Service.Collection
         */links:function(){cov_1ks4ntaci2().f[73]++;cov_1ks4ntaci2().s[262]++;return this._links;},/**
         * Retrieves the author information for this collection.
         *
         * @return {String} The author.
         *
         * @method splunkjs.Service.Collection
         */paging:function(){cov_1ks4ntaci2().f[74]++;cov_1ks4ntaci2().s[263]++;return this._paging;},/**
         * Retrieves the updated time for this collection.
         *
         * @return {String} The updated time.
         *
         * @method splunkjs.Service.Collection
         */updated:function(){cov_1ks4ntaci2().f[75]++;cov_1ks4ntaci2().s[264]++;return this._updated;},/**
         * Refreshes the resource by fetching the object from the server and 
         * loading it.
         *
         * @param {Object} options A dictionary of collection filtering and pagination options:
         *    - `count` (_integer_): The maximum number of items to return.
         *    - `offset` (_integer_): The offset of the first item to return.
         *    - `search` (_string_): The search query to filter responses.
         *    - `sort_dir` (_string_): The direction to sort returned items: “asc” or “desc”.
         *    - `sort_key` (_string_): The field to use for sorting (optional).
         *    - `sort_mode` (_string_): The collating sequence for sorting returned items: “auto”, “alpha”, “alpha_case”, or “num”.
         * @param {Function} callback A function to call when the object is retrieved: `(err, resource)`.
         *
         * @method splunkjs.Service.Collection
         */fetch:function(options,callback){cov_1ks4ntaci2().f[76]++;cov_1ks4ntaci2().s[265]++;if((cov_1ks4ntaci2().b[72][0]++,!callback)&&(cov_1ks4ntaci2().b[72][1]++,utils.isFunction(options))){cov_1ks4ntaci2().b[71][0]++;cov_1ks4ntaci2().s[266]++;callback=options;cov_1ks4ntaci2().s[267]++;options={};}else{cov_1ks4ntaci2().b[71][1]++;}cov_1ks4ntaci2().s[268]++;callback=(cov_1ks4ntaci2().b[73][0]++,callback)||(cov_1ks4ntaci2().b[73][1]++,function(){cov_1ks4ntaci2().f[77]++;});cov_1ks4ntaci2().s[269]++;options=(cov_1ks4ntaci2().b[74][0]++,options)||(cov_1ks4ntaci2().b[74][1]++,{});cov_1ks4ntaci2().s[270]++;if(!options.count){cov_1ks4ntaci2().b[75][0]++;cov_1ks4ntaci2().s[271]++;options.count=0;}else{cov_1ks4ntaci2().b[75][1]++;}var that=(cov_1ks4ntaci2().s[272]++,this);var req=(cov_1ks4ntaci2().s[273]++,that.get("",options,function(err,response){cov_1ks4ntaci2().f[78]++;cov_1ks4ntaci2().s[274]++;if(err){cov_1ks4ntaci2().b[76][0]++;cov_1ks4ntaci2().s[275]++;callback(err);}else{cov_1ks4ntaci2().b[76][1]++;cov_1ks4ntaci2().s[276]++;that._load(response.data);cov_1ks4ntaci2().s[277]++;callback(null,that);}}));cov_1ks4ntaci2().s[278]++;return req;},fetch_v2:async function(options){cov_1ks4ntaci2().f[79]++;cov_1ks4ntaci2().s[279]++;options=(cov_1ks4ntaci2().b[77][0]++,options)||(cov_1ks4ntaci2().b[77][1]++,{});cov_1ks4ntaci2().s[280]++;if(!options.count){cov_1ks4ntaci2().b[78][0]++;cov_1ks4ntaci2().s[281]++;options.count=0;}else{cov_1ks4ntaci2().b[78][1]++;}var that=(cov_1ks4ntaci2().s[282]++,this);var response=(cov_1ks4ntaci2().s[283]++,await that.get_v2("",options));// return response;
cov_1ks4ntaci2().s[284]++;that._load(response.body);cov_1ks4ntaci2().s[285]++;return that;},/**
         * Returns a specific entity from the collection.
         *
         * @example
         *
         *      var apps = service.apps();
         *      apps.fetch(function(err, apps) {
         *          var app = apps.item("search");
         *          console.log("Search App Found: " + !!app);
         *          // `app` is an Application object.
         *      });
         *
         * @param {String} id The name of the entity to retrieve.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The wildcard value "-", is not acceptable when searching for an entity.
         *    - `app` (_string_): The app context for this resource (such as "search"). The wildcard value "-" is unacceptable when searching for an entity.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @returns {splunkjs.Service.Entity} The entity, or `null` if one is not found.
         *
         * @method splunkjs.Service.Collection
         */item:function(id,namespace){cov_1ks4ntaci2().f[80]++;cov_1ks4ntaci2().s[286]++;if(utils.isEmpty(namespace)){cov_1ks4ntaci2().b[79][0]++;cov_1ks4ntaci2().s[287]++;namespace=null;}else{cov_1ks4ntaci2().b[79][1]++;}cov_1ks4ntaci2().s[288]++;if(!id){cov_1ks4ntaci2().b[80][0]++;cov_1ks4ntaci2().s[289]++;throw new Error("Must suply a non-empty name.");}else{cov_1ks4ntaci2().b[80][1]++;}cov_1ks4ntaci2().s[290]++;if((cov_1ks4ntaci2().b[82][0]++,namespace)&&((cov_1ks4ntaci2().b[82][1]++,namespace.app==='-')||(cov_1ks4ntaci2().b[82][2]++,namespace.owner==='-'))){cov_1ks4ntaci2().b[81][0]++;cov_1ks4ntaci2().s[291]++;throw new Error("When searching for an entity, wildcards are not allowed in the namespace. Please refine your search.");}else{cov_1ks4ntaci2().b[81][1]++;}var fullPath=(cov_1ks4ntaci2().s[292]++,null);cov_1ks4ntaci2().s[293]++;if(this._entitiesByName.hasOwnProperty(id)){cov_1ks4ntaci2().b[83][0]++;var entities=(cov_1ks4ntaci2().s[294]++,this._entitiesByName[id]);cov_1ks4ntaci2().s[295]++;if((cov_1ks4ntaci2().b[85][0]++,entities.length===1)&&(cov_1ks4ntaci2().b[85][1]++,!namespace)){cov_1ks4ntaci2().b[84][0]++;cov_1ks4ntaci2().s[296]++;// If there is only one entity with the
// specified name and the user did not
// specify a namespace, then we just
// return it
return entities[0];}else{cov_1ks4ntaci2().b[84][1]++;cov_1ks4ntaci2().s[297]++;if((cov_1ks4ntaci2().b[87][0]++,entities.length===1)&&(cov_1ks4ntaci2().b[87][1]++,namespace)){cov_1ks4ntaci2().b[86][0]++;cov_1ks4ntaci2().s[298]++;// If we specified a namespace, then we 
// only return the entity if it matches
// the full path
fullPath=this.service.fullpath(entities[0].path(),namespace);cov_1ks4ntaci2().s[299]++;if(entities[0].qualifiedPath===fullPath){cov_1ks4ntaci2().b[88][0]++;cov_1ks4ntaci2().s[300]++;return entities[0];}else{cov_1ks4ntaci2().b[88][1]++;cov_1ks4ntaci2().s[301]++;return null;}}else{cov_1ks4ntaci2().b[86][1]++;cov_1ks4ntaci2().s[302]++;if((cov_1ks4ntaci2().b[90][0]++,entities.length>1)&&(cov_1ks4ntaci2().b[90][1]++,!namespace)){cov_1ks4ntaci2().b[89][0]++;cov_1ks4ntaci2().s[303]++;// If there is more than one entity and we didn't
// specify a namespace, then we return an error
// saying the match is ambiguous
throw new Error("Ambiguous match for name '"+id+"'");}else{cov_1ks4ntaci2().b[89][1]++;cov_1ks4ntaci2().s[304]++;// There is more than one entity, and we do have
// a namespace, so we try and find it
for(var i=(cov_1ks4ntaci2().s[305]++,0);i<entities.length;i++){var entity=(cov_1ks4ntaci2().s[306]++,entities[i]);cov_1ks4ntaci2().s[307]++;fullPath=this.service.fullpath(entities[i].path(),namespace);cov_1ks4ntaci2().s[308]++;if(entity.qualifiedPath===fullPath){cov_1ks4ntaci2().b[91][0]++;cov_1ks4ntaci2().s[309]++;return entity;}else{cov_1ks4ntaci2().b[91][1]++;}}}}}}else{cov_1ks4ntaci2().b[83][1]++;cov_1ks4ntaci2().s[310]++;return null;}},/**
         * Creates an entity on the server for this collection with the specified
         * parameters.
         *
         * @example
         *
         *      var apps = service.apps();
         *      apps.create({name: "NewSearchApp"}, function(err, newApp) {
         *          console.log("CREATED");
         *      });
         *
         * @param {Object} params A dictionary of entity-specific properties.
         * @param {Function} callback The function to call when the request is complete: `(err, response)`.
         * @returns {Array} An array of `splunkjs.Service.Entity` objects.
         *
         * @method splunkjs.Service.Collection
         */create:function(params,callback){cov_1ks4ntaci2().f[81]++;cov_1ks4ntaci2().s[311]++;callback=(cov_1ks4ntaci2().b[92][0]++,callback)||(cov_1ks4ntaci2().b[92][1]++,function(){cov_1ks4ntaci2().f[82]++;});var that=(cov_1ks4ntaci2().s[312]++,this);var req=(cov_1ks4ntaci2().s[313]++,this.post("",params,function(err,response){cov_1ks4ntaci2().f[83]++;cov_1ks4ntaci2().s[314]++;if(err){cov_1ks4ntaci2().b[93][0]++;cov_1ks4ntaci2().s[315]++;callback(err);}else{cov_1ks4ntaci2().b[93][1]++;var props=(cov_1ks4ntaci2().s[316]++,response.data.entry);cov_1ks4ntaci2().s[317]++;if(utils.isArray(props)){cov_1ks4ntaci2().b[94][0]++;cov_1ks4ntaci2().s[318]++;props=props[0];}else{cov_1ks4ntaci2().b[94][1]++;}var entity=(cov_1ks4ntaci2().s[319]++,that.instantiateEntity(props));cov_1ks4ntaci2().s[320]++;entity._load(props);cov_1ks4ntaci2().s[321]++;if(that.fetchOnEntityCreation){cov_1ks4ntaci2().b[95][0]++;cov_1ks4ntaci2().s[322]++;entity.fetch(function(){cov_1ks4ntaci2().f[84]++;cov_1ks4ntaci2().s[323]++;if(req.wasAborted){cov_1ks4ntaci2().b[96][0]++;cov_1ks4ntaci2().s[324]++;return;// aborted, so ignore
}else{cov_1ks4ntaci2().b[96][1]++;cov_1ks4ntaci2().s[325]++;callback.apply(null,arguments);}});}else{cov_1ks4ntaci2().b[95][1]++;cov_1ks4ntaci2().s[326]++;callback(null,entity);}}}));cov_1ks4ntaci2().s[327]++;return req;},/**
         * Retrieves a list of all entities in the collection.
         *
         * @example
         *
         *      var apps = service.apps();
         *      apps.fetch(function(err, apps) {
         *          var appList = apps.list();
         *          console.log(appList.length);
         *      });
         *
         * @param {Function} callback A function to call with the list of entities: `(err, list)`.
         *
         * @method splunkjs.Service.Collection
         */list:function(callback){cov_1ks4ntaci2().f[85]++;cov_1ks4ntaci2().s[328]++;callback=(cov_1ks4ntaci2().b[97][0]++,callback)||(cov_1ks4ntaci2().b[97][1]++,function(){cov_1ks4ntaci2().f[86]++;});cov_1ks4ntaci2().s[329]++;return utils.clone(this._entities);}});/**
     * Represents a specific saved search, which you can then view, modify, and
     * remove.
     *
     * @endpoint saved/searches/{name}
     * @class splunkjs.Service.SavedSearch
     * @extends splunkjs.Service.Entity
     */cov_1ks4ntaci2().s[330]++;root.SavedSearch=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.SavedSearch
         */path:function(){cov_1ks4ntaci2().f[87]++;cov_1ks4ntaci2().s[331]++;return Paths.savedSearches+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.SavedSearch`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name for the new saved search.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.SavedSearch} A new `splunkjs.Service.SavedSearch` instance.
         *
         * @method splunkjs.Service.SavedSearch
         */init:function(service,name,namespace){cov_1ks4ntaci2().f[88]++;cov_1ks4ntaci2().s[332]++;this.name=name;cov_1ks4ntaci2().s[333]++;this._super(service,this.path(),namespace);cov_1ks4ntaci2().s[334]++;this.acknowledge=utils.bind(this,this.acknowledge);cov_1ks4ntaci2().s[335]++;this.dispatch=utils.bind(this,this.dispatch);cov_1ks4ntaci2().s[336]++;this.history=utils.bind(this,this.history);cov_1ks4ntaci2().s[337]++;this.suppressInfo=utils.bind(this,this.suppressInfo);},/**
         * Gets the count of triggered alerts for this savedSearch,
         * defaulting to 0 when undefined.
         *
         * @example
         *
         *      var savedSearch = service.savedSearches().item("MySavedSearch");
         *      var alertCount = savedSearch.alertCount();
         * 
         * @return {Number} The count of triggered alerts.
         *
         * @method splunkjs.Service.SavedSearch
         */alertCount:function(){cov_1ks4ntaci2().f[89]++;cov_1ks4ntaci2().s[338]++;return(cov_1ks4ntaci2().b[98][0]++,parseInt(this.properties().triggered_alert_count,10))||(cov_1ks4ntaci2().b[98][1]++,0);},/**
         * Acknowledges the suppression of the alerts from a saved search and
         * resumes alerting.
         *
         * @example
         *
         *      var savedSearch = service.savedSearches().item("MySavedSearch");
         *      savedSearch.acknowledge(function(err, search) {
         *          console.log("ACKNOWLEDGED");
         *      });
         *
         * @param {Function} callback A function to call when the saved search is acknowledged: `(err, savedSearch)`.
         *
         * @endpoint saved/searches/{name}/acknowledge
         * @method splunkjs.Service.SavedSearch
         */acknowledge:function(callback){cov_1ks4ntaci2().f[90]++;cov_1ks4ntaci2().s[339]++;callback=(cov_1ks4ntaci2().b[99][0]++,callback)||(cov_1ks4ntaci2().b[99][1]++,function(){cov_1ks4ntaci2().f[91]++;});var that=(cov_1ks4ntaci2().s[340]++,this);var req=(cov_1ks4ntaci2().s[341]++,this.post("acknowledge",{},function(err){cov_1ks4ntaci2().f[92]++;cov_1ks4ntaci2().s[342]++;callback(err,that);}));cov_1ks4ntaci2().s[343]++;return req;},/**
         * Dispatches a saved search, which creates a search job and returns a 
         * `splunkjs.Service.Job` instance in the callback function.
         *
         * @example
         *
         *      var savedSearch = service.savedSearches().item("MySavedSearch");
         *      savedSearch.dispatch({force_dispatch: false}, function(err, job, savedSearch) {
         *          console.log("Job SID: ", job.sid);
         *      });
         *
         * @param {Object} options The options for dispatching this saved search:
         *    - `dispatch.now` (_string_): The time that is used to dispatch the search as though the specified time were the current time.
         *    - `dispatch.*` (_string_): Overwrites the value of the search field specified in *.
         *    - `trigger_actions` (_boolean_): Indicates whether to trigger alert actions.
         *    - `force_dispatch` (_boolean_): Indicates whether to start a new search if another instance of this search is already running.
         * @param {Function} callback A function to call when the saved search is dispatched: `(err, job, savedSearch)`.
         *
         * @endpoint saved/searches/{name}/dispatch
         * @method splunkjs.Service.SavedSearch
         */dispatch:function(options,callback){cov_1ks4ntaci2().f[93]++;cov_1ks4ntaci2().s[344]++;if((cov_1ks4ntaci2().b[101][0]++,!callback)&&(cov_1ks4ntaci2().b[101][1]++,utils.isFunction(options))){cov_1ks4ntaci2().b[100][0]++;cov_1ks4ntaci2().s[345]++;callback=options;cov_1ks4ntaci2().s[346]++;options={};}else{cov_1ks4ntaci2().b[100][1]++;}cov_1ks4ntaci2().s[347]++;callback=(cov_1ks4ntaci2().b[102][0]++,callback)||(cov_1ks4ntaci2().b[102][1]++,function(){cov_1ks4ntaci2().f[94]++;});cov_1ks4ntaci2().s[348]++;options=(cov_1ks4ntaci2().b[103][0]++,options)||(cov_1ks4ntaci2().b[103][1]++,{});var that=(cov_1ks4ntaci2().s[349]++,this);var req=(cov_1ks4ntaci2().s[350]++,this.post("dispatch",options,function(err,response){cov_1ks4ntaci2().f[95]++;cov_1ks4ntaci2().s[351]++;if(err){cov_1ks4ntaci2().b[104][0]++;cov_1ks4ntaci2().s[352]++;callback(err);cov_1ks4ntaci2().s[353]++;return;}else{cov_1ks4ntaci2().b[104][1]++;}var sid=(cov_1ks4ntaci2().s[354]++,response.data.sid);var job=(cov_1ks4ntaci2().s[355]++,new root.Job(that.service,sid,that.namespace));cov_1ks4ntaci2().s[356]++;callback(null,job,that);}));cov_1ks4ntaci2().s[357]++;return req;},/** 
         * Gets the `splunkjs.Service.FiredAlertGroup` for firedAlerts associated with this saved search.
         *
         * @example
         *
         *      var alerts = service.firedAlertGroups().item("MySavedSearch");
         *
         * @return {splunkjs.Service.FiredAlertGroup} An AlertGroup object with the
         * same name as this SavedSearch object.
         *
         * @method splunkjs.Service.SavedSearch
         */firedAlertGroup:function(){cov_1ks4ntaci2().f[96]++;cov_1ks4ntaci2().s[358]++;return new root.FiredAlertGroup(this.service,this.name);},/**
         * Retrieves the job history for a saved search, which is a list of 
         * `splunkjs.Service.Job` instances.
         *
         * @example
         *
         *      var savedSearch = service.savedSearches().item("MySavedSearch");
         *      savedSearch.history({count: 10}, function(err, jobs, search) {
         *          for(var i = 0; i < jobs.length; i++) {
         *              console.log("Job", i, ":", jobs[i].sid);
         *          }
         *      });
         *
         * @param {Object} options Options for retrieving history. For a full list, see the <a href="https://docs.splunk.com/Documentation/Splunk/8.0.2/RESTREF/RESTprolog#Pagination_and_filtering_parameters" target="_blank">Pagination and Filtering options</a> in the REST API documentation.
         * @param {Function} callback A function to call when the history is retrieved: `(err, job, savedSearch)`.
         *
         * @endpoint saved/searches/{name}/history
         * @method splunkjs.Service.SavedSearch
         */history:function(options,callback){cov_1ks4ntaci2().f[97]++;cov_1ks4ntaci2().s[359]++;if((cov_1ks4ntaci2().b[106][0]++,!callback)&&(cov_1ks4ntaci2().b[106][1]++,utils.isFunction(options))){cov_1ks4ntaci2().b[105][0]++;cov_1ks4ntaci2().s[360]++;callback=options;cov_1ks4ntaci2().s[361]++;options={};}else{cov_1ks4ntaci2().b[105][1]++;}cov_1ks4ntaci2().s[362]++;callback=(cov_1ks4ntaci2().b[107][0]++,callback)||(cov_1ks4ntaci2().b[107][1]++,function(){cov_1ks4ntaci2().f[98]++;});cov_1ks4ntaci2().s[363]++;options=(cov_1ks4ntaci2().b[108][0]++,options)||(cov_1ks4ntaci2().b[108][1]++,{});var that=(cov_1ks4ntaci2().s[364]++,this);cov_1ks4ntaci2().s[365]++;return this.get("history",options,function(err,response){cov_1ks4ntaci2().f[99]++;cov_1ks4ntaci2().s[366]++;if(err){cov_1ks4ntaci2().b[109][0]++;cov_1ks4ntaci2().s[367]++;callback(err);cov_1ks4ntaci2().s[368]++;return;}else{cov_1ks4ntaci2().b[109][1]++;}var jobs=(cov_1ks4ntaci2().s[369]++,[]);var data=(cov_1ks4ntaci2().s[370]++,(cov_1ks4ntaci2().b[110][0]++,response.data.entry)||(cov_1ks4ntaci2().b[110][1]++,[]));cov_1ks4ntaci2().s[371]++;for(var i=(cov_1ks4ntaci2().s[372]++,0);i<data.length;i++){var jobData=(cov_1ks4ntaci2().s[373]++,response.data.entry[i]);var namespace=(cov_1ks4ntaci2().s[374]++,utils.namespaceFromProperties(jobData));var job=(cov_1ks4ntaci2().s[375]++,new root.Job(that.service,jobData.name,namespace));cov_1ks4ntaci2().s[376]++;job._load(jobData);cov_1ks4ntaci2().s[377]++;jobs.push(job);}cov_1ks4ntaci2().s[378]++;callback(null,jobs,that);});},/**
         * Retrieves the suppression state of a saved search.
         *
         * @example
         *
         *      var savedSearch = service.savedSearches().item("MySavedSearch");
         *      savedSearch.history(function(err, suppressionState, search) {
         *          console.log("STATE: ", suppressionState);
         *      });
         *
         * @param {Function} callback A function to call when the suppression state is retrieved: `(err, suppressionState, savedSearch)`.
         *
         * @endpoint saved/searches/{name}/suppress
         * @method splunkjs.Service.SavedSearch
         */suppressInfo:function(callback){cov_1ks4ntaci2().f[100]++;cov_1ks4ntaci2().s[379]++;callback=(cov_1ks4ntaci2().b[111][0]++,callback)||(cov_1ks4ntaci2().b[111][1]++,function(){cov_1ks4ntaci2().f[101]++;});var that=(cov_1ks4ntaci2().s[380]++,this);cov_1ks4ntaci2().s[381]++;return this.get("suppress",{},function(err,response){cov_1ks4ntaci2().f[102]++;cov_1ks4ntaci2().s[382]++;callback(err,response.data.entry.content,that);});},/**
         * Updates the saved search on the server. 
         *
         * **Note:** The search query is required, even when it isn't being modified.
         * If you don't provide it, this method will fetch the search string from
         * the server or from the local cache. 
         *
         * @param {Object} props The properties to update the saved search with. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#savedsearchparams" target="_blank">Saved search parameters</a> on Splunk Developer Portal.
         * @param {Function} callback A function to call when the object is updated: `(err, entity)`.
         *
         * @method splunkjs.Service.SavedSearch
         */update:function(params,callback){cov_1ks4ntaci2().f[103]++;cov_1ks4ntaci2().s[383]++;params=(cov_1ks4ntaci2().b[112][0]++,params)||(cov_1ks4ntaci2().b[112][1]++,{});cov_1ks4ntaci2().s[384]++;if(!params.search){cov_1ks4ntaci2().b[113][0]++;var update=(cov_1ks4ntaci2().s[385]++,this._super);var req=(cov_1ks4ntaci2().s[386]++,this.fetch(function(err,search){cov_1ks4ntaci2().f[104]++;cov_1ks4ntaci2().s[387]++;if(err){cov_1ks4ntaci2().b[114][0]++;cov_1ks4ntaci2().s[388]++;callback(err);}else{cov_1ks4ntaci2().b[114][1]++;cov_1ks4ntaci2().s[389]++;params.search=search.properties().search;cov_1ks4ntaci2().s[390]++;update.call(search,params,function(){cov_1ks4ntaci2().f[105]++;cov_1ks4ntaci2().s[391]++;if(req.wasAborted){cov_1ks4ntaci2().b[115][0]++;cov_1ks4ntaci2().s[392]++;return;// aborted, so ignore
}else{cov_1ks4ntaci2().b[115][1]++;cov_1ks4ntaci2().s[393]++;callback.apply(null,arguments);}});}}));cov_1ks4ntaci2().s[394]++;return req;}else{cov_1ks4ntaci2().b[113][1]++;cov_1ks4ntaci2().s[395]++;return this._super(params,callback);}}});/**
     * Represents a collection of saved searches. You can create and list saved 
     * searches using this collection container, or get a specific saved search.
     *
     *
     * @endpoint saved/searches
     * @class splunkjs.Service.SavedSearches
     * @extends splunkjs.Service.Collection
     */cov_1ks4ntaci2().s[396]++;root.SavedSearches=root.Collection.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.SavedSearches
         */path:function(){cov_1ks4ntaci2().f[106]++;cov_1ks4ntaci2().s[397]++;return Paths.savedSearches;},/**
         * Creates a local instance of a saved search.
         *
         * @param {Object} props The properties for the new saved search. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#savedsearchparams" target="_blank">Saved search parameters</a> on Splunk Developer Portal.
         * @return {splunkjs.Service.SavedSearch} A new `splunkjs.Service.SavedSearch` instance.
         *
         * @method splunkjs.Service.SavedSearches
         */instantiateEntity:function(props){cov_1ks4ntaci2().f[107]++;var entityNamespace=(cov_1ks4ntaci2().s[398]++,utils.namespaceFromProperties(props));cov_1ks4ntaci2().s[399]++;return new root.SavedSearch(this.service,props.name,entityNamespace);},/**
         * Constructor for `splunkjs.Service.SavedSearches`. 
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.SavedSearches} A new `splunkjs.Service.SavedSearches` instance.
         *
         * @method splunkjs.Service.SavedSearches
         */init:function(service,namespace){cov_1ks4ntaci2().f[108]++;cov_1ks4ntaci2().s[400]++;this._super(service,this.path(),namespace);}});/**
     * Represents a specific storage password, which you can then view, modify, and
     * remove.
     *
     * @endpoint storage/passwords/{name}
     * @class splunkjs.Service.StoragePassword
     * @extends splunkjs.Service.Entity
     */cov_1ks4ntaci2().s[401]++;root.StoragePassword=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.StoragePassword
         */path:function(){cov_1ks4ntaci2().f[109]++;cov_1ks4ntaci2().s[402]++;return Paths.storagePasswords+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.StoragePassword`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name for the new storage password.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.StoragePassword} A new `splunkjs.Service.StoragePassword` instance.
         *
         * @method splunkjs.Service.StoragePassword
         */init:function(service,name,namespace){cov_1ks4ntaci2().f[110]++;cov_1ks4ntaci2().s[403]++;this.name=name;cov_1ks4ntaci2().s[404]++;this._super(service,this.path(),namespace);}});/**
     * Represents a collection of storage passwords. You can create and list storage 
     * passwords using this collection container, or get a specific storage password.
     *
     * @endpoint storage/passwords
     * @class splunkjs.Service.StoragePasswords
     * @extends splunkjs.Service.Collection
     */cov_1ks4ntaci2().s[405]++;root.StoragePasswords=root.Collection.extend({/**
         * Indicates whether to call `fetch` after an entity has been created. By 
         * default, the entity is not fetched because the endpoint returns
         * (echoes) the new entity.
         *
         * @method splunkjs.Service.StoragePasswords
         */fetchOnEntityCreation:true,/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.StoragePasswords
         */path:function(){cov_1ks4ntaci2().f[111]++;cov_1ks4ntaci2().s[406]++;return Paths.storagePasswords;},/**
         * Creates a local instance of a storage password.
         *
         * @param {Object} props The properties for the new storage password. For a list of available parameters,
         * see <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTaccess#POST_storage.2Fpasswords" target="_blank">
         * POST storage/passwords</a> on Splunk Developer Portal.
         * @return {splunkjs.Service.SavedSearch} A new `splunkjs.Service.StoragePassword` instance.
         *
         * @method splunkjs.Service.StoragePasswords
         */instantiateEntity:function(props){cov_1ks4ntaci2().f[112]++;var entityNamespace=(cov_1ks4ntaci2().s[407]++,utils.namespaceFromProperties(props));cov_1ks4ntaci2().s[408]++;return new root.StoragePassword(this.service,props.name,entityNamespace);},/**
         * Constructor for `splunkjs.Service.StoragePasswords`. 
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.StoragePasswords} A new `splunkjs.Service.StoragePasswords` instance.
         *
         * @method splunkjs.Service.StoragePasswords
         */init:function(service,namespace){cov_1ks4ntaci2().f[113]++;cov_1ks4ntaci2().s[409]++;this._super(service,this.path(),namespace);}});/**
     * Represents a fired alert. 
     * You can retrieve several of the fired alert's properties by
     * the corresponding function name.
     *
     * @endpoint alerts/fired_alerts/{name}
     * @class splunkjs.Service.FiredAlert
     * @extends splunkjs.Service.Entity
     */cov_1ks4ntaci2().s[410]++;root.FiredAlert=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.FiredAlert
         */path:function(){cov_1ks4ntaci2().f[114]++;cov_1ks4ntaci2().s[411]++;return Paths.firedAlerts+"/"+encodeURIComponent(this.name);},/**
         * Returns this alert's actions (such as notifying by email, running a 
         * script, adding to RSS, tracking in Alert Manager, and enabling 
         * summary indexing). 
         *
         * @return {Array} of actions, an empty {Array} if no actions
         * @method splunkjs.Service.FiredAlert
         */actions:function(){cov_1ks4ntaci2().f[115]++;cov_1ks4ntaci2().s[412]++;return(cov_1ks4ntaci2().b[116][0]++,this.properties().actions)||(cov_1ks4ntaci2().b[116][1]++,[]);},/**
         * Returns this alert's type.
         *
         * @return {String} the alert's type.
         * @method splunkjs.Service.FiredAlert
         */alertType:function(){cov_1ks4ntaci2().f[116]++;cov_1ks4ntaci2().s[413]++;return(cov_1ks4ntaci2().b[117][0]++,this.properties().alert_type)||(cov_1ks4ntaci2().b[117][1]++,null);},/**
         * Indicates whether the result is a set of events (digest) or a single
         * event (per result).
         *
         * This method is available in Splunk 4.3 and later.
         *
         * @return {Boolean} true if the result is a digest, false if per result
         * @method splunkjs.Service.FiredAlert
         */isDigestMode:function(){cov_1ks4ntaci2().f[117]++;cov_1ks4ntaci2().s[414]++;// Convert this property to a Boolean
return!!this.properties().digest_mode;},/**
         * Returns the rendered expiration time for this alert.
         *
         * This method is available in Splunk 4.3 and later.
         *
         * @return {String}
         * @method splunkjs.Service.FiredAlert
         */expirationTime:function(){cov_1ks4ntaci2().f[118]++;cov_1ks4ntaci2().s[415]++;return(cov_1ks4ntaci2().b[118][0]++,this.properties().expiration_time_rendered)||(cov_1ks4ntaci2().b[118][1]++,null);},/**
         * Returns the saved search for this alert.
         *
         * @return {String} The saved search name, or {null} if not available.
         * @method splunkjs.Service.FiredAlert
         */savedSearchName:function(){cov_1ks4ntaci2().f[119]++;cov_1ks4ntaci2().s[416]++;return(cov_1ks4ntaci2().b[119][0]++,this.properties().savedsearch_name)||(cov_1ks4ntaci2().b[119][1]++,null);},/**
         * Returns this alert's severity on a scale of 1 to 10, with 1 being the
         * highest severity.
         *
         * @return {Number} this alert's severity, -1 if not specified
         * @method splunkjs.Service.FiredAlert
         */severity:function(){cov_1ks4ntaci2().f[120]++;cov_1ks4ntaci2().s[417]++;return(cov_1ks4ntaci2().b[120][0]++,parseInt(this.properties().severity,10))||(cov_1ks4ntaci2().b[120][1]++,-1);},/**
         * Returns this alert's search ID (SID).
         *
         * @return {String} This alert's SID, or {null} if not available.
         * @method splunkjs.Service.FiredAlert
         */sid:function(){cov_1ks4ntaci2().f[121]++;cov_1ks4ntaci2().s[418]++;return(cov_1ks4ntaci2().b[121][0]++,this.properties().sid)||(cov_1ks4ntaci2().b[121][1]++,null);},/**
         * Returns the time this alert was triggered.
         *
         * @return {Number} This alert's trigger time, or {null} if not available.
         * @method splunkjs.Service.FiredAlert
         */triggerTime:function(){cov_1ks4ntaci2().f[122]++;cov_1ks4ntaci2().s[419]++;return(cov_1ks4ntaci2().b[122][0]++,this.properties().trigger_time)||(cov_1ks4ntaci2().b[122][1]++,null);},/**
         * Returns this alert's rendered trigger time.
         *
         * This method is available in Splunk 4.3 and later.
         *
         * @return {String} This alert's rendered trigger time, or {null} if not available.
         * @method splunkjs.Service.FiredAlert
         */triggerTimeRendered:function(){cov_1ks4ntaci2().f[123]++;cov_1ks4ntaci2().s[420]++;return(cov_1ks4ntaci2().b[123][0]++,this.properties().trigger_time_rendered)||(cov_1ks4ntaci2().b[123][1]++,null);},/**
         * Returns the count of triggered alerts.
         *
         * This method is available in Splunk 4.3 and later.
         *
         * @return {Number} The number of triggered alerts, or -1 if not specified.
         * @method splunkjs.Service.FiredAlert
         */triggeredAlertCount:function(){cov_1ks4ntaci2().f[124]++;cov_1ks4ntaci2().s[421]++;return(cov_1ks4ntaci2().b[124][0]++,parseInt(this.properties().triggered_alerts,10))||(cov_1ks4ntaci2().b[124][1]++,-1);},/**
         * Constructor for `splunkjs.Service.FiredAlert`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name for the new alert group.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.FiredAlert} A new `splunkjs.Service.FiredAlert` instance.
         *
         * @method splunkjs.Service.FiredAlert
         */init:function(service,name,namespace){cov_1ks4ntaci2().f[125]++;cov_1ks4ntaci2().s[422]++;this.name=name;cov_1ks4ntaci2().s[423]++;this._super(service,this.path(),namespace);}});/**
     * Represents a specific alert group, which you can then view and
     * remove.
     *
     * @endpoint alerts/fired_alerts/{name}
     * @class splunkjs.Service.FiredAlertGroup
     * @extends splunkjs.Service.Entity
     */cov_1ks4ntaci2().s[424]++;root.FiredAlertGroup=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.FiredAlertGroup
         */path:function(){cov_1ks4ntaci2().f[126]++;cov_1ks4ntaci2().s[425]++;return Paths.firedAlerts+"/"+encodeURIComponent(this.name);},/**
         * Returns the `triggered_alert_count` property, the count
         * of triggered alerts.
         *
         * @return {Number} the count of triggered alerts
         *
         * @method splunkjs.Service.FiredAlertGroup
         */count:function(){cov_1ks4ntaci2().f[127]++;cov_1ks4ntaci2().s[426]++;return(cov_1ks4ntaci2().b[125][0]++,parseInt(this.properties().triggered_alert_count,10))||(cov_1ks4ntaci2().b[125][1]++,0);},/**
         * Returns fired instances of this alert, which is
         * a list of `splunkjs.Service.FiredAlert` instances.
         *
         * @example
         *
         *      var alertGroup = service.firedAlertGroups().item("MyAlert");
         *      alertGroup.list(function(err, firedAlerts, alert) {
         *          for(var i = 0; i < firedAlerts.length; i++) {
         *              console.log("Fired alert", i, ":", firedAlerts[i].sid);
         *          }
         *      });
         *
         * @param {Function} callback A function to call when the fired alerts are retrieved: `(err, firedAlerts, alertGroup)`.
         *
         * @method splunkjs.Service.FiredAlertGroup
         */list:function(options,callback){cov_1ks4ntaci2().f[128]++;cov_1ks4ntaci2().s[427]++;if((cov_1ks4ntaci2().b[127][0]++,!callback)&&(cov_1ks4ntaci2().b[127][1]++,utils.isFunction(options))){cov_1ks4ntaci2().b[126][0]++;cov_1ks4ntaci2().s[428]++;callback=options;cov_1ks4ntaci2().s[429]++;options={};}else{cov_1ks4ntaci2().b[126][1]++;}cov_1ks4ntaci2().s[430]++;callback=(cov_1ks4ntaci2().b[128][0]++,callback)||(cov_1ks4ntaci2().b[128][1]++,function(){cov_1ks4ntaci2().f[129]++;});cov_1ks4ntaci2().s[431]++;options=(cov_1ks4ntaci2().b[129][0]++,options)||(cov_1ks4ntaci2().b[129][1]++,{});var that=(cov_1ks4ntaci2().s[432]++,this);cov_1ks4ntaci2().s[433]++;return this.get("",options,function(err,response){cov_1ks4ntaci2().f[130]++;cov_1ks4ntaci2().s[434]++;if(err){cov_1ks4ntaci2().b[130][0]++;cov_1ks4ntaci2().s[435]++;callback(err);cov_1ks4ntaci2().s[436]++;return;}else{cov_1ks4ntaci2().b[130][1]++;}var firedAlerts=(cov_1ks4ntaci2().s[437]++,[]);var data=(cov_1ks4ntaci2().s[438]++,(cov_1ks4ntaci2().b[131][0]++,response.data.entry)||(cov_1ks4ntaci2().b[131][1]++,[]));cov_1ks4ntaci2().s[439]++;for(var i=(cov_1ks4ntaci2().s[440]++,0);i<data.length;i++){var firedAlertData=(cov_1ks4ntaci2().s[441]++,response.data.entry[i]);var namespace=(cov_1ks4ntaci2().s[442]++,utils.namespaceFromProperties(firedAlertData));var firedAlert=(cov_1ks4ntaci2().s[443]++,new root.FiredAlert(that.service,firedAlertData.name,namespace));cov_1ks4ntaci2().s[444]++;firedAlert._load(firedAlertData);cov_1ks4ntaci2().s[445]++;firedAlerts.push(firedAlert);}cov_1ks4ntaci2().s[446]++;callback(null,firedAlerts,that);});},/**
         * Constructor for `splunkjs.Service.FiredAlertGroup`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name for the new alert group.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.FiredAlertGroup} A new `splunkjs.Service.FiredAlertGroup` instance.
         *
         * @method splunkjs.Service.FiredAlertGroup
         */init:function(service,name,namespace){cov_1ks4ntaci2().f[131]++;cov_1ks4ntaci2().s[447]++;this.name=name;cov_1ks4ntaci2().s[448]++;this._super(service,this.path(),namespace);cov_1ks4ntaci2().s[449]++;this.list=utils.bind(this,this.list);}});/**
     * Represents a collection of fired alerts for a saved search. You can
     * create and list saved searches using this collection container, or
     * get a specific alert group. 
     *
     *
     * @endpoint alerts/fired_alerts
     * @class splunkjs.Service.FiredAlertGroupCollection
     * @extends splunkjs.Service.Collection
     */cov_1ks4ntaci2().s[450]++;root.FiredAlertGroupCollection=root.Collection.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.FiredAlertGroupCollection
         */path:function(){cov_1ks4ntaci2().f[132]++;cov_1ks4ntaci2().s[451]++;return Paths.firedAlerts;},/**
         * Creates a local instance of an alert group.
         *
         * @param {Object} props The properties for the alert group.
         * @return {splunkjs.Service.FiredAlertGroup} A new `splunkjs.Service.FiredAlertGroup` instance.
         *
         * @method splunkjs.Service.FiredAlertGroupCollection
         */instantiateEntity:function(props){cov_1ks4ntaci2().f[133]++;var entityNamespace=(cov_1ks4ntaci2().s[452]++,utils.namespaceFromProperties(props));cov_1ks4ntaci2().s[453]++;return new root.FiredAlertGroup(this.service,props.name,entityNamespace);},/**
         * Suppress removing alerts via the fired alerts endpoint.
         *
         * @method splunkjs.Service.FiredAlertGroupCollection
         */remove:function(){cov_1ks4ntaci2().f[134]++;cov_1ks4ntaci2().s[454]++;throw new Error("To remove an alert, remove the saved search with the same name.");},/**
         * Constructor for `splunkjs.Service.FiredAlertGroupCollection`. 
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.FiredAlertGroupCollection} A new `splunkjs.Service.FiredAlertGroupCollection` instance.
         *
         * @method splunkjs.Service.FiredAlertGroupCollection
         */init:function(service,namespace){cov_1ks4ntaci2().f[135]++;cov_1ks4ntaci2().s[455]++;this._super(service,this.path(),namespace);cov_1ks4ntaci2().s[456]++;this.instantiateEntity=utils.bind(this,this.instantiateEntity);cov_1ks4ntaci2().s[457]++;this.remove=utils.bind(this,this.remove);}});/**
     * Represents a specific Splunk app that you can view, modify, and
     * remove.
     *
     * @endpoint apps/local/{name}
     * @class splunkjs.Service.Application
     * @extends splunkjs.Service.Entity
     */cov_1ks4ntaci2().s[458]++;root.Application=root.Entity.extend({/**
         * Indicates whether to call `fetch` after an update to get the updated 
         * item.
         *
         * @method splunkjs.Service.Application
         */fetchOnUpdate:true,/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Application
         */path:function(){cov_1ks4ntaci2().f[136]++;cov_1ks4ntaci2().s[459]++;return Paths.apps+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.Application`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name of the Splunk app.
         * @return {splunkjs.Service.Application} A new `splunkjs.Service.Application` instance.
         *
         * @method splunkjs.Service.Application
         */init:function(service,name){cov_1ks4ntaci2().f[137]++;cov_1ks4ntaci2().s[460]++;this.name=name;cov_1ks4ntaci2().s[461]++;this._super(service,this.path(),{});cov_1ks4ntaci2().s[462]++;this.setupInfo=utils.bind(this,this.setupInfo);cov_1ks4ntaci2().s[463]++;this.updateInfo=utils.bind(this,this.updateInfo);},/**
         * Retrieves the setup information for a Splunk app.
         *
         * @example
         *
         *      var app = service.apps().item("app");
         *      app.setup(function(err, info, search) {
         *          console.log("SETUP INFO: ", info);
         *      });
         *
         * @param {Function} callback A function to call when setup information is retrieved: `(err, info, app)`.
         *
         * @endpoint apps/local/{name}/setup
         * @method splunkjs.Service.Application
         */setupInfo:function(callback){cov_1ks4ntaci2().f[138]++;cov_1ks4ntaci2().s[464]++;callback=(cov_1ks4ntaci2().b[132][0]++,callback)||(cov_1ks4ntaci2().b[132][1]++,function(){cov_1ks4ntaci2().f[139]++;});var that=(cov_1ks4ntaci2().s[465]++,this);cov_1ks4ntaci2().s[466]++;return this.get("setup",{},function(err,response){cov_1ks4ntaci2().f[140]++;cov_1ks4ntaci2().s[467]++;if(err){cov_1ks4ntaci2().b[133][0]++;cov_1ks4ntaci2().s[468]++;callback(err);}else{cov_1ks4ntaci2().b[133][1]++;cov_1ks4ntaci2().s[469]++;callback(null,response.data.entry.content,that);}});},/**
         * Retrieves any information for an update to a locally-installed Splunk app.
         *
         * @example
         *
         *      var app = service.apps().item("MyApp");
         *      app.updateInfo(function(err, info, app) {
         *          console.log("UPDATE INFO: ", info);
         *      });
         *
         * @param {Function} callback A function to call when update information is retrieved: `(err, info, app)`.
         *
         * @endpoint apps/local/{name}/update
         * @method splunkjs.Service.Application
         */updateInfo:function(callback){cov_1ks4ntaci2().f[141]++;cov_1ks4ntaci2().s[470]++;callback=(cov_1ks4ntaci2().b[134][0]++,callback)||(cov_1ks4ntaci2().b[134][1]++,function(){cov_1ks4ntaci2().f[142]++;});var that=(cov_1ks4ntaci2().s[471]++,this);cov_1ks4ntaci2().s[472]++;return this.get("update",{},function(err,response){cov_1ks4ntaci2().f[143]++;cov_1ks4ntaci2().s[473]++;if(err){cov_1ks4ntaci2().b[135][0]++;cov_1ks4ntaci2().s[474]++;callback(err);}else{cov_1ks4ntaci2().b[135][1]++;cov_1ks4ntaci2().s[475]++;callback(null,response.data.entry.content,that);}});}});/**
     * Represents a collection of Splunk apps. You can create and list applications 
     * using this collection container, or get a specific app.
     *
     * @endpoint apps/local
     * @class splunkjs.Service.Applications
     * @extends splunkjs.Service.Collection
     */cov_1ks4ntaci2().s[476]++;root.Applications=root.Collection.extend({/**
         * Indicates whether to call `fetch` after an entity has been created. By 
         * default, the entity is not fetched because the endpoint returns
         * (echoes) the new entity.
         *
         * @method splunkjs.Service.Applications
         */fetchOnEntityCreation:true,/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Applications
         */path:function(){cov_1ks4ntaci2().f[144]++;cov_1ks4ntaci2().s[477]++;return Paths.apps;},/**
         * Creates a local instance of an app.
         *
         * @param {Object} props The properties for the new app. For details, see the <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTapps#POST_apps.2Flocal" target="_blank">POST apps/local</a> endpoint in the REST API documentation.
         * @return {splunkjs.Service.Application} A new `splunkjs.Service.Application` instance.
         *
         * @method splunkjs.Service.Applications
         */instantiateEntity:function(props){cov_1ks4ntaci2().f[145]++;cov_1ks4ntaci2().s[478]++;return new root.Application(this.service,props.name,{});},/**
         * Constructor for `splunkjs.Service.Applications`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @return {splunkjs.Service.Applications} A new `splunkjs.Service.Applications` instance.
         *
         * @method splunkjs.Service.Applications
         */init:function(service){cov_1ks4ntaci2().f[146]++;cov_1ks4ntaci2().s[479]++;this._super(service,this.path(),{});}});/**
     * Provides access to configuration information about the server.
     *
     * @endpoint server/info
     * @class splunkjs.Service.ServerInfo
     * @extends splunkjs.Service.Entity
     */cov_1ks4ntaci2().s[480]++;root.ServerInfo=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.ServerInfo
         */path:function(){cov_1ks4ntaci2().f[147]++;cov_1ks4ntaci2().s[481]++;return Paths.info;},/**
         * Constructor for `splunkjs.Service.ServerInfo`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @return {splunkjs.Service.ServerInfo} A new `splunkjs.Service.ServerInfo` instance.
         *
         * @method splunkjs.Service.ServerInfo
         */init:function(service){cov_1ks4ntaci2().f[148]++;cov_1ks4ntaci2().s[482]++;this.name="server-info";cov_1ks4ntaci2().s[483]++;this._super(service,this.path(),{});}});/**
     * Represents a specific Splunk user, which you can view, modify, and
     * remove.
     *
     * @endpoint authentication/users/{name}
     * @class splunkjs.Service.User
     * @extends splunkjs.Service.Entity
     */cov_1ks4ntaci2().s[484]++;root.User=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.User
         */path:function(){cov_1ks4ntaci2().f[149]++;cov_1ks4ntaci2().s[485]++;return Paths.users+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.User`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The Splunk username.
         * @return {splunkjs.Service.User} A new `splunkjs.Service.User` instance.
         *
         * @method splunkjs.Service.User
         */init:function(service,name){cov_1ks4ntaci2().f[150]++;cov_1ks4ntaci2().s[486]++;this.name=name;cov_1ks4ntaci2().s[487]++;this._super(service,this.path(),{});}});/**
     * Represents a collection of users. You can create and list users using 
     * this collection container, or get a specific user.
     *
     * @endpoint authentication/users
     * @class splunkjs.Service.Users
     * @extends splunkjs.Service.Collection
     */cov_1ks4ntaci2().s[488]++;root.Users=root.Collection.extend({/**
         * Indicates whether to call `fetch` after an entity has been created. By 
         * default, the entity is not fetched because the endpoint returns
         * (echoes) the new entity.
         *
         * @method splunkjs.Service.Users
         */fetchOnEntityCreation:true,/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Users
         */path:function(){cov_1ks4ntaci2().f[151]++;cov_1ks4ntaci2().s[489]++;return Paths.users;},/**
         * Creates a local instance of a user.
         *
         * @param {Object} props The properties for this new user. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEJ8#userauthparams" target="_blank">User authentication parameters</a> on Splunk Developer Portal.
         * @return {splunkjs.Service.User} A new `splunkjs.Service.User` instance.
         *
         * @method splunkjs.Service.Users
         */instantiateEntity:function(props){cov_1ks4ntaci2().f[152]++;cov_1ks4ntaci2().s[490]++;return new root.User(this.service,props.name,{});},/**
         * Constructor for `splunkjs.Service.Users`. 
         * 
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @return {splunkjs.Service.Users} A new `splunkjs.Service.Users` instance.
         *
         * @method splunkjs.Service.Users
         */init:function(service){cov_1ks4ntaci2().f[153]++;cov_1ks4ntaci2().s[491]++;this._super(service,this.path(),{});},/**
         * Creates a new user. 
         *
         * **Note:** This endpoint requires a special implementation.
         *
         * @param {Object} params A dictionary of properties. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEJ8#userauthparams" target="_blank">User authentication parameters</a> on Splunk Developer Portal.
         * @param {Function} callback A function to call with the new entity: `(err, createdEntity)`.
         *
         * @method splunkjs.Service.Users
         */create:function(params,callback){cov_1ks4ntaci2().f[154]++;cov_1ks4ntaci2().s[492]++;callback=(cov_1ks4ntaci2().b[136][0]++,callback)||(cov_1ks4ntaci2().b[136][1]++,function(){cov_1ks4ntaci2().f[155]++;});var that=(cov_1ks4ntaci2().s[493]++,this);var req=(cov_1ks4ntaci2().s[494]++,this.post("",params,function(err,response){cov_1ks4ntaci2().f[156]++;cov_1ks4ntaci2().s[495]++;if(err){cov_1ks4ntaci2().b[137][0]++;cov_1ks4ntaci2().s[496]++;callback(err);}else{cov_1ks4ntaci2().b[137][1]++;// This endpoint requires us to use the passed-in name
var props=(cov_1ks4ntaci2().s[497]++,{name:params.name});var entity=(cov_1ks4ntaci2().s[498]++,that.instantiateEntity(props));cov_1ks4ntaci2().s[499]++;entity.fetch(function(){cov_1ks4ntaci2().f[157]++;cov_1ks4ntaci2().s[500]++;if(req.wasAborted){cov_1ks4ntaci2().b[138][0]++;cov_1ks4ntaci2().s[501]++;return;// aborted, so ignore
}else{cov_1ks4ntaci2().b[138][1]++;cov_1ks4ntaci2().s[502]++;callback.apply(null,arguments);}});}}));cov_1ks4ntaci2().s[503]++;return req;}});/**
     * Represents a specific Splunk view, which you can view, modify, and
     * remove.
     *
     * @endpoint data/ui/views/{name}
     * @class splunkjs.Service.View
     * @extends splunkjs.Service.Entity
     */cov_1ks4ntaci2().s[504]++;root.View=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.View
         */path:function(){cov_1ks4ntaci2().f[158]++;cov_1ks4ntaci2().s[505]++;return Paths.views+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.View`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name of the view.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.View} A new `splunkjs.Service.View` instance.
         *
         * @method splunkjs.Service.View
         */init:function(service,name,namespace){cov_1ks4ntaci2().f[159]++;cov_1ks4ntaci2().s[506]++;this.name=name;cov_1ks4ntaci2().s[507]++;this._super(service,this.path(),namespace);}});/**
     * Represents a collection of views. You can create and list views using 
     * this collection container, or get a specific view.
     *
     * @endpoint data/ui/views
     * @class splunkjs.Service.Views
     * @extends splunkjs.Service.Collection
     */cov_1ks4ntaci2().s[508]++;root.Views=root.Collection.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Views
         */path:function(){cov_1ks4ntaci2().f[160]++;cov_1ks4ntaci2().s[509]++;return Paths.views;},/**
         * Creates a local instance of a view.
         *
         * @param {Object} props The properties for the new view. For a list of available parameters, see the <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#POST_scheduled.2Fviews.2F.7Bname.7D" target="_blank">POST scheduled/views/{name}</a> endpoint in the REST API documentation.
         * @return {splunkjs.Service.View} A new `splunkjs.Service.View` instance.
         *
         * @method splunkjs.Service.Views
         */instantiateEntity:function(props){cov_1ks4ntaci2().f[161]++;var entityNamespace=(cov_1ks4ntaci2().s[510]++,utils.namespaceFromProperties(props));cov_1ks4ntaci2().s[511]++;return new root.View(this.service,props.name,entityNamespace);},/**
         * Constructor for `splunkjs.Service.Views`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Views} A new `splunkjs.Service.Views` instance.
         *
         * @method splunkjs.Service.Views
         */init:function(service,namespace){cov_1ks4ntaci2().f[162]++;cov_1ks4ntaci2().s[512]++;this._super(service,this.path(),namespace);}});/**
     * Represents an index, which you can update and submit events to.
     *
     * @endpoint data/indexes/name
     * @class splunkjs.Service.Index
     * @extends splunkjs.Service.Entity
     */cov_1ks4ntaci2().s[513]++;root.Index=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Index
         */path:function(){cov_1ks4ntaci2().f[163]++;cov_1ks4ntaci2().s[514]++;return Paths.indexes+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.Index`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name of the index.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Index} A new `splunkjs.Service.Index` instance.
         *
         * @method splunkjs.Service.Index
         */init:function(service,name,namespace){cov_1ks4ntaci2().f[164]++;cov_1ks4ntaci2().s[515]++;this.name=name;cov_1ks4ntaci2().s[516]++;this._super(service,this.path(),namespace);cov_1ks4ntaci2().s[517]++;this.submitEvent=utils.bind(this,this.submitEvent);},/**
         * Submits an event to this index.
         *
         * @example
         *
         *      var index = service.indexes().item("_internal");
         *      index.submitEvent("A new event", {sourcetype: "mysourcetype"}, function(err, result, index) {
         *          console.log("Submitted event: ", result);
         *      });
         *
         * @param {String} event The text for this event.
         * @param {Object} params A dictionary of parameters for indexing: 
         *    - `host` (_string_): The value to populate in the host field for events from this data input. 
         *    - `host_regex` (_string_): A regular expression used to extract the host value from each event. 
         *    - `source` (_string_): The source value to fill in the metadata for this input's events.
         *    - `sourcetype` (_string_): The sourcetype to apply to events from this input.
         * @param {Function} callback A function to call when the event is submitted: `(err, result, index)`.
         *
         * @endpoint receivers/simple?index={name}
         * @method splunkjs.Service.Index
         */submitEvent:function(event,params,callback){cov_1ks4ntaci2().f[165]++;cov_1ks4ntaci2().s[518]++;if((cov_1ks4ntaci2().b[140][0]++,!callback)&&(cov_1ks4ntaci2().b[140][1]++,utils.isFunction(params))){cov_1ks4ntaci2().b[139][0]++;cov_1ks4ntaci2().s[519]++;callback=params;cov_1ks4ntaci2().s[520]++;params={};}else{cov_1ks4ntaci2().b[139][1]++;}cov_1ks4ntaci2().s[521]++;callback=(cov_1ks4ntaci2().b[141][0]++,callback)||(cov_1ks4ntaci2().b[141][1]++,function(){cov_1ks4ntaci2().f[166]++;});cov_1ks4ntaci2().s[522]++;params=(cov_1ks4ntaci2().b[142][0]++,params)||(cov_1ks4ntaci2().b[142][1]++,{});// Add the index name
cov_1ks4ntaci2().s[523]++;params["index"]=this.name;var that=(cov_1ks4ntaci2().s[524]++,this);cov_1ks4ntaci2().s[525]++;return this.service.log(event,params,function(err,result){cov_1ks4ntaci2().f[167]++;cov_1ks4ntaci2().s[526]++;callback(err,result,that);});},remove:function(callback){cov_1ks4ntaci2().f[168]++;cov_1ks4ntaci2().s[527]++;if(this.service.versionCompare("5.0")<0){cov_1ks4ntaci2().b[143][0]++;cov_1ks4ntaci2().s[528]++;throw new Error("Indexes cannot be removed in Splunk 4.x");}else{cov_1ks4ntaci2().b[143][1]++;cov_1ks4ntaci2().s[529]++;return this._super(callback);}}});/**
     * Represents a collection of indexes. You can create and list indexes using 
     * this collection container, or get a specific index.
     *
     * @endpoint data/indexes
     * @class splunkjs.Service.Indexes
     * @extends splunkjs.Service.Collection
     */cov_1ks4ntaci2().s[530]++;root.Indexes=root.Collection.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Indexes
         */path:function(){cov_1ks4ntaci2().f[169]++;cov_1ks4ntaci2().s[531]++;return Paths.indexes;},/**
         * Creates a local instance of an index.
         *
         * @param {Object} props The properties for the new index. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEJ3#indexparams" target="_blank">Index parameters</a> on Splunk Developer Portal.
         * @return {splunkjs.Service.Index} A new `splunkjs.Service.Index` instance.
         *
         * @method splunkjs.Service.Indexes
         */instantiateEntity:function(props){cov_1ks4ntaci2().f[170]++;var entityNamespace=(cov_1ks4ntaci2().s[532]++,utils.namespaceFromProperties(props));cov_1ks4ntaci2().s[533]++;return new root.Index(this.service,props.name,entityNamespace);},/**
         * Constructor for `splunkjs.Service.Indexes`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Indexes} A new `splunkjs.Service.Indexes` instance.
         *
         * @method splunkjs.Service.Indexes
         */init:function(service,namespace){cov_1ks4ntaci2().f[171]++;cov_1ks4ntaci2().s[534]++;this._super(service,this.path(),namespace);},/**
         * Creates an index with the given name and parameters.
         *
         * @example
         *
         *      var indexes = service.indexes();
         *      indexes.create("NewIndex", {assureUTF8: true}, function(err, newIndex) {
         *          console.log("CREATED");
         *      });
         *
         * @param {String} name A name for this index.
         * @param {Object} params A dictionary of properties. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEJ3#indexparams" target="_blank">Index parameters</a> on Splunk Developer Portal.
         * @param {Function} callback A function to call with the new index: `(err, createdIndex)`.
         *
         * @endpoint data/indexes
         * @method splunkjs.Service.Indexes
         */create:function(name,params,callback){cov_1ks4ntaci2().f[172]++;cov_1ks4ntaci2().s[535]++;// If someone called us with the default style of (params, callback),
// lets make it work
if((cov_1ks4ntaci2().b[145][0]++,utils.isObject(name))&&(cov_1ks4ntaci2().b[145][1]++,utils.isFunction(params))&&(cov_1ks4ntaci2().b[145][2]++,!callback)){cov_1ks4ntaci2().b[144][0]++;cov_1ks4ntaci2().s[536]++;callback=params;cov_1ks4ntaci2().s[537]++;params=name;cov_1ks4ntaci2().s[538]++;name=params.name;}else{cov_1ks4ntaci2().b[144][1]++;}cov_1ks4ntaci2().s[539]++;params=(cov_1ks4ntaci2().b[146][0]++,params)||(cov_1ks4ntaci2().b[146][1]++,{});cov_1ks4ntaci2().s[540]++;params["name"]=name;cov_1ks4ntaci2().s[541]++;return this._super(params,callback);}});/**
     * Represents a specific stanza, which you can update and remove, from a 
     * configuration file.
     *
     * @endpoint configs/conf-{file}/{name}`
     * @class splunkjs.Service.ConfigurationStanza
     * @extends splunkjs.Service.Entity
     */cov_1ks4ntaci2().s[542]++;root.ConfigurationStanza=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.ConfigurationStanza
         */path:function(){cov_1ks4ntaci2().f[173]++;var name=(cov_1ks4ntaci2().s[543]++,this.name==="default"?(cov_1ks4ntaci2().b[147][0]++,"_new"):(cov_1ks4ntaci2().b[147][1]++,this.name));cov_1ks4ntaci2().s[544]++;return Paths.configurations+"/conf-"+encodeURIComponent(this.file)+"/"+encodeURIComponent(name);},/**
         * Constructor for `splunkjs.Service.ConfigurationStanza`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} file The name of the configuration file.
         * @param {String} name The name of the new stanza.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.ConfigurationStanza} A new `splunkjs.Service.ConfigurationStanza` instance.
         *
         * @method splunkjs.Service.ConfigurationStanza
         */init:function(service,file,name,namespace){cov_1ks4ntaci2().f[174]++;cov_1ks4ntaci2().s[545]++;this.name=name;cov_1ks4ntaci2().s[546]++;this.file=file;cov_1ks4ntaci2().s[547]++;this._super(service,this.path(),namespace);}});/**
     * Represents a collection of stanzas for a specific property file. You can
     * create and list stanzas using this collection container, or get a specific 
     * stanza.
     *
     * @endpoint configs/conf-{file}
     * @class splunkjs.Service.ConfigurationFile
     * @extends splunkjs.Service.Collection
     */cov_1ks4ntaci2().s[548]++;root.ConfigurationFile=root.Collection.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.ConfigurationFile
         */path:function(){cov_1ks4ntaci2().f[175]++;cov_1ks4ntaci2().s[549]++;return Paths.configurations+"/conf-"+encodeURIComponent(this.name);},/**
         * Creates a local instance of the default stanza in a configuration file.
         * You cannot directly update the `ConfigurationStanza` returned by this function.
         *
         * This is equivalent to viewing `configs/conf-{file}/_new`.
         *
         * @return {splunkjs.Service.ConfigurationStanza} A new `splunkjs.Service.ConfigurationStanza` instance.
         *
         * @method splunkjs.Service.ConfigurationFile
         */getDefaultStanza:function(){cov_1ks4ntaci2().f[176]++;cov_1ks4ntaci2().s[550]++;return new root.ConfigurationStanza(this.service,this.name,"default",this.namespace);},/**
         * Creates a local instance of a stanza in a configuration file.
         *
         * @param {Object} props The key-value properties for the new stanza. 
         * @return {splunkjs.Service.ConfigurationStanza} A new `splunkjs.Service.ConfigurationStanza` instance.
         *
         * @method splunkjs.Service.ConfigurationFile
         */instantiateEntity:function(props){cov_1ks4ntaci2().f[177]++;var entityNamespace=(cov_1ks4ntaci2().s[551]++,utils.namespaceFromProperties(props));cov_1ks4ntaci2().s[552]++;return new root.ConfigurationStanza(this.service,this.name,props.name,entityNamespace);},/**
         * Constructor for `splunkjs.Service.ConfigurationFile`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name of the configuration file.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.ConfigurationFile} A new `splunkjs.Service.ConfigurationFile` instance.
         *
         * @method splunkjs.Service.ConfigurationFile
         */init:function(service,name,namespace){cov_1ks4ntaci2().f[178]++;cov_1ks4ntaci2().s[553]++;this.name=name;cov_1ks4ntaci2().s[554]++;this._super(service,this.path(),namespace);},/**
         * Creates a stanza in this configuration file.
         *
         * @example
         *
         *      var file = service.configurations().item("props");
         *      file.create("my_stanza", function(err, newStanza) {
         *          console.log("CREATED");
         *      });
         *
         * @param {String} stanzaName A name for this stanza.
         * @param {Object} values A dictionary of key-value pairs to put in this stanza.
         * @param {Function} callback A function to call with the created stanza: `(err, createdStanza)`.
         *
         * @endpoint configs/conf-{file}
         * @method splunkjs.Service.ConfigurationFile
         */create:function(stanzaName,values,callback){cov_1ks4ntaci2().f[179]++;cov_1ks4ntaci2().s[555]++;// If someone called us with the default style of (params, callback),
// lets make it work
if((cov_1ks4ntaci2().b[149][0]++,utils.isObject(stanzaName))&&(cov_1ks4ntaci2().b[149][1]++,utils.isFunction(values))&&(cov_1ks4ntaci2().b[149][2]++,!callback)){cov_1ks4ntaci2().b[148][0]++;cov_1ks4ntaci2().s[556]++;callback=values;cov_1ks4ntaci2().s[557]++;values=stanzaName;cov_1ks4ntaci2().s[558]++;stanzaName=values.name;}else{cov_1ks4ntaci2().b[148][1]++;}cov_1ks4ntaci2().s[559]++;if((cov_1ks4ntaci2().b[151][0]++,utils.isFunction(values))&&(cov_1ks4ntaci2().b[151][1]++,!callback)){cov_1ks4ntaci2().b[150][0]++;cov_1ks4ntaci2().s[560]++;callback=values;cov_1ks4ntaci2().s[561]++;values={};}else{cov_1ks4ntaci2().b[150][1]++;}cov_1ks4ntaci2().s[562]++;values=(cov_1ks4ntaci2().b[152][0]++,values)||(cov_1ks4ntaci2().b[152][1]++,{});cov_1ks4ntaci2().s[563]++;values["name"]=stanzaName;cov_1ks4ntaci2().s[564]++;return this._super(values,callback);}});/**
     * Represents a collection of configuration files. You can create and list 
     * configuration files using this collection container, or get a specific file.
     *
     * @endpoint properties
     * @class splunkjs.Service.Configurations
     * @extends splunkjs.Service.Collection
     */cov_1ks4ntaci2().s[565]++;root.Configurations=root.Collection.extend({/**
         * Indicates whether to call `fetch` after an entity has been created. By 
         * default, the entity is not fetched because the endpoint returns
         * (echoes) the new entity.
         *
         * @method splunkjs.Service.Configurations
         */fetchOnEntityCreation:true,/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Configurations
         */path:function(){cov_1ks4ntaci2().f[180]++;cov_1ks4ntaci2().s[566]++;return Paths.properties;},/**
         * Creates a local instance of a configuration file.
         *
         * @param {Object} props The properties for this configuration file.
         * @return {splunkjs.Service.ConfigurationFile} A new `splunkjs.Service.ConfigurationFile` instance.
         *
         * @method splunkjs.Service.Configurations
         */instantiateEntity:function(props){cov_1ks4ntaci2().f[181]++;cov_1ks4ntaci2().s[567]++;return new root.ConfigurationFile(this.service,props.name,this.namespace);},/**
         * Constructor for `splunkjs.Service.Configurations`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Configurations} A new `splunkjs.Service.Configurations` instance.
         *
         * @method splunkjs.Service.Configurations
         */init:function(service,namespace){cov_1ks4ntaci2().f[182]++;cov_1ks4ntaci2().s[568]++;if((cov_1ks4ntaci2().b[154][0]++,!namespace)||(cov_1ks4ntaci2().b[154][1]++,namespace.owner==="-")||(cov_1ks4ntaci2().b[154][2]++,namespace.app==="-")){cov_1ks4ntaci2().b[153][0]++;cov_1ks4ntaci2().s[569]++;throw new Error("Configurations requires a non-wildcard owner/app");}else{cov_1ks4ntaci2().b[153][1]++;}cov_1ks4ntaci2().s[570]++;this._super(service,this.path(),namespace);},/**
         * Creates a configuration file.
         *
         * @example
         *
         *      var configurations = service.configurations();
         *      configurations.create("myprops", function(err, newFile) {
         *          console.log("CREATED");
         *      });
         *
         * @param {String} filename A name for this configuration file.
         * @param {Function} callback A function to call with the new configuration file: `(err, createdFile)`.
         *
         * @endpoint properties
         * @method splunkjs.Service.Configurations
         */create:function(filename,callback){cov_1ks4ntaci2().f[183]++;cov_1ks4ntaci2().s[571]++;// If someone called us with the default style of (params, callback),
// lets make it work
if(utils.isObject(filename)){cov_1ks4ntaci2().b[155][0]++;cov_1ks4ntaci2().s[572]++;filename=filename["__conf"];}else{cov_1ks4ntaci2().b[155][1]++;}cov_1ks4ntaci2().s[573]++;callback=(cov_1ks4ntaci2().b[156][0]++,callback)||(cov_1ks4ntaci2().b[156][1]++,function(){cov_1ks4ntaci2().f[184]++;});var that=(cov_1ks4ntaci2().s[574]++,this);var req=(cov_1ks4ntaci2().s[575]++,this.post("",{__conf:filename},function(err,response){cov_1ks4ntaci2().f[185]++;cov_1ks4ntaci2().s[576]++;if(err){cov_1ks4ntaci2().b[157][0]++;cov_1ks4ntaci2().s[577]++;callback(err);}else{cov_1ks4ntaci2().b[157][1]++;var entity=(cov_1ks4ntaci2().s[578]++,new root.ConfigurationFile(that.service,filename));cov_1ks4ntaci2().s[579]++;entity.fetch(function(){cov_1ks4ntaci2().f[186]++;cov_1ks4ntaci2().s[580]++;if(req.wasAborted){cov_1ks4ntaci2().b[158][0]++;cov_1ks4ntaci2().s[581]++;return;// aborted, so ignore
}else{cov_1ks4ntaci2().b[158][1]++;cov_1ks4ntaci2().s[582]++;callback.apply(null,arguments);}});}}));cov_1ks4ntaci2().s[583]++;return req;},doesFileExist:async function(filename){cov_1ks4ntaci2().f[187]++;cov_1ks4ntaci2().s[584]++;try{var that=(cov_1ks4ntaci2().s[585]++,this);// 1. Fetch files list
var response=(cov_1ks4ntaci2().s[586]++,await this.get_v2("",{__conf:filename}));// 2. Filter the files
var files=(cov_1ks4ntaci2().s[587]++,response?.body?.entry?.filter(f=>{cov_1ks4ntaci2().f[188]++;cov_1ks4ntaci2().s[588]++;return f.name===filename;}));// 2. Check if the file exists
cov_1ks4ntaci2().s[589]++;if((cov_1ks4ntaci2().b[160][0]++,files)&&(cov_1ks4ntaci2().b[160][1]++,files.length==0)){cov_1ks4ntaci2().b[159][0]++;cov_1ks4ntaci2().s[590]++;return{code:"FILE_NOT_FOUND",message:`File with the name '${filename}' does not exist.`};}else{cov_1ks4ntaci2().b[159][1]++;}// 3. Create a local instance
var configurationFile=(cov_1ks4ntaci2().s[591]++,new root.ConfigurationFile(that.service,filename));// 4. Load the file content
var fetchedFile=(cov_1ks4ntaci2().s[592]++,await configurationFile.fetch_v2());cov_1ks4ntaci2().s[593]++;return{file:fetchedFile};}catch(error){cov_1ks4ntaci2().s[594]++;return{errorCode:"SYSTEM_ERROR",errorMessage:error};}},doesStanzaExist:async function(file,stanza){cov_1ks4ntaci2().f[189]++;cov_1ks4ntaci2().s[595]++;try{// 1. check if the stanza exists
var fetchedStanza=(cov_1ks4ntaci2().s[596]++,file.item(stanza));cov_1ks4ntaci2().s[597]++;if(!fetchedStanza){cov_1ks4ntaci2().b[161][0]++;cov_1ks4ntaci2().s[598]++;return{code:"STANZA_NOT_FOUND",message:`Stanza with the name '${stanza}' does not exist.`};}else{cov_1ks4ntaci2().b[161][1]++;cov_1ks4ntaci2().s[599]++;return{stanza:fetchedStanza};}}catch(error){cov_1ks4ntaci2().s[600]++;return{errorCode:"SYSTEM_ERROR",errorMessage:error};}},create_v2:async function(configs,svc,filename,stanza,keyValueMap,callback){cov_1ks4ntaci2().f[190]++;cov_1ks4ntaci2().s[601]++;callback=(cov_1ks4ntaci2().b[162][0]++,callback)||(cov_1ks4ntaci2().b[162][1]++,function(){cov_1ks4ntaci2().f[191]++;});var that=(cov_1ks4ntaci2().s[602]++,this);// 1. Check if the file exists
var doesFileExistResponse=(cov_1ks4ntaci2().s[603]++,await this.doesFileExist(filename));var configFile=(cov_1ks4ntaci2().s[604]++,doesFileExistResponse.file);// 2. If the file doesn't exist, create a new file
cov_1ks4ntaci2().s[605]++;if(!configFile){cov_1ks4ntaci2().b[163][0]++;cov_1ks4ntaci2().s[606]++;console.log(doesFileExistResponse);cov_1ks4ntaci2().s[607]++;console.log("Creating a new configuration file...");cov_1ks4ntaci2().s[608]++;that.create({__conf:filename},(err,newFile)=>{cov_1ks4ntaci2().f[192]++;cov_1ks4ntaci2().s[609]++;return console.log(`Configuration File created: ${filename}`);});cov_1ks4ntaci2().s[610]++;configFile=new root.ConfigurationFile(that.service,filename);cov_1ks4ntaci2().s[611]++;configFile=await configFile.fetch_v2();}else{cov_1ks4ntaci2().b[163][1]++;}// 2. Check if the stanza exists
var doesStanzaExistResponse=(cov_1ks4ntaci2().s[612]++,await this.doesStanzaExist(configFile,stanza));var configStanza=(cov_1ks4ntaci2().s[613]++,doesStanzaExistResponse.stanza);// 3. If the stanza doesn't exist, create a new stanza with given keyValueMap
cov_1ks4ntaci2().s[614]++;if(!configStanza){cov_1ks4ntaci2().b[164][0]++;cov_1ks4ntaci2().s[615]++;console.log(doesStanzaExistResponse);cov_1ks4ntaci2().s[616]++;console.log("Creating a new configuration stanza...");cov_1ks4ntaci2().s[617]++;configFile.create(stanza,keyValueMap,function(err,newStanza){cov_1ks4ntaci2().f[193]++;cov_1ks4ntaci2().s[618]++;console.log(`Configuration Stanza created: ${stanza}`);cov_1ks4ntaci2().s[619]++;callback();});}// 4. If the stanza exists, update it with the keyValueMap
else{cov_1ks4ntaci2().b[164][1]++;cov_1ks4ntaci2().s[620]++;configStanza.update(keyValueMap,(err,updatedStanza)=>{cov_1ks4ntaci2().f[194]++;cov_1ks4ntaci2().s[621]++;console.log(`Configuration Stanza updated: ${stanza}`);cov_1ks4ntaci2().s[622]++;callback();});}}});/**
     * Represents a specific search job. You can perform different operations
     * on this job, such as reading its status, canceling it, and getting results.
     *
     * @endpoint search/jobs/{search_id}
     * @class splunkjs.Service.Job
     * @extends splunkjs.Service.Entity
     */cov_1ks4ntaci2().s[623]++;root.Job=root.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Job
         */path:function(){cov_1ks4ntaci2().f[195]++;cov_1ks4ntaci2().s[624]++;return Paths.jobs+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.Job`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} sid The search ID for this search job.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Job} A new `splunkjs.Service.Job` instance.
         *
         * @method splunkjs.Service.Job
         */init:function(service,sid,namespace){cov_1ks4ntaci2().f[196]++;cov_1ks4ntaci2().s[625]++;this.name=sid;cov_1ks4ntaci2().s[626]++;this._super(service,this.path(),namespace);cov_1ks4ntaci2().s[627]++;this.sid=sid;// We perform the bindings so that every function works 
// properly when it is passed as a callback.
cov_1ks4ntaci2().s[628]++;this.cancel=utils.bind(this,this.cancel);cov_1ks4ntaci2().s[629]++;this.disablePreview=utils.bind(this,this.disablePreview);cov_1ks4ntaci2().s[630]++;this.enablePreview=utils.bind(this,this.enablePreview);cov_1ks4ntaci2().s[631]++;this.events=utils.bind(this,this.events);cov_1ks4ntaci2().s[632]++;this.finalize=utils.bind(this,this.finalize);cov_1ks4ntaci2().s[633]++;this.pause=utils.bind(this,this.pause);cov_1ks4ntaci2().s[634]++;this.preview=utils.bind(this,this.preview);cov_1ks4ntaci2().s[635]++;this.results=utils.bind(this,this.results);cov_1ks4ntaci2().s[636]++;this.searchlog=utils.bind(this,this.searchlog);cov_1ks4ntaci2().s[637]++;this.setPriority=utils.bind(this,this.setPriority);cov_1ks4ntaci2().s[638]++;this.setTTL=utils.bind(this,this.setTTL);cov_1ks4ntaci2().s[639]++;this.summary=utils.bind(this,this.summary);cov_1ks4ntaci2().s[640]++;this.timeline=utils.bind(this,this.timeline);cov_1ks4ntaci2().s[641]++;this.touch=utils.bind(this,this.touch);cov_1ks4ntaci2().s[642]++;this.unpause=utils.bind(this,this.unpause);},/**
         * Cancels a search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.cancel(function(err) {
         *          console.log("CANCELLED");
         *      });
         *
         * @param {Function} callback A function to call when the search is done: `(err)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */cancel:function(callback){cov_1ks4ntaci2().f[197]++;var req=(cov_1ks4ntaci2().s[643]++,this.post("control",{action:"cancel"},callback));cov_1ks4ntaci2().s[644]++;return req;},/**
         * Disables preview generation for a search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.disablePreview(function(err, job) {
         *          console.log("PREVIEW DISABLED");
         *      });
         *
         * @param {Function} callback A function to call with this search job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */disablePreview:function(callback){cov_1ks4ntaci2().f[198]++;cov_1ks4ntaci2().s[645]++;callback=(cov_1ks4ntaci2().b[165][0]++,callback)||(cov_1ks4ntaci2().b[165][1]++,function(){cov_1ks4ntaci2().f[199]++;});var that=(cov_1ks4ntaci2().s[646]++,this);var req=(cov_1ks4ntaci2().s[647]++,this.post("control",{action:"disablepreview"},function(err){cov_1ks4ntaci2().f[200]++;cov_1ks4ntaci2().s[648]++;callback(err,that);}));cov_1ks4ntaci2().s[649]++;return req;},/**
         * Enables preview generation for a search job. 
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.disablePreview(function(err, job) {
         *          console.log("PREVIEW ENABLED");
         *      });
         *
         * @param {Function} callback A function to call with this search job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */enablePreview:function(callback){cov_1ks4ntaci2().f[201]++;cov_1ks4ntaci2().s[650]++;callback=(cov_1ks4ntaci2().b[166][0]++,callback)||(cov_1ks4ntaci2().b[166][1]++,function(){cov_1ks4ntaci2().f[202]++;});var that=(cov_1ks4ntaci2().s[651]++,this);var req=(cov_1ks4ntaci2().s[652]++,this.post("control",{action:"enablepreview"},function(err){cov_1ks4ntaci2().f[203]++;cov_1ks4ntaci2().s[653]++;callback(err,that);}));cov_1ks4ntaci2().s[654]++;return req;},/**
         * Returns the events of a search job with given parameters.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.events({count: 10}, function(err, events, job) {
         *          console.log("Fields: ", events.fields);
         *      });
         *
         * @param {Object} params The parameters for retrieving events. For a list of available parameters, see the <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fevents" target="_blank">GET search/jobs/{search_id}/events</a> endpoint in the REST API documentation.
         * @param {Function} callback A function to call when the events are retrieved: `(err, events, job)`.
         *
         * @endpoint search/jobs/{search_id}/events
         * @method splunkjs.Service.Job
         */events:function(params,callback){cov_1ks4ntaci2().f[204]++;cov_1ks4ntaci2().s[655]++;callback=(cov_1ks4ntaci2().b[167][0]++,callback)||(cov_1ks4ntaci2().b[167][1]++,function(){cov_1ks4ntaci2().f[205]++;});cov_1ks4ntaci2().s[656]++;params=(cov_1ks4ntaci2().b[168][0]++,params)||(cov_1ks4ntaci2().b[168][1]++,{});cov_1ks4ntaci2().s[657]++;params.output_mode=(cov_1ks4ntaci2().b[169][0]++,params.output_mode)||(cov_1ks4ntaci2().b[169][1]++,"json_rows");var that=(cov_1ks4ntaci2().s[658]++,this);cov_1ks4ntaci2().s[659]++;return this.get("events",params,function(err,response){cov_1ks4ntaci2().f[206]++;cov_1ks4ntaci2().s[660]++;if(err){cov_1ks4ntaci2().b[170][0]++;cov_1ks4ntaci2().s[661]++;callback(err);}else{cov_1ks4ntaci2().b[170][1]++;cov_1ks4ntaci2().s[662]++;callback(null,response.data,that);}});},/**
         * Finalizes a search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.finalize(function(err, job) {
         *          console.log("JOB FINALIZED");
         *      });
         *
         * @param {Function} callback A function to call with the job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */finalize:function(callback){cov_1ks4ntaci2().f[207]++;cov_1ks4ntaci2().s[663]++;callback=(cov_1ks4ntaci2().b[171][0]++,callback)||(cov_1ks4ntaci2().b[171][1]++,function(){cov_1ks4ntaci2().f[208]++;});var that=(cov_1ks4ntaci2().s[664]++,this);var req=(cov_1ks4ntaci2().s[665]++,this.post("control",{action:"finalize"},function(err){cov_1ks4ntaci2().f[209]++;cov_1ks4ntaci2().s[666]++;callback(err,that);}));cov_1ks4ntaci2().s[667]++;return req;},/**
         * Returns an iterator over this search job's events or results.
         *
         * @param {String} type One of {"events", "preview", "results"}.
         * @param {Object} params A dictionary of optional parameters:
         *    - `pagesize` (_integer_): The number of items to return on each request. Defaults to as many as possible.
         * @return {Object} An iterator object with a `next(callback)` method, where `callback` is of the form `(err, results, hasMoreResults)`.
         * 
         * @endpoint search/jobs/{search_id}/results
         * @method splunkjs.Service.Job
         */iterator:function(type,params){cov_1ks4ntaci2().f[210]++;cov_1ks4ntaci2().s[668]++;return new root.PaginatedEndpointIterator(this[type],params);},/**
         * Pauses a search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.pause(function(err, job) {
         *          console.log("JOB PAUSED");
         *      });
         *
         * @param {Function} callback A function to call with the job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */pause:function(callback){cov_1ks4ntaci2().f[211]++;cov_1ks4ntaci2().s[669]++;callback=(cov_1ks4ntaci2().b[172][0]++,callback)||(cov_1ks4ntaci2().b[172][1]++,function(){cov_1ks4ntaci2().f[212]++;});var that=(cov_1ks4ntaci2().s[670]++,this);var req=(cov_1ks4ntaci2().s[671]++,this.post("control",{action:"pause"},function(err){cov_1ks4ntaci2().f[213]++;cov_1ks4ntaci2().s[672]++;callback(err,that);}));cov_1ks4ntaci2().s[673]++;return req;},/*
         * Gets the preview results for a search job with given parameters.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.preview({count: 10}, function(err, results, job) {
         *          console.log("Fields: ", results.fields);
         *      });
         *
         * @param {Object} params The parameters for retrieving preview results. For a list of available parameters, see the <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fresults_preview" target="_blank">GET search/jobs/{search_id}/results_preview</a> endpoint in the REST API documentation.
         * @param {Function} callback A function to call when the preview results are retrieved : `(err, results, job)`.
         *
         * @endpoint search/jobs/{search_id}/results_preview
         * @method splunkjs.Service.Job
         */preview:function(params,callback){cov_1ks4ntaci2().f[214]++;cov_1ks4ntaci2().s[674]++;callback=(cov_1ks4ntaci2().b[173][0]++,callback)||(cov_1ks4ntaci2().b[173][1]++,function(){cov_1ks4ntaci2().f[215]++;});cov_1ks4ntaci2().s[675]++;params=(cov_1ks4ntaci2().b[174][0]++,params)||(cov_1ks4ntaci2().b[174][1]++,{});cov_1ks4ntaci2().s[676]++;params.output_mode=(cov_1ks4ntaci2().b[175][0]++,params.output_mode)||(cov_1ks4ntaci2().b[175][1]++,"json_rows");var that=(cov_1ks4ntaci2().s[677]++,this);cov_1ks4ntaci2().s[678]++;return this.get("results_preview",params,function(err,response){cov_1ks4ntaci2().f[216]++;cov_1ks4ntaci2().s[679]++;if(err){cov_1ks4ntaci2().b[176][0]++;cov_1ks4ntaci2().s[680]++;callback(err);}else{cov_1ks4ntaci2().b[176][1]++;cov_1ks4ntaci2().s[681]++;callback(null,response.data,that);}});},/**
         * Gets the results for a search job with given parameters.
         * 
         * The callback can get `undefined` for its `results` parameter if the
         * job is not yet done. To avoid this, use the `Job.track()` method to
         * wait until the job is complete prior to fetching the results with
         * this method.
         * 
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.results({count: 10}, function(err, results, job) {
         *          console.log("Fields: ", results.results);
         *      });
         *
         * @param {Object} params The parameters for retrieving search results. For a list of available parameters, see the <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fresults" target="_blank">GET search/jobs/{search_id}/results</a> endpoint in the REST API documentation.
         * @param {Function} callback A function to call when the results are retrieved: `(err, results, job)`.
         *
         * @endpoint search/jobs/{search_id}/results
         * @method splunkjs.Service.Job
         */results:function(params,callback){cov_1ks4ntaci2().f[217]++;cov_1ks4ntaci2().s[682]++;callback=(cov_1ks4ntaci2().b[177][0]++,callback)||(cov_1ks4ntaci2().b[177][1]++,function(){cov_1ks4ntaci2().f[218]++;});cov_1ks4ntaci2().s[683]++;params=(cov_1ks4ntaci2().b[178][0]++,params)||(cov_1ks4ntaci2().b[178][1]++,{});cov_1ks4ntaci2().s[684]++;params.output_mode=(cov_1ks4ntaci2().b[179][0]++,params.output_mode)||(cov_1ks4ntaci2().b[179][1]++,"json_rows");var that=(cov_1ks4ntaci2().s[685]++,this);cov_1ks4ntaci2().s[686]++;return this.get("results",params,function(err,response){cov_1ks4ntaci2().f[219]++;cov_1ks4ntaci2().s[687]++;if(err){cov_1ks4ntaci2().b[180][0]++;cov_1ks4ntaci2().s[688]++;callback(err);}else{cov_1ks4ntaci2().b[180][1]++;cov_1ks4ntaci2().s[689]++;callback(null,response.data,that);}});},/**
         * Gets the search log for this search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.searchlog(function(err, searchlog, job) {
         *          console.log(searchlog);
         *      });
         *
         * @param {Function} callback A function to call with the search log and job: `(err, searchlog, job)`.
         *
         * @endpoint search/jobs/{search_id}/search.log
         * @method splunkjs.Service.Job
         */searchlog:function(callback){cov_1ks4ntaci2().f[220]++;cov_1ks4ntaci2().s[690]++;callback=(cov_1ks4ntaci2().b[181][0]++,callback)||(cov_1ks4ntaci2().b[181][1]++,function(){cov_1ks4ntaci2().f[221]++;});var that=(cov_1ks4ntaci2().s[691]++,this);cov_1ks4ntaci2().s[692]++;return this.get("search.log",{},function(err,response){cov_1ks4ntaci2().f[222]++;cov_1ks4ntaci2().s[693]++;if(err){cov_1ks4ntaci2().b[182][0]++;cov_1ks4ntaci2().s[694]++;callback(err);}else{cov_1ks4ntaci2().b[182][1]++;cov_1ks4ntaci2().s[695]++;callback(null,response.data,that);}});},/**
         * Sets the priority for this search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.setPriority(6, function(err, job) {
         *          console.log("JOB PRIORITY SET");
         *      });
         *
         * @param {Number} value The priority (an integer between 1-10). A higher value means a higher priority.
         * @param {Function} callback A function to call with the search job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */setPriority:function(value,callback){cov_1ks4ntaci2().f[223]++;cov_1ks4ntaci2().s[696]++;callback=(cov_1ks4ntaci2().b[183][0]++,callback)||(cov_1ks4ntaci2().b[183][1]++,function(){cov_1ks4ntaci2().f[224]++;});var that=(cov_1ks4ntaci2().s[697]++,this);var req=(cov_1ks4ntaci2().s[698]++,this.post("control",{action:"setpriority",priority:value},function(err){cov_1ks4ntaci2().f[225]++;cov_1ks4ntaci2().s[699]++;callback(err,that);}));cov_1ks4ntaci2().s[700]++;return req;},/**
         * Sets the time to live (TTL) for the search job, which is the time before
         * the search job expires after it has been completed and is still available.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.setTTL(1000, function(err, job) {
         *          console.log("JOB TTL SET");
         *      });
         *
         * @param {Number} value The time to live, in seconds. 
         * @param {Function} callback A function to call with the search job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */setTTL:function(value,callback){cov_1ks4ntaci2().f[226]++;cov_1ks4ntaci2().s[701]++;callback=(cov_1ks4ntaci2().b[184][0]++,callback)||(cov_1ks4ntaci2().b[184][1]++,function(){cov_1ks4ntaci2().f[227]++;});var that=(cov_1ks4ntaci2().s[702]++,this);var req=(cov_1ks4ntaci2().s[703]++,this.post("control",{action:"setttl",ttl:value},function(err){cov_1ks4ntaci2().f[228]++;cov_1ks4ntaci2().s[704]++;callback(err,that);}));cov_1ks4ntaci2().s[705]++;return req;},/**
         * Gets the summary for this search job with the given parameters.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.summary({top_count: 5}, function(err, summary, job) {
         *          console.log("Summary: ", summary);
         *      });
         *
         * @param {Object} params The parameters for retrieving the summary. For a list of available parameters, see the <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fsummary" target="_blank">GET search/jobs/{search_id}/summary</a> endpoint in the REST API documentation.
         * @param {Function} callback A function to call with the summary and search job: `(err, summary, job)`.
         *
         * @endpoint search/jobs/{search_id}/summmary
         * @method splunkjs.Service.Job
         */summary:function(params,callback){cov_1ks4ntaci2().f[229]++;cov_1ks4ntaci2().s[706]++;callback=(cov_1ks4ntaci2().b[185][0]++,callback)||(cov_1ks4ntaci2().b[185][1]++,function(){cov_1ks4ntaci2().f[230]++;});var that=(cov_1ks4ntaci2().s[707]++,this);cov_1ks4ntaci2().s[708]++;return this.get("summary",params,function(err,response){cov_1ks4ntaci2().f[231]++;cov_1ks4ntaci2().s[709]++;if(err){cov_1ks4ntaci2().b[186][0]++;cov_1ks4ntaci2().s[710]++;callback(err);}else{cov_1ks4ntaci2().b[186][1]++;cov_1ks4ntaci2().s[711]++;callback(null,response.data,that);}});},/**
         * Gets the timeline for this search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.timeline({time_format: "%c"}, function(err, job, timeline) {
         *          console.log("Timeline: ", timeline);
         *      });
         *
         * @param {Object} params The parameters for retrieving the timeline. For a list of available parameters, see the <a href="http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Ftimeline" target="_blank">GET search/jobs/{search_id}/timeline </a> endpoint in the REST API documentation.
         * @param {Function} callback A function to call with the timeline and search job: `(err, timeline, job)`.
         *
         * @endpoint search/jobs/{search_id}/timeline
         * @method splunkjs.Service.Job
         */timeline:function(params,callback){cov_1ks4ntaci2().f[232]++;cov_1ks4ntaci2().s[712]++;callback=(cov_1ks4ntaci2().b[187][0]++,callback)||(cov_1ks4ntaci2().b[187][1]++,function(){cov_1ks4ntaci2().f[233]++;});var that=(cov_1ks4ntaci2().s[713]++,this);cov_1ks4ntaci2().s[714]++;return this.get("timeline",params,function(err,response){cov_1ks4ntaci2().f[234]++;cov_1ks4ntaci2().s[715]++;if(err){cov_1ks4ntaci2().b[188][0]++;cov_1ks4ntaci2().s[716]++;callback(err);}else{cov_1ks4ntaci2().b[188][1]++;cov_1ks4ntaci2().s[717]++;callback(null,response.data,that);}});},/**
         * Touches a search job, which means extending the expiration time of 
         * the search to now plus the time to live (TTL).
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.touch(function(err) {
         *          console.log("JOB TOUCHED");
         *      });
         *
         * @param {Function} callback A function to call with the search job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */touch:function(callback){cov_1ks4ntaci2().f[235]++;cov_1ks4ntaci2().s[718]++;callback=(cov_1ks4ntaci2().b[189][0]++,callback)||(cov_1ks4ntaci2().b[189][1]++,function(){cov_1ks4ntaci2().f[236]++;});var that=(cov_1ks4ntaci2().s[719]++,this);var req=(cov_1ks4ntaci2().s[720]++,this.post("control",{action:"touch"},function(err){cov_1ks4ntaci2().f[237]++;cov_1ks4ntaci2().s[721]++;callback(err,that);}));cov_1ks4ntaci2().s[722]++;return req;},/**
         * Starts polling the status of this search job, and fires callbacks
         * upon each status change.
         * 
         * @param {Object} options A dictionary of optional parameters:
         *    - `period` (_integer_): The number of milliseconds to wait between each poll. Defaults to 500.
         * @param {Object|Function} callbacks A dictionary of optional callbacks:
         *    - `ready`: A function `(job)` invoked when the job's properties first become available.
         *    - `progress`: A function `(job)` invoked whenever new job properties are available.
         *    - `done`: A function `(job)` invoked if the job completes successfully. No further polling is done.
         *    - `failed`: A function `(job)` invoked if the job fails executing on the server. No further polling is done.
         *    - `error`: A function `(err)` invoked if an error occurs while polling. No further polling is done.
         * Or, if a function `(job)`, equivalent to passing it as a `done` callback.
         *
         * @method splunkjs.Service.Job
         */track:function(options,callbacks){cov_1ks4ntaci2().f[238]++;var period=(cov_1ks4ntaci2().s[723]++,(cov_1ks4ntaci2().b[190][0]++,options.period)||(cov_1ks4ntaci2().b[190][1]++,500));// ms
cov_1ks4ntaci2().s[724]++;if(utils.isFunction(callbacks)){cov_1ks4ntaci2().b[191][0]++;cov_1ks4ntaci2().s[725]++;callbacks={done:callbacks};}else{cov_1ks4ntaci2().b[191][1]++;}var noCallbacksAfterReady=(cov_1ks4ntaci2().s[726]++,(cov_1ks4ntaci2().b[192][0]++,!callbacks.progress)&&(cov_1ks4ntaci2().b[192][1]++,!callbacks.done)&&(cov_1ks4ntaci2().b[192][2]++,!callbacks.failed)&&(cov_1ks4ntaci2().b[192][3]++,!callbacks.error));cov_1ks4ntaci2().s[727]++;callbacks.ready=(cov_1ks4ntaci2().b[193][0]++,callbacks.ready)||(cov_1ks4ntaci2().b[193][1]++,function(){cov_1ks4ntaci2().f[239]++;});cov_1ks4ntaci2().s[728]++;callbacks.progress=(cov_1ks4ntaci2().b[194][0]++,callbacks.progress)||(cov_1ks4ntaci2().b[194][1]++,function(){cov_1ks4ntaci2().f[240]++;});cov_1ks4ntaci2().s[729]++;callbacks.done=(cov_1ks4ntaci2().b[195][0]++,callbacks.done)||(cov_1ks4ntaci2().b[195][1]++,function(){cov_1ks4ntaci2().f[241]++;});cov_1ks4ntaci2().s[730]++;callbacks.failed=(cov_1ks4ntaci2().b[196][0]++,callbacks.failed)||(cov_1ks4ntaci2().b[196][1]++,function(){cov_1ks4ntaci2().f[242]++;});cov_1ks4ntaci2().s[731]++;callbacks.error=(cov_1ks4ntaci2().b[197][0]++,callbacks.error)||(cov_1ks4ntaci2().b[197][1]++,function(){cov_1ks4ntaci2().f[243]++;});// For use by tests only
cov_1ks4ntaci2().s[732]++;callbacks._preready=(cov_1ks4ntaci2().b[198][0]++,callbacks._preready)||(cov_1ks4ntaci2().b[198][1]++,function(){cov_1ks4ntaci2().f[244]++;});cov_1ks4ntaci2().s[733]++;callbacks._stoppedAfterReady=(cov_1ks4ntaci2().b[199][0]++,callbacks._stoppedAfterReady)||(cov_1ks4ntaci2().b[199][1]++,function(){cov_1ks4ntaci2().f[245]++;});var that=(cov_1ks4ntaci2().s[734]++,this);var emittedReady=(cov_1ks4ntaci2().s[735]++,false);var doneLooping=(cov_1ks4ntaci2().s[736]++,false);cov_1ks4ntaci2().s[737]++;Async.whilst(function(){cov_1ks4ntaci2().f[246]++;cov_1ks4ntaci2().s[738]++;return!doneLooping;},function(nextIteration){cov_1ks4ntaci2().f[247]++;cov_1ks4ntaci2().s[739]++;that.fetch(function(err,job){cov_1ks4ntaci2().f[248]++;cov_1ks4ntaci2().s[740]++;if(err){cov_1ks4ntaci2().b[200][0]++;cov_1ks4ntaci2().s[741]++;nextIteration(err);cov_1ks4ntaci2().s[742]++;return;}else{cov_1ks4ntaci2().b[200][1]++;}var dispatchState=(cov_1ks4ntaci2().s[743]++,job.properties().dispatchState);var notReady=(cov_1ks4ntaci2().s[744]++,(cov_1ks4ntaci2().b[201][0]++,dispatchState==="QUEUED")||(cov_1ks4ntaci2().b[201][1]++,dispatchState==="PARSING"));cov_1ks4ntaci2().s[745]++;if(notReady){cov_1ks4ntaci2().b[202][0]++;cov_1ks4ntaci2().s[746]++;callbacks._preready(job);}else{cov_1ks4ntaci2().b[202][1]++;cov_1ks4ntaci2().s[747]++;if(!emittedReady){cov_1ks4ntaci2().b[203][0]++;cov_1ks4ntaci2().s[748]++;callbacks.ready(job);cov_1ks4ntaci2().s[749]++;emittedReady=true;// Optimization: Don't keep polling the job if the
// caller only cares about the `ready` event.
cov_1ks4ntaci2().s[750]++;if(noCallbacksAfterReady){cov_1ks4ntaci2().b[204][0]++;cov_1ks4ntaci2().s[751]++;callbacks._stoppedAfterReady(job);cov_1ks4ntaci2().s[752]++;doneLooping=true;cov_1ks4ntaci2().s[753]++;nextIteration();cov_1ks4ntaci2().s[754]++;return;}else{cov_1ks4ntaci2().b[204][1]++;}}else{cov_1ks4ntaci2().b[203][1]++;}cov_1ks4ntaci2().s[755]++;callbacks.progress(job);var props=(cov_1ks4ntaci2().s[756]++,job.properties());cov_1ks4ntaci2().s[757]++;if((cov_1ks4ntaci2().b[206][0]++,dispatchState==="DONE")&&(cov_1ks4ntaci2().b[206][1]++,props.isDone)){cov_1ks4ntaci2().b[205][0]++;cov_1ks4ntaci2().s[758]++;callbacks.done(job);cov_1ks4ntaci2().s[759]++;doneLooping=true;cov_1ks4ntaci2().s[760]++;nextIteration();cov_1ks4ntaci2().s[761]++;return;}else{cov_1ks4ntaci2().b[205][1]++;cov_1ks4ntaci2().s[762]++;if((cov_1ks4ntaci2().b[208][0]++,dispatchState==="FAILED")&&(cov_1ks4ntaci2().b[208][1]++,props.isFailed)){cov_1ks4ntaci2().b[207][0]++;cov_1ks4ntaci2().s[763]++;callbacks.failed(job);cov_1ks4ntaci2().s[764]++;doneLooping=true;cov_1ks4ntaci2().s[765]++;nextIteration();cov_1ks4ntaci2().s[766]++;return;}else{cov_1ks4ntaci2().b[207][1]++;}}}cov_1ks4ntaci2().s[767]++;Async.sleep(period,nextIteration);});},function(err){cov_1ks4ntaci2().f[249]++;cov_1ks4ntaci2().s[768]++;if(err){cov_1ks4ntaci2().b[209][0]++;cov_1ks4ntaci2().s[769]++;callbacks.error(err);}else{cov_1ks4ntaci2().b[209][1]++;}});},/**
         * Resumes a search job.
         *
         * @example
         *
         *      var job = service.jobs().item("mysid");
         *      job.unpause(function(err) {
         *          console.log("JOB UNPAUSED");
         *      });
         *
         * @param {Function} callback A function to call with the search job: `(err, job)`.
         *
         * @endpoint search/jobs/{search_id}/control
         * @method splunkjs.Service.Job
         */unpause:function(callback){cov_1ks4ntaci2().f[250]++;cov_1ks4ntaci2().s[770]++;callback=(cov_1ks4ntaci2().b[210][0]++,callback)||(cov_1ks4ntaci2().b[210][1]++,function(){cov_1ks4ntaci2().f[251]++;});var that=(cov_1ks4ntaci2().s[771]++,this);var req=(cov_1ks4ntaci2().s[772]++,this.post("control",{action:"unpause"},function(err){cov_1ks4ntaci2().f[252]++;cov_1ks4ntaci2().s[773]++;callback(err,that);}));cov_1ks4ntaci2().s[774]++;return req;}});/**
     * Represents a collection of search jobs. You can create and list search 
     * jobs using this collection container, or get a specific search job.
     *
     * @endpoint search/jobs
     * @class splunkjs.Service.Jobs
     * @extends splunkjs.Service.Collection
     */cov_1ks4ntaci2().s[775]++;root.Jobs=root.Collection.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.Jobs
         */path:function(){cov_1ks4ntaci2().f[253]++;cov_1ks4ntaci2().s[776]++;return Paths.jobs;},/**
         * Creates a local instance of a job.
         *
         * @param {Object} props The properties for this new job. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams" target="_blank">Search job parameters</a> on Splunk Developer Portal.
         * @return {splunkjs.Service.Job} A new `splunkjs.Service.Job` instance.
         *
         * @method splunkjs.Service.Jobs
         */instantiateEntity:function(props){cov_1ks4ntaci2().f[254]++;var sid=(cov_1ks4ntaci2().s[777]++,props.content.sid);var entityNamespace=(cov_1ks4ntaci2().s[778]++,utils.namespaceFromProperties(props));cov_1ks4ntaci2().s[779]++;return new root.Job(this.service,sid,entityNamespace);},/**
         * Constructor for `splunkjs.Service.Jobs`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace Namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @return {splunkjs.Service.Jobs} A new `splunkjs.Service.Jobs` instance.
         *
         * @method splunkjs.Service.Jobs
         */init:function(service,namespace){cov_1ks4ntaci2().f[255]++;cov_1ks4ntaci2().s[780]++;this._super(service,this.path(),namespace);// We perform the bindings so that every function works 
// properly when it is passed as a callback.
cov_1ks4ntaci2().s[781]++;this.create=utils.bind(this,this.create);},/**
         * Creates a search job with a given search query and optional parameters, including `exec_mode` to specify the type of search:
         *
         *    - Use `exec_mode=normal` to return a search job ID immediately (default).
         *      Poll for completion to find out when you can retrieve search results. 
         *
         *    - Use `exec_mode=blocking` to return the search job ID when the search has finished.
         * 
         * To run a oneshot search, which does not create a job but rather returns the search results, use `Service.Jobs.oneshotSearch`.
         *
         * @param {String} query The search query.
         * @param {Object} params A dictionary of properties for the search job. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams" target="_blank">Search job parameters</a> on Splunk Developer Portal.
         * @param {Function} callback A function to call with the created job: `(err, createdJob)`.
         *
         * @endpoint search/jobs
         * @method splunkjs.Service.Jobs
         */create:function(query,params,callback){cov_1ks4ntaci2().f[256]++;cov_1ks4ntaci2().s[782]++;// If someone called us with the default style of (params, callback),
// lets make it work
if((cov_1ks4ntaci2().b[212][0]++,utils.isObject(query))&&(cov_1ks4ntaci2().b[212][1]++,utils.isFunction(params))&&(cov_1ks4ntaci2().b[212][2]++,!callback)){cov_1ks4ntaci2().b[211][0]++;cov_1ks4ntaci2().s[783]++;callback=params;cov_1ks4ntaci2().s[784]++;params=query;cov_1ks4ntaci2().s[785]++;query=params.search;}else{cov_1ks4ntaci2().b[211][1]++;}cov_1ks4ntaci2().s[786]++;callback=(cov_1ks4ntaci2().b[213][0]++,callback)||(cov_1ks4ntaci2().b[213][1]++,function(){cov_1ks4ntaci2().f[257]++;});cov_1ks4ntaci2().s[787]++;params=(cov_1ks4ntaci2().b[214][0]++,params)||(cov_1ks4ntaci2().b[214][1]++,{});cov_1ks4ntaci2().s[788]++;params.search=query;cov_1ks4ntaci2().s[789]++;if(((cov_1ks4ntaci2().b[216][0]++,params.exec_mode)||(cov_1ks4ntaci2().b[216][1]++,"")).toLowerCase()==="oneshot"){cov_1ks4ntaci2().b[215][0]++;cov_1ks4ntaci2().s[790]++;throw new Error("Please use splunkjs.Service.Jobs.oneshotSearch for exec_mode=oneshot");}else{cov_1ks4ntaci2().b[215][1]++;}cov_1ks4ntaci2().s[791]++;if(!params.search){cov_1ks4ntaci2().b[217][0]++;cov_1ks4ntaci2().s[792]++;callback("Must provide a query to create a search job");cov_1ks4ntaci2().s[793]++;return;}else{cov_1ks4ntaci2().b[217][1]++;}var that=(cov_1ks4ntaci2().s[794]++,this);cov_1ks4ntaci2().s[795]++;return this.post("",params,function(err,response){cov_1ks4ntaci2().f[258]++;cov_1ks4ntaci2().s[796]++;if(err){cov_1ks4ntaci2().b[218][0]++;cov_1ks4ntaci2().s[797]++;callback(err);}else{cov_1ks4ntaci2().b[218][1]++;var job=(cov_1ks4ntaci2().s[798]++,new root.Job(that.service,response.data.sid,that.namespace));cov_1ks4ntaci2().s[799]++;callback(null,job);}});},/**
         * Creates a search job with a given search query and optional parameters, including `exec_mode` to specify the type of search:
         *
         *    - Use `exec_mode=normal` to return a search job ID immediately (default).
         *      Poll for completion to find out when you can retrieve search results. 
         *
         *    - Use `exec_mode=blocking` to return the search job ID when the search has finished.
         * 
         * To run a oneshot search, which does not create a job but rather returns the search results, use `Service.Jobs.oneshotSearch`.
         *
         * @example
         *
         *      var jobs = service.jobs();
         *      jobs.search("search ERROR", {id: "myjob_123"}, function(err, newJob) {
         *          console.log("CREATED": newJob.sid);
         *      });
         *
         * @param {String} query The search query.
         * @param {Object} params A dictionary of properties for the search job. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams" target="_blank">Search job parameters</a> on Splunk Developer Portal.
         *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.
         * @param {Function} callback A function to call with the new search job: `(err, createdJob)`.
         *
         * @endpoint search/jobs
         * @method splunkjs.Service.Jobs
         */search:function(query,params,callback){cov_1ks4ntaci2().f[259]++;cov_1ks4ntaci2().s[800]++;return this.create(query,params,callback);},/**
         * Creates a oneshot search from a given search query and parameters.
         *
         * @example
         *
         *      var jobs = service.jobs();
         *      jobs.oneshotSearch("search ERROR", {id: "myjob_123"}, function(err, results) {
         *          console.log("RESULT FIELDS": results.fields);
         *      });
         *
         * @param {String} query The search query. 
         * @param {Object} params A dictionary of properties for the search:
         *    - `output_mode` (_string_): Specifies the output format of the results (XML, JSON, or CSV).
         *    - `earliest_time` (_string_): Specifies the earliest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.
         *    - `latest_time` (_string_): Specifies the latest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.
         *    - `rf` (_string_): Specifies one or more fields to add to the search.
         * @param {Function} callback A function to call with the results of the search: `(err, results)`.
         *
         * @endpoint search/jobs
         * @method splunkjs.Service.Jobs
         */oneshotSearch:function(query,params,callback){cov_1ks4ntaci2().f[260]++;cov_1ks4ntaci2().s[801]++;// If someone called us with the default style of (params, callback),
// lets make it work
if((cov_1ks4ntaci2().b[220][0]++,utils.isObject(query))&&(cov_1ks4ntaci2().b[220][1]++,utils.isFunction(params))&&(cov_1ks4ntaci2().b[220][2]++,!callback)){cov_1ks4ntaci2().b[219][0]++;cov_1ks4ntaci2().s[802]++;callback=params;cov_1ks4ntaci2().s[803]++;params=query;cov_1ks4ntaci2().s[804]++;query=params.search;}else{cov_1ks4ntaci2().b[219][1]++;}cov_1ks4ntaci2().s[805]++;callback=(cov_1ks4ntaci2().b[221][0]++,callback)||(cov_1ks4ntaci2().b[221][1]++,function(){cov_1ks4ntaci2().f[261]++;});cov_1ks4ntaci2().s[806]++;params=(cov_1ks4ntaci2().b[222][0]++,params)||(cov_1ks4ntaci2().b[222][1]++,{});cov_1ks4ntaci2().s[807]++;params.search=query;cov_1ks4ntaci2().s[808]++;params.exec_mode="oneshot";cov_1ks4ntaci2().s[809]++;if(!params.search){cov_1ks4ntaci2().b[223][0]++;cov_1ks4ntaci2().s[810]++;callback("Must provide a query to create a search job");}else{cov_1ks4ntaci2().b[223][1]++;}var outputMode=(cov_1ks4ntaci2().s[811]++,(cov_1ks4ntaci2().b[224][0]++,params.output_mode)||(cov_1ks4ntaci2().b[224][1]++,"json_rows"));var path=(cov_1ks4ntaci2().s[812]++,this.qualifiedPath);var method=(cov_1ks4ntaci2().s[813]++,"POST");var headers=(cov_1ks4ntaci2().s[814]++,{});var post=(cov_1ks4ntaci2().s[815]++,params);var get=(cov_1ks4ntaci2().s[816]++,{output_mode:outputMode});var body=(cov_1ks4ntaci2().s[817]++,null);var req=(cov_1ks4ntaci2().s[818]++,this.service.request(path,method,get,post,body,headers,function(err,response){cov_1ks4ntaci2().f[262]++;cov_1ks4ntaci2().s[819]++;if(err){cov_1ks4ntaci2().b[225][0]++;cov_1ks4ntaci2().s[820]++;callback(err);}else{cov_1ks4ntaci2().b[225][1]++;cov_1ks4ntaci2().s[821]++;callback(null,response.data);}}));cov_1ks4ntaci2().s[822]++;return req;}});/**
     * Represents a field of a data model object.
     * This is a helper class for `DataModelCalculation`
     * and `DataModelObject`.
     *
     * Has these properties:
     *    - `fieldName` (_string_): The name of this field.
     *    - `displayName` (_string_):  A human readable name for this field.
     *    - `type` (_string_): The type of this field.
     *    - `multivalued` (_boolean_): Whether this field is multivalued.
     *    - `required` (_boolean_): Whether this field is required.
     *    - `hidden` (_boolean_): Whether this field should be displayed in a data model UI.
     *    - `editable` (_boolean_): Whether this field can be edited.
     *    - `comment` (_string_): A comment for this field, or `null` if there isn't one.
     *    - `fieldSearch` (_string_): A search query fragment for this field.
     *    - `lineage` (_array_): An array of strings of the lineage of the data model
     *          on which this field is defined.
     *    - `owner` (_string_): The name of the data model object on which this field is defined.
     *
     * Possible types for a data model field:
     *    - `string`
     *    - `boolean`
     *    - `number`
     *    - `timestamp`
     *    - `objectCount`
     *    - `childCount`
     *    - `ipv4`
     *
     * @class splunkjs.Service.DataModelField
     */cov_1ks4ntaci2().s[823]++;root.DataModelField=Class.extend({_types:["string","number","timestamp","objectCount","childCount","ipv4","boolean"],/**
         * Constructor for a data model field.
         * SDK users are not expected to invoke this constructor directly.
         *
         * @constructor
         * @param {Object} props A dictionary of properties to set:
         *     - `fieldName` (_string_): The name of this field.
         *     - `displayName` (_string_): A human readable name for this field.
         *     - `type` (_string_): The type of this field, see valid types in class docs.
         *     - `multivalue` (_boolean_): Whether this field is multivalued.
         *     - `required` (_boolean_): Whether this field is required on events in the object
         *     - `hidden` (_boolean_): Whether this field should be displayed in a data model UI.
         *     - `editable` (_boolean_): Whether this field can be edited.
         *     - `comment` (_string_): A comment for this field, or `null` if there isn't one.
         *     - `fieldSearch` (_string_): A search query fragment for this field.
         *     - `lineage` (_string_): The lineage of the data model object on which this field
         *          is defined, items are delimited by a dot. This is converted into an array of
         *          strings upon construction.
         *
         * @method splunkjs.Service.DataModelField
         */init:function(props){cov_1ks4ntaci2().f[263]++;cov_1ks4ntaci2().s[824]++;props=(cov_1ks4ntaci2().b[226][0]++,props)||(cov_1ks4ntaci2().b[226][1]++,{});cov_1ks4ntaci2().s[825]++;props.owner=(cov_1ks4ntaci2().b[227][0]++,props.owner)||(cov_1ks4ntaci2().b[227][1]++,"");cov_1ks4ntaci2().s[826]++;this.name=props.fieldName;cov_1ks4ntaci2().s[827]++;this.displayName=props.displayName;cov_1ks4ntaci2().s[828]++;this.type=props.type;cov_1ks4ntaci2().s[829]++;this.multivalued=props.multivalue;cov_1ks4ntaci2().s[830]++;this.required=props.required;cov_1ks4ntaci2().s[831]++;this.hidden=props.hidden;cov_1ks4ntaci2().s[832]++;this.editable=props.editable;cov_1ks4ntaci2().s[833]++;this.comment=(cov_1ks4ntaci2().b[228][0]++,props.comment)||(cov_1ks4ntaci2().b[228][1]++,null);cov_1ks4ntaci2().s[834]++;this.fieldSearch=props.fieldSearch;cov_1ks4ntaci2().s[835]++;this.lineage=props.owner.split(".");cov_1ks4ntaci2().s[836]++;this.owner=this.lineage[this.lineage.length-1];},/**
         * Is this data model field of type string?
         *
         * @return {Boolean} True if this data model field is of type string.
         *
         * @method splunkjs.Service.DataModelField
         */isString:function(){cov_1ks4ntaci2().f[264]++;cov_1ks4ntaci2().s[837]++;return"string"===this.type;},/**
         * Is this data model field of type number?
         *
         * @return {Boolean} True if this data model field is of type number.
         *
         * @method splunkjs.Service.DataModelField
         */isNumber:function(){cov_1ks4ntaci2().f[265]++;cov_1ks4ntaci2().s[838]++;return"number"===this.type;},/**
         * Is this data model field of type timestamp?
         *
         * @return {Boolean} True if this data model field is of type timestamp.
         *
         * @method splunkjs.Service.DataModelField
         */isTimestamp:function(){cov_1ks4ntaci2().f[266]++;cov_1ks4ntaci2().s[839]++;return"timestamp"===this.type;},/**
         * Is this data model field of type object count?
         *
         * @return {Boolean} True if this data model field is of type object count.
         *
         * @method splunkjs.Service.DataModelField
         */isObjectcount:function(){cov_1ks4ntaci2().f[267]++;cov_1ks4ntaci2().s[840]++;return"objectCount"===this.type;},/**
         * Is this data model field of type child count?
         *
         * @return {Boolean} True if this data model field is of type child count.
         *
         * @method splunkjs.Service.DataModelField
         */isChildcount:function(){cov_1ks4ntaci2().f[268]++;cov_1ks4ntaci2().s[841]++;return"childCount"===this.type;},/**
         * Is this data model field of type ipv4?
         *
         * @return {Boolean} True if this data model field is of type ipv4.
         *
         * @method splunkjs.Service.DataModelField
         */isIPv4:function(){cov_1ks4ntaci2().f[269]++;cov_1ks4ntaci2().s[842]++;return"ipv4"===this.type;},/**
         * Is this data model field of type boolean?
         *
         * @return {Boolean} True if this data model field is of type boolean.
         *
         * @method splunkjs.Service.DataModelField
         */isBoolean:function(){cov_1ks4ntaci2().f[270]++;cov_1ks4ntaci2().s[843]++;return"boolean"===this.type;}});/**
     * Represents a constraint on a `DataModelObject` or a `DataModelField`.
     *
     * Has these properties:
     *    - `query` (_string_): The search query defining this data model constraint.
     *    - `lineage` (_array_): The lineage of this data model constraint.
     *    - `owner` (_string_): The name of the data model object that owns
     *          this data model constraint.
     *
     * @class splunkjs.Service.DataModelConstraint
     */cov_1ks4ntaci2().s[844]++;root.DataModelConstraint=Class.extend({/**
         * Constructor for a data model constraint.
         * SDK users are not expected to invoke this constructor directly.
         *
         * @constructor
         * @param {Object} props A dictionary of properties to set:
         *     - `search` (_string_): The Splunk search query this constraint specifies.
         *     - `owner` (_string_): The lineage of the data model object that owns this
         *          constraint, items are delimited by a dot. This is converted into
         *          an array of strings upon construction.
         *
         * @method splunkjs.Service.DataModelConstraint
         */init:function(props){cov_1ks4ntaci2().f[271]++;cov_1ks4ntaci2().s[845]++;props=(cov_1ks4ntaci2().b[229][0]++,props)||(cov_1ks4ntaci2().b[229][1]++,{});cov_1ks4ntaci2().s[846]++;props.owner=(cov_1ks4ntaci2().b[230][0]++,props.owner)||(cov_1ks4ntaci2().b[230][1]++,"");cov_1ks4ntaci2().s[847]++;this.query=props.search;cov_1ks4ntaci2().s[848]++;this.lineage=props.owner.split(".");cov_1ks4ntaci2().s[849]++;this.owner=this.lineage[this.lineage.length-1];}});/**
     * Used for specifying a calculation on a `DataModelObject`.
     *
     * Has these properties:
     *    - `id` (_string_): The ID for this data model calculation.
     *    - `type` (_string_): The type of this data model calculation.
     *    - `comment` (_string_|_null_): The comment for this data model calculation, or `null`.
     *    - `editable` (_boolean_): True if this calculation can be edited, false otherwise.
     *    - `lineage` (_array_): The lineage of the data model object on which this calculation
     *          is defined in an array of strings.
     *    - `owner` (_string_): The data model that this calculation belongs to.
     *    - `outputFields` (_array_): The fields output by this calculation.
     *
     * The Rex and Eval types have an additional property:
     *    - `expression` (_string_): The expression to use for this calculation.
     *
     * The Rex and GeoIP types have an additional property:
     *    - `inputField` (_string_): The field to use for calculation.
     *
     * The Lookup type has additional properties:
     *    - `lookupName` (_string_): The name of the lookup to perform.
     *    - `inputFieldMappings` (_object_): The mappings from fields in the events to fields in the lookup.
     *
     * Valid types of calculations are:
     *    - `Lookup`
     *    - `Eval`
     *    - `GeoIP`
     *    - `Rex`
     *
     * @class splunkjs.Service.DataModelCalculation
     */cov_1ks4ntaci2().s[850]++;root.DataModelCalculation=Class.extend({_types:["Lookup","Eval","GeoIP","Rex"],/**
         * Constructor for a data model calculation.
         * SDK users are not expected to invoke this constructor directly.
         *
         * @constructor
         * @param {Object} props A dictionary of properties to set:
         *     - `calculationID` (_string_): The ID of this calculation.
         *     - `calculationType` (_string_): The type of this calculation, see class docs for valid types.
         *     - `editable` (_boolean_): Whether this calculation can be edited.
         *     - `comment` (_string_): A comment for this calculation, or `null` if there isn't one.
         *     - `owner` (_string_): The lineage of the data model object on which this calculation
         *          is defined, items are delimited by a dot. This is converted into an array of
         *          strings upon construction.
         *     - `outputFields` (_array_): An array of the fields this calculation generates.
         *     - `expression` (_string_): The expression to use for this calculation; exclusive to `Eval` and `Rex` calculations (optional)
         *     - `inputField` (_string_): The field to use for calculation; exclusive to `GeoIP` and `Rex` calculations (optional)
         *     - `lookupName` (_string_): The name of the lookup to perform; exclusive to `Lookup` calculations (optional)
         *     - `inputFieldMappings` (_array_): One element array containing an object with the mappings from fields in the events to fields
         *         in the lookup; exclusive to `Lookup` calculations (optional)
         *
         * @method splunkjs.Service.DataModelCalculation
         */init:function(props){cov_1ks4ntaci2().f[272]++;cov_1ks4ntaci2().s[851]++;props=(cov_1ks4ntaci2().b[231][0]++,props)||(cov_1ks4ntaci2().b[231][1]++,{});cov_1ks4ntaci2().s[852]++;props.owner=(cov_1ks4ntaci2().b[232][0]++,props.owner)||(cov_1ks4ntaci2().b[232][1]++,"");cov_1ks4ntaci2().s[853]++;this.id=props.calculationID;cov_1ks4ntaci2().s[854]++;this.type=props.calculationType;cov_1ks4ntaci2().s[855]++;this.comment=(cov_1ks4ntaci2().b[233][0]++,props.comment)||(cov_1ks4ntaci2().b[233][1]++,null);cov_1ks4ntaci2().s[856]++;this.editable=props.editable;cov_1ks4ntaci2().s[857]++;this.lineage=props.owner.split(".");cov_1ks4ntaci2().s[858]++;this.owner=this.lineage[this.lineage.length-1];cov_1ks4ntaci2().s[859]++;this.outputFields=[];cov_1ks4ntaci2().s[860]++;for(var i=(cov_1ks4ntaci2().s[861]++,0);i<props.outputFields.length;i++){cov_1ks4ntaci2().s[862]++;this.outputFields[props.outputFields[i].fieldName]=new root.DataModelField(props.outputFields[i]);}cov_1ks4ntaci2().s[863]++;if((cov_1ks4ntaci2().b[235][0]++,"Eval"===this.type)||(cov_1ks4ntaci2().b[235][1]++,"Rex"===this.type)){cov_1ks4ntaci2().b[234][0]++;cov_1ks4ntaci2().s[864]++;this.expression=props.expression;}else{cov_1ks4ntaci2().b[234][1]++;}cov_1ks4ntaci2().s[865]++;if((cov_1ks4ntaci2().b[237][0]++,"GeoIP"===this.type)||(cov_1ks4ntaci2().b[237][1]++,"Rex"===this.type)){cov_1ks4ntaci2().b[236][0]++;cov_1ks4ntaci2().s[866]++;this.inputField=props.inputField;}else{cov_1ks4ntaci2().b[236][1]++;}cov_1ks4ntaci2().s[867]++;if("Lookup"===this.type){cov_1ks4ntaci2().b[238][0]++;cov_1ks4ntaci2().s[868]++;this.lookupName=props.lookupName;cov_1ks4ntaci2().s[869]++;this.inputFieldMappings=props.lookupInputs[0];}else{cov_1ks4ntaci2().b[238][1]++;}},/**
         * Returns an array of strings of output field names.
         *
         * @return {Array} An array of strings of output field names.
         *
         * @method splunkjs.Service.DataModelCalculation
         */outputFieldNames:function(){cov_1ks4ntaci2().f[273]++;cov_1ks4ntaci2().s[870]++;return Object.keys(this.outputFields);},/**
         * Is this data model calculation editable?
         *
         * @return {Boolean} True if this data model calculation is editable.
         *
         * @method splunkjs.Service.DataModelCalculation
         */isEditable:function(){cov_1ks4ntaci2().f[274]++;cov_1ks4ntaci2().s[871]++;return!!this.editable;},/**
         * Is this data model calculation of type lookup?
         *
         * @return {Boolean} True if this data model calculation is of type lookup.
         *
         * @method splunkjs.Service.DataModelCalculation
         */isLookup:function(){cov_1ks4ntaci2().f[275]++;cov_1ks4ntaci2().s[872]++;return"Lookup"===this.type;},/**
         * Is this data model calculation of type eval?
         *
         * @return {Boolean} True if this data model calculation is of type eval.
         *
         * @method splunkjs.Service.DataModelCalculation
         */isEval:function(){cov_1ks4ntaci2().f[276]++;cov_1ks4ntaci2().s[873]++;return"Eval"===this.type;},/**
         * Is this data model calculation of type Rex?
         *
         * @return {Boolean} True if this data model calculation is of type Rex.
         *
         * @method splunkjs.Service.DataModelCalculation
         */isRex:function(){cov_1ks4ntaci2().f[277]++;cov_1ks4ntaci2().s[874]++;return"Rex"===this.type;},/**
         * Is this data model calculation of type GeoIP?
         *
         * @return {Boolean} True if this data model calculation is of type GeoIP.
         *
         * @method splunkjs.Service.DataModelCalculation
         */isGeoIP:function(){cov_1ks4ntaci2().f[278]++;cov_1ks4ntaci2().s[875]++;return"GeoIP"===this.type;}});/**
     * Pivot represents data about a pivot report returned by the Splunk Server.
     *
     * Has these properties:
     *    - `service` (_splunkjs.Service_): A `Service` instance.
     *    - `search` (_string_): The search string for running the pivot report.
     *    - `drilldownSearch` (_string_): The search for running this pivot report using drilldown.
     *    - `openInSearch` (_string_): Equivalent to search parameter, but listed more simply.
     *    - `prettyQuery` (_string_): Equivalent to `openInSearch`.
     *    - `pivotSearch` (_string_): A pivot search command based on the named data model.
     *    - `tstatsSearch` (_string_): The search for running this pivot report using tstats.
     *
     * @class splunkjs.Service.Pivot
     */cov_1ks4ntaci2().s[876]++;root.Pivot=Class.extend({/**
         * Constructor for a pivot.
         * SDK users are not expected to invoke this constructor directly.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} props A dictionary of properties to set:
         *    - `search` (_string_): The search string for running the pivot report.
         *    - `drilldown_search` (_string_): The search for running this pivot report using drilldown.
         *    - `open_in_search` (_string_): Equivalent to search parameter, but listed more simply.
         *    - `pivot_search` (_string_): A pivot search command based on the named data model.
         *    - `tstats_search` (_string_|_null_): The search for running this pivot report using tstats, null if acceleration is disabled.
         *
         * @method splunkjs.Service.Pivot
         */init:function(service,props){cov_1ks4ntaci2().f[279]++;cov_1ks4ntaci2().s[877]++;this.service=service;cov_1ks4ntaci2().s[878]++;this.search=props.search;cov_1ks4ntaci2().s[879]++;this.drilldownSearch=props.drilldown_search;cov_1ks4ntaci2().s[880]++;this.prettyQuery=this.openInSearch=props.open_in_search;cov_1ks4ntaci2().s[881]++;this.pivotSearch=props.pivot_search;cov_1ks4ntaci2().s[882]++;this.tstatsSearch=(cov_1ks4ntaci2().b[239][0]++,props.tstats_search)||(cov_1ks4ntaci2().b[239][1]++,null);cov_1ks4ntaci2().s[883]++;this.run=utils.bind(this,this.run);},/**
         * Starts a search job running this pivot, accelerated if possible.
         *
         * @param {Object} args A dictionary of properties for the search job (optional). For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams" target="_blank">Search job parameters</a> on Splunk Developer Portal.
         *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.
         * @param {Function} callback A function to call when done creating the search job: `(err, job)`.
         * @method splunkjs.Service.Pivot
         */run:function(args,callback){cov_1ks4ntaci2().f[280]++;cov_1ks4ntaci2().s[884]++;if(utils.isUndefined(callback)){cov_1ks4ntaci2().b[240][0]++;cov_1ks4ntaci2().s[885]++;callback=args;cov_1ks4ntaci2().s[886]++;args={};}else{cov_1ks4ntaci2().b[240][1]++;}cov_1ks4ntaci2().s[887]++;if((cov_1ks4ntaci2().b[242][0]++,!args)||(cov_1ks4ntaci2().b[242][1]++,Object.keys(args).length===0)){cov_1ks4ntaci2().b[241][0]++;cov_1ks4ntaci2().s[888]++;args={};}else{cov_1ks4ntaci2().b[241][1]++;}// If tstats is undefined, use pivotSearch (try to run an accelerated search if possible)
cov_1ks4ntaci2().s[889]++;this.service.search((cov_1ks4ntaci2().b[243][0]++,this.tstatsSearch)||(cov_1ks4ntaci2().b[243][1]++,this.pivotSearch),args,callback);}});/**
     * PivotSpecification represents a pivot to be done on a particular data model object.
     * The user creates a PivotSpecification on some data model object, adds filters, row splits,
     * column splits, and cell values, then calls the pivot method to query splunkd and
     * get a set of SPL queries corresponding to this specification.
     *
     * Call the `pivot` method to query Splunk for SPL queries corresponding to this pivot.
     *
     * This class supports a fluent API, each function except `init`, `toJsonObject` & `pivot`
     * return the modified `splunkjs.Service.PivotSpecification` instance.
     *
     * @example
     *     service.dataModels().fetch(function(err, dataModels) {
     *         var searches = dataModels.item("internal_audit_logs").objectByName("searches");
     *         var pivotSpecification = searches.createPivotSpecification();
     *         pivotSpecification
     *             .addRowSplit("user", "Executing user")
     *             .addRangeColumnSplit("exec_time", {limit: 4})
     *             .addCellValue("search", "Search Query", "values")
     *             .pivot(function(err, pivot) {
     *                 console.log("Got a Pivot object from the Splunk server!");
     *             });
     *     });
     *
     * Has these properties:
     *    - `dataModelObject` (_splunkjs.Service.DataModelObject_): The `DataModelObject` from which
     *        this `PivotSpecification` was created.
     *    - `columns` (_array_): The column splits on this `PivotSpecification`.
     *    - `rows` (_array_): The row splits on this `PivotSpecification`.
     *    - `filters` (_array_): The filters on this `PivotSpecification`.
     *    - `cells` (_array_): The cell aggregations for this`PivotSpecification`.
     *    - `accelerationNamespace` (_string_|_null_): The name of the `DataModel` that owns the `DataModelObject`
     *        on which this `PivotSpecification` was created if the `DataModel` is accelerated. Alternatively,
     *        you can set this property manually to the sid of an acceleration job in the format `sid=<sid>`.
     *
     * Valid comparison types are:
     *    - `boolean`
     *    - `string`
     *    - `number`
     *    - `ipv4`
     *
     * Valid boolean comparisons are:
     *    - `=`
     *    - `is`
     *    - `isNull`
     *    - `isNotNull`
     *
     * Valid string comparisons are:
     *    - `=`
     *    - `is`
     *    - `isNull`
     *    - `isNotNull`
     *    - `contains`
     *    - `doesNotContain`
     *    - `startsWith`
     *    - `endsWith`
     *    - `regex`
     *
     * Valid number comparisons are:
     *    - `=`
     *    - `!=`
     *    - `<`
     *    - `>`
     *    - `<=`
     *    - `>=`
     *    - `is`
     *    - `isNull`
     *    - `isNotNull`
     *
     * Valid ipv4 comparisons are:
     *    - `is`
     *    - `isNull`
     *    - `isNotNull`
     *    - `contains`
     *    - `doesNotContain`
     *    - `startsWith`
     *
     * Valid binning values are:
     *    - `auto`
     *    - `year`
     *    - `month`
     *    - `day`
     *    - `hour`
     *    - `minute`
     *    - `second`
     *
     * Valid sort directions are:
     *    - `ASCENDING`
     *    - `DECENDING`
     *    - `DEFAULT`
     *
     * Valid stats functions are:
     *    - `list`
     *    - `values`
     *    - `first`
     *    - `last`
     *    - `count`
     *    - `dc`
     *    - `sum`
     *    - `average`
     *    - `max`
     *    - `min`
     *    - `stdev`
     *    - `duration`
     *    - `earliest`
     *    - `latest`
     *
     * @class splunkjs.Service.PivotSpecification
     */cov_1ks4ntaci2().s[890]++;root.PivotSpecification=Class.extend({_comparisons:{boolean:["=","is","isNull","isNotNull"],string:["=","is","isNull","isNotNull","contains","doesNotContain","startsWith","endsWith","regex"],number:["=","!=","<",">","<=",">=","is","isNull","isNotNull"],ipv4:["is","isNull","isNotNull","contains","doesNotContain","startsWith"]},_binning:["auto","year","month","day","hour","minute","second"],_sortDirection:["ASCENDING","DESCENDING","DEFAULT"],_statsFunctions:["list","values","first","last","count","dc","sum","average","max","min","stdev","duration","earliest","latest"],/**
         * Constructor for a pivot specification.
         *
         * @constructor
         * @param {splunkjs.Service.DataModel} parentDataModel The `DataModel` that owns this data model object.
         *
         * @method splunkjs.Service.PivotSpecification
         */init:function(dataModelObject){cov_1ks4ntaci2().f[281]++;cov_1ks4ntaci2().s[891]++;this.dataModelObject=dataModelObject;cov_1ks4ntaci2().s[892]++;this.columns=[];cov_1ks4ntaci2().s[893]++;this.rows=[];cov_1ks4ntaci2().s[894]++;this.filters=[];cov_1ks4ntaci2().s[895]++;this.cells=[];cov_1ks4ntaci2().s[896]++;this.accelerationNamespace=dataModelObject.dataModel.isAccelerated()?(cov_1ks4ntaci2().b[244][0]++,dataModelObject.dataModel.name):(cov_1ks4ntaci2().b[244][1]++,null);cov_1ks4ntaci2().s[897]++;this.run=utils.bind(this,this.run);cov_1ks4ntaci2().s[898]++;this.pivot=utils.bind(this,this.pivot);},/**
         * Set the acceleration cache for this pivot specification to a job,
         * usually generated by createLocalAccelerationJob on a DataModelObject
         * instance, as the acceleration cache for this pivot specification.
         *
         * @param {String|splunkjs.Service.Job} sid The sid of an acceleration job,
         *     or, a `splunkjs.Service.Job` instance.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */setAccelerationJob:function(sid){cov_1ks4ntaci2().f[282]++;cov_1ks4ntaci2().s[899]++;// If a search object is passed in, get its sid
if((cov_1ks4ntaci2().b[246][0]++,sid)&&(cov_1ks4ntaci2().b[246][1]++,sid instanceof Service.Job)){cov_1ks4ntaci2().b[245][0]++;cov_1ks4ntaci2().s[900]++;sid=sid.sid;}else{cov_1ks4ntaci2().b[245][1]++;}cov_1ks4ntaci2().s[901]++;if(!sid){cov_1ks4ntaci2().b[247][0]++;cov_1ks4ntaci2().s[902]++;throw new Error("Sid to use for acceleration must not be null.");}else{cov_1ks4ntaci2().b[247][1]++;}cov_1ks4ntaci2().s[903]++;this.accelerationNamespace="sid="+sid;cov_1ks4ntaci2().s[904]++;return this;},/**
         * Add a filter on a boolean valued field. The filter will be a constraint of the form
         * `field `comparison` compareTo`, for example: `is_remote = false`.
         *
         * @param {String} fieldName The name of field to filter on
         * @param {String} comparisonType The type of comparison, see class docs for valid types.
         * @param {String} comparisonOp The comparison, see class docs for valid comparisons, based on type.
         * @param {String} compareTo The value to compare the field to.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addFilter:function(fieldName,comparisonType,comparisonOp,compareTo){cov_1ks4ntaci2().f[283]++;cov_1ks4ntaci2().s[905]++;if(!this.dataModelObject.hasField(fieldName)){cov_1ks4ntaci2().b[248][0]++;cov_1ks4ntaci2().s[906]++;throw new Error("Cannot add filter on a nonexistent field.");}else{cov_1ks4ntaci2().b[248][1]++;}cov_1ks4ntaci2().s[907]++;if(comparisonType!==this.dataModelObject.fieldByName(fieldName).type){cov_1ks4ntaci2().b[249][0]++;cov_1ks4ntaci2().s[908]++;throw new Error("Cannot add "+comparisonType+" filter on "+fieldName+" because it is of type "+this.dataModelObject.fieldByName(fieldName).type);}else{cov_1ks4ntaci2().b[249][1]++;}cov_1ks4ntaci2().s[909]++;if(!utils.contains(this._comparisons[comparisonType],comparisonOp)){cov_1ks4ntaci2().b[250][0]++;cov_1ks4ntaci2().s[910]++;throw new Error("Cannot add "+comparisonType+" filter because "+comparisonOp+" is not a valid comparison operator");}else{cov_1ks4ntaci2().b[250][1]++;}var ret=(cov_1ks4ntaci2().s[911]++,{fieldName:fieldName,owner:this.dataModelObject.fieldByName(fieldName).lineage.join("."),type:comparisonType});// These fields are type dependent
cov_1ks4ntaci2().s[912]++;if(utils.contains(["boolean","string","ipv4","number"],ret.type)){cov_1ks4ntaci2().b[251][0]++;cov_1ks4ntaci2().s[913]++;ret.rule={comparator:comparisonOp,compareTo:compareTo};}else{cov_1ks4ntaci2().b[251][1]++;}cov_1ks4ntaci2().s[914]++;this.filters.push(ret);cov_1ks4ntaci2().s[915]++;return this;},/**
         * Add a limit on the events shown in a pivot by sorting them according to some field, then taking
         * the specified number from the beginning or end of the list.
         *
         * @param {String} fieldName The name of field to filter on.
         * @param {String} sortAttribute The name of the field to use for sorting.
         * @param {String} sortDirection The direction to sort events, see class docs for valid types.
         * @param {String} limit The number of values from the sorted list to allow through this filter.
         * @param {String} statsFunction The stats function to use for aggregation before sorting, see class docs for valid types.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addLimitFilter:function(fieldName,sortAttribute,sortDirection,limit,statsFunction){cov_1ks4ntaci2().f[284]++;cov_1ks4ntaci2().s[916]++;if(!this.dataModelObject.hasField(fieldName)){cov_1ks4ntaci2().b[252][0]++;cov_1ks4ntaci2().s[917]++;throw new Error("Cannot add limit filter on a nonexistent field.");}else{cov_1ks4ntaci2().b[252][1]++;}var f=(cov_1ks4ntaci2().s[918]++,this.dataModelObject.fieldByName(fieldName));cov_1ks4ntaci2().s[919]++;if(!utils.contains(["string","number","objectCount"],f.type)){cov_1ks4ntaci2().b[253][0]++;cov_1ks4ntaci2().s[920]++;throw new Error("Cannot add limit filter on "+fieldName+" because it is of type "+f.type);}else{cov_1ks4ntaci2().b[253][1]++;}cov_1ks4ntaci2().s[921]++;if((cov_1ks4ntaci2().b[255][0]++,"string"===f.type)&&(cov_1ks4ntaci2().b[255][1]++,!utils.contains(["count","dc"],statsFunction))){cov_1ks4ntaci2().b[254][0]++;cov_1ks4ntaci2().s[922]++;throw new Error("Stats function for fields of type string must be COUNT or DISTINCT_COUNT; found "+statsFunction);}else{cov_1ks4ntaci2().b[254][1]++;}cov_1ks4ntaci2().s[923]++;if((cov_1ks4ntaci2().b[257][0]++,"number"===f.type)&&(cov_1ks4ntaci2().b[257][1]++,!utils.contains(["count","dc","average","sum"],statsFunction))){cov_1ks4ntaci2().b[256][0]++;cov_1ks4ntaci2().s[924]++;throw new Error("Stats function for fields of type number must be one of COUNT, DISTINCT_COUNT, SUM, or AVERAGE; found "+statsFunction);}else{cov_1ks4ntaci2().b[256][1]++;}cov_1ks4ntaci2().s[925]++;if((cov_1ks4ntaci2().b[259][0]++,"objectCount"===f.type)&&(cov_1ks4ntaci2().b[259][1]++,!utils.contains(["count"],statsFunction))){cov_1ks4ntaci2().b[258][0]++;cov_1ks4ntaci2().s[926]++;throw new Error("Stats function for fields of type object count must be COUNT; found "+statsFunction);}else{cov_1ks4ntaci2().b[258][1]++;}var filter=(cov_1ks4ntaci2().s[927]++,{fieldName:fieldName,owner:f.lineage.join("."),type:f.type,attributeName:sortAttribute,attributeOwner:this.dataModelObject.fieldByName(sortAttribute).lineage.join("."),sortDirection:sortDirection,limitAmount:limit,statsFn:statsFunction});// Assumed "highest" is preferred for when sortDirection is "DEFAULT"
cov_1ks4ntaci2().s[928]++;filter.limitType="ASCENDING"===sortDirection?(cov_1ks4ntaci2().b[260][0]++,"lowest"):(cov_1ks4ntaci2().b[260][1]++,"highest");cov_1ks4ntaci2().s[929]++;this.filters.push(filter);cov_1ks4ntaci2().s[930]++;return this;},/**
         * Add a row split on a numeric or string valued field, splitting on each distinct value of the field.
         *
         * @param {String} fieldName The name of field to split on.
         * @param {String} label A human readable name for this set of rows.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addRowSplit:function(fieldName,label){cov_1ks4ntaci2().f[285]++;cov_1ks4ntaci2().s[931]++;if(!this.dataModelObject.hasField(fieldName)){cov_1ks4ntaci2().b[261][0]++;cov_1ks4ntaci2().s[932]++;throw new Error("Did not find field "+fieldName);}else{cov_1ks4ntaci2().b[261][1]++;}var f=(cov_1ks4ntaci2().s[933]++,this.dataModelObject.fieldByName(fieldName));cov_1ks4ntaci2().s[934]++;if(!utils.contains(["number","string"],f.type)){cov_1ks4ntaci2().b[262][0]++;cov_1ks4ntaci2().s[935]++;throw new Error("Field was of type "+f.type+", expected number or string.");}else{cov_1ks4ntaci2().b[262][1]++;}var row=(cov_1ks4ntaci2().s[936]++,{fieldName:fieldName,owner:f.owner,type:f.type,label:label});cov_1ks4ntaci2().s[937]++;if("number"===f.type){cov_1ks4ntaci2().b[263][0]++;cov_1ks4ntaci2().s[938]++;row.display="all";}else{cov_1ks4ntaci2().b[263][1]++;}cov_1ks4ntaci2().s[939]++;this.rows.push(row);cov_1ks4ntaci2().s[940]++;return this;},/**
         * Add a row split on a numeric field, splitting into numeric ranges.
         *
         * This split generates bins with edges equivalent to the
         * classic loop 'for i in <start> to <end> by <step>' but with a maximum
         * number of bins <limit>. This dispatches to the stats and xyseries search commands.
         * See their documentation for more details.
         *
         * @param {String} fieldName The field to split on.
         * @param {String} label A human readable name for this set of rows.
         * @param {Object} options An optional dictionary of collection filtering and pagination options:
         *    - `start` (_integer_): The value of the start of the first range, or null to take the lowest value in the events.
         *    - `end` (_integer_): The value for the end of the last range, or null to take the highest value in the events.
         *    - `step` (_integer_): The the width of each range, or null to have Splunk calculate it.
         *    - `limit` (_integer_): The maximum number of ranges to split into, or null for no limit.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addRangeRowSplit:function(field,label,ranges){cov_1ks4ntaci2().f[286]++;cov_1ks4ntaci2().s[941]++;if(!this.dataModelObject.hasField(field)){cov_1ks4ntaci2().b[264][0]++;cov_1ks4ntaci2().s[942]++;throw new Error("Did not find field "+field);}else{cov_1ks4ntaci2().b[264][1]++;}var f=(cov_1ks4ntaci2().s[943]++,this.dataModelObject.fieldByName(field));cov_1ks4ntaci2().s[944]++;if("number"!==f.type){cov_1ks4ntaci2().b[265][0]++;cov_1ks4ntaci2().s[945]++;throw new Error("Field was of type "+f.type+", expected number.");}else{cov_1ks4ntaci2().b[265][1]++;}var updateRanges=(cov_1ks4ntaci2().s[946]++,{});cov_1ks4ntaci2().s[947]++;if((cov_1ks4ntaci2().b[267][0]++,!utils.isUndefined(ranges.start))&&(cov_1ks4ntaci2().b[267][1]++,ranges.start!==null)){cov_1ks4ntaci2().b[266][0]++;cov_1ks4ntaci2().s[948]++;updateRanges.start=ranges.start;}else{cov_1ks4ntaci2().b[266][1]++;}cov_1ks4ntaci2().s[949]++;if((cov_1ks4ntaci2().b[269][0]++,!utils.isUndefined(ranges.end))&&(cov_1ks4ntaci2().b[269][1]++,ranges.end!==null)){cov_1ks4ntaci2().b[268][0]++;cov_1ks4ntaci2().s[950]++;updateRanges.end=ranges.end;}else{cov_1ks4ntaci2().b[268][1]++;}cov_1ks4ntaci2().s[951]++;if((cov_1ks4ntaci2().b[271][0]++,!utils.isUndefined(ranges.step))&&(cov_1ks4ntaci2().b[271][1]++,ranges.step!==null)){cov_1ks4ntaci2().b[270][0]++;cov_1ks4ntaci2().s[952]++;updateRanges.size=ranges.step;}else{cov_1ks4ntaci2().b[270][1]++;}cov_1ks4ntaci2().s[953]++;if((cov_1ks4ntaci2().b[273][0]++,!utils.isUndefined(ranges.limit))&&(cov_1ks4ntaci2().b[273][1]++,ranges.limit!==null)){cov_1ks4ntaci2().b[272][0]++;cov_1ks4ntaci2().s[954]++;updateRanges.maxNumberOf=ranges.limit;}else{cov_1ks4ntaci2().b[272][1]++;}cov_1ks4ntaci2().s[955]++;this.rows.push({fieldName:field,owner:f.owner,type:f.type,label:label,display:"ranges",ranges:updateRanges});cov_1ks4ntaci2().s[956]++;return this;},/**
         * Add a row split on a boolean valued field.
         *
         * @param {String} fieldName The name of field to split on.
         * @param {String} label A human readable name for this set of rows.
         * @param {String} trueDisplayValue A string to display in the true valued row label.
         * @param {String} falseDisplayValue A string to display in the false valued row label.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addBooleanRowSplit:function(field,label,trueDisplayValue,falseDisplayValue){cov_1ks4ntaci2().f[287]++;cov_1ks4ntaci2().s[957]++;if(!this.dataModelObject.fieldByName(field)){cov_1ks4ntaci2().b[274][0]++;cov_1ks4ntaci2().s[958]++;throw new Error("Did not find field "+field);}else{cov_1ks4ntaci2().b[274][1]++;}var f=(cov_1ks4ntaci2().s[959]++,this.dataModelObject.fieldByName(field));cov_1ks4ntaci2().s[960]++;if("boolean"!==f.type){cov_1ks4ntaci2().b[275][0]++;cov_1ks4ntaci2().s[961]++;throw new Error("Field was of type "+f.type+", expected boolean.");}else{cov_1ks4ntaci2().b[275][1]++;}cov_1ks4ntaci2().s[962]++;this.rows.push({fieldName:field,owner:f.owner,type:f.type,label:label,trueLabel:trueDisplayValue,falseLabel:falseDisplayValue});cov_1ks4ntaci2().s[963]++;return this;},/**
         * Add a row split on a timestamp valued field, binned by the specified bucket size.
         *
         * @param {String} fieldName The name of field to split on.
         * @param {String} label A human readable name for this set of rows.
         * @param {String} binning The size of bins to use, see class docs for valid types.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addTimestampRowSplit:function(field,label,binning){cov_1ks4ntaci2().f[288]++;cov_1ks4ntaci2().s[964]++;if(!this.dataModelObject.hasField(field)){cov_1ks4ntaci2().b[276][0]++;cov_1ks4ntaci2().s[965]++;throw new Error("Did not find field "+field);}else{cov_1ks4ntaci2().b[276][1]++;}var f=(cov_1ks4ntaci2().s[966]++,this.dataModelObject.fieldByName(field));cov_1ks4ntaci2().s[967]++;if("timestamp"!==f.type){cov_1ks4ntaci2().b[277][0]++;cov_1ks4ntaci2().s[968]++;throw new Error("Field was of type "+f.type+", expected timestamp.");}else{cov_1ks4ntaci2().b[277][1]++;}cov_1ks4ntaci2().s[969]++;if(!utils.contains(this._binning,binning)){cov_1ks4ntaci2().b[278][0]++;cov_1ks4ntaci2().s[970]++;throw new Error("Invalid binning "+binning+" found. Valid values are: "+this._binning.join(", "));}else{cov_1ks4ntaci2().b[278][1]++;}cov_1ks4ntaci2().s[971]++;this.rows.push({fieldName:field,owner:f.owner,type:f.type,label:label,period:binning});cov_1ks4ntaci2().s[972]++;return this;},/**
         * Add a column split on a string or number valued field, producing a column for
         * each distinct value of the field.
         *
         * @param {String} fieldName The name of field to split on.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addColumnSplit:function(fieldName){cov_1ks4ntaci2().f[289]++;cov_1ks4ntaci2().s[973]++;if(!this.dataModelObject.hasField(fieldName)){cov_1ks4ntaci2().b[279][0]++;cov_1ks4ntaci2().s[974]++;throw new Error("Did not find field "+fieldName);}else{cov_1ks4ntaci2().b[279][1]++;}var f=(cov_1ks4ntaci2().s[975]++,this.dataModelObject.fieldByName(fieldName));cov_1ks4ntaci2().s[976]++;if(!utils.contains(["number","string"],f.type)){cov_1ks4ntaci2().b[280][0]++;cov_1ks4ntaci2().s[977]++;throw new Error("Field was of type "+f.type+", expected number or string.");}else{cov_1ks4ntaci2().b[280][1]++;}var col=(cov_1ks4ntaci2().s[978]++,{fieldName:fieldName,owner:f.owner,type:f.type});cov_1ks4ntaci2().s[979]++;if("number"===f.type){cov_1ks4ntaci2().b[281][0]++;cov_1ks4ntaci2().s[980]++;col.display="all";}else{cov_1ks4ntaci2().b[281][1]++;}cov_1ks4ntaci2().s[981]++;this.columns.push(col);cov_1ks4ntaci2().s[982]++;return this;},/**
         * Add a column split on a numeric field, splitting the values into ranges.
         *
         * @param {String} fieldName The field to split on.
         * @param {Object} options An optional dictionary of collection filtering and pagination options:
         *    - `start` (_integer_): The value of the start of the first range, or null to take the lowest value in the events.
         *    - `end` (_integer_): The value for the end of the last range, or null to take the highest value in the events.
         *    - `step` (_integer_): The the width of each range, or null to have Splunk calculate it.
         *    - `limit` (_integer_): The maximum number of ranges to split into, or null for no limit.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addRangeColumnSplit:function(fieldName,ranges){cov_1ks4ntaci2().f[290]++;cov_1ks4ntaci2().s[983]++;if(!this.dataModelObject.hasField(fieldName)){cov_1ks4ntaci2().b[282][0]++;cov_1ks4ntaci2().s[984]++;throw new Error("Did not find field "+fieldName);}else{cov_1ks4ntaci2().b[282][1]++;}var f=(cov_1ks4ntaci2().s[985]++,this.dataModelObject.fieldByName(fieldName));cov_1ks4ntaci2().s[986]++;if("number"!==f.type){cov_1ks4ntaci2().b[283][0]++;cov_1ks4ntaci2().s[987]++;throw new Error("Field was of type "+f.type+", expected number.");}else{cov_1ks4ntaci2().b[283][1]++;}// In Splunk 6.0.1.1, data models incorrectly expect strings for these fields
// instead of numbers. In 6.1, this is fixed and both are accepted.
var updatedRanges=(cov_1ks4ntaci2().s[988]++,{});cov_1ks4ntaci2().s[989]++;if((cov_1ks4ntaci2().b[285][0]++,!utils.isUndefined(ranges.start))&&(cov_1ks4ntaci2().b[285][1]++,ranges.start!==null)){cov_1ks4ntaci2().b[284][0]++;cov_1ks4ntaci2().s[990]++;updatedRanges.start=ranges.start;}else{cov_1ks4ntaci2().b[284][1]++;}cov_1ks4ntaci2().s[991]++;if((cov_1ks4ntaci2().b[287][0]++,!utils.isUndefined(ranges.end))&&(cov_1ks4ntaci2().b[287][1]++,ranges.end!==null)){cov_1ks4ntaci2().b[286][0]++;cov_1ks4ntaci2().s[992]++;updatedRanges.end=ranges.end;}else{cov_1ks4ntaci2().b[286][1]++;}cov_1ks4ntaci2().s[993]++;if((cov_1ks4ntaci2().b[289][0]++,!utils.isUndefined(ranges.step))&&(cov_1ks4ntaci2().b[289][1]++,ranges.step!==null)){cov_1ks4ntaci2().b[288][0]++;cov_1ks4ntaci2().s[994]++;updatedRanges.size=ranges.step;}else{cov_1ks4ntaci2().b[288][1]++;}cov_1ks4ntaci2().s[995]++;if((cov_1ks4ntaci2().b[291][0]++,!utils.isUndefined(ranges.limit))&&(cov_1ks4ntaci2().b[291][1]++,ranges.limit!==null)){cov_1ks4ntaci2().b[290][0]++;cov_1ks4ntaci2().s[996]++;updatedRanges.maxNumberOf=ranges.limit;}else{cov_1ks4ntaci2().b[290][1]++;}cov_1ks4ntaci2().s[997]++;this.columns.push({fieldName:fieldName,owner:f.owner,type:f.type,display:"ranges",ranges:updatedRanges});cov_1ks4ntaci2().s[998]++;return this;},/**
         * Add a column split on a boolean valued field.
         *
         * @param {String} fieldName The name of field to split on.
         * @param {String} trueDisplayValue A string to display in the true valued column label.
         * @param {String} falseDisplayValue A string to display in the false valued column label.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addBooleanColumnSplit:function(fieldName,trueDisplayValue,falseDisplayValue){cov_1ks4ntaci2().f[291]++;cov_1ks4ntaci2().s[999]++;if(!this.dataModelObject.fieldByName(fieldName)){cov_1ks4ntaci2().b[292][0]++;cov_1ks4ntaci2().s[1000]++;throw new Error("Did not find field "+fieldName);}else{cov_1ks4ntaci2().b[292][1]++;}var f=(cov_1ks4ntaci2().s[1001]++,this.dataModelObject.fieldByName(fieldName));cov_1ks4ntaci2().s[1002]++;if("boolean"!==f.type){cov_1ks4ntaci2().b[293][0]++;cov_1ks4ntaci2().s[1003]++;throw new Error("Field was of type "+f.type+", expected boolean.");}else{cov_1ks4ntaci2().b[293][1]++;}cov_1ks4ntaci2().s[1004]++;this.columns.push({fieldName:fieldName,owner:f.owner,type:f.type,trueLabel:trueDisplayValue,falseLabel:falseDisplayValue});cov_1ks4ntaci2().s[1005]++;return this;},/**
         * Add a column split on a timestamp valued field, binned by the specified bucket size.
         *
         * @param {String} fieldName The name of field to split on.
         * @param {String} binning The size of bins to use, see class docs for valid types.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addTimestampColumnSplit:function(field,binning){cov_1ks4ntaci2().f[292]++;cov_1ks4ntaci2().s[1006]++;if(!this.dataModelObject.hasField(field)){cov_1ks4ntaci2().b[294][0]++;cov_1ks4ntaci2().s[1007]++;throw new Error("Did not find field "+field);}else{cov_1ks4ntaci2().b[294][1]++;}var f=(cov_1ks4ntaci2().s[1008]++,this.dataModelObject.fieldByName(field));cov_1ks4ntaci2().s[1009]++;if("timestamp"!==f.type){cov_1ks4ntaci2().b[295][0]++;cov_1ks4ntaci2().s[1010]++;throw new Error("Field was of type "+f.type+", expected timestamp.");}else{cov_1ks4ntaci2().b[295][1]++;}cov_1ks4ntaci2().s[1011]++;if(!utils.contains(this._binning,binning)){cov_1ks4ntaci2().b[296][0]++;cov_1ks4ntaci2().s[1012]++;throw new Error("Invalid binning "+binning+" found. Valid values are: "+this._binning.join(", "));}else{cov_1ks4ntaci2().b[296][1]++;}cov_1ks4ntaci2().s[1013]++;this.columns.push({fieldName:field,owner:f.owner,type:f.type,period:binning});cov_1ks4ntaci2().s[1014]++;return this;},/**
         * Add an aggregate to each cell of the pivot.
         *
         * @param {String} fieldName The name of field to aggregate.
         * @param {String} label a human readable name for this aggregate.
         * @param {String} statsFunction The function to use for aggregation, see class docs for valid stats functions.
         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */addCellValue:function(fieldName,label,statsFunction){cov_1ks4ntaci2().f[293]++;cov_1ks4ntaci2().s[1015]++;if(!this.dataModelObject.hasField(fieldName)){cov_1ks4ntaci2().b[297][0]++;cov_1ks4ntaci2().s[1016]++;throw new Error("Did not find field "+fieldName);}else{cov_1ks4ntaci2().b[297][1]++;}var f=(cov_1ks4ntaci2().s[1017]++,this.dataModelObject.fieldByName(fieldName));cov_1ks4ntaci2().s[1018]++;if((cov_1ks4ntaci2().b[299][0]++,utils.contains(["string","ipv4"],f.type))&&(cov_1ks4ntaci2().b[299][1]++,!utils.contains(["list","values","first","last","count","dc"],statsFunction))){cov_1ks4ntaci2().b[298][0]++;cov_1ks4ntaci2().s[1019]++;throw new Error("Stats function on string and IPv4 fields must be one of:"+" list, distinct_values, first, last, count, or distinct_count; found "+statsFunction);}else{cov_1ks4ntaci2().b[298][1]++;cov_1ks4ntaci2().s[1020]++;if((cov_1ks4ntaci2().b[301][0]++,"number"===f.type)&&(cov_1ks4ntaci2().b[301][1]++,!utils.contains(["sum","count","average","min","max","stdev","list","values"],statsFunction))){cov_1ks4ntaci2().b[300][0]++;cov_1ks4ntaci2().s[1021]++;throw new Error("Stats function on number field must be must be one of:"+" sum, count, average, max, min, stdev, list, or distinct_values; found "+statsFunction);}else{cov_1ks4ntaci2().b[300][1]++;cov_1ks4ntaci2().s[1022]++;if((cov_1ks4ntaci2().b[303][0]++,"timestamp"===f.type)&&(cov_1ks4ntaci2().b[303][1]++,!utils.contains(["duration","earliest","latest","list","values"],statsFunction))){cov_1ks4ntaci2().b[302][0]++;cov_1ks4ntaci2().s[1023]++;throw new Error("Stats function on timestamp field must be one of:"+" duration, earliest, latest, list, or distinct values; found "+statsFunction);}else{cov_1ks4ntaci2().b[302][1]++;cov_1ks4ntaci2().s[1024]++;if((cov_1ks4ntaci2().b[305][0]++,utils.contains(["objectCount","childCount"],f.type))&&(cov_1ks4ntaci2().b[305][1]++,"count"!==statsFunction)){cov_1ks4ntaci2().b[304][0]++;cov_1ks4ntaci2().s[1025]++;throw new Error("Stats function on childcount and objectcount fields must be count; "+"found "+statsFunction);}else{cov_1ks4ntaci2().b[304][1]++;cov_1ks4ntaci2().s[1026]++;if("boolean"===f.type){cov_1ks4ntaci2().b[306][0]++;cov_1ks4ntaci2().s[1027]++;throw new Error("Cannot use boolean valued fields as cell values.");}else{cov_1ks4ntaci2().b[306][1]++;}}}}}cov_1ks4ntaci2().s[1028]++;this.cells.push({fieldName:fieldName,owner:f.lineage.join("."),type:f.type,label:label,sparkline:false,// Not properly implemented in core yet.
value:statsFunction});cov_1ks4ntaci2().s[1029]++;return this;},/**
         * Returns a JSON ready object representation of this pivot specification.
         *
         * @return {Object} The JSON ready object representation of this pivot specification.
         *
         * @method splunkjs.Service.PivotSpecification
         */toJsonObject:function(){cov_1ks4ntaci2().f[294]++;cov_1ks4ntaci2().s[1030]++;return{dataModel:this.dataModelObject.dataModel.name,baseClass:this.dataModelObject.name,rows:this.rows,columns:this.columns,cells:this.cells,filters:this.filters};},/**
         * Query Splunk for SPL queries corresponding to a pivot report
         * for this data model, defined by this `PivotSpecification`.
         *
         * @example
         *
         *      service.dataModels().fetch(function(err, dataModels) {
         *          var searches = dataModels.item("internal_audit_logs").objectByName("searches");
         *          var pivotSpec = searches.createPivotSpecification();
         *          // Use of the fluent API
         *          pivotSpec.addRowSplit("user", "Executing user")
         *              .addRangeColumnSplit("exec_time", {start: 0, end: 12, step: 5, limit: 4})
         *              .addCellValue("search", "Search Query", "values")
         *              .pivot(function(pivotErr, pivot) {
         *                  console.log("Pivot search is:", pivot.search);
         *              });
         *      });
         *
         * @param {Function} callback A function to call when done getting the pivot: `(err, pivot)`.
         *
         * @method splunkjs.Service.PivotSpecification
         */pivot:function(callback){cov_1ks4ntaci2().f[295]++;var svc=(cov_1ks4ntaci2().s[1031]++,this.dataModelObject.dataModel.service);var args=(cov_1ks4ntaci2().s[1032]++,{pivot_json:JSON.stringify(this.toJsonObject())});cov_1ks4ntaci2().s[1033]++;if(!utils.isUndefined(this.accelerationNamespace)){cov_1ks4ntaci2().b[307][0]++;cov_1ks4ntaci2().s[1034]++;args.namespace=this.accelerationNamespace;}else{cov_1ks4ntaci2().b[307][1]++;}cov_1ks4ntaci2().s[1035]++;return svc.get(Paths.pivot+"/"+encodeURIComponent(this.dataModelObject.dataModel.name),args,function(err,response){cov_1ks4ntaci2().f[296]++;cov_1ks4ntaci2().s[1036]++;if(err){cov_1ks4ntaci2().b[308][0]++;cov_1ks4ntaci2().s[1037]++;callback(new Error(err.data.messages[0].text),response);cov_1ks4ntaci2().s[1038]++;return;}else{cov_1ks4ntaci2().b[308][1]++;}cov_1ks4ntaci2().s[1039]++;if((cov_1ks4ntaci2().b[310][0]++,response.data.entry)&&(cov_1ks4ntaci2().b[310][1]++,response.data.entry[0])){cov_1ks4ntaci2().b[309][0]++;cov_1ks4ntaci2().s[1040]++;callback(null,new root.Pivot(svc,response.data.entry[0].content));}else{cov_1ks4ntaci2().b[309][1]++;cov_1ks4ntaci2().s[1041]++;callback(new Error("Didn't get a Pivot report back from Splunk"),response);}});},/**
         * Convenience method to wrap up the `PivotSpecification.pivot()` and
         * `Pivot.run()` function calls.
         *
         * Query Splunk for SPL queries corresponding to a pivot report
         * for this data model, defined by this `PivotSpecification`; then,
         * starts a search job running this pivot, accelerated if possible.
         *
         *      service.dataModels().fetch(function(fetchErr, dataModels) {
         *          var searches = dataModels.item("internal_audit_logs").objectByName("searches");
         *          var pivotSpec = searches.createPivotSpecification();
         *          // Use of the fluent API
         *          pivotSpec.addRowSplit("user", "Executing user")
         *              .addRangeColumnSplit("exec_time", {start: 0, end: 12, step: 5, limit: 4})
         *              .addCellValue("search", "Search Query", "values")
         *              .run(function(err, job, pivot) {
         *                  console.log("Job SID is:", job.sid);
         *                  console.log("Pivot search is:", pivot.search);
         *              });
         *      });
         * @param {Object} args A dictionary of properties for the search job (optional). For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams" target="_blank">Search job parameters</a> on Splunk Developer Portal.
         *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.
         * @param {Function} callback A function to call when done getting the pivot: `(err, job, pivot)`.
         *
         * @method splunkjs.Service.PivotSpecification
         */run:function(args,callback){cov_1ks4ntaci2().f[297]++;cov_1ks4ntaci2().s[1042]++;if(!callback){cov_1ks4ntaci2().b[311][0]++;cov_1ks4ntaci2().s[1043]++;callback=args;cov_1ks4ntaci2().s[1044]++;args={};}else{cov_1ks4ntaci2().b[311][1]++;}cov_1ks4ntaci2().s[1045]++;args=(cov_1ks4ntaci2().b[312][0]++,args)||(cov_1ks4ntaci2().b[312][1]++,{});cov_1ks4ntaci2().s[1046]++;this.pivot(function(err,pivot){cov_1ks4ntaci2().f[298]++;cov_1ks4ntaci2().s[1047]++;if(err){cov_1ks4ntaci2().b[313][0]++;cov_1ks4ntaci2().s[1048]++;callback(err,null,null);}else{cov_1ks4ntaci2().b[313][1]++;cov_1ks4ntaci2().s[1049]++;pivot.run(args,Async.augment(callback,pivot));}});}});/**
     * Represents one of the structured views in a `DataModel`.
     *
     * Has these properties:
     *    - `dataModel` (_splunkjs.Service.DataModel_): The `DataModel` to which this `DataModelObject` belongs.
     *    - `name` (_string_): The name of this `DataModelObject`.
     *    - `displayName` (_string_): The human readable name of this `DataModelObject`.
     *    - `parentName` (_string_): The name of the parent `DataModelObject` to this one.
     *    - `lineage` (_array_): An array of strings of the lineage of the data model
     *          on which this field is defined.
     *    - `fields` (_object_): A dictionary of `DataModelField` objects, accessible by name.
     *    - `constraints` (_array_): An array of `DataModelConstraint` objects.
     *    - `calculations` (_object_): A dictionary of `DataModelCalculation` objects, accessible by ID.
     *
     * BaseSearch has an additional property:
     *    - `baseSearch` (_string_): The search query wrapped by this data model object.
     *
     * BaseTransaction has additional properties:
     *    - `groupByFields` (_string_): The fields that will be used to group events into transactions.
     *    - `objectsToGroup` (_array_): Names of the data model objects that should be unioned
     *        and split into transactions.
     *    - `maxSpan` (_string_): The maximum time span of a transaction.
     *    - `maxPause` (_string_): The maximum pause time of a transaction.
     *
     * @class splunkjs.Service.DataModelObject
     */cov_1ks4ntaci2().s[1050]++;root.DataModelObject=Class.extend({/**
         * Constructor for a data model object.
         * SDK users are not expected to invoke this constructor directly.
         *
         * @constructor
         * @param {Object} props A dictionary of properties to set:
         *     - `objectName` (_string_): The name for this data model object.
         *     - `displayName` (_string_): A human readable name for this data model object.
         *     - `parentName` (_string_): The name of the data model that owns this data model object.
         *     - `lineage` (_string_): The lineage of the data model that owns this data model object,
         *          items are delimited by a dot. This is converted into an array of
         *          strings upon construction.
         *     - `fields` (_array_): An array of data model fields.
         *     - `constraints` (_array_): An array of data model constraints.
         *     - `calculations` (_array_): An array of data model calculations.
         *     - `baseSearch` (_string_): The search query wrapped by this data model object; exclusive to BaseSearch (optional)
         *     - `groupByFields` (_array_): The fields that will be used to group events into transactions; exclusive to BaseTransaction (optional)
         *     - `objectsToGroup` (_array_): Names of the data model objects that should be unioned
         *         and split into transactions; exclusive to BaseTransaction (optional)
         *     - `maxSpan` (_string_): The maximum time span of a transaction; exclusive to BaseTransaction (optional)
         *     - `maxPause` (_string_): The maximum pause time of a transaction; exclusive to BaseTransaction (optional)
         *
         * @param {splunkjs.Service.DataModel} parentDataModel The `DataModel` that owns this data model object.
         *
         * @method splunkjs.Service.DataModelObject
         */init:function(props,parentDataModel){cov_1ks4ntaci2().f[299]++;cov_1ks4ntaci2().s[1051]++;props=(cov_1ks4ntaci2().b[314][0]++,props)||(cov_1ks4ntaci2().b[314][1]++,{});cov_1ks4ntaci2().s[1052]++;props.owner=(cov_1ks4ntaci2().b[315][0]++,props.owner)||(cov_1ks4ntaci2().b[315][1]++,"");cov_1ks4ntaci2().s[1053]++;this.dataModel=parentDataModel;cov_1ks4ntaci2().s[1054]++;this.name=props.objectName;cov_1ks4ntaci2().s[1055]++;this.displayName=props.displayName;cov_1ks4ntaci2().s[1056]++;this.parentName=props.parentName;cov_1ks4ntaci2().s[1057]++;this.lineage=props.lineage.split(".");// Properties exclusive to BaseTransaction
cov_1ks4ntaci2().s[1058]++;if(props.hasOwnProperty("groupByFields")){cov_1ks4ntaci2().b[316][0]++;cov_1ks4ntaci2().s[1059]++;this.groupByFields=props.groupByFields;}else{cov_1ks4ntaci2().b[316][1]++;}cov_1ks4ntaci2().s[1060]++;if(props.hasOwnProperty("objectsToGroup")){cov_1ks4ntaci2().b[317][0]++;cov_1ks4ntaci2().s[1061]++;this.objectsToGroup=props.objectsToGroup;}else{cov_1ks4ntaci2().b[317][1]++;}cov_1ks4ntaci2().s[1062]++;if(props.hasOwnProperty("transactionMaxTimeSpan")){cov_1ks4ntaci2().b[318][0]++;cov_1ks4ntaci2().s[1063]++;this.maxSpan=props.transactionMaxTimeSpan;}else{cov_1ks4ntaci2().b[318][1]++;}cov_1ks4ntaci2().s[1064]++;if(props.hasOwnProperty("transactionMaxPause")){cov_1ks4ntaci2().b[319][0]++;cov_1ks4ntaci2().s[1065]++;this.maxPause=props.transactionMaxPause;}else{cov_1ks4ntaci2().b[319][1]++;}// Property exclusive to BaseSearch
cov_1ks4ntaci2().s[1066]++;if(props.hasOwnProperty("baseSearch")){cov_1ks4ntaci2().b[320][0]++;cov_1ks4ntaci2().s[1067]++;this.baseSearch=props.baseSearch;}else{cov_1ks4ntaci2().b[320][1]++;}// Parse fields
cov_1ks4ntaci2().s[1068]++;this.fields={};cov_1ks4ntaci2().s[1069]++;for(var i=(cov_1ks4ntaci2().s[1070]++,0);i<props.fields.length;i++){cov_1ks4ntaci2().s[1071]++;this.fields[props.fields[i].fieldName]=new root.DataModelField(props.fields[i]);}// Parse constraints
cov_1ks4ntaci2().s[1072]++;this.constraints=[];cov_1ks4ntaci2().s[1073]++;for(var j=(cov_1ks4ntaci2().s[1074]++,0);j<props.constraints.length;j++){cov_1ks4ntaci2().s[1075]++;this.constraints.push(new root.DataModelConstraint(props.constraints[j]));}// Parse calculations
cov_1ks4ntaci2().s[1076]++;this.calculations=[];cov_1ks4ntaci2().s[1077]++;for(var k=(cov_1ks4ntaci2().s[1078]++,0);k<props.calculations.length;k++){cov_1ks4ntaci2().s[1079]++;this.calculations[props.calculations[k].calculationID]=new root.DataModelCalculation(props.calculations[k]);}},/**
         * Is this data model object a BaseSearch?
         *
         * @return {Boolean} Whether this data model object is the root type, BaseSearch.
         *
         * @method splunkjs.Service.DataModelObject
         */isBaseSearch:function(){cov_1ks4ntaci2().f[300]++;cov_1ks4ntaci2().s[1080]++;return!utils.isUndefined(this.baseSearch);},/**
         * Is this data model object is a BaseTransaction?
         *
         * @return {Boolean} Whether this data model object is the root type, BaseTransaction.
         *
         * @method splunkjs.Service.DataModelObject
         */isBaseTransaction:function(){cov_1ks4ntaci2().f[301]++;cov_1ks4ntaci2().s[1081]++;return!utils.isUndefined(this.maxSpan);},/**
         * Returns a string array of the names of this data model object's fields.
         *
         * @return {Array} An array of strings with the field names of this 
         * data model object.
         *
         * @method splunkjs.Service.DataModelObject
         */fieldNames:function(){cov_1ks4ntaci2().f[302]++;cov_1ks4ntaci2().s[1082]++;return Object.keys(this.fields);},/**
         * Returns a data model field instance, representing a field on this
         * data model object. 
         *
         * @return {splunkjs.Service.DataModelField|null} The data model field
         * from this data model object with the specified name, null if it the 
         * field by that name doesn't exist.
         *
         * @method splunkjs.Service.DataModelObject
         */fieldByName:function(name){cov_1ks4ntaci2().f[303]++;cov_1ks4ntaci2().s[1083]++;return(cov_1ks4ntaci2().b[321][0]++,this.calculatedFields()[name])||(cov_1ks4ntaci2().b[321][1]++,this.fields[name])||(cov_1ks4ntaci2().b[321][2]++,null);},/**
         * Returns an array of data model fields from this data model object's
         * calculations, and this data model object's fields.
         *
         * @return {Array} An array of `splunk.Service.DataModelField` objects
         * which includes this data model object's fields, and the fields from
         * this data model object's calculations.
         *
         * @method splunkjs.Service.DataModelObject
         */allFields:function(){cov_1ks4ntaci2().f[304]++;// merge fields and calculatedFields()
var combinedFields=(cov_1ks4ntaci2().s[1084]++,[]);cov_1ks4ntaci2().s[1085]++;for(var f in this.fields){cov_1ks4ntaci2().s[1086]++;if(this.fields.hasOwnProperty(f)){cov_1ks4ntaci2().b[322][0]++;cov_1ks4ntaci2().s[1087]++;combinedFields[f]=this.fields[f];}else{cov_1ks4ntaci2().b[322][1]++;}}var calculatedFields=(cov_1ks4ntaci2().s[1088]++,this.calculatedFields());cov_1ks4ntaci2().s[1089]++;for(var cf in calculatedFields){cov_1ks4ntaci2().s[1090]++;if(calculatedFields.hasOwnProperty(cf)){cov_1ks4ntaci2().b[323][0]++;cov_1ks4ntaci2().s[1091]++;combinedFields[cf]=calculatedFields[cf];}else{cov_1ks4ntaci2().b[323][1]++;}}cov_1ks4ntaci2().s[1092]++;return combinedFields;},/**
         * Returns a string array of the field names of this data model object's
         * calculations, and the names of this data model object's fields.
         *
         * @return {Array} An array of strings with the field names of this 
         * data model object's calculations, and the names of fields on 
         * this data model object.
         *
         * @method splunkjs.Service.DataModelObject
         */allFieldNames:function(){cov_1ks4ntaci2().f[305]++;cov_1ks4ntaci2().s[1093]++;return Object.keys(this.allFields());},/**
         * Returns an array of data model fields from this data model object's
         * calculations.
         *
         * @return {Array} An array of `splunk.Service.DataModelField` objects
         * of the fields from this data model object's calculations.
         *
         * @method splunkjs.Service.DataModelObject
         */calculatedFields:function(){cov_1ks4ntaci2().f[306]++;var fields=(cov_1ks4ntaci2().s[1094]++,{});// Iterate over the calculations, get their fields
var keys=(cov_1ks4ntaci2().s[1095]++,this.calculationIDs());var calculations=(cov_1ks4ntaci2().s[1096]++,this.calculations);cov_1ks4ntaci2().s[1097]++;for(var i=(cov_1ks4ntaci2().s[1098]++,0);i<keys.length;i++){var calculation=(cov_1ks4ntaci2().s[1099]++,calculations[keys[i]]);cov_1ks4ntaci2().s[1100]++;for(var f=(cov_1ks4ntaci2().s[1101]++,0);f<calculation.outputFieldNames().length;f++){cov_1ks4ntaci2().s[1102]++;fields[calculation.outputFieldNames()[f]]=calculation.outputFields[calculation.outputFieldNames()[f]];}}cov_1ks4ntaci2().s[1103]++;return fields;},/**
         * Returns a string array of the field names of this data model object's
         * calculations.
         *
         * @return {Array} An array of strings with the field names of this 
         * data model object's calculations.
         *
         * @method splunkjs.Service.DataModelObject
         */calculatedFieldNames:function(){cov_1ks4ntaci2().f[307]++;cov_1ks4ntaci2().s[1104]++;return Object.keys(this.calculatedFields());},/**
         * Returns whether this data model object contains the field with the
         * name passed in the `fieldName` parameter.
         *
         * @param {String} fieldName The name of the field to look for.
         * @return {Boolean} True if this data model contains the field by name.
         *
         * @method splunkjs.Service.DataModelObject
         */hasField:function(fieldName){cov_1ks4ntaci2().f[308]++;cov_1ks4ntaci2().s[1105]++;return utils.contains(this.allFieldNames(),fieldName);},/**
         * Returns a string array of the IDs of this data model object's
         * calculations.
         *
         * @return {Array} An array of strings with the IDs of this data model
         * object's calculations.
         *
         * @method splunkjs.Service.DataModelObject
         */calculationIDs:function(){cov_1ks4ntaci2().f[309]++;cov_1ks4ntaci2().s[1106]++;return Object.keys(this.calculations);},/**
         * Local acceleration is tsidx acceleration of a data model object that is handled
         * manually by a user. You create a job which generates an index, and then use that
         * index in your pivots on the data model object.
         *
         * The namespace created by the job is 'sid={sid}' where {sid} is the job's sid. You
         * would use it in another job by starting your search query with `| tstats ... from sid={sid} | ...`
         *
         * The tsidx index created by this job is deleted when the job is garbage collected by Splunk.
         *
         * It is the user's responsibility to manage this job, including cancelling it.
         *
         * @example
         *
         *      service.dataModels().fetch(function(err, dataModels) {
         *          var object = dataModels.item("some_data_model").objectByName("some_object");
         *          object.createLocalAccelerationJob("-1d", function(err, accelerationJob) {
         *              console.log("The job has name:", accelerationJob.name);
         *          });
         *      });
         *
         * @param {String} earliestTime A time modifier (e.g., "-2w") setting the earliest time to index.
         * @param {Function} callback A function to call with the search job: `(err, accelerationJob)`.
         *
         * @method splunkjs.Service.DataModelObject
         */createLocalAccelerationJob:function(earliestTime,callback){cov_1ks4ntaci2().f[310]++;cov_1ks4ntaci2().s[1107]++;// If earliestTime parameter is not specified, then set callback to its value
if((cov_1ks4ntaci2().b[325][0]++,!callback)&&(cov_1ks4ntaci2().b[325][1]++,utils.isFunction(earliestTime))){cov_1ks4ntaci2().b[324][0]++;cov_1ks4ntaci2().s[1108]++;callback=earliestTime;cov_1ks4ntaci2().s[1109]++;earliestTime=undefined;}else{cov_1ks4ntaci2().b[324][1]++;}var query=(cov_1ks4ntaci2().s[1110]++,"| datamodel \""+this.dataModel.name+"\" "+this.name+" search | tscollect");var args=(cov_1ks4ntaci2().s[1111]++,earliestTime?(cov_1ks4ntaci2().b[326][0]++,{earliest_time:earliestTime}):(cov_1ks4ntaci2().b[326][1]++,{}));cov_1ks4ntaci2().s[1112]++;this.dataModel.service.search(query,args,callback);},/**
         * Start a search job that applies querySuffix to all the events in this data model object.
         *
         * @example
         *
         *      service.dataModels().fetch(function(err, dataModels) {
         *          var object = dataModels.item("internal_audit_logs").objectByName("searches");
         *          object.startSearch({}, "| head 5", function(err, job) {
         *              console.log("The job has name:", job.name);
         *          });
         *      });
         *
         * @param {Object} params A dictionary of properties for the search job. For a list of available parameters, see <a href="http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams" target="_blank">Search job parameters</a> on Splunk Developer Portal.
         *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.
         * @param {String} querySuffix A search query, starting with a '|' that will be appended to the command to fetch the contents of this data model object (e.g., "| head 3").
         * @param {Function} callback A function to call with the search job: `(err, job)`.
         *
         * @method splunkjs.Service.DataModelObject
         */startSearch:function(params,querySuffix,callback){cov_1ks4ntaci2().f[311]++;var query=(cov_1ks4ntaci2().s[1113]++,"| datamodel "+this.dataModel.name+" "+this.name+" search");// Prepend a space to the querySuffix, or set it to an empty string if null or undefined
cov_1ks4ntaci2().s[1114]++;querySuffix=querySuffix?(cov_1ks4ntaci2().b[327][0]++," "+querySuffix):(cov_1ks4ntaci2().b[327][1]++,"");cov_1ks4ntaci2().s[1115]++;this.dataModel.service.search(query+querySuffix,params,callback);},/**
         * Returns the data model object this one inherits from if it is a user defined,
         * otherwise return null.
         *
         * @return {splunkjs.Service.DataModelObject|null} This data model object's parent
         *     or null if this is not a user defined data model object.
         *
         * @method splunkjs.Service.DataModelObject
         */parent:function(){cov_1ks4ntaci2().f[312]++;cov_1ks4ntaci2().s[1116]++;return this.dataModel.objectByName(this.parentName);},/**
         * Returns a new Pivot Specification, accepts no parameters.
         *
         * @return {splunkjs.Service.PivotSpecification} A new pivot specification.
         *
         * @method splunkjs.Service.DataModelObject
         */createPivotSpecification:function(){cov_1ks4ntaci2().f[313]++;cov_1ks4ntaci2().s[1117]++;// Pass in this DataModelObject to create a PivotSpecification
return new root.PivotSpecification(this);}});/**
     * Represents a data model on the server. Data models
     * contain `DataModelObject` instances, which specify structured
     * views on Splunk data.
     *
     * @endpoint datamodel/model/{name}
     * @class splunkjs.Service.DataModel
     * @extends splunkjs.Service.Entity
     */cov_1ks4ntaci2().s[1118]++;root.DataModel=Service.Entity.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.DataModel
         */path:function(){cov_1ks4ntaci2().f[314]++;cov_1ks4ntaci2().s[1119]++;return Paths.dataModels+"/"+encodeURIComponent(this.name);},/**
         * Constructor for `splunkjs.Service.DataModel`.
         *
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {String} name The name for the new data model.
         * @param {Object} namespace (Optional) namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * @param {Object} props Properties of this data model:
         *    - `acceleration` (_string_): A JSON object with an `enabled` key, representing if acceleration is enabled or not.
         *    - `concise` (_string_): Indicates whether to list a concise JSON description of the data model, should always be "0".
         *    - `description` (_string_): The JSON describing the data model.
         *    - `displayName` (_string_): The name displayed for the data model in Splunk Web.
         *
         * @method splunkjs.Service.DataModel
         */init:function(service,name,namespace,props){cov_1ks4ntaci2().f[315]++;cov_1ks4ntaci2().s[1120]++;// If not given a 4th arg, assume the namespace was omitted
if(!props){cov_1ks4ntaci2().b[328][0]++;cov_1ks4ntaci2().s[1121]++;props=namespace;cov_1ks4ntaci2().s[1122]++;namespace={};}else{cov_1ks4ntaci2().b[328][1]++;}cov_1ks4ntaci2().s[1123]++;this.name=name;cov_1ks4ntaci2().s[1124]++;this._super(service,this.path(),namespace);cov_1ks4ntaci2().s[1125]++;this.acceleration=(cov_1ks4ntaci2().b[329][0]++,JSON.parse(props.content.acceleration))||(cov_1ks4ntaci2().b[329][1]++,{});cov_1ks4ntaci2().s[1126]++;if(this.acceleration.hasOwnProperty("enabled")){cov_1ks4ntaci2().b[330][0]++;cov_1ks4ntaci2().s[1127]++;// convert the enabled property to a boolean
this.acceleration.enabled=!!this.acceleration.enabled;}else{cov_1ks4ntaci2().b[330][1]++;}// concise=0 (false) forces the server to return all details of the newly created data model.
// we do not want a summary of this data model
cov_1ks4ntaci2().s[1128]++;if((cov_1ks4ntaci2().b[332][0]++,!props.hasOwnProperty("concise"))||(cov_1ks4ntaci2().b[332][1]++,utils.isUndefined(props.concise))){cov_1ks4ntaci2().b[331][0]++;cov_1ks4ntaci2().s[1129]++;this.concise="0";}else{cov_1ks4ntaci2().b[331][1]++;}var dataModelDefinition=(cov_1ks4ntaci2().s[1130]++,JSON.parse(props.content.description));cov_1ks4ntaci2().s[1131]++;this.objectNames=dataModelDefinition.objectNameList;cov_1ks4ntaci2().s[1132]++;this.displayName=dataModelDefinition.displayName;cov_1ks4ntaci2().s[1133]++;this.description=dataModelDefinition.description;// Parse the objects for this data model           
var objs=(cov_1ks4ntaci2().s[1134]++,dataModelDefinition.objects);cov_1ks4ntaci2().s[1135]++;this.objects=[];cov_1ks4ntaci2().s[1136]++;for(var i=(cov_1ks4ntaci2().s[1137]++,0);i<objs.length;i++){cov_1ks4ntaci2().s[1138]++;this.objects.push(new root.DataModelObject(objs[i],this));}cov_1ks4ntaci2().s[1139]++;this.remove=utils.bind(this,this.remove);cov_1ks4ntaci2().s[1140]++;this.update=utils.bind(this,this.update);},/**
         * Returns a boolean indicating whether acceleration is enabled or not.
         *
         * @return {Boolean} true if acceleration is enabled, false otherwise.
         *
         * @method splunkjs.Service.DataModel
         */isAccelerated:function(){cov_1ks4ntaci2().f[316]++;cov_1ks4ntaci2().s[1141]++;return!!this.acceleration.enabled;},/**
         * Returns a data model object from this data model
         * with the specified name if it exists, null otherwise.
         *
         * @return {Object|null} a data model object.
         *
         * @method splunkjs.Service.DataModel
         */objectByName:function(name){cov_1ks4ntaci2().f[317]++;cov_1ks4ntaci2().s[1142]++;for(var i=(cov_1ks4ntaci2().s[1143]++,0);i<this.objects.length;i++){cov_1ks4ntaci2().s[1144]++;if(this.objects[i].name===name){cov_1ks4ntaci2().b[333][0]++;cov_1ks4ntaci2().s[1145]++;return this.objects[i];}else{cov_1ks4ntaci2().b[333][1]++;}}cov_1ks4ntaci2().s[1146]++;return null;},/**
         * Returns a boolean of whether this exists in this data model or not.
         *
         * @return {Boolean} Returns true if this data model has object with specified name, false otherwise.
         *
         * @method splunkjs.Service.DataModel
         */hasObject:function(name){cov_1ks4ntaci2().f[318]++;cov_1ks4ntaci2().s[1147]++;return utils.contains(this.objectNames,name);},/**
         * Updates the data model on the server, used to update acceleration settings.
         *
         * @param {Object} props A dictionary of properties to update the object with:
         *     - `acceleration` (_object_): The acceleration settings for the data model.
         *         Valid keys are: `enabled`, `earliestTime`, `cronSchedule`.
         *         Any keys not set will be pulled from the acceleration settings already
         *         set on this data model.
         * @param {Function} callback A function to call when the data model is updated: `(err, dataModel)`.
         *
         * @method splunkjs.Service.DataModel
         */update:function(props,callback){cov_1ks4ntaci2().f[319]++;cov_1ks4ntaci2().s[1148]++;if(utils.isUndefined(callback)){cov_1ks4ntaci2().b[334][0]++;cov_1ks4ntaci2().s[1149]++;callback=props;cov_1ks4ntaci2().s[1150]++;props={};}else{cov_1ks4ntaci2().b[334][1]++;}cov_1ks4ntaci2().s[1151]++;callback=(cov_1ks4ntaci2().b[335][0]++,callback)||(cov_1ks4ntaci2().b[335][1]++,function(){cov_1ks4ntaci2().f[320]++;});cov_1ks4ntaci2().s[1152]++;if(!props){cov_1ks4ntaci2().b[336][0]++;cov_1ks4ntaci2().s[1153]++;callback(new Error("Must specify a props argument to update a data model."));cov_1ks4ntaci2().s[1154]++;return;// Exit if props isn't set, to avoid calling the callback twice.
}else{cov_1ks4ntaci2().b[336][1]++;}cov_1ks4ntaci2().s[1155]++;if(props.hasOwnProperty("name")){cov_1ks4ntaci2().b[337][0]++;cov_1ks4ntaci2().s[1156]++;callback(new Error("Cannot set 'name' field in 'update'"),this);cov_1ks4ntaci2().s[1157]++;return;// Exit if the name is set, to avoid calling the callback twice.
}else{cov_1ks4ntaci2().b[337][1]++;}var updatedProps=(cov_1ks4ntaci2().s[1158]++,{acceleration:JSON.stringify({enabled:(cov_1ks4ntaci2().b[338][0]++,props.accceleration)&&(cov_1ks4ntaci2().b[338][1]++,props.acceleration.enabled)||(cov_1ks4ntaci2().b[338][2]++,this.acceleration.enabled),earliest_time:(cov_1ks4ntaci2().b[339][0]++,props.accceleration)&&(cov_1ks4ntaci2().b[339][1]++,props.acceleration.earliestTime)||(cov_1ks4ntaci2().b[339][2]++,this.acceleration.earliestTime),cron_schedule:(cov_1ks4ntaci2().b[340][0]++,props.accceleration)&&(cov_1ks4ntaci2().b[340][1]++,props.acceleration.cronSchedule)||(cov_1ks4ntaci2().b[340][2]++,this.acceleration.cronSchedule)})});var that=(cov_1ks4ntaci2().s[1159]++,this);cov_1ks4ntaci2().s[1160]++;return this.post("",updatedProps,function(err,response){cov_1ks4ntaci2().f[321]++;cov_1ks4ntaci2().s[1161]++;if(err){cov_1ks4ntaci2().b[341][0]++;cov_1ks4ntaci2().s[1162]++;callback(err,that);}else{cov_1ks4ntaci2().b[341][1]++;var dataModelNamespace=(cov_1ks4ntaci2().s[1163]++,utils.namespaceFromProperties(response.data.entry[0]));cov_1ks4ntaci2().s[1164]++;callback(null,new root.DataModel(that.service,response.data.entry[0].name,dataModelNamespace,response.data.entry[0]));}});}});/**
     * Represents a collection of data models. You can create and
     * list data models using this collection container, or
     * get a specific data model.
     *
     * @endpoint datamodel/model
     * @class splunkjs.Service.DataModels
     * @extends splunkjs.Service.Collection
     */cov_1ks4ntaci2().s[1165]++;root.DataModels=Service.Collection.extend({/**
         * Retrieves the REST endpoint path for this resource (with no namespace).
         *
         * @method splunkjs.Service.DataModels
         */path:function(){cov_1ks4ntaci2().f[322]++;cov_1ks4ntaci2().s[1166]++;return Paths.dataModels;},/**
         * Constructor for `splunkjs.Service.DataModels`.
         * 
         * @constructor
         * @param {splunkjs.Service} service A `Service` instance.
         * @param {Object} namespace (Optional) namespace information:
         *    - `owner` (_string_): The Splunk username, such as "admin". A value of "nobody" means no specific user. The "-" wildcard means all users.
         *    - `app` (_string_): The app context for this resource (such as "search"). The "-" wildcard means all apps.
         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be "user", "app", "global", or "system".
         * 
         * @method splunkjs.Service.DataModels
         */init:function(service,namespace){cov_1ks4ntaci2().f[323]++;cov_1ks4ntaci2().s[1167]++;namespace=(cov_1ks4ntaci2().b[342][0]++,namespace)||(cov_1ks4ntaci2().b[342][1]++,{});cov_1ks4ntaci2().s[1168]++;this._super(service,this.path(),namespace);cov_1ks4ntaci2().s[1169]++;this.create=utils.bind(this,this.create);},/**
         * Creates a new `DataModel` object with the given name and parameters.
         * It is preferred that you create data models through the Splunk
         * Enterprise with a browser.
         *
         * @param {String} name The name of the data model to create. If it contains spaces they will be replaced
         *     with underscores.
         * @param {Object} params A dictionary of properties.
         * @param {Function} callback A function to call with the new `DataModel` object: `(err, createdDataModel)`.
         *
         * @method splunkjs.Service.DataModels
         */create:function(name,params,callback){cov_1ks4ntaci2().f[324]++;cov_1ks4ntaci2().s[1170]++;// If we get (name, callback) instead of (name, params, callback)
// do the necessary variable swap
if((cov_1ks4ntaci2().b[344][0]++,utils.isFunction(params))&&(cov_1ks4ntaci2().b[344][1]++,!callback)){cov_1ks4ntaci2().b[343][0]++;cov_1ks4ntaci2().s[1171]++;callback=params;cov_1ks4ntaci2().s[1172]++;params={};}else{cov_1ks4ntaci2().b[343][1]++;}cov_1ks4ntaci2().s[1173]++;params=(cov_1ks4ntaci2().b[345][0]++,params)||(cov_1ks4ntaci2().b[345][1]++,{});cov_1ks4ntaci2().s[1174]++;callback=(cov_1ks4ntaci2().b[346][0]++,callback)||(cov_1ks4ntaci2().b[346][1]++,function(){cov_1ks4ntaci2().f[325]++;});cov_1ks4ntaci2().s[1175]++;name=name.replace(/ /g,"_");var that=(cov_1ks4ntaci2().s[1176]++,this);cov_1ks4ntaci2().s[1177]++;return this.post("",{name:name,description:JSON.stringify(params)},function(err,response){cov_1ks4ntaci2().f[326]++;cov_1ks4ntaci2().s[1178]++;if(err){cov_1ks4ntaci2().b[347][0]++;cov_1ks4ntaci2().s[1179]++;callback(err);}else{cov_1ks4ntaci2().b[347][1]++;var dataModel=(cov_1ks4ntaci2().s[1180]++,new root.DataModel(that.service,response.data.entry[0].name,that.namespace,response.data.entry[0]));cov_1ks4ntaci2().s[1181]++;callback(null,dataModel);}});},/**
         * Constructor for `splunkjs.Service.DataModel`.
         *
         * @constructor
         * @param {Object} props A dictionary of properties used to create a 
         * `DataModel` instance.
         * @return {splunkjs.Service.DataModel} A new `DataModel` instance.
         *
         * @method splunkjs.Service.DataModels
         */instantiateEntity:function(props){cov_1ks4ntaci2().f[327]++;var entityNamespace=(cov_1ks4ntaci2().s[1182]++,utils.namespaceFromProperties(props));cov_1ks4ntaci2().s[1183]++;return new root.DataModel(this.service,props.name,entityNamespace,props);}});/*!*/ // Iterates over an endpoint's results.
cov_1ks4ntaci2().s[1184]++;root.PaginatedEndpointIterator=Class.extend({init:function(endpoint,params){cov_1ks4ntaci2().f[328]++;cov_1ks4ntaci2().s[1185]++;params=(cov_1ks4ntaci2().b[348][0]++,params)||(cov_1ks4ntaci2().b[348][1]++,{});cov_1ks4ntaci2().s[1186]++;this._endpoint=endpoint;cov_1ks4ntaci2().s[1187]++;this._pagesize=(cov_1ks4ntaci2().b[349][0]++,params.pagesize)||(cov_1ks4ntaci2().b[349][1]++,0);cov_1ks4ntaci2().s[1188]++;this._offset=0;},// Fetches the next page from the endpoint.
next:function(callback){cov_1ks4ntaci2().f[329]++;cov_1ks4ntaci2().s[1189]++;callback=(cov_1ks4ntaci2().b[350][0]++,callback)||(cov_1ks4ntaci2().b[350][1]++,function(){cov_1ks4ntaci2().f[330]++;});var that=(cov_1ks4ntaci2().s[1190]++,this);var params=(cov_1ks4ntaci2().s[1191]++,{count:this._pagesize,offset:this._offset});cov_1ks4ntaci2().s[1192]++;return this._endpoint(params,function(err,results){cov_1ks4ntaci2().f[331]++;cov_1ks4ntaci2().s[1193]++;if(err){cov_1ks4ntaci2().b[351][0]++;cov_1ks4ntaci2().s[1194]++;callback(err);}else{cov_1ks4ntaci2().b[351][1]++;var numResults=(cov_1ks4ntaci2().s[1195]++,results.rows?(cov_1ks4ntaci2().b[352][0]++,results.rows.length):(cov_1ks4ntaci2().b[352][1]++,0));cov_1ks4ntaci2().s[1196]++;that._offset+=numResults;cov_1ks4ntaci2().s[1197]++;callback(null,results,numResults>0);}});}});})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,