function cov_1y0np82guv(){var path="/Users/abhis/Documents/python/splunk-sdk-javascript/lib/utils.js";var hash="e6c743be76f4527987d739a63a237adfcccd8fd1";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/abhis/Documents/python/splunk-sdk-javascript/lib/utils.js",statementMap:{"0":{start:{line:16,column:0},end:{line:480,column:5}},"1":{start:{line:19,column:15},end:{line:19,column:28}},"2":{start:{line:20,column:15},end:{line:20,column:30}},"3":{start:{line:21,column:15},end:{line:21,column:30}},"4":{start:{line:45,column:4},end:{line:49,column:6}},"5":{start:{line:46,column:8},end:{line:48,column:10}},"6":{start:{line:47,column:12},end:{line:47,column:43}},"7":{start:{line:64,column:4},end:{line:73,column:6}},"8":{start:{line:65,column:8},end:{line:65,column:24}},"9":{start:{line:67,column:8},end:{line:72,column:9}},"10":{start:{line:68,column:12},end:{line:68,column:51}},"11":{start:{line:71,column:12},end:{line:71,column:67}},"12":{start:{line:90,column:4},end:{line:97,column:6}},"13":{start:{line:91,column:8},end:{line:95,column:9}},"14":{start:{line:91,column:18},end:{line:91,column:19}},"15":{start:{line:92,column:12},end:{line:94,column:13}},"16":{start:{line:93,column:16},end:{line:93,column:25}},"17":{start:{line:96,column:8},end:{line:96,column:18}},"18":{start:{line:114,column:4},end:{line:117,column:6}},"19":{start:{line:115,column:8},end:{line:115,column:24}},"20":{start:{line:116,column:8},end:{line:116,column:45}},"21":{start:{line:132,column:4},end:{line:135,column:6}},"22":{start:{line:133,column:22},end:{line:133,column:50}},"23":{start:{line:134,column:8},end:{line:134,column:70}},"24":{start:{line:150,column:4},end:{line:153,column:6}},"25":{start:{line:151,column:22},end:{line:151,column:50}},"26":{start:{line:152,column:8},end:{line:152,column:70}},"27":{start:{line:155,column:19},end:{line:155,column:44}},"28":{start:{line:172,column:4},end:{line:174,column:6}},"29":{start:{line:173,column:8},end:{line:173,column:52}},"30":{start:{line:191,column:4},end:{line:193,column:6}},"31":{start:{line:192,column:8},end:{line:192,column:55}},"32":{start:{line:210,column:4},end:{line:212,column:6}},"33":{start:{line:211,column:8},end:{line:211,column:67}},"34":{start:{line:229,column:4},end:{line:231,column:6}},"35":{start:{line:230,column:8},end:{line:230,column:74}},"36":{start:{line:248,column:4},end:{line:250,column:6}},"37":{start:{line:249,column:8},end:{line:249,column:71}},"38":{start:{line:267,column:4},end:{line:270,column:6}},"39":{start:{line:269,column:8},end:{line:269,column:35}},"40":{start:{line:287,column:4},end:{line:299,column:6}},"41":{start:{line:288,column:8},end:{line:290,column:9}},"42":{start:{line:289,column:12},end:{line:289,column:36}},"43":{start:{line:292,column:8},end:{line:296,column:9}},"44":{start:{line:293,column:12},end:{line:295,column:13}},"45":{start:{line:294,column:16},end:{line:294,column:29}},"46":{start:{line:298,column:8},end:{line:298,column:20}},"47":{start:{line:314,column:4},end:{line:337,column:6}},"48":{start:{line:315,column:8},end:{line:317,column:9}},"49":{start:{line:316,column:12},end:{line:316,column:19}},"50":{start:{line:318,column:8},end:{line:336,column:9}},"51":{start:{line:319,column:12},end:{line:319,column:43}},"52":{start:{line:321,column:13},end:{line:336,column:9}},"53":{start:{line:322,column:12},end:{line:326,column:13}},"54":{start:{line:322,column:25},end:{line:322,column:26}},"55":{start:{line:322,column:32},end:{line:322,column:42}},"56":{start:{line:323,column:16},end:{line:325,column:17}},"57":{start:{line:324,column:20},end:{line:324,column:27}},"58":{start:{line:329,column:12},end:{line:335,column:13}},"59":{start:{line:330,column:16},end:{line:334,column:17}},"60":{start:{line:331,column:20},end:{line:333,column:21}},"61":{start:{line:332,column:24},end:{line:332,column:31}},"62":{start:{line:354,column:4},end:{line:361,column:6}},"63":{start:{line:355,column:8},end:{line:359,column:11}},"64":{start:{line:356,column:12},end:{line:358,column:13}},"65":{start:{line:357,column:16},end:{line:357,column:41}},"66":{start:{line:360,column:8},end:{line:360,column:19}},"67":{start:{line:378,column:4},end:{line:383,column:6}},"68":{start:{line:379,column:8},end:{line:381,column:9}},"69":{start:{line:380,column:12},end:{line:380,column:23}},"70":{start:{line:382,column:8},end:{line:382,column:70}},"71":{start:{line:394,column:4},end:{line:407,column:6}},"72":{start:{line:395,column:8},end:{line:401,column:9}},"73":{start:{line:396,column:12},end:{line:400,column:14}},"74":{start:{line:402,column:8},end:{line:406,column:10}},"75":{start:{line:417,column:4},end:{line:424,column:6}},"76":{start:{line:418,column:8},end:{line:422,column:9}},"77":{start:{line:419,column:12},end:{line:421,column:13}},"78":{start:{line:420,column:16},end:{line:420,column:25}},"79":{start:{line:423,column:8},end:{line:423,column:25}},"80":{start:{line:435,column:4},end:{line:451,column:6}},"81":{start:{line:436,column:8},end:{line:436,column:24}},"82":{start:{line:437,column:29},end:{line:437,column:49}},"83":{start:{line:438,column:8},end:{line:448,column:9}},"84":{start:{line:439,column:12},end:{line:447,column:13}},"85":{start:{line:440,column:16},end:{line:440,column:43}},"86":{start:{line:443,column:16},end:{line:446,column:18}},"87":{start:{line:450,column:8},end:{line:450,column:30}},"88":{start:{line:459,column:4},end:{line:461,column:6}},"89":{start:{line:460,column:8},end:{line:460,column:44}},"90":{start:{line:476,column:4},end:{line:478,column:6}},"91":{start:{line:477,column:8},end:{line:477,column:80}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:12},end:{line:480,column:1}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:45,column:16},end:{line:45,column:17}},loc:{start:{line:45,column:33},end:{line:49,column:5}},line:45},"2":{name:"(anonymous_2)",decl:{start:{line:46,column:15},end:{line:46,column:16}},loc:{start:{line:46,column:26},end:{line:48,column:9}},line:46},"3":{name:"(anonymous_3)",decl:{start:{line:64,column:16},end:{line:64,column:17}},loc:{start:{line:64,column:30},end:{line:73,column:5}},line:64},"4":{name:"(anonymous_4)",decl:{start:{line:90,column:19},end:{line:90,column:20}},loc:{start:{line:90,column:41},end:{line:97,column:5}},line:90},"5":{name:"(anonymous_5)",decl:{start:{line:114,column:20},end:{line:114,column:21}},loc:{start:{line:114,column:39},end:{line:117,column:5}},line:114},"6":{name:"(anonymous_6)",decl:{start:{line:132,column:22},end:{line:132,column:23}},loc:{start:{line:132,column:49},end:{line:135,column:5}},line:132},"7":{name:"(anonymous_7)",decl:{start:{line:150,column:20},end:{line:150,column:21}},loc:{start:{line:150,column:47},end:{line:153,column:5}},line:150},"8":{name:"(anonymous_8)",decl:{start:{line:172,column:19},end:{line:172,column:20}},loc:{start:{line:172,column:38},end:{line:174,column:5}},line:172},"9":{name:"(anonymous_9)",decl:{start:{line:191,column:36},end:{line:191,column:37}},loc:{start:{line:191,column:50},end:{line:193,column:5}},line:191},"10":{name:"(anonymous_10)",decl:{start:{line:210,column:22},end:{line:210,column:23}},loc:{start:{line:210,column:36},end:{line:212,column:5}},line:210},"11":{name:"(anonymous_11)",decl:{start:{line:229,column:20},end:{line:229,column:21}},loc:{start:{line:229,column:34},end:{line:231,column:5}},line:229},"12":{name:"(anonymous_12)",decl:{start:{line:248,column:20},end:{line:248,column:21}},loc:{start:{line:248,column:34},end:{line:250,column:5}},line:248},"13":{name:"(anonymous_13)",decl:{start:{line:267,column:20},end:{line:267,column:21}},loc:{start:{line:267,column:34},end:{line:270,column:5}},line:267},"14":{name:"(anonymous_14)",decl:{start:{line:287,column:19},end:{line:287,column:20}},loc:{start:{line:287,column:33},end:{line:299,column:5}},line:287},"15":{name:"(anonymous_15)",decl:{start:{line:314,column:19},end:{line:314,column:20}},loc:{start:{line:314,column:52},end:{line:337,column:5}},line:314},"16":{name:"(anonymous_16)",decl:{start:{line:354,column:18},end:{line:354,column:19}},loc:{start:{line:354,column:32},end:{line:361,column:5}},line:354},"17":{name:"(anonymous_17)",decl:{start:{line:355,column:63},end:{line:355,column:64}},loc:{start:{line:355,column:80},end:{line:359,column:9}},line:355},"18":{name:"(anonymous_18)",decl:{start:{line:378,column:17},end:{line:378,column:18}},loc:{start:{line:378,column:31},end:{line:383,column:5}},line:378},"19":{name:"(anonymous_19)",decl:{start:{line:394,column:35},end:{line:394,column:36}},loc:{start:{line:394,column:51},end:{line:407,column:5}},line:394},"20":{name:"(anonymous_20)",decl:{start:{line:417,column:17},end:{line:417,column:18}},loc:{start:{line:417,column:36},end:{line:424,column:5}},line:417},"21":{name:"(anonymous_21)",decl:{start:{line:435,column:26},end:{line:435,column:27}},loc:{start:{line:435,column:49},end:{line:451,column:5}},line:435},"22":{name:"(anonymous_22)",decl:{start:{line:459,column:23},end:{line:459,column:24}},loc:{start:{line:459,column:38},end:{line:461,column:5}},line:459},"23":{name:"(anonymous_23)",decl:{start:{line:476,column:20},end:{line:476,column:21}},loc:{start:{line:476,column:53},end:{line:478,column:5}},line:476}},branchMap:{"0":{loc:{start:{line:21,column:15},end:{line:21,column:30}},type:"binary-expr",locations:[{start:{line:21,column:15},end:{line:21,column:22}},{start:{line:21,column:26},end:{line:21,column:30}}],line:21},"1":{loc:{start:{line:65,column:14},end:{line:65,column:23}},type:"binary-expr",locations:[{start:{line:65,column:14},end:{line:65,column:17}},{start:{line:65,column:21},end:{line:65,column:23}}],line:65},"2":{loc:{start:{line:67,column:8},end:{line:72,column:9}},type:"if",locations:[{start:{line:67,column:8},end:{line:72,column:9}},{start:{line:67,column:8},end:{line:72,column:9}}],line:67},"3":{loc:{start:{line:92,column:12},end:{line:94,column:13}},type:"if",locations:[{start:{line:92,column:12},end:{line:94,column:13}},{start:{line:92,column:12},end:{line:94,column:13}}],line:92},"4":{loc:{start:{line:115,column:14},end:{line:115,column:23}},type:"binary-expr",locations:[{start:{line:115,column:14},end:{line:115,column:17}},{start:{line:115,column:21},end:{line:115,column:23}}],line:115},"5":{loc:{start:{line:134,column:15},end:{line:134,column:69}},type:"binary-expr",locations:[{start:{line:134,column:15},end:{line:134,column:22}},{start:{line:134,column:26},end:{line:134,column:44}},{start:{line:134,column:48},end:{line:134,column:69}}],line:134},"6":{loc:{start:{line:152,column:15},end:{line:152,column:69}},type:"binary-expr",locations:[{start:{line:152,column:15},end:{line:152,column:22}},{start:{line:152,column:26},end:{line:152,column:44}},{start:{line:152,column:48},end:{line:152,column:69}}],line:152},"7":{loc:{start:{line:191,column:19},end:{line:193,column:5}},type:"binary-expr",locations:[{start:{line:191,column:19},end:{line:191,column:32}},{start:{line:191,column:36},end:{line:193,column:5}}],line:191},"8":{loc:{start:{line:211,column:18},end:{line:211,column:65}},type:"binary-expr",locations:[{start:{line:211,column:18},end:{line:211,column:21}},{start:{line:211,column:25},end:{line:211,column:40}},{start:{line:211,column:44},end:{line:211,column:52}},{start:{line:211,column:56},end:{line:211,column:65}}],line:211},"9":{loc:{start:{line:230,column:18},end:{line:230,column:72}},type:"binary-expr",locations:[{start:{line:230,column:18},end:{line:230,column:27}},{start:{line:230,column:32},end:{line:230,column:35}},{start:{line:230,column:39},end:{line:230,column:56}},{start:{line:230,column:60},end:{line:230,column:71}}],line:230},"10":{loc:{start:{line:249,column:18},end:{line:249,column:69}},type:"binary-expr",locations:[{start:{line:249,column:18},end:{line:249,column:28}},{start:{line:249,column:33},end:{line:249,column:36}},{start:{line:249,column:40},end:{line:249,column:54}},{start:{line:249,column:58},end:{line:249,column:68}}],line:249},"11":{loc:{start:{line:288,column:8},end:{line:290,column:9}},type:"if",locations:[{start:{line:288,column:8},end:{line:290,column:9}},{start:{line:288,column:8},end:{line:290,column:9}}],line:288},"12":{loc:{start:{line:288,column:12},end:{line:288,column:51}},type:"binary-expr",locations:[{start:{line:288,column:12},end:{line:288,column:29}},{start:{line:288,column:33},end:{line:288,column:51}}],line:288},"13":{loc:{start:{line:293,column:12},end:{line:295,column:13}},type:"if",locations:[{start:{line:293,column:12},end:{line:295,column:13}},{start:{line:293,column:12},end:{line:295,column:13}}],line:293},"14":{loc:{start:{line:315,column:8},end:{line:317,column:9}},type:"if",locations:[{start:{line:315,column:8},end:{line:317,column:9}},{start:{line:315,column:8},end:{line:317,column:9}}],line:315},"15":{loc:{start:{line:318,column:8},end:{line:336,column:9}},type:"if",locations:[{start:{line:318,column:8},end:{line:336,column:9}},{start:{line:318,column:8},end:{line:336,column:9}}],line:318},"16":{loc:{start:{line:318,column:12},end:{line:318,column:78}},type:"binary-expr",locations:[{start:{line:318,column:12},end:{line:318,column:35}},{start:{line:318,column:39},end:{line:318,column:78}}],line:318},"17":{loc:{start:{line:321,column:13},end:{line:336,column:9}},type:"if",locations:[{start:{line:321,column:13},end:{line:336,column:9}},{start:{line:321,column:13},end:{line:336,column:9}}],line:321},"18":{loc:{start:{line:323,column:16},end:{line:325,column:17}},type:"if",locations:[{start:{line:323,column:16},end:{line:325,column:17}},{start:{line:323,column:16},end:{line:325,column:17}}],line:323},"19":{loc:{start:{line:323,column:20},end:{line:323,column:77}},type:"binary-expr",locations:[{start:{line:323,column:20},end:{line:323,column:28}},{start:{line:323,column:32},end:{line:323,column:77}}],line:323},"20":{loc:{start:{line:330,column:16},end:{line:334,column:17}},type:"if",locations:[{start:{line:330,column:16},end:{line:334,column:17}},{start:{line:330,column:16},end:{line:334,column:17}}],line:330},"21":{loc:{start:{line:331,column:20},end:{line:333,column:21}},type:"if",locations:[{start:{line:331,column:20},end:{line:333,column:21}},{start:{line:331,column:20},end:{line:333,column:21}}],line:331},"22":{loc:{start:{line:379,column:8},end:{line:381,column:9}},type:"if",locations:[{start:{line:379,column:8},end:{line:381,column:9}},{start:{line:379,column:8},end:{line:381,column:9}}],line:379},"23":{loc:{start:{line:382,column:15},end:{line:382,column:69}},type:"cond-expr",locations:[{start:{line:382,column:35},end:{line:382,column:46}},{start:{line:382,column:49},end:{line:382,column:69}}],line:382},"24":{loc:{start:{line:395,column:8},end:{line:401,column:9}},type:"if",locations:[{start:{line:395,column:8},end:{line:401,column:9}},{start:{line:395,column:8},end:{line:401,column:9}}],line:395},"25":{loc:{start:{line:395,column:12},end:{line:395,column:66}},type:"binary-expr",locations:[{start:{line:395,column:12},end:{line:395,column:35}},{start:{line:395,column:39},end:{line:395,column:66}}],line:395},"26":{loc:{start:{line:419,column:12},end:{line:421,column:13}},type:"if",locations:[{start:{line:419,column:12},end:{line:421,column:13}},{start:{line:419,column:12},end:{line:421,column:13}}],line:419},"27":{loc:{start:{line:419,column:16},end:{line:419,column:55}},type:"binary-expr",locations:[{start:{line:419,column:16},end:{line:419,column:37}},{start:{line:419,column:41},end:{line:419,column:55}}],line:419},"28":{loc:{start:{line:436,column:14},end:{line:436,column:23}},type:"binary-expr",locations:[{start:{line:436,column:14},end:{line:436,column:17}},{start:{line:436,column:21},end:{line:436,column:23}}],line:436},"29":{loc:{start:{line:437,column:29},end:{line:437,column:49}},type:"binary-expr",locations:[{start:{line:437,column:30},end:{line:437,column:42}},{start:{line:437,column:47},end:{line:437,column:49}}],line:437},"30":{loc:{start:{line:439,column:12},end:{line:447,column:13}},type:"if",locations:[{start:{line:439,column:12},end:{line:447,column:13}},{start:{line:439,column:12},end:{line:447,column:13}}],line:439}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0,0],"7":[0,0],"8":[0,0,0,0],"9":[0,0,0,0],"10":[0,0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"e6c743be76f4527987d739a63a237adfcccd8fd1"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1y0np82guv=function(){return actualCoverage;};}return actualCoverage;}cov_1y0np82guv();cov_1y0np82guv().s[0]++;/*!*/ // Copyright 2012 Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
(function(){"use strict";cov_1y0np82guv().f[0]++;var fs=(cov_1y0np82guv().s[1]++,require("fs"));var path=(cov_1y0np82guv().s[2]++,require("path"));var root=(cov_1y0np82guv().s[3]++,(cov_1y0np82guv().b[0][0]++,exports)||(cov_1y0np82guv().b[0][1]++,this));/**
     * Provides various utility functions, which are mostly modeled after 
     * [Underscore.js](http://documentcloud.github.com/underscore/).
     *
     * @module splunkjs.Utils
     */ /**
     * Binds a function to a specific object.
     *
     * @example
     *      
     *      var obj = {a: 1, b: function() { console.log(a); }};
     *      var bound = splunkjs.Utils.bind(obj, obj.b);
     *      bound(); // prints 1
     *
     * @param {Object} me The object to bind to.
     * @param {Function} fn The function to bind.
     * @return {Function} The bound function.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[4]++;root.bind=function(me,fn){cov_1y0np82guv().f[1]++;cov_1y0np82guv().s[5]++;return function(){cov_1y0np82guv().f[2]++;cov_1y0np82guv().s[6]++;return fn.apply(me,arguments);};};/**
     * Strips a string of all leading and trailing whitespace characters.
     *
     * @example
     *      
     *      var a = " aaa ";
     *      var b = splunkjs.Utils.trim(a); //== "aaa"
     *
     * @param {String} str The string to trim.
     * @return {String} The trimmed string.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[7]++;root.trim=function(str){cov_1y0np82guv().f[3]++;cov_1y0np82guv().s[8]++;str=(cov_1y0np82guv().b[1][0]++,str)||(cov_1y0np82guv().b[1][1]++,"");cov_1y0np82guv().s[9]++;if(String.prototype.trim){cov_1y0np82guv().b[2][0]++;cov_1y0np82guv().s[10]++;return String.prototype.trim.call(str);}else{cov_1y0np82guv().b[2][1]++;cov_1y0np82guv().s[11]++;return str.replace(/^\s\s*/,'').replace(/\s\s*$/,'');}};/**
     * Searches an array for a specific object and returns its location.
     *
     * @example
     *      
     *      var a = ["a", "b', "c"];
     *      console.log(splunkjs.Utils.indexOf(a, "b")) //== 1
     *      console.log(splunkjs.Utils.indexOf(a, "d")) //== -1
     *
     * @param {Array} arr The array to search in.
     * @param {Anything} search The object to search for.
     * @return {Number} The index of the object (`search`), or `-1` if the object wasn't found.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[12]++;root.indexOf=function(arr,search){cov_1y0np82guv().f[4]++;cov_1y0np82guv().s[13]++;for(var i=(cov_1y0np82guv().s[14]++,0);i<arr.length;i++){cov_1y0np82guv().s[15]++;if(arr[i]===search){cov_1y0np82guv().b[3][0]++;cov_1y0np82guv().s[16]++;return i;}else{cov_1y0np82guv().b[3][1]++;}}cov_1y0np82guv().s[17]++;return-1;};/**
     * Indicates whether an array contains a specific object.
     *
     * @example
     *      
     *      var a = {a: 3};
     *      var b = [{}, {c: 1}, {b: 1}, a];
     *      var contained = splunkjs.Utils.contains(b, a); // true
     *
     * @param {Array} arr The array to search in.
     * @param {Anything} obj The object to search for.
     * @return {Boolean} `true` if the array contains the object, `false` if not.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[18]++;root.contains=function(arr,obj){cov_1y0np82guv().f[5]++;cov_1y0np82guv().s[19]++;arr=(cov_1y0np82guv().b[4][0]++,arr)||(cov_1y0np82guv().b[4][1]++,[]);cov_1y0np82guv().s[20]++;return root.indexOf(arr,obj)>=0;};/**
     * Indicates whether a string starts with a specific prefix.
     *
     * @example
     *      
     *      var starts = splunkjs.Utils.startsWith("splunk-foo", "splunk-");
     *
     * @param {String} original The string to search in.
     * @param {String} prefix The prefix to search for.
     * @return {Boolean} `true` if the string starts with the prefix, `false` if not.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[21]++;root.startsWith=function(original,prefix){cov_1y0np82guv().f[6]++;var matches=(cov_1y0np82guv().s[22]++,original.match("^"+prefix));cov_1y0np82guv().s[23]++;return(cov_1y0np82guv().b[5][0]++,matches)&&(cov_1y0np82guv().b[5][1]++,matches.length>0)&&(cov_1y0np82guv().b[5][2]++,matches[0]===prefix);};/**
     * Indicates whether a string ends with a specific suffix.
     *
     * @example
     *      
     *      var ends = splunkjs.Utils.endsWith("foo-splunk", "-splunk");
     *
     * @param {String} original The string to search in.
     * @param {String} suffix The suffix to search for.
     * @return {Boolean} `true` if the string ends with the suffix, `false` if not.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[24]++;root.endsWith=function(original,suffix){cov_1y0np82guv().f[7]++;var matches=(cov_1y0np82guv().s[25]++,original.match(suffix+"$"));cov_1y0np82guv().s[26]++;return(cov_1y0np82guv().b[6][0]++,matches)&&(cov_1y0np82guv().b[6][1]++,matches.length>0)&&(cov_1y0np82guv().b[6][2]++,matches[0]===suffix);};var toString=(cov_1y0np82guv().s[27]++,Object.prototype.toString);/**
     * Converts an iterable to an array.
     *
     * @example
     *      
     *      function() { 
     *          console.log(arguments instanceof Array); // false
     *          var arr = console.log(splunkjs.Utils.toArray(arguments) instanceof Array); // true
     *      }
     *
     * @param {Arguments} iterable The iterable to convert.
     * @return {Array} The converted array.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[28]++;root.toArray=function(iterable){cov_1y0np82guv().f[8]++;cov_1y0np82guv().s[29]++;return Array.prototype.slice.call(iterable);};/**
     * Indicates whether an argument is an array.
     *
     * @example
     *      
     *      function() { 
     *          console.log(splunkjs.Utils.isArray(arguments)); // false
     *          console.log(splunkjs.Utils.isArray([1,2,3])); // true
     *      }
     *
     * @param {Anything} obj The argument to evaluate.
     * @return {Boolean} `true` if the argument is an array, `false` if not.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[30]++;root.isArray=(cov_1y0np82guv().b[7][0]++,Array.isArray)||(cov_1y0np82guv().b[7][1]++,function(obj){cov_1y0np82guv().f[9]++;cov_1y0np82guv().s[31]++;return toString.call(obj)==='[object Array]';});/**
     * Indicates whether an argument is a function.
     *
     * @example
     *      
     *      function() { 
     *          console.log(splunkjs.Utils.isFunction([1,2,3]); // false
     *          console.log(splunkjs.Utils.isFunction(function() {})); // true
     *      }
     *
     * @param {Anything} obj The argument to evaluate.
     * @return {Boolean} `true` if the argument is a function, `false` if not.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[32]++;root.isFunction=function(obj){cov_1y0np82guv().f[10]++;cov_1y0np82guv().s[33]++;return!!((cov_1y0np82guv().b[8][0]++,obj)&&(cov_1y0np82guv().b[8][1]++,obj.constructor)&&(cov_1y0np82guv().b[8][2]++,obj.call)&&(cov_1y0np82guv().b[8][3]++,obj.apply));};/**
     * Indicates whether an argument is a number.
     *
     * @example
     *      
     *      function() { 
     *          console.log(splunkjs.Utils.isNumber(1); // true
     *          console.log(splunkjs.Utils.isNumber(function() {})); // false
     *      }
     *
     * @param {Anything} obj The argument to evaluate.
     * @return {Boolean} `true` if the argument is a number, `false` if not.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[34]++;root.isNumber=function(obj){cov_1y0np82guv().f[11]++;cov_1y0np82guv().s[35]++;return!!((cov_1y0np82guv().b[9][0]++,obj===0)||(cov_1y0np82guv().b[9][1]++,obj)&&(cov_1y0np82guv().b[9][2]++,obj.toExponential)&&(cov_1y0np82guv().b[9][3]++,obj.toFixed));};/**
     * Indicates whether an argument is a string.
     *
     * @example
     *      
     *      function() { 
     *          console.log(splunkjs.Utils.isString("abc"); // true
     *          console.log(splunkjs.Utils.isString(function() {})); // false
     *      }
     *
     * @param {Anything} obj The argument to evaluate.
     * @return {Boolean} `true` if the argument is a string, `false` if not.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[36]++;root.isString=function(obj){cov_1y0np82guv().f[12]++;cov_1y0np82guv().s[37]++;return!!((cov_1y0np82guv().b[10][0]++,obj==='')||(cov_1y0np82guv().b[10][1]++,obj)&&(cov_1y0np82guv().b[10][2]++,obj.charCodeAt)&&(cov_1y0np82guv().b[10][3]++,obj.substr));};/**
     * Indicates whether an argument is an object.
     *
     * @example
     *      
     *      function() { 
     *          console.log(splunkjs.Utils.isObject({abc: "abc"}); // true
     *          console.log(splunkjs.Utils.isObject("abc"); // false
     *      }
     *
     * @param {Anything} obj The argument to evaluate.
     * @return {Boolean} `true` if the argument is an object, `false` if not.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[38]++;root.isObject=function(obj){cov_1y0np82guv().f[13]++;cov_1y0np82guv().s[39]++;/*jslint newcap:false */return obj===Object(obj);};/**
     * Indicates whether an argument is empty.
     *
     * @example
     *      
     *      function() { 
     *          console.log(splunkjs.Utils.isEmpty({})); // true
     *          console.log(splunkjs.Utils.isEmpty({a: 1})); // false
     *      }
     *
     * @param {Anything} obj The argument to evaluate.
     * @return {Boolean} `true` if the argument is empty, `false` if not.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[40]++;root.isEmpty=function(obj){cov_1y0np82guv().f[14]++;cov_1y0np82guv().s[41]++;if((cov_1y0np82guv().b[12][0]++,root.isArray(obj))||(cov_1y0np82guv().b[12][1]++,root.isString(obj))){cov_1y0np82guv().b[11][0]++;cov_1y0np82guv().s[42]++;return obj.length===0;}else{cov_1y0np82guv().b[11][1]++;}cov_1y0np82guv().s[43]++;for(var key in obj){cov_1y0np82guv().s[44]++;if(this.hasOwnProperty.call(obj,key)){cov_1y0np82guv().b[13][0]++;cov_1y0np82guv().s[45]++;return false;}else{cov_1y0np82guv().b[13][1]++;}}cov_1y0np82guv().s[46]++;return true;};/**
     * Applies an iterator function to each element in an object.
     *
     * @example
     *      
     *      splunkjs.Utils.forEach([1,2,3], function(el) { console.log(el); }); // 1,2,3
     *
     * @param {Object|Array} obj An object or array.
     * @param {Function} iterator The function to apply to each element: `(element, list, index)`.
     * @param {Object} context A context to apply to the function (optional).
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[47]++;root.forEach=function(obj,iterator,context){cov_1y0np82guv().f[15]++;cov_1y0np82guv().s[48]++;if(obj===null){cov_1y0np82guv().b[14][0]++;cov_1y0np82guv().s[49]++;return;}else{cov_1y0np82guv().b[14][1]++;}cov_1y0np82guv().s[50]++;if((cov_1y0np82guv().b[16][0]++,Array.prototype.forEach)&&(cov_1y0np82guv().b[16][1]++,obj.forEach===Array.prototype.forEach)){cov_1y0np82guv().b[15][0]++;cov_1y0np82guv().s[51]++;obj.forEach(iterator,context);}else{cov_1y0np82guv().b[15][1]++;cov_1y0np82guv().s[52]++;if(obj.length===+obj.length){cov_1y0np82guv().b[17][0]++;cov_1y0np82guv().s[53]++;for(var i=(cov_1y0np82guv().s[54]++,0),l=(cov_1y0np82guv().s[55]++,obj.length);i<l;i++){cov_1y0np82guv().s[56]++;if((cov_1y0np82guv().b[19][0]++,i in obj)&&(cov_1y0np82guv().b[19][1]++,iterator.call(context,obj[i],i,obj)==={})){cov_1y0np82guv().b[18][0]++;cov_1y0np82guv().s[57]++;return;}else{cov_1y0np82guv().b[18][1]++;}}}else{cov_1y0np82guv().b[17][1]++;cov_1y0np82guv().s[58]++;for(var key in obj){cov_1y0np82guv().s[59]++;if(obj.hasOwnProperty(key)){cov_1y0np82guv().b[20][0]++;cov_1y0np82guv().s[60]++;if(iterator.call(context,obj[key],key,obj)==={}){cov_1y0np82guv().b[21][0]++;cov_1y0np82guv().s[61]++;return;}else{cov_1y0np82guv().b[21][1]++;}}else{cov_1y0np82guv().b[20][1]++;}}}}};/**
     * Extends a given object with all the properties from other source objects.
     *
     * @example
     *      
     *      function() { 
     *          console.log(splunkjs.Utils.extend({foo: "bar"}, {a: 2})); // {foo: "bar", a: 2}
     *      }
     *
     * @param {Object} obj The object to extend.
     * @param {Object...} sources The source objects from which to take properties.
     * @return {Object} The extended object.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[62]++;root.extend=function(obj){cov_1y0np82guv().f[16]++;cov_1y0np82guv().s[63]++;root.forEach(Array.prototype.slice.call(arguments,1),function(source){cov_1y0np82guv().f[17]++;cov_1y0np82guv().s[64]++;for(var prop in source){cov_1y0np82guv().s[65]++;obj[prop]=source[prop];}});cov_1y0np82guv().s[66]++;return obj;};/**
     * Creates a shallow-cloned copy of an object or array.
     *
     * @example
     *      
     *      function() { 
     *          console.log(splunkjs.Utils.clone({foo: "bar"})); // {foo: "bar"}
     *          console.log(splunkjs.Utils.clone([1,2,3])); // [1,2,3]
     *      }
     *
     * @param {Object|Array} obj The object or array to clone.
     * @return {Object|Array} The cloned object or array.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[67]++;root.clone=function(obj){cov_1y0np82guv().f[18]++;cov_1y0np82guv().s[68]++;if(!root.isObject(obj)){cov_1y0np82guv().b[22][0]++;cov_1y0np82guv().s[69]++;return obj;}else{cov_1y0np82guv().b[22][1]++;}cov_1y0np82guv().s[70]++;return root.isArray(obj)?(cov_1y0np82guv().b[23][0]++,obj.slice()):(cov_1y0np82guv().b[23][1]++,root.extend({},obj));};/**
     * Extracts namespace information from a dictionary of properties. Namespace
     * information includes values for _owner_, _app_, and _sharing_.
     *
     * @param {Object} props The dictionary of properties.
     * @return {Object} Namespace information from the properties dictionary.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[71]++;root.namespaceFromProperties=function(props){cov_1y0np82guv().f[19]++;cov_1y0np82guv().s[72]++;if((cov_1y0np82guv().b[25][0]++,root.isUndefined(props))||(cov_1y0np82guv().b[25][1]++,root.isUndefined(props.acl))){cov_1y0np82guv().b[24][0]++;cov_1y0np82guv().s[73]++;return{owner:'',app:'',sharing:''};}else{cov_1y0np82guv().b[24][1]++;}cov_1y0np82guv().s[74]++;return{owner:props.acl.owner,app:props.acl.app,sharing:props.acl.sharing};};/**
      * Tests whether a value appears in a given object.
      *
      * @param {Anything} val The value to search for.
      * @param {Object} obj The object to search in.
      *
      * @function splunkjs.Utils
      */cov_1y0np82guv().s[75]++;root.keyOf=function(val,obj){cov_1y0np82guv().f[20]++;cov_1y0np82guv().s[76]++;for(var k in obj){cov_1y0np82guv().s[77]++;if((cov_1y0np82guv().b[27][0]++,obj.hasOwnProperty(k))&&(cov_1y0np82guv().b[27][1]++,obj[k]===val)){cov_1y0np82guv().b[26][0]++;cov_1y0np82guv().s[78]++;return k;}else{cov_1y0np82guv().b[26][1]++;}}cov_1y0np82guv().s[79]++;return undefined;};/**
     * Finds a version in a dictionary.
     *
     * @param {String} version The version to search for.
     * @param {Object} map The dictionary to search.
     * @return {Anything} The value of the dictionary at the closest version match.
     *
     * @function splunkjs.Utils
     */cov_1y0np82guv().s[80]++;root.getWithVersion=function(version,map){cov_1y0np82guv().f[21]++;cov_1y0np82guv().s[81]++;map=(cov_1y0np82guv().b[28][0]++,map)||(cov_1y0np82guv().b[28][1]++,{});var currentVersion=(cov_1y0np82guv().s[82]++,(cov_1y0np82guv().b[29][0]++,version+"")||(cov_1y0np82guv().b[29][1]++,""));cov_1y0np82guv().s[83]++;while(currentVersion!==""){cov_1y0np82guv().s[84]++;if(map.hasOwnProperty(currentVersion)){cov_1y0np82guv().b[30][0]++;cov_1y0np82guv().s[85]++;return map[currentVersion];}else{cov_1y0np82guv().b[30][1]++;cov_1y0np82guv().s[86]++;currentVersion=currentVersion.slice(0,currentVersion.lastIndexOf("."));}}cov_1y0np82guv().s[87]++;return map["default"];};/**
     * Checks if an object is undefined.
     *
     * @param {Object} obj An object.
     * @return {Boolean} `true` if the object is undefined, `false` if not.
     */cov_1y0np82guv().s[88]++;root.isUndefined=function(obj){cov_1y0np82guv().f[22]++;cov_1y0np82guv().s[89]++;return typeof obj==="undefined";};/**
     * Read files in a way that makes unit tests work as well.
     *
     * @example
     *
     *      // To read `splunk-sdk-javascript/tests/data/empty_data_model.json`  
     *      // from    `splunk-sdk-javascript/tests/test_service.js`
     *      var fileContents = utils.readFile(__filename, "../data/empty_data_model.json");
     *      
     * @param {String} __filename of the script calling this function.
     * @param {String} a path relative to the script calling this function.
     * @return {String} The contents of the file.
     */cov_1y0np82guv().s[90]++;root.readFile=function(filename,relativePath){cov_1y0np82guv().f[23]++;cov_1y0np82guv().s[91]++;return fs.readFileSync(path.resolve(filename,relativePath)).toString();};})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,