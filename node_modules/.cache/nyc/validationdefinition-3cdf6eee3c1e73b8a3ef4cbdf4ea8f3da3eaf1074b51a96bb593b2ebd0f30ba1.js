function cov_4vdhtkbhm(){var path="/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/validationdefinition.js";var hash="e7c8c647c556fe2ecceac179f03834d97c4e5ba2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/abhis/Documents/python/splunk-sdk-javascript/lib/modularinputs/validationdefinition.js",statementMap:{"0":{start:{line:16,column:0},end:{line:80,column:5}},"1":{start:{line:17,column:18},end:{line:17,column:40}},"2":{start:{line:18,column:18},end:{line:18,column:36}},"3":{start:{line:31,column:8},end:{line:31,column:27}},"4":{start:{line:32,column:8},end:{line:32,column:29}},"5":{start:{line:62,column:4},end:{line:77,column:6}},"6":{start:{line:63,column:25},end:{line:63,column:51}},"7":{start:{line:64,column:27},end:{line:64,column:64}},"8":{start:{line:66,column:8},end:{line:75,column:9}},"9":{start:{line:66,column:21},end:{line:66,column:22}},"10":{start:{line:67,column:23},end:{line:67,column:38}},"11":{start:{line:68,column:12},end:{line:74,column:13}},"12":{start:{line:69,column:16},end:{line:69,column:63}},"13":{start:{line:70,column:16},end:{line:70,column:69}},"14":{start:{line:73,column:16},end:{line:73,column:58}},"15":{start:{line:76,column:8},end:{line:76,column:26}},"16":{start:{line:79,column:4},end:{line:79,column:42}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:12},end:{line:80,column:1}},line:16},"1":{name:"ValidationDefinition",decl:{start:{line:30,column:13},end:{line:30,column:33}},loc:{start:{line:30,column:36},end:{line:33,column:5}},line:30},"2":{name:"(anonymous_2)",decl:{start:{line:62,column:33},end:{line:62,column:34}},loc:{start:{line:62,column:47},end:{line:77,column:5}},line:62}},branchMap:{"0":{loc:{start:{line:68,column:12},end:{line:74,column:13}},type:"if",locations:[{start:{line:68,column:12},end:{line:74,column:13}},{start:{line:68,column:12},end:{line:74,column:13}}],line:68}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"e7c8c647c556fe2ecceac179f03834d97c4e5ba2"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_4vdhtkbhm=function(){return actualCoverage;};}return actualCoverage;}cov_4vdhtkbhm();cov_4vdhtkbhm().s[0]++;/*!*/ // Copyright 2014 Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
(function(){cov_4vdhtkbhm().f[0]++;var ET=(cov_4vdhtkbhm().s[1]++,require("elementtree"));var utils=(cov_4vdhtkbhm().s[2]++,require("./utils"));/**
     * This class represents the XML sent by Splunk for external validation of a
     * new modular input.
     *
     * @example
     *
     *      var v =  new ValidationDefinition();
     *
     * @class splunkjs.ModularInputs.ValidationDefinition
     */function ValidationDefinition(){cov_4vdhtkbhm().f[1]++;cov_4vdhtkbhm().s[3]++;this.metadata={};cov_4vdhtkbhm().s[4]++;this.parameters={};}/**
     * Creates a `ValidationDefinition` from a provided string containing XML.
     *
     * This function will throw an exception if `str`
     * contains unexpected XML.
     *
     * The XML typically will look like this:
     * 
     * `<items>`
     * `   <server_host>myHost</server_host>`
     * `     <server_uri>https://127.0.0.1:8089</server_uri>`
     * `     <session_key>123102983109283019283</session_key>`
     * `     <checkpoint_dir>/opt/splunk/var/lib/splunk/modinputs</checkpoint_dir>`
     * `     <item name="myScheme">`
     * `       <param name="param1">value1</param>`
     * `       <param_list name="param2">`
     * `         <value>value2</value>`
     * `         <value>value3</value>`
     * `         <value>value4</value>`
     * `       </param_list>`
     * `     </item>`
     * `</items>`
     *
     * @param {String} str A string containing XML to parse.
     *
     * @function splunkjs.ModularInputs.ValidationDefinition
     */cov_4vdhtkbhm().s[5]++;ValidationDefinition.parse=function(str){cov_4vdhtkbhm().f[2]++;var definition=(cov_4vdhtkbhm().s[6]++,new ValidationDefinition());var rootChildren=(cov_4vdhtkbhm().s[7]++,ET.parse(str).getroot().getchildren());cov_4vdhtkbhm().s[8]++;for(var i=(cov_4vdhtkbhm().s[9]++,0);i<rootChildren.length;i++){var node=(cov_4vdhtkbhm().s[10]++,rootChildren[i]);cov_4vdhtkbhm().s[11]++;if(node.tag==="item"){cov_4vdhtkbhm().b[0][0]++;cov_4vdhtkbhm().s[12]++;definition.metadata["name"]=node.get("name");cov_4vdhtkbhm().s[13]++;definition.parameters=utils.parseXMLData(node,"");}else{cov_4vdhtkbhm().b[0][1]++;cov_4vdhtkbhm().s[14]++;definition.metadata[node.tag]=node.text;}}cov_4vdhtkbhm().s[15]++;return definition;};cov_4vdhtkbhm().s[16]++;module.exports=ValidationDefinition;})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRpb25kZWZpbml0aW9uLmpzIl0sIm5hbWVzIjpbIkVUIiwicmVxdWlyZSIsInV0aWxzIiwiVmFsaWRhdGlvbkRlZmluaXRpb24iLCJtZXRhZGF0YSIsInBhcmFtZXRlcnMiLCJwYXJzZSIsInN0ciIsImRlZmluaXRpb24iLCJyb290Q2hpbGRyZW4iLCJnZXRyb290IiwiZ2V0Y2hpbGRyZW4iLCJpIiwibGVuZ3RoIiwibm9kZSIsInRhZyIsImdldCIsInBhcnNlWE1MRGF0YSIsInRleHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoibTJFQWVZO2dIQWZaLEssQ0FDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLENBQUMsVUFBVyx3QkFDUixHQUFJQSxDQUFBQSxFQUFFLHlCQUFRQyxPQUFPLENBQUMsYUFBRCxDQUFmLENBQU4sQ0FDQSxHQUFJQyxDQUFBQSxLQUFLLHlCQUFLRCxPQUFPLENBQUMsU0FBRCxDQUFaLENBQVQsQ0FFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUNJLFFBQVNFLENBQUFBLG9CQUFULEVBQWdDLCtDQUM1QixLQUFLQyxRQUFMLENBQWdCLEVBQWhCLENBRDRCLHVCQUU1QixLQUFLQyxVQUFMLENBQWtCLEVBQWxCLENBQ0gsQ0FFRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0E3Q1ksdUJBOENSRixvQkFBb0IsQ0FBQ0csS0FBckIsQ0FBNkIsU0FBU0MsR0FBVCxDQUFjLHdCQUN2QyxHQUFJQyxDQUFBQSxVQUFVLHlCQUFHLEdBQUlMLENBQUFBLG9CQUFKLEVBQUgsQ0FBZCxDQUNBLEdBQUlNLENBQUFBLFlBQVkseUJBQUdULEVBQUUsQ0FBQ00sS0FBSCxDQUFTQyxHQUFULEVBQWNHLE9BQWQsR0FBd0JDLFdBQXhCLEVBQUgsQ0FBaEIsQ0FGdUMsdUJBSXZDLElBQUssR0FBSUMsQ0FBQUEsQ0FBQyx5QkFBRyxDQUFILENBQVYsQ0FBZ0JBLENBQUMsQ0FBR0gsWUFBWSxDQUFDSSxNQUFqQyxDQUF5Q0QsQ0FBQyxFQUExQyxDQUE4QyxDQUMxQyxHQUFJRSxDQUFBQSxJQUFJLDBCQUFHTCxZQUFZLENBQUNHLENBQUQsQ0FBZixDQUFSLENBRDBDLHdCQUUxQyxHQUFJRSxJQUFJLENBQUNDLEdBQUwsR0FBYSxNQUFqQixDQUF5QixtREFDckJQLFVBQVUsQ0FBQ0osUUFBWCxDQUFvQixNQUFwQixFQUE4QlUsSUFBSSxDQUFDRSxHQUFMLENBQVMsTUFBVCxDQUE5QixDQURxQix3QkFFckJSLFVBQVUsQ0FBQ0gsVUFBWCxDQUF3QkgsS0FBSyxDQUFDZSxZQUFOLENBQW1CSCxJQUFuQixDQUF5QixFQUF6QixDQUF4QixDQUNILENBSEQsSUFJSyxtREFDRE4sVUFBVSxDQUFDSixRQUFYLENBQW9CVSxJQUFJLENBQUNDLEdBQXpCLEVBQWdDRCxJQUFJLENBQUNJLElBQXJDLENBQ0gsQ0FDSixDQWJzQyx3QkFjdkMsTUFBT1YsQ0FBQUEsVUFBUCxDQUNILENBZkQsQ0E5Q1Esd0JBK0RSVyxNQUFNLENBQUNDLE9BQVAsQ0FBaUJqQixvQkFBakIsQ0FDSCxDQWhFRCIsInNvdXJjZXNDb250ZW50IjpbIi8qISovXG4vLyBDb3B5cmlnaHQgMjAxNCBTcGx1bmssIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOiB5b3UgbWF5XG4vLyBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpblxuLy8gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVFxuLy8gV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlXG4vLyBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbihmdW5jdGlvbigpIHtcbiAgICB2YXIgRVQgICAgICA9IHJlcXVpcmUoXCJlbGVtZW50dHJlZVwiKTtcbiAgICB2YXIgdXRpbHMgICA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBjbGFzcyByZXByZXNlbnRzIHRoZSBYTUwgc2VudCBieSBTcGx1bmsgZm9yIGV4dGVybmFsIHZhbGlkYXRpb24gb2YgYVxuICAgICAqIG5ldyBtb2R1bGFyIGlucHV0LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqICAgICAgdmFyIHYgPSAgbmV3IFZhbGlkYXRpb25EZWZpbml0aW9uKCk7XG4gICAgICpcbiAgICAgKiBAY2xhc3Mgc3BsdW5ranMuTW9kdWxhcklucHV0cy5WYWxpZGF0aW9uRGVmaW5pdGlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFZhbGlkYXRpb25EZWZpbml0aW9uKCkge1xuICAgICAgICB0aGlzLm1ldGFkYXRhID0ge307XG4gICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgVmFsaWRhdGlvbkRlZmluaXRpb25gIGZyb20gYSBwcm92aWRlZCBzdHJpbmcgY29udGFpbmluZyBYTUwuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGBzdHJgXG4gICAgICogY29udGFpbnMgdW5leHBlY3RlZCBYTUwuXG4gICAgICpcbiAgICAgKiBUaGUgWE1MIHR5cGljYWxseSB3aWxsIGxvb2sgbGlrZSB0aGlzOlxuICAgICAqIFxuICAgICAqIGA8aXRlbXM+YFxuICAgICAqIGAgICA8c2VydmVyX2hvc3Q+bXlIb3N0PC9zZXJ2ZXJfaG9zdD5gXG4gICAgICogYCAgICAgPHNlcnZlcl91cmk+aHR0cHM6Ly8xMjcuMC4wLjE6ODA4OTwvc2VydmVyX3VyaT5gXG4gICAgICogYCAgICAgPHNlc3Npb25fa2V5PjEyMzEwMjk4MzEwOTI4MzAxOTI4Mzwvc2Vzc2lvbl9rZXk+YFxuICAgICAqIGAgICAgIDxjaGVja3BvaW50X2Rpcj4vb3B0L3NwbHVuay92YXIvbGliL3NwbHVuay9tb2RpbnB1dHM8L2NoZWNrcG9pbnRfZGlyPmBcbiAgICAgKiBgICAgICA8aXRlbSBuYW1lPVwibXlTY2hlbWVcIj5gXG4gICAgICogYCAgICAgICA8cGFyYW0gbmFtZT1cInBhcmFtMVwiPnZhbHVlMTwvcGFyYW0+YFxuICAgICAqIGAgICAgICAgPHBhcmFtX2xpc3QgbmFtZT1cInBhcmFtMlwiPmBcbiAgICAgKiBgICAgICAgICAgPHZhbHVlPnZhbHVlMjwvdmFsdWU+YFxuICAgICAqIGAgICAgICAgICA8dmFsdWU+dmFsdWUzPC92YWx1ZT5gXG4gICAgICogYCAgICAgICAgIDx2YWx1ZT52YWx1ZTQ8L3ZhbHVlPmBcbiAgICAgKiBgICAgICAgIDwvcGFyYW1fbGlzdD5gXG4gICAgICogYCAgICAgPC9pdGVtPmBcbiAgICAgKiBgPC9pdGVtcz5gXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIEEgc3RyaW5nIGNvbnRhaW5pbmcgWE1MIHRvIHBhcnNlLlxuICAgICAqXG4gICAgICogQGZ1bmN0aW9uIHNwbHVua2pzLk1vZHVsYXJJbnB1dHMuVmFsaWRhdGlvbkRlZmluaXRpb25cbiAgICAgKi9cbiAgICBWYWxpZGF0aW9uRGVmaW5pdGlvbi5wYXJzZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICB2YXIgZGVmaW5pdGlvbiA9IG5ldyBWYWxpZGF0aW9uRGVmaW5pdGlvbigpO1xuICAgICAgICB2YXIgcm9vdENoaWxkcmVuID0gRVQucGFyc2Uoc3RyKS5nZXRyb290KCkuZ2V0Y2hpbGRyZW4oKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvb3RDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSByb290Q2hpbGRyZW5baV07ICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobm9kZS50YWcgPT09IFwiaXRlbVwiKSB7XG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbi5tZXRhZGF0YVtcIm5hbWVcIl0gPSBub2RlLmdldChcIm5hbWVcIik7XG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbi5wYXJhbWV0ZXJzID0gdXRpbHMucGFyc2VYTUxEYXRhKG5vZGUsIFwiXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbi5tZXRhZGF0YVtub2RlLnRhZ10gPSBub2RlLnRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb247XG4gICAgfTtcbiAgICBcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFZhbGlkYXRpb25EZWZpbml0aW9uO1xufSkoKTsiXX0=